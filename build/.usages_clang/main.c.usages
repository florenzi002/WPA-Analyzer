22 serialization::archive 15 0 0 0 0 43 /home/florenzi/Documenti/juci_ws/wpa_decode 49 /home/florenzi/Documenti/juci_ws/wpa_decode/build 0 0 2400 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 14 "fastpbkdf2.h" 1 10 1 24 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 11 "hashmap.h" 2 10 2 21 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 7 openssl 3 11 3 18 18446744073709551615 1 / 3 18 3 19 18446744073709551615 4 hmac 3 19 3 23 18446744073709551615 1 . 3 23 3 24 18446744073709551615 1 h 3 24 3 25 18446744073709551615 1 > 3 25 3 26 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 7 openssl 4 11 4 18 18446744073709551615 1 / 4 18 4 19 18446744073709551615 3 sha 4 19 4 22 18446744073709551615 1 . 4 22 4 23 18446744073709551615 1 h 4 23 4 24 18446744073709551615 1 > 4 24 4 25 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 4 pcap 5 11 5 15 18446744073709551615 1 . 5 15 5 16 18446744073709551615 1 h 5 16 5 17 18446744073709551615 1 > 5 17 5 18 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 1 < 6 10 6 11 18446744073709551615 5 stdio 6 11 6 16 18446744073709551615 1 . 6 16 6 17 18446744073709551615 1 h 6 17 6 18 18446744073709551615 1 > 6 18 6 19 18446744073709551615 1 # 7 1 7 2 18446744073709551615 7 include 7 2 7 9 18446744073709551615 1 < 7 10 7 11 18446744073709551615 6 stdlib 7 11 7 17 18446744073709551615 1 . 7 17 7 18 18446744073709551615 1 h 7 18 7 19 18446744073709551615 1 > 7 19 7 20 18446744073709551615 1 # 9 1 9 2 18446744073709551615 6 define 9 2 9 8 18446744073709551615 16 PRISM_HEADER_LEN 9 9 9 25 18446744073709551615 3 144 9 26 9 29 18446744073709551615 1 # 10 1 10 2 18446744073709551615 6 define 10 2 10 8 18446744073709551615 11 SSID_OFFSET 10 9 10 20 18446744073709551615 2 12 10 21 10 23 18446744073709551615 1 # 11 1 11 2 18446744073709551615 6 define 11 2 11 8 18446744073709551615 13 SIZE_ETHERNET 11 9 11 22 18446744073709551615 2 14 11 23 11 25 18446744073709551615 1 # 12 1 12 2 18446744073709551615 6 define 12 2 12 8 18446744073709551615 12 MAC_ADDR_LEN 12 9 12 21 18446744073709551615 1 6 12 22 12 23 18446744073709551615 1 # 13 1 13 2 18446744073709551615 6 define 13 2 13 8 18446744073709551615 7 LLC_LEN 13 9 13 16 18446744073709551615 1 8 13 17 13 18 18446744073709551615 1 # 14 1 14 2 18446744073709551615 6 define 14 2 14 8 18446744073709551615 16 TAKE_N_BITS_FROM 14 9 14 25 18446744073709551615 1 ( 14 25 14 26 18446744073709551615 1 b 14 26 14 27 18446744073709551615 1 , 14 27 14 28 18446744073709551615 1 p 14 29 14 30 18446744073709551615 1 , 14 30 14 31 18446744073709551615 1 n 14 32 14 33 18446744073709551615 1 ) 14 33 14 34 18446744073709551615 1 ( 14 35 14 36 18446744073709551615 1 ( 14 36 14 37 18446744073709551615 1 b 14 37 14 38 18446744073709551615 1 ) 14 38 14 39 18446744073709551615 2 >> 14 40 14 42 18446744073709551615 1 ( 14 43 14 44 18446744073709551615 1 p 14 44 14 45 18446744073709551615 1 ) 14 45 14 46 18446744073709551615 1 ) 14 46 14 47 18446744073709551615 1 & 14 48 14 49 18446744073709551615 1 ( 14 50 14 51 18446744073709551615 1 ( 14 51 14 52 18446744073709551615 1 1 14 52 14 53 18446744073709551615 2 << 14 54 14 56 18446744073709551615 1 ( 14 57 14 58 18446744073709551615 1 n 14 58 14 59 18446744073709551615 1 ) 14 59 14 60 18446744073709551615 1 ) 14 60 14 61 18446744073709551615 1 - 14 62 14 63 18446744073709551615 1 1 14 64 14 65 18446744073709551615 1 ) 14 65 14 66 18446744073709551615 1 # 15 1 15 2 18446744073709551615 6 define 15 2 15 8 18446744073709551615 1 A 15 9 15 10 18446744073709551615 24 "Pairwise key expansion" 15 11 15 35 18446744073709551615 7 typedef 17 1 17 8 18446744073709551615 4 enum 17 9 17 13 18446744073709551615 1 { 17 14 17 15 18446744073709551615 19 WAITING_EAPOL_KEY_2 17 16 17 35 0 1 , 17 35 17 36 18446744073709551615 19 WAITING_EAPOL_KEY_3 18 16 18 35 1 1 , 18 35 18 36 18446744073709551615 19 WAITING_EAPOL_KEY_4 19 16 19 35 2 1 , 19 35 19 36 18446744073709551615 7 SUCCESS 20 16 20 23 3 1 } 20 24 20 25 18446744073709551615 12 eapol_status 20 26 20 38 4 1 ; 20 38 20 39 18446744073709551615 23 /* 802.11 MAC header */ 22 1 22 24 18446744073709551615 6 struct 23 1 23 7 18446744073709551615 12 sniff_802_11 23 8 23 20 5 1 { 23 21 23 22 18446744073709551615 6 u_char 24 3 24 9 6 13 frame_control 24 10 24 23 7 1 [ 24 23 24 24 18446744073709551615 1 2 24 24 24 25 18446744073709551615 1 ] 24 25 24 26 18446744073709551615 1 ; 24 26 24 27 18446744073709551615 6 u_char 25 3 25 9 6 11 duration_id 25 10 25 21 8 1 [ 25 21 25 22 18446744073709551615 1 2 25 22 25 23 18446744073709551615 1 ] 25 23 25 24 18446744073709551615 1 ; 25 24 25 25 18446744073709551615 6 u_char 26 3 26 9 6 5 addr1 26 10 26 15 9 1 [ 26 15 26 16 18446744073709551615 12 MAC_ADDR_LEN 26 16 26 28 9 1 ] 26 28 26 29 18446744073709551615 1 ; 26 29 26 30 18446744073709551615 6 u_char 27 3 27 9 6 5 addr2 27 10 27 15 10 1 [ 27 15 27 16 18446744073709551615 12 MAC_ADDR_LEN 27 16 27 28 10 1 ] 27 28 27 29 18446744073709551615 1 ; 27 29 27 30 18446744073709551615 6 u_char 28 3 28 9 6 5 addr3 28 10 28 15 11 1 [ 28 15 28 16 18446744073709551615 12 MAC_ADDR_LEN 28 16 28 28 11 1 ] 28 28 28 29 18446744073709551615 1 ; 28 29 28 30 18446744073709551615 6 u_char 29 3 29 9 6 16 sequence_control 29 10 29 26 12 1 [ 29 26 29 27 18446744073709551615 1 2 29 27 29 28 18446744073709551615 1 ] 29 28 29 29 18446744073709551615 1 ; 29 29 29 30 18446744073709551615 6 u_char 30 3 30 9 6 11 qos_control 30 10 30 21 13 1 [ 30 21 30 22 18446744073709551615 1 2 30 22 30 23 18446744073709551615 1 ] 30 23 30 24 18446744073709551615 1 ; 30 24 30 25 18446744073709551615 1 } 31 1 31 2 18446744073709551615 1 ; 31 2 31 3 18446744073709551615 6 struct 33 1 33 7 18446744073709551615 19 sniff_802_11_beacon 33 8 33 27 14 1 { 33 28 33 29 18446744073709551615 6 u_char 34 3 34 9 6 13 frame_control 34 10 34 23 15 1 [ 34 23 34 24 18446744073709551615 1 2 34 24 34 25 18446744073709551615 1 ] 34 25 34 26 18446744073709551615 1 ; 34 26 34 27 18446744073709551615 6 u_char 35 3 35 9 6 11 duration_id 35 10 35 21 16 1 [ 35 21 35 22 18446744073709551615 1 2 35 22 35 23 18446744073709551615 1 ] 35 23 35 24 18446744073709551615 1 ; 35 24 35 25 18446744073709551615 6 u_char 36 3 36 9 6 5 addr1 36 10 36 15 17 1 [ 36 15 36 16 18446744073709551615 12 MAC_ADDR_LEN 36 16 36 28 17 1 ] 36 28 36 29 18446744073709551615 1 ; 36 29 36 30 18446744073709551615 6 u_char 37 3 37 9 6 5 addr2 37 10 37 15 18 1 [ 37 15 37 16 18446744073709551615 12 MAC_ADDR_LEN 37 16 37 28 18 1 ] 37 28 37 29 18446744073709551615 1 ; 37 29 37 30 18446744073709551615 6 u_char 38 3 38 9 6 5 addr3 38 10 38 15 19 1 [ 38 15 38 16 18446744073709551615 12 MAC_ADDR_LEN 38 16 38 28 19 1 ] 38 28 38 29 18446744073709551615 1 ; 38 29 38 30 18446744073709551615 6 u_char 39 3 39 9 6 16 sequence_control 39 10 39 26 20 1 [ 39 26 39 27 18446744073709551615 1 2 39 27 39 28 18446744073709551615 1 ] 39 28 39 29 18446744073709551615 1 ; 39 29 39 30 18446744073709551615 1 } 40 1 40 2 18446744073709551615 1 ; 40 2 40 3 18446744073709551615 6 struct 42 1 42 7 18446744073709551615 9 sniff_LLC 42 8 42 17 21 1 { 42 18 42 19 18446744073709551615 6 u_char 43 3 43 9 6 4 dsap 43 10 43 14 22 1 ; 43 14 43 15 18446744073709551615 6 u_char 44 3 44 9 6 4 ssap 44 10 44 14 23 1 ; 44 14 44 15 18446744073709551615 6 u_char 45 3 45 9 6 13 control_field 45 10 45 23 24 1 ; 45 23 45 24 18446744073709551615 1 } 46 1 46 2 18446744073709551615 1 ; 46 2 46 3 18446744073709551615 6 struct 48 1 48 7 18446744073709551615 10 sniff_SNAP 48 8 48 18 25 1 { 48 19 48 20 18446744073709551615 6 u_char 49 3 49 9 6 8 org_code 49 10 49 18 26 1 [ 49 18 49 19 18446744073709551615 1 3 49 19 49 20 18446744073709551615 1 ] 49 20 49 21 18446744073709551615 1 ; 49 21 49 22 18446744073709551615 6 u_char 50 3 50 9 6 4 type 50 10 50 14 27 1 [ 50 14 50 15 18446744073709551615 1 2 50 15 50 16 18446744073709551615 1 ] 50 16 50 17 18446744073709551615 1 ; 50 17 50 18 18446744073709551615 1 } 51 1 51 2 18446744073709551615 1 ; 51 2 51 3 18446744073709551615 6 struct 53 1 53 7 18446744073709551615 17 sniff_802_1x_auth 53 8 53 25 28 1 { 53 26 53 27 18446744073709551615 6 u_char 54 3 54 9 6 7 version 54 10 54 17 29 1 ; 54 17 54 18 18446744073709551615 6 u_char 55 3 55 9 6 4 type 55 10 55 14 30 1 ; 55 14 55 15 18446744073709551615 6 u_char 56 3 56 9 6 6 length 56 10 56 16 31 1 [ 56 16 56 17 18446744073709551615 1 2 56 17 56 18 18446744073709551615 1 ] 56 18 56 19 18446744073709551615 1 ; 56 19 56 20 18446744073709551615 6 u_char 57 3 57 9 6 19 key_descriptor_type 57 10 57 29 32 1 ; 57 29 57 30 18446744073709551615 6 u_char 58 3 58 9 6 15 key_information 58 10 58 25 33 1 [ 58 25 58 26 18446744073709551615 1 2 58 26 58 27 18446744073709551615 1 ] 58 27 58 28 18446744073709551615 1 ; 58 28 58 29 18446744073709551615 6 u_char 59 3 59 9 6 10 key_length 59 10 59 20 34 1 [ 59 20 59 21 18446744073709551615 1 2 59 21 59 22 18446744073709551615 1 ] 59 22 59 23 18446744073709551615 1 ; 59 23 59 24 18446744073709551615 6 u_char 60 3 60 9 6 14 replay_counter 60 10 60 24 35 1 [ 60 24 60 25 18446744073709551615 1 8 60 25 60 26 18446744073709551615 1 ] 60 26 60 27 18446744073709551615 1 ; 60 27 60 28 18446744073709551615 6 u_char 61 3 61 9 6 13 wpa_key_nonce 61 10 61 23 36 1 [ 61 23 61 24 18446744073709551615 2 32 61 24 61 26 18446744073709551615 1 ] 61 26 61 27 18446744073709551615 1 ; 61 27 61 28 18446744073709551615 6 u_char 62 3 62 9 6 10 wpa_key_IV 62 10 62 20 37 1 [ 62 20 62 21 18446744073709551615 2 16 62 21 62 23 18446744073709551615 1 ] 62 23 62 24 18446744073709551615 1 ; 62 24 62 25 18446744073709551615 6 u_char 63 3 63 9 6 11 wpa_key_RSC 63 10 63 21 38 1 [ 63 21 63 22 18446744073709551615 1 8 63 22 63 23 18446744073709551615 1 ] 63 23 63 24 18446744073709551615 1 ; 63 24 63 25 18446744073709551615 6 u_char 64 3 64 9 6 10 wpa_key_ID 64 10 64 20 39 1 [ 64 20 64 21 18446744073709551615 1 8 64 21 64 22 18446744073709551615 1 ] 64 22 64 23 18446744073709551615 1 ; 64 23 64 24 18446744073709551615 6 u_char 65 3 65 9 6 11 wpa_key_MIC 65 10 65 21 40 1 [ 65 21 65 22 18446744073709551615 2 16 65 22 65 24 18446744073709551615 1 ] 65 24 65 25 18446744073709551615 1 ; 65 25 65 26 18446744073709551615 6 u_char 66 3 66 9 6 19 wpa_key_data_length 66 10 66 29 41 1 [ 66 29 66 30 18446744073709551615 1 2 66 30 66 31 18446744073709551615 1 ] 66 31 66 32 18446744073709551615 1 ; 66 32 66 33 18446744073709551615 1 } 67 1 67 2 18446744073709551615 1 ; 67 2 67 3 18446744073709551615 6 struct 69 1 69 7 18446744073709551615 3 ptk 69 8 69 11 42 1 { 69 12 69 13 18446744073709551615 6 u_char 70 3 70 9 6 3 kck 70 10 70 13 43 1 [ 70 13 70 14 18446744073709551615 2 16 70 14 70 16 18446744073709551615 1 ] 70 16 70 17 18446744073709551615 1 ; 70 17 70 18 18446744073709551615 6 u_char 71 3 71 9 6 3 kek 71 10 71 13 44 1 [ 71 13 71 14 18446744073709551615 2 16 71 14 71 16 18446744073709551615 1 ] 71 16 71 17 18446744073709551615 1 ; 71 17 71 18 18446744073709551615 6 u_char 72 3 72 9 6 2 tk 72 10 72 12 45 1 [ 72 12 72 13 18446744073709551615 2 16 72 13 72 15 18446744073709551615 1 ] 72 15 72 16 18446744073709551615 1 ; 72 16 72 17 18446744073709551615 6 u_char 73 3 73 9 6 3 txk 73 10 73 13 46 1 [ 73 13 73 14 18446744073709551615 1 8 73 14 73 15 18446744073709551615 1 ] 73 15 73 16 18446744073709551615 1 ; 73 16 73 17 18446744073709551615 6 u_char 74 3 74 9 6 3 trk 74 10 74 13 47 1 [ 74 13 74 14 18446744073709551615 1 8 74 14 74 15 18446744073709551615 1 ] 74 15 74 16 18446744073709551615 1 ; 74 16 74 17 18446744073709551615 1 } 75 1 75 2 18446744073709551615 1 ; 75 2 75 3 18446744073709551615 6 struct 77 1 77 7 18446744073709551615 10 eapol_info 77 8 77 18 48 1 { 77 19 77 20 18446744073709551615 6 u_char 78 3 78 9 6 15 sta_mac_address 78 10 78 25 49 1 [ 78 25 78 26 18446744073709551615 12 MAC_ADDR_LEN 78 26 78 38 49 1 ] 78 38 78 39 18446744073709551615 1 ; 78 39 78 40 18446744073709551615 6 u_char 79 3 79 9 6 6 ANonce 79 10 79 16 50 1 [ 79 16 79 17 18446744073709551615 2 32 79 17 79 19 18446744073709551615 1 ] 79 19 79 20 18446744073709551615 1 ; 79 20 79 21 18446744073709551615 6 u_char 80 3 80 9 6 6 SNonce 80 10 80 16 51 1 [ 80 16 80 17 18446744073709551615 2 32 80 17 80 19 18446744073709551615 1 ] 80 19 80 20 18446744073709551615 1 ; 80 20 80 21 18446744073709551615 6 struct 81 3 81 9 18446744073709551615 3 ptk 81 10 81 13 42 3 PTK 81 14 81 17 52 1 ; 81 17 81 18 18446744073709551615 12 eapol_status 82 3 82 15 4 6 status 82 16 82 22 53 1 ; 82 22 82 23 18446744073709551615 1 } 83 1 83 2 18446744073709551615 1 ; 83 2 83 3 18446744073709551615 6 u_char 85 1 85 7 6 14 ap_mac_address 85 8 85 22 54 1 [ 85 22 85 23 18446744073709551615 1 6 85 23 85 24 18446744073709551615 1 ] 85 24 85 25 18446744073709551615 1 ; 85 25 85 26 18446744073709551615 6 u_char 86 1 86 7 6 3 psk 86 8 86 11 55 1 [ 86 11 86 12 18446744073709551615 2 32 86 12 86 14 18446744073709551615 1 ] 86 14 86 15 18446744073709551615 1 ; 86 15 86 16 18446744073709551615 6 u_char 87 1 87 7 6 1 * 87 8 87 9 18446744073709551615 4 ssid 87 9 87 13 56 1 ; 87 13 87 14 18446744073709551615 5 map_t 88 1 88 6 57 1 * 88 7 88 8 18446744073709551615 3 map 88 8 88 11 58 1 ; 88 11 88 12 18446744073709551615 6 u_char 91 1 91 7 6 14 process_beacon 91 8 91 22 59 1 ( 91 22 91 23 59 5 const 91 23 91 28 18446744073709551615 6 struct 91 29 91 35 18446744073709551615 11 pcap_pkthdr 91 36 91 47 60 1 * 91 48 91 49 18446744073709551615 1 , 91 49 91 50 59 5 const 91 51 91 56 18446744073709551615 6 u_char 91 57 91 63 6 1 * 91 64 91 65 18446744073709551615 1 ) 91 65 91 66 59 1 ; 91 66 91 67 18446744073709551615 6 u_char 92 1 92 7 6 13 process_eapol 92 8 92 21 61 1 ( 92 21 92 22 61 5 const 92 22 92 27 18446744073709551615 6 struct 92 28 92 34 18446744073709551615 11 pcap_pkthdr 92 35 92 46 60 1 * 92 47 92 48 18446744073709551615 1 , 92 48 92 49 61 5 const 92 50 92 55 18446744073709551615 6 u_char 92 56 92 62 6 1 * 92 63 92 64 18446744073709551615 1 ) 92 64 92 65 61 1 ; 92 65 92 66 18446744073709551615 6 u_char 93 1 93 7 6 14 process_packet 93 8 93 22 62 1 ( 93 22 93 23 62 5 const 93 23 93 28 18446744073709551615 6 struct 93 29 93 35 18446744073709551615 11 pcap_pkthdr 93 36 93 47 60 1 * 93 48 93 49 18446744073709551615 1 , 93 49 93 50 62 5 const 93 51 93 56 18446744073709551615 6 u_char 93 57 93 63 6 1 * 93 64 93 65 18446744073709551615 1 ) 93 65 93 66 62 1 ; 93 66 93 67 18446744073709551615 4 char 94 1 94 5 18446744073709551615 1 * 94 6 94 7 63 12 mac_toString 94 7 94 19 63 1 ( 94 19 94 20 63 6 u_char 94 20 94 26 6 1 * 94 27 94 28 18446744073709551615 1 ) 94 28 94 29 63 1 ; 94 29 94 30 18446744073709551615 6 u_char 95 1 95 7 6 1 * 95 8 95 9 64 6 PRF512 95 9 95 15 64 1 ( 95 15 95 16 64 6 u_char 95 16 95 22 6 1 * 95 23 95 24 18446744073709551615 1 , 95 24 95 25 64 6 u_char 95 26 95 32 6 1 * 95 33 95 34 18446744073709551615 1 , 95 34 95 35 64 6 size_t 95 36 95 42 65 1 , 95 42 95 43 64 6 u_char 95 44 95 50 6 1 * 95 51 95 52 18446744073709551615 1 , 95 52 95 53 64 6 u_char 95 54 95 60 6 1 * 95 61 95 62 18446744073709551615 1 , 95 62 95 63 64 6 u_char 95 64 95 70 6 1 * 95 71 95 72 18446744073709551615 1 , 95 72 95 73 64 6 u_char 95 74 95 80 6 1 * 95 81 95 82 18446744073709551615 1 ) 95 82 95 83 64 1 ; 95 83 95 84 18446744073709551615 6 u_char 96 1 96 7 6 1 * 96 8 96 9 66 15 hexstr_to_bytes 96 9 96 24 66 1 ( 96 24 96 25 66 6 u_char 96 25 96 31 6 1 * 96 32 96 33 18446744073709551615 1 ) 96 33 96 34 66 1 ; 96 34 96 35 18446744073709551615 3 int 98 1 98 4 18446744073709551615 4 main 98 5 98 9 67 1 ( 98 9 98 10 67 3 int 98 10 98 13 18446744073709551615 4 argc 98 14 98 18 68 1 , 98 18 98 19 67 4 char 98 20 98 24 18446744073709551615 1 * 98 25 98 26 18446744073709551615 4 argv 98 26 98 30 69 1 [ 98 30 98 31 18446744073709551615 1 ] 98 31 98 32 18446744073709551615 1 ) 98 32 98 33 67 1 { 98 34 98 35 18446744073709551615 3 map 100 3 100 6 58 1 = 100 7 100 8 18446744073709551615 11 hashmap_new 100 9 100 20 70 1 ( 100 20 100 21 70 1 ) 100 21 100 22 70 1 ; 100 22 100 23 18446744073709551615 4 char 101 3 101 7 18446744073709551615 1 * 101 8 101 9 18446744073709551615 3 dev 101 9 101 12 71 1 = 101 13 101 14 18446744073709551615 4 argv 101 15 101 19 69 1 [ 101 19 101 20 18446744073709551615 1 1 101 20 101 21 18446744073709551615 1 ] 101 21 101 22 18446744073709551615 1 ; 101 22 101 23 18446744073709551615 4 ssid 102 3 102 7 56 1 = 102 8 102 9 18446744073709551615 4 argv 102 10 102 14 69 1 [ 102 14 102 15 18446744073709551615 1 2 102 15 102 16 18446744073709551615 1 ] 102 16 102 17 18446744073709551615 1 ; 102 17 102 18 18446744073709551615 6 u_char 103 3 103 9 6 1 * 103 10 103 11 18446744073709551615 3 pwd 103 11 103 14 72 1 = 103 15 103 16 18446744073709551615 4 argv 103 17 103 21 69 1 [ 103 21 103 22 18446744073709551615 1 3 103 22 103 23 18446744073709551615 1 ] 103 23 103 24 18446744073709551615 1 ; 103 24 103 25 18446744073709551615 4 char 104 3 104 7 18446744073709551615 6 errbuf 104 8 104 14 73 1 [ 104 14 104 15 18446744073709551615 16 PCAP_ERRBUF_SIZE 104 15 104 31 73 1 ] 104 31 104 32 18446744073709551615 1 ; 104 32 104 33 18446744073709551615 4 char 105 3 105 7 18446744073709551615 13 filter_beacon 105 8 105 21 74 1 [ 105 21 105 22 18446744073709551615 1 ] 105 22 105 23 18446744073709551615 1 = 105 24 105 25 18446744073709551615 30 "wlan type mgt subtype beacon" 105 26 105 56 18446744073709551615 1 ; 105 56 105 57 18446744073709551615 4 char 106 3 106 7 18446744073709551615 25 filter_eapol_on_ssid_mask 106 8 106 33 75 1 [ 106 33 106 34 18446744073709551615 1 ] 106 34 106 35 18446744073709551615 1 = 106 36 106 37 18446744073709551615 32 "wlan addr1 %s or wlan addr2 %s" 106 38 106 70 18446744073709551615 1 ; 106 70 106 71 18446744073709551615 4 char 107 3 107 7 18446744073709551615 1 * 107 8 107 9 18446744073709551615 20 filter_eapol_on_ssid 107 9 107 29 76 1 ; 107 29 107 30 18446744073709551615 6 struct 108 3 108 9 18446744073709551615 11 bpf_program 108 10 108 21 77 2 fp 108 22 108 24 78 1 ; 108 24 108 25 18446744073709551615 6 pcap_t 109 3 109 9 79 1 * 109 10 109 11 18446744073709551615 6 handle 109 11 109 17 80 1 ; 109 17 109 18 18446744073709551615 6 struct 110 3 110 9 18446744073709551615 11 pcap_pkthdr 110 10 110 21 60 1 * 110 22 110 23 18446744073709551615 6 header 110 23 110 29 81 1 ; 110 29 110 30 18446744073709551615 5 const 111 3 111 8 18446744073709551615 6 u_char 111 9 111 15 6 1 * 111 16 111 17 18446744073709551615 6 packet 111 17 111 23 82 1 ; 111 23 111 24 18446744073709551615 4 char 112 3 112 7 18446744073709551615 18 ap_mac_address_str 112 8 112 26 83 1 [ 112 26 112 27 18446744073709551615 1 2 112 27 112 28 18446744073709551615 1 * 112 29 112 30 18446744073709551615 12 MAC_ADDR_LEN 112 31 112 43 18446744073709551615 1 ] 112 43 112 44 18446744073709551615 1 ; 112 44 112 45 18446744073709551615 18 ap_mac_address_str 113 3 113 21 83 1 [ 113 21 113 22 18446744073709551615 1 2 113 22 113 23 18446744073709551615 1 * 113 24 113 25 18446744073709551615 12 MAC_ADDR_LEN 113 26 113 38 18446744073709551615 1 - 113 39 113 40 18446744073709551615 1 1 113 41 113 42 18446744073709551615 1 ] 113 42 113 43 18446744073709551615 1 = 113 44 113 45 18446744073709551615 4 '\0' 113 46 113 50 18446744073709551615 1 ; 113 50 113 51 18446744073709551615 20 fastpbkdf2_hmac_sha1 115 3 115 23 84 1 ( 115 23 115 24 84 3 pwd 115 24 115 27 72 1 , 115 27 115 28 84 6 strlen 115 29 115 35 85 1 ( 115 35 115 36 85 3 pwd 115 36 115 39 72 1 ) 115 39 115 40 85 1 , 115 40 115 41 84 4 ssid 115 42 115 46 56 1 , 115 46 115 47 84 6 strlen 115 48 115 54 85 1 ( 115 54 115 55 85 4 ssid 115 55 115 59 56 1 ) 115 59 115 60 85 1 , 115 60 115 61 84 4 4096 115 62 115 66 18446744073709551615 1 , 115 66 115 67 84 3 psk 115 68 115 71 55 1 , 115 71 115 72 84 2 32 115 73 115 75 18446744073709551615 1 ) 115 75 115 76 84 1 ; 115 76 115 77 18446744073709551615 6 u_char 117 3 117 9 6 3 PMK 117 10 117 13 86 1 [ 117 13 117 14 18446744073709551615 1 ] 117 14 117 15 18446744073709551615 1 = 117 16 117 17 18446744073709551615 66 "01b809f9ab2fb5dc47984f52fb2d112e13d84ccb6b86d4a7193ec5299f851c48" 117 18 117 84 18446744073709551615 1 ; 117 84 117 85 18446744073709551615 38 //u_char passPhrase[] = "10zZz10ZZzZ"; 118 3 118 41 18446744073709551615 34 //u_char ssid[] = "Netgear 2/158"; 119 3 119 37 18446744073709551615 6 u_char 120 3 120 9 6 5 APmac 120 10 120 15 87 1 [ 120 15 120 16 18446744073709551615 1 ] 120 16 120 17 18446744073709551615 1 = 120 18 120 19 18446744073709551615 14 "001e2ae0bdd0" 120 20 120 34 18446744073709551615 1 ; 120 34 120 35 18446744073709551615 6 u_char 121 3 121 9 6 9 Clientmac 121 10 121 19 88 1 [ 121 19 121 20 18446744073709551615 1 ] 121 20 121 21 18446744073709551615 1 = 121 22 121 23 18446744073709551615 14 "cc08e0620bc8" 121 24 121 38 18446744073709551615 1 ; 121 38 121 39 18446744073709551615 6 u_char 122 3 122 9 6 6 ANonce 122 10 122 16 89 1 [ 122 16 122 17 18446744073709551615 1 ] 122 17 122 18 18446744073709551615 1 = 122 19 122 20 18446744073709551615 66 "61c9a3f5cdcdf5fae5fd760836b8008c863aa2317022c7a202434554fb38452b" 122 21 122 87 18446744073709551615 1 ; 122 87 122 88 18446744073709551615 6 u_char 123 3 123 9 6 6 SNonce 123 10 123 16 90 1 [ 123 16 123 17 18446744073709551615 1 ] 123 17 123 18 18446744073709551615 1 = 123 19 123 20 18446744073709551615 66 "60eff10088077f8b03a0e2fc2fc37e1fe1f30f9f7cfbcfb2826f26f3379c4318" 123 21 123 87 18446744073709551615 1 ; 123 87 123 88 18446744073709551615 6 u_char 124 3 124 9 6 4 data 124 10 124 14 91 1 [ 124 14 124 15 18446744073709551615 1 ] 124 15 124 16 18446744073709551615 1 = 124 17 124 18 18446744073709551615 198 "0103005ffe010900200000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" 124 19 124 217 18446744073709551615 1 ; 124 217 124 218 18446744073709551615 6 struct 126 3 126 9 18446744073709551615 3 ptk 126 10 126 13 42 1 * 126 14 126 15 18446744073709551615 3 PTK 126 15 126 18 92 1 = 126 19 126 20 18446744073709551615 1 ( 126 21 126 22 18446744073709551615 6 struct 126 22 126 28 18446744073709551615 3 ptk 126 29 126 32 42 1 * 126 33 126 34 18446744073709551615 1 ) 126 34 126 35 18446744073709551615 6 PRF512 126 35 126 41 64 1 ( 126 41 126 42 64 15 hexstr_to_bytes 126 42 126 57 66 1 ( 126 57 126 58 66 3 PMK 126 58 126 61 86 1 ) 126 61 126 62 66 1 , 126 62 126 63 64 1 A 126 64 126 65 64 1 , 126 65 126 66 64 6 strlen 126 67 126 73 85 1 ( 126 73 126 74 85 1 A 126 74 126 75 85 1 ) 126 75 126 76 85 1 , 126 76 126 77 64 15 hexstr_to_bytes 126 78 126 93 66 1 ( 126 93 126 94 66 5 APmac 126 94 126 99 87 1 ) 126 99 126 100 66 1 , 126 100 126 101 64 15 hexstr_to_bytes 126 102 126 117 66 1 ( 126 117 126 118 66 9 Clientmac 126 118 126 127 88 1 ) 126 127 126 128 66 1 , 126 128 126 129 64 15 hexstr_to_bytes 126 130 126 145 66 1 ( 126 145 126 146 66 6 ANonce 126 146 126 152 89 1 ) 126 152 126 153 66 1 , 126 153 126 154 64 15 hexstr_to_bytes 126 155 126 170 66 1 ( 126 170 126 171 66 6 SNonce 126 171 126 177 90 1 ) 126 177 126 178 66 1 ) 126 178 126 179 64 1 ; 126 179 126 180 18446744073709551615 3 int 128 3 128 6 18446744073709551615 10 sha_length 128 7 128 17 93 1 = 128 18 128 19 18446744073709551615 2 16 128 20 128 22 18446744073709551615 1 ; 128 22 128 23 18446744073709551615 6 u_char 129 3 129 9 6 1 * 129 10 129 11 18446744073709551615 3 MIC 129 11 129 14 94 1 = 129 15 129 16 18446744073709551615 6 malloc 129 17 129 23 95 1 ( 129 23 129 24 95 2 16 129 24 129 26 18446744073709551615 1 ) 129 26 129 27 95 1 ; 129 27 129 28 18446744073709551615 4 HMAC 130 3 130 7 96 1 ( 130 7 130 8 96 7 EVP_md5 130 8 130 15 97 1 ( 130 15 130 16 97 1 ) 130 16 130 17 97 1 , 130 17 130 18 96 3 PTK 130 19 130 22 92 2 -> 130 22 130 24 18446744073709551615 3 kck 130 24 130 27 43 1 , 130 27 130 28 96 2 16 130 29 130 31 18446744073709551615 1 , 130 31 130 32 96 15 hexstr_to_bytes 130 33 130 48 66 1 ( 130 48 130 49 66 4 data 130 49 130 53 91 1 ) 130 53 130 54 66 1 , 130 54 130 55 96 2 99 130 56 130 58 18446744073709551615 1 , 130 58 130 59 96 3 MIC 130 60 130 63 94 1 , 130 63 130 64 96 1 & 130 65 130 66 18446744073709551615 10 sha_length 130 66 130 76 93 1 ) 130 76 130 77 96 1 ; 130 77 130 78 18446744073709551615 3 for 131 3 131 6 18446744073709551615 1 ( 131 6 131 7 18446744073709551615 3 int 131 7 131 10 18446744073709551615 1 i 131 11 131 12 98 1 = 131 13 131 14 18446744073709551615 1 0 131 15 131 16 18446744073709551615 1 ; 131 16 131 17 18446744073709551615 1 i 131 18 131 19 98 1 < 131 20 131 21 18446744073709551615 2 16 131 22 131 24 18446744073709551615 1 ; 131 24 131 25 18446744073709551615 1 i 131 26 131 27 98 2 ++ 131 27 131 29 18446744073709551615 1 ) 131 29 131 30 18446744073709551615 1 { 131 31 131 32 18446744073709551615 6 printf 132 5 132 11 99 1 ( 132 11 132 12 99 6 "%02x" 132 12 132 18 18446744073709551615 1 , 132 18 132 19 99 3 MIC 132 20 132 23 94 1 [ 132 23 132 24 18446744073709551615 1 i 132 24 132 25 98 1 ] 132 25 132 26 18446744073709551615 1 ) 132 26 132 27 99 1 ; 132 27 132 28 18446744073709551615 1 } 133 3 133 4 18446744073709551615 6 printf 134 3 134 9 99 1 ( 134 9 134 10 99 4 "\n" 134 10 134 14 18446744073709551615 1 ) 134 14 134 15 99 1 ; 134 15 134 16 18446744073709551615 11 bpf_u_int32 136 3 136 14 100 4 mask 136 15 136 19 101 1 ; 136 19 136 20 18446744073709551615 40 /* The netmask of our sniffing device */ 136 21 136 61 18446744073709551615 11 bpf_u_int32 137 3 137 14 100 3 net 137 15 137 18 102 1 ; 137 18 137 19 18446744073709551615 35 /* The IP of our sniffing device */ 137 21 137 56 18446744073709551615 2 if 139 3 139 5 18446744073709551615 1 ( 139 5 139 6 18446744073709551615 14 pcap_lookupnet 139 6 139 20 103 1 ( 139 20 139 21 103 3 dev 139 21 139 24 71 1 , 139 24 139 25 103 1 & 139 26 139 27 18446744073709551615 3 net 139 27 139 30 102 1 , 139 30 139 31 103 1 & 139 32 139 33 18446744073709551615 4 mask 139 33 139 37 101 1 , 139 37 139 38 103 6 errbuf 139 39 139 45 73 1 ) 139 45 139 46 103 2 == 139 47 139 49 18446744073709551615 1 - 139 50 139 51 18446744073709551615 1 1 139 51 139 52 18446744073709551615 1 ) 139 52 139 53 18446744073709551615 1 { 139 54 139 55 18446744073709551615 7 fprintf 140 5 140 12 104 1 ( 140 12 140 13 104 6 stderr 140 13 140 19 104 1 , 140 19 140 20 104 35 "Can't get netmask for device %s\n" 140 21 140 56 18446744073709551615 1 , 140 56 140 57 104 3 dev 140 58 140 61 71 1 ) 140 61 140 62 104 1 ; 140 62 140 63 18446744073709551615 3 net 141 5 141 8 102 1 = 141 9 141 10 18446744073709551615 1 0 141 11 141 12 18446744073709551615 1 ; 141 12 141 13 18446744073709551615 4 mask 142 5 142 9 101 1 = 142 10 142 11 18446744073709551615 1 0 142 12 142 13 18446744073709551615 1 ; 142 13 142 14 18446744073709551615 1 } 143 3 143 4 18446744073709551615 6 handle 144 3 144 9 80 1 = 144 10 144 11 18446744073709551615 14 pcap_open_live 144 12 144 26 105 1 ( 144 26 144 27 105 3 dev 144 27 144 30 71 1 , 144 30 144 31 105 6 BUFSIZ 144 32 144 38 105 1 , 144 38 144 39 105 1 1 144 40 144 41 18446744073709551615 1 , 144 41 144 42 105 4 1000 144 43 144 47 18446744073709551615 1 , 144 47 144 48 105 6 errbuf 144 49 144 55 73 1 ) 144 55 144 56 105 1 ; 144 56 144 57 18446744073709551615 2 if 146 3 146 5 18446744073709551615 1 ( 146 5 146 6 18446744073709551615 6 handle 146 6 146 12 80 2 == 146 13 146 15 18446744073709551615 4 NULL 146 16 146 20 18446744073709551615 1 ) 146 20 146 21 18446744073709551615 1 { 146 22 146 23 18446744073709551615 7 fprintf 147 5 147 12 104 1 ( 147 12 147 13 104 6 stderr 147 13 147 19 104 1 , 147 19 147 20 104 31 "Couldn't open device %s: %s\n" 147 21 147 52 18446744073709551615 1 , 147 52 147 53 104 3 dev 147 54 147 57 71 1 , 147 57 147 58 104 6 errbuf 147 59 147 65 73 1 ) 147 65 147 66 104 1 ; 147 66 147 67 18446744073709551615 6 return 148 5 148 11 18446744073709551615 1 ( 148 12 148 13 18446744073709551615 1 2 148 13 148 14 18446744073709551615 1 ) 148 14 148 15 18446744073709551615 1 ; 148 15 148 16 18446744073709551615 1 } 149 3 149 4 18446744073709551615 2 if 151 3 151 5 18446744073709551615 1 ( 151 5 151 6 18446744073709551615 12 pcap_compile 151 6 151 18 106 1 ( 151 18 151 19 106 6 handle 151 19 151 25 80 1 , 151 25 151 26 106 1 & 151 27 151 28 18446744073709551615 2 fp 151 28 151 30 78 1 , 151 30 151 31 106 13 filter_beacon 151 32 151 45 74 1 , 151 45 151 46 106 1 0 151 47 151 48 18446744073709551615 1 , 151 48 151 49 106 3 net 151 50 151 53 102 1 ) 151 53 151 54 106 2 == 151 55 151 57 18446744073709551615 1 - 151 58 151 59 18446744073709551615 1 1 151 59 151 60 18446744073709551615 1 ) 151 60 151 61 18446744073709551615 1 { 151 62 151 63 18446744073709551615 7 fprintf 152 5 152 12 104 1 ( 152 12 152 13 104 6 stderr 152 13 152 19 104 1 , 152 19 152 20 104 32 "Couldn't parse filter %s: %s\n" 152 21 152 53 18446744073709551615 1 , 152 53 152 54 104 13 filter_beacon 152 55 152 68 74 1 , 152 68 152 69 104 11 pcap_geterr 152 70 152 81 107 1 ( 152 81 152 82 107 6 handle 152 82 152 88 80 1 ) 152 88 152 89 107 1 ) 152 89 152 90 104 1 ; 152 90 152 91 18446744073709551615 6 return 153 5 153 11 18446744073709551615 1 ( 153 12 153 13 18446744073709551615 1 2 153 13 153 14 18446744073709551615 1 ) 153 14 153 15 18446744073709551615 1 ; 153 15 153 16 18446744073709551615 1 } 154 3 154 4 18446744073709551615 2 if 156 3 156 5 18446744073709551615 1 ( 156 5 156 6 18446744073709551615 14 pcap_setfilter 156 6 156 20 108 1 ( 156 20 156 21 108 6 handle 156 21 156 27 80 1 , 156 27 156 28 108 1 & 156 29 156 30 18446744073709551615 2 fp 156 30 156 32 78 1 ) 156 32 156 33 108 2 == 156 34 156 36 18446744073709551615 1 - 156 37 156 38 18446744073709551615 1 1 156 38 156 39 18446744073709551615 1 ) 156 39 156 40 18446744073709551615 1 { 156 41 156 42 18446744073709551615 7 fprintf 157 5 157 12 104 1 ( 157 12 157 13 104 6 stderr 157 13 157 19 104 1 , 157 19 157 20 104 34 "Couldn't install filter %s: %s\n" 157 21 157 55 18446744073709551615 1 , 157 55 157 56 104 13 filter_beacon 157 57 157 70 74 1 , 157 70 157 71 104 11 pcap_geterr 157 72 157 83 107 1 ( 157 83 157 84 107 6 handle 157 84 157 90 80 1 ) 157 90 157 91 107 1 ) 157 91 157 92 104 1 ; 157 92 157 93 18446744073709551615 6 return 158 5 158 11 18446744073709551615 1 ( 158 12 158 13 18446744073709551615 1 2 158 13 158 14 18446744073709551615 1 ) 158 14 158 15 18446744073709551615 1 ; 158 15 158 16 18446744073709551615 1 } 159 3 159 4 18446744073709551615 6 printf 161 3 161 9 99 1 ( 161 9 161 10 99 14 "Device: %s\n" 161 10 161 24 18446744073709551615 1 , 161 24 161 25 99 3 dev 161 26 161 29 71 1 ) 161 29 161 30 99 1 ; 161 30 161 31 18446744073709551615 31 //Put the device in sniff loop; 162 3 162 34 18446744073709551615 5 while 163 3 163 8 18446744073709551615 1 ( 163 8 163 9 18446744073709551615 12 pcap_next_ex 163 9 163 21 109 1 ( 163 21 163 22 109 6 handle 163 22 163 28 80 1 , 163 28 163 29 109 1 & 163 30 163 31 18446744073709551615 6 header 163 31 163 37 81 1 , 163 37 163 38 109 1 & 163 39 163 40 18446744073709551615 6 packet 163 40 163 46 82 1 ) 163 46 163 47 109 2 && 163 48 163 50 18446744073709551615 1 ! 163 51 163 52 18446744073709551615 14 process_beacon 163 52 163 66 59 1 ( 163 66 163 67 59 6 header 163 67 163 73 81 1 , 163 73 163 74 59 6 packet 163 75 163 81 82 1 ) 163 81 163 82 59 1 ) 163 82 163 83 18446744073709551615 1 ; 164 5 164 6 18446744073709551615 8 asprintf 166 3 166 11 110 1 ( 166 11 166 12 110 1 & 166 12 166 13 18446744073709551615 20 filter_eapol_on_ssid 166 13 166 33 76 1 , 166 33 166 34 110 25 filter_eapol_on_ssid_mask 166 35 166 60 75 1 , 166 60 166 61 110 12 mac_toString 166 62 166 74 63 1 ( 166 74 166 75 63 14 ap_mac_address 166 75 166 89 54 1 ) 166 89 166 90 63 1 , 166 90 166 91 110 12 mac_toString 166 92 166 104 63 1 ( 166 104 166 105 63 14 ap_mac_address 166 105 166 119 54 1 ) 166 119 166 120 63 1 ) 166 120 166 121 110 1 ; 166 121 166 122 18446744073709551615 2 if 168 3 168 5 18446744073709551615 1 ( 168 5 168 6 18446744073709551615 12 pcap_compile 168 6 168 18 106 1 ( 168 18 168 19 106 6 handle 168 19 168 25 80 1 , 168 25 168 26 106 1 & 168 27 168 28 18446744073709551615 2 fp 168 28 168 30 78 1 , 168 30 168 31 106 20 filter_eapol_on_ssid 168 32 168 52 76 1 , 168 52 168 53 106 1 0 168 54 168 55 18446744073709551615 1 , 168 55 168 56 106 3 net 168 57 168 60 102 1 ) 168 60 168 61 106 2 == 168 62 168 64 18446744073709551615 1 - 168 65 168 66 18446744073709551615 1 1 168 66 168 67 18446744073709551615 1 ) 168 67 168 68 18446744073709551615 1 { 168 69 168 70 18446744073709551615 7 fprintf 169 5 169 12 104 1 ( 169 12 169 13 104 6 stderr 169 13 169 19 104 1 , 169 19 169 20 104 32 "Couldn't parse filter %s: %s\n" 169 21 169 53 18446744073709551615 1 , 169 53 169 54 104 20 filter_eapol_on_ssid 169 55 169 75 76 1 , 169 75 169 76 104 11 pcap_geterr 169 77 169 88 107 1 ( 169 88 169 89 107 6 handle 169 89 169 95 80 1 ) 169 95 169 96 107 1 ) 169 96 169 97 104 1 ; 169 97 169 98 18446744073709551615 6 return 170 5 170 11 18446744073709551615 1 ( 170 12 170 13 18446744073709551615 1 2 170 13 170 14 18446744073709551615 1 ) 170 14 170 15 18446744073709551615 1 ; 170 15 170 16 18446744073709551615 1 } 171 3 171 4 18446744073709551615 2 if 172 3 172 5 18446744073709551615 1 ( 172 5 172 6 18446744073709551615 14 pcap_setfilter 172 6 172 20 108 1 ( 172 20 172 21 108 6 handle 172 21 172 27 80 1 , 172 27 172 28 108 1 & 172 29 172 30 18446744073709551615 2 fp 172 30 172 32 78 1 ) 172 32 172 33 108 2 == 172 34 172 36 18446744073709551615 1 - 172 37 172 38 18446744073709551615 1 1 172 38 172 39 18446744073709551615 1 ) 172 39 172 40 18446744073709551615 1 { 172 41 172 42 18446744073709551615 7 fprintf 173 5 173 12 104 1 ( 173 12 173 13 104 6 stderr 173 13 173 19 104 1 , 173 19 173 20 104 34 "Couldn't install filter %s: %s\n" 173 21 173 55 18446744073709551615 1 , 173 55 173 56 104 20 filter_eapol_on_ssid 173 57 173 77 76 1 , 173 77 173 78 104 11 pcap_geterr 173 79 173 90 107 1 ( 173 90 173 91 107 6 handle 173 91 173 97 80 1 ) 173 97 173 98 107 1 ) 173 98 173 99 104 1 ; 173 99 173 100 18446744073709551615 6 return 174 5 174 11 18446744073709551615 1 ( 174 12 174 13 18446744073709551615 1 2 174 13 174 14 18446744073709551615 1 ) 174 14 174 15 18446744073709551615 1 ; 174 15 174 16 18446744073709551615 1 } 175 3 175 4 18446744073709551615 3 int 176 3 176 6 18446744073709551615 3 res 176 7 176 10 111 1 = 176 11 176 12 18446744073709551615 1 0 176 13 176 14 18446744073709551615 1 ; 176 14 176 15 18446744073709551615 5 while 177 3 177 8 18446744073709551615 1 ( 177 8 177 9 18446744073709551615 12 pcap_next_ex 177 9 177 21 109 1 ( 177 21 177 22 109 6 handle 177 22 177 28 80 1 , 177 28 177 29 109 1 & 177 30 177 31 18446744073709551615 6 header 177 31 177 37 81 1 , 177 37 177 38 109 1 & 177 39 177 40 18446744073709551615 6 packet 177 40 177 46 82 1 ) 177 46 177 47 109 2 >= 177 48 177 50 18446744073709551615 1 0 177 51 177 52 18446744073709551615 2 && 177 53 177 55 18446744073709551615 14 process_packet 177 56 177 70 62 1 ( 177 70 177 71 62 6 header 177 71 177 77 81 1 , 177 77 177 78 62 6 packet 177 79 177 85 82 1 ) 177 85 177 86 62 1 ) 177 86 177 87 18446744073709551615 1 ; 178 5 178 6 18446744073709551615 273 /*printf("AP mac address: ");
  for(int i = 0; i < MAC_ADDR_LEN; i++) {
    printf("%02x", ap_mac_address[i]);
  }
  printf(".\n");
  printf("%s\n", mac_toString(ap_mac_address));
  printf(filter_eapol_on_ssid, mac_toString(ap_mac_address), mac_toString(ap_mac_address));*/ 179 3 185 94 18446744073709551615 13 pcap_freecode 187 3 187 16 112 1 ( 187 16 187 17 112 1 & 187 17 187 18 18446744073709551615 2 fp 187 18 187 20 78 1 ) 187 20 187 21 112 1 ; 187 21 187 22 18446744073709551615 10 pcap_close 188 3 188 13 113 1 ( 188 13 188 14 113 6 handle 188 14 188 20 80 1 ) 188 20 188 21 113 1 ; 188 21 188 22 18446744073709551615 6 return 189 3 189 9 18446744073709551615 1 ( 189 10 189 11 18446744073709551615 1 0 189 11 189 12 18446744073709551615 1 ) 189 12 189 13 18446744073709551615 1 ; 189 13 189 14 18446744073709551615 1 } 190 1 190 2 18446744073709551615 6 u_char 192 1 192 7 6 14 process_beacon 192 8 192 22 59 1 ( 192 22 192 23 59 5 const 192 23 192 28 18446744073709551615 6 struct 192 29 192 35 18446744073709551615 11 pcap_pkthdr 192 36 192 47 60 1 * 192 48 192 49 18446744073709551615 6 header 192 49 192 55 114 1 , 192 55 192 56 59 5 const 192 57 192 62 18446744073709551615 6 u_char 192 63 192 69 6 1 * 192 70 192 71 18446744073709551615 6 buffer 192 71 192 77 115 1 ) 192 77 192 78 59 1 { 192 79 192 80 18446744073709551615 5 const 193 3 193 8 18446744073709551615 6 struct 193 9 193 15 18446744073709551615 19 sniff_802_11_beacon 193 16 193 35 14 1 * 193 36 193 37 18446744073709551615 10 hdr_802_11 193 37 193 47 116 1 ; 193 47 193 48 18446744073709551615 10 hdr_802_11 194 3 194 13 116 1 = 194 14 194 15 18446744073709551615 1 ( 194 16 194 17 18446744073709551615 6 struct 194 17 194 23 18446744073709551615 19 sniff_802_11_beacon 194 24 194 43 14 1 * 194 44 194 45 18446744073709551615 1 ) 194 45 194 46 18446744073709551615 1 ( 194 46 194 47 18446744073709551615 6 buffer 194 47 194 53 115 1 + 194 54 194 55 18446744073709551615 16 PRISM_HEADER_LEN 194 56 194 72 18446744073709551615 1 ) 194 72 194 73 18446744073709551615 1 ; 194 73 194 74 18446744073709551615 3 int 195 3 195 6 18446744073709551615 11 ssid_length 195 7 195 18 117 1 = 195 19 195 20 18446744073709551615 1 ( 195 21 195 22 18446744073709551615 3 int 195 22 195 25 18446744073709551615 1 ) 195 25 195 26 18446744073709551615 1 ( 195 26 195 27 18446744073709551615 6 buffer 195 27 195 33 115 1 + 195 34 195 35 18446744073709551615 16 PRISM_HEADER_LEN 195 36 195 52 18446744073709551615 1 + 195 53 195 54 18446744073709551615 6 sizeof 195 55 195 61 18446744073709551615 1 ( 195 61 195 62 18446744073709551615 6 struct 195 62 195 68 18446744073709551615 19 sniff_802_11_beacon 195 69 195 88 14 1 ) 195 88 195 89 18446744073709551615 1 + 195 90 195 91 18446744073709551615 2 13 195 92 195 94 18446744073709551615 1 ) 195 94 195 95 18446744073709551615 1 [ 195 95 195 96 18446744073709551615 1 0 195 96 195 97 18446744073709551615 1 ] 195 97 195 98 18446744073709551615 1 ; 195 98 195 99 18446744073709551615 6 u_char 196 3 196 9 6 11 beacon_ssid 196 10 196 21 118 1 [ 196 21 196 22 18446744073709551615 11 ssid_length 196 22 196 33 117 1 + 196 34 196 35 18446744073709551615 1 1 196 36 196 37 18446744073709551615 1 ] 196 37 196 38 18446744073709551615 1 ; 196 38 196 39 18446744073709551615 6 memcpy 197 3 197 9 119 1 ( 197 9 197 10 119 11 beacon_ssid 197 10 197 21 118 1 , 197 21 197 22 119 1 ( 197 23 197 24 18446744073709551615 6 buffer 197 24 197 30 115 1 + 197 31 197 32 18446744073709551615 16 PRISM_HEADER_LEN 197 33 197 49 18446744073709551615 1 + 197 50 197 51 18446744073709551615 6 sizeof 197 52 197 58 18446744073709551615 1 ( 197 58 197 59 18446744073709551615 6 struct 197 59 197 65 18446744073709551615 19 sniff_802_11_beacon 197 66 197 85 14 1 ) 197 85 197 86 18446744073709551615 1 + 197 87 197 88 18446744073709551615 2 14 197 89 197 91 18446744073709551615 1 ) 197 91 197 92 18446744073709551615 1 , 197 92 197 93 119 11 ssid_length 197 94 197 105 117 1 ) 197 105 197 106 119 1 ; 197 106 197 107 18446744073709551615 11 beacon_ssid 198 3 198 14 118 1 [ 198 14 198 15 18446744073709551615 11 ssid_length 198 15 198 26 117 1 ] 198 26 198 27 18446744073709551615 1 = 198 28 198 29 18446744073709551615 4 '\0' 198 30 198 34 18446744073709551615 1 ; 198 34 198 35 18446744073709551615 2 if 199 3 199 5 18446744073709551615 1 ( 199 5 199 6 18446744073709551615 6 strcmp 199 6 199 12 120 1 ( 199 12 199 13 120 11 beacon_ssid 199 13 199 24 118 1 , 199 24 199 25 120 4 ssid 199 26 199 30 56 1 ) 199 30 199 31 120 2 == 199 32 199 34 18446744073709551615 1 0 199 35 199 36 18446744073709551615 1 ) 199 36 199 37 18446744073709551615 1 { 199 38 199 39 18446744073709551615 6 memcpy 200 5 200 11 119 1 ( 200 11 200 12 119 14 ap_mac_address 200 12 200 26 54 1 , 200 26 200 27 119 10 hdr_802_11 200 28 200 38 116 2 -> 200 38 200 40 18446744073709551615 5 addr2 200 40 200 45 18 1 , 200 45 200 46 119 12 MAC_ADDR_LEN 200 47 200 59 119 1 ) 200 59 200 60 119 1 ; 200 60 200 61 18446744073709551615 6 return 201 5 201 11 18446744073709551615 1 ( 201 12 201 13 18446744073709551615 1 1 201 13 201 14 18446744073709551615 1 ) 201 14 201 15 18446744073709551615 1 ; 201 15 201 16 18446744073709551615 1 } 202 3 202 4 18446744073709551615 6 return 203 3 203 9 18446744073709551615 1 ( 203 10 203 11 18446744073709551615 1 0 203 11 203 12 18446744073709551615 1 ) 203 12 203 13 18446744073709551615 1 ; 203 13 203 14 18446744073709551615 1 } 204 1 204 2 18446744073709551615 6 u_char 206 1 206 7 6 13 process_eapol 206 8 206 21 61 1 ( 206 21 206 22 61 5 const 206 22 206 27 18446744073709551615 6 struct 206 28 206 34 18446744073709551615 11 pcap_pkthdr 206 35 206 46 60 1 * 206 47 206 48 18446744073709551615 6 header 206 48 206 54 121 1 , 206 54 206 55 61 5 const 206 56 206 61 18446744073709551615 6 u_char 206 62 206 68 6 1 * 206 69 206 70 18446744073709551615 6 buffer 206 70 206 76 122 1 ) 206 76 206 77 61 1 { 206 78 206 79 18446744073709551615 5 const 207 3 207 8 18446744073709551615 6 struct 207 9 207 15 18446744073709551615 12 sniff_802_11 207 16 207 28 5 1 * 207 29 207 30 18446744073709551615 10 hdr_802_11 207 30 207 40 123 1 ; 207 40 207 41 18446744073709551615 10 hdr_802_11 208 3 208 13 123 1 = 208 14 208 15 18446744073709551615 1 ( 208 16 208 17 18446744073709551615 6 struct 208 17 208 23 18446744073709551615 12 sniff_802_11 208 24 208 36 5 1 * 208 37 208 38 18446744073709551615 1 ) 208 38 208 39 18446744073709551615 1 ( 208 39 208 40 18446744073709551615 6 buffer 208 40 208 46 122 1 + 208 47 208 48 18446744073709551615 16 PRISM_HEADER_LEN 208 49 208 65 18446744073709551615 1 ) 208 65 208 66 18446744073709551615 1 ; 208 66 208 67 18446744073709551615 5 const 209 3 209 8 18446744073709551615 6 struct 209 9 209 15 18446744073709551615 17 sniff_802_1x_auth 209 16 209 33 28 1 * 209 34 209 35 18446744073709551615 15 hdr_802_1x_auth 209 35 209 50 124 1 ; 209 50 209 51 18446744073709551615 15 hdr_802_1x_auth 210 3 210 18 124 1 = 210 19 210 20 18446744073709551615 1 ( 210 21 210 22 18446744073709551615 6 struct 210 22 210 28 18446744073709551615 17 sniff_802_1x_auth 210 29 210 46 28 1 * 210 47 210 48 18446744073709551615 1 ) 210 48 210 49 18446744073709551615 1 ( 210 49 210 50 18446744073709551615 6 buffer 210 50 210 56 122 1 + 210 57 210 58 18446744073709551615 16 PRISM_HEADER_LEN 210 59 210 75 18446744073709551615 1 + 210 76 210 77 18446744073709551615 6 sizeof 210 78 210 84 18446744073709551615 1 ( 210 84 210 85 18446744073709551615 6 struct 210 85 210 91 18446744073709551615 12 sniff_802_11 210 92 210 104 5 1 ) 210 104 210 105 18446744073709551615 1 + 210 106 210 107 18446744073709551615 7 LLC_LEN 210 108 210 115 18446744073709551615 1 ) 210 115 210 116 18446744073709551615 1 ; 210 116 210 117 18446744073709551615 1 } 211 1 211 2 18446744073709551615 6 u_char 213 1 213 7 6 14 process_packet 213 8 213 22 62 1 ( 213 22 213 23 62 5 const 213 23 213 28 18446744073709551615 6 struct 213 29 213 35 18446744073709551615 11 pcap_pkthdr 213 36 213 47 60 1 * 213 48 213 49 18446744073709551615 6 header 213 49 213 55 125 1 , 213 55 213 56 62 5 const 213 57 213 62 18446744073709551615 6 u_char 213 63 213 69 6 1 * 213 70 213 71 18446744073709551615 6 buffer 213 71 213 77 126 1 ) 213 77 213 78 62 1 { 213 79 213 80 18446744073709551615 5 const 214 3 214 8 18446744073709551615 6 struct 214 9 214 15 18446744073709551615 12 sniff_802_11 214 16 214 28 5 1 * 214 29 214 30 18446744073709551615 10 hdr_802_11 214 30 214 40 127 1 ; 214 40 214 41 18446744073709551615 10 hdr_802_11 215 3 215 13 127 1 = 215 14 215 15 18446744073709551615 1 ( 215 16 215 17 18446744073709551615 6 struct 215 17 215 23 18446744073709551615 12 sniff_802_11 215 24 215 36 5 1 * 215 37 215 38 18446744073709551615 1 ) 215 38 215 39 18446744073709551615 1 ( 215 39 215 40 18446744073709551615 6 buffer 215 40 215 46 126 1 + 215 47 215 48 18446744073709551615 16 PRISM_HEADER_LEN 215 49 215 65 18446744073709551615 1 ) 215 65 215 66 18446744073709551615 1 ; 215 66 215 67 18446744073709551615 3 int 216 3 216 6 18446744073709551615 8 qos_type 216 7 216 15 128 1 = 216 16 216 17 18446744073709551615 16 TAKE_N_BITS_FROM 216 18 216 34 128 1 ( 216 34 216 35 18446744073709551615 10 hdr_802_11 216 35 216 45 18446744073709551615 2 -> 216 45 216 47 18446744073709551615 13 frame_control 216 47 216 60 18446744073709551615 1 [ 216 60 216 61 18446744073709551615 1 0 216 61 216 62 18446744073709551615 1 ] 216 62 216 63 18446744073709551615 1 , 216 63 216 64 18446744073709551615 1 2 216 65 216 66 18446744073709551615 1 , 216 66 216 67 18446744073709551615 1 2 216 68 216 69 18446744073709551615 1 ) 216 69 216 70 18446744073709551615 1 ; 216 70 216 71 18446744073709551615 3 int 217 3 217 6 18446744073709551615 16 packet_direction 217 7 217 23 129 1 = 217 24 217 25 18446744073709551615 16 TAKE_N_BITS_FROM 217 26 217 42 129 1 ( 217 42 217 43 18446744073709551615 10 hdr_802_11 217 43 217 53 18446744073709551615 2 -> 217 53 217 55 18446744073709551615 13 frame_control 217 55 217 68 18446744073709551615 1 [ 217 68 217 69 18446744073709551615 1 1 217 69 217 70 18446744073709551615 1 ] 217 70 217 71 18446744073709551615 1 , 217 71 217 72 18446744073709551615 1 0 217 73 217 74 18446744073709551615 1 , 217 74 217 75 18446744073709551615 1 2 217 76 217 77 18446744073709551615 1 ) 217 77 217 78 18446744073709551615 1 ; 217 78 217 79 18446744073709551615 3 int 218 3 218 6 18446744073709551615 14 data_protected 218 7 218 21 130 1 = 218 22 218 23 18446744073709551615 16 TAKE_N_BITS_FROM 218 24 218 40 130 1 ( 218 40 218 41 18446744073709551615 10 hdr_802_11 218 41 218 51 18446744073709551615 2 -> 218 51 218 53 18446744073709551615 13 frame_control 218 53 218 66 18446744073709551615 1 [ 218 66 218 67 18446744073709551615 1 1 218 67 218 68 18446744073709551615 1 ] 218 68 218 69 18446744073709551615 1 , 218 69 218 70 18446744073709551615 1 6 218 71 218 72 18446744073709551615 1 , 218 72 218 73 18446744073709551615 1 1 218 74 218 75 18446744073709551615 1 ) 218 75 218 76 18446744073709551615 1 ; 218 76 218 77 18446744073709551615 6 struct 219 3 219 9 18446744073709551615 10 eapol_info 219 10 219 20 48 1 * 219 21 219 22 18446744073709551615 17 packet_eapol_info 219 22 219 39 131 1 = 219 40 219 41 18446744073709551615 4 NULL 219 42 219 46 131 1 ; 219 46 219 47 18446744073709551615 6 u_char 221 3 221 9 6 1 * 221 10 221 11 18446744073709551615 11 sta_address 221 11 221 22 132 1 ; 221 22 221 23 18446744073709551615 2 if 222 3 222 5 18446744073709551615 1 ( 222 5 222 6 18446744073709551615 16 packet_direction 222 6 222 22 129 2 == 222 23 222 25 18446744073709551615 1 2 222 26 222 27 18446744073709551615 1 ) 222 27 222 28 18446744073709551615 1 { 222 29 222 30 18446744073709551615 11 sta_address 223 5 223 16 132 1 = 223 17 223 18 18446744073709551615 10 hdr_802_11 223 19 223 29 127 2 -> 223 29 223 31 18446744073709551615 5 addr1 223 31 223 36 9 1 ; 223 36 223 37 18446744073709551615 1 } 224 3 224 4 18446744073709551615 4 else 225 3 225 7 18446744073709551615 2 if 225 8 225 10 18446744073709551615 1 ( 225 10 225 11 18446744073709551615 16 packet_direction 225 11 225 27 129 2 == 225 28 225 30 18446744073709551615 1 1 225 31 225 32 18446744073709551615 1 ) 225 32 225 33 18446744073709551615 1 { 225 34 225 35 18446744073709551615 11 sta_address 226 5 226 16 132 1 = 226 17 226 18 18446744073709551615 10 hdr_802_11 226 19 226 29 127 2 -> 226 29 226 31 18446744073709551615 5 addr2 226 31 226 36 10 1 ; 226 36 226 37 18446744073709551615 1 } 227 3 227 4 18446744073709551615 2 if 229 3 229 5 18446744073709551615 1 ( 229 5 229 6 18446744073709551615 8 qos_type 229 6 229 14 128 2 == 229 15 229 17 18446744073709551615 1 2 229 18 229 19 18446744073709551615 1 ) 229 19 229 20 18446744073709551615 1 { 229 21 229 22 18446744073709551615 2 if 230 5 230 7 18446744073709551615 1 ( 230 7 230 8 18446744073709551615 14 data_protected 230 8 230 22 130 1 ) 230 22 230 23 18446744073709551615 1 { 230 24 230 25 18446744073709551615 2 if 231 7 231 9 18446744073709551615 1 ( 231 9 231 10 18446744073709551615 11 hashmap_get 231 10 231 21 133 1 ( 231 21 231 22 133 3 map 231 22 231 25 58 1 , 231 25 231 26 133 12 mac_toString 231 27 231 39 63 1 ( 231 39 231 40 63 11 sta_address 231 40 231 51 132 1 ) 231 51 231 52 63 1 , 231 52 231 53 133 1 ( 231 54 231 55 18446744073709551615 4 void 231 55 231 59 18446744073709551615 1 * 231 60 231 61 18446744073709551615 1 * 231 61 231 62 18446744073709551615 1 ) 231 62 231 63 18446744073709551615 1 & 231 63 231 64 18446744073709551615 17 packet_eapol_info 231 64 231 81 131 1 ) 231 81 231 82 133 2 == 231 83 231 85 18446744073709551615 6 MAP_OK 231 86 231 92 18446744073709551615 2 && 231 93 231 95 18446744073709551615 17 packet_eapol_info 231 96 231 113 131 2 -> 231 113 231 115 18446744073709551615 6 status 231 115 231 121 53 2 == 231 122 231 124 18446744073709551615 7 SUCCESS 231 125 231 132 3 1 ) 231 132 231 133 18446744073709551615 1 { 231 134 231 135 18446744073709551615 6 printf 232 9 232 15 99 1 ( 232 15 232 16 99 30 "%d -> I'm going to decrypt: " 232 16 232 46 18446744073709551615 1 , 232 46 232 47 99 6 header 232 48 232 54 125 2 -> 232 54 232 56 18446744073709551615 6 caplen 232 56 232 62 134 1 ) 232 62 232 63 99 1 ; 232 63 232 64 18446744073709551615 3 for 233 9 233 12 18446744073709551615 1 ( 233 12 233 13 18446744073709551615 3 int 233 13 233 16 18446744073709551615 1 i 233 17 233 18 135 1 = 233 19 233 20 18446744073709551615 1 0 233 21 233 22 18446744073709551615 1 ; 233 22 233 23 18446744073709551615 1 i 233 24 233 25 135 1 < 233 26 233 27 18446744073709551615 2 32 233 28 233 30 18446744073709551615 1 ; 233 30 233 31 18446744073709551615 1 i 233 32 233 33 135 2 ++ 233 33 233 35 18446744073709551615 1 ) 233 35 233 36 18446744073709551615 1 { 233 37 233 38 18446744073709551615 6 printf 234 11 234 17 99 1 ( 234 17 234 18 99 6 "%02x" 234 18 234 24 18446744073709551615 1 , 234 24 234 25 99 17 packet_eapol_info 234 26 234 43 131 2 -> 234 43 234 45 18446744073709551615 6 ANonce 234 45 234 51 50 1 [ 234 51 234 52 18446744073709551615 1 i 234 52 234 53 135 1 ] 234 53 234 54 18446744073709551615 1 ) 234 54 234 55 99 1 ; 234 55 234 56 18446744073709551615 1 } 235 9 235 10 18446744073709551615 6 printf 236 9 236 15 99 1 ( 236 15 236 16 99 4 "\n" 236 16 236 20 18446744073709551615 1 ) 236 20 236 21 99 1 ; 236 21 236 22 18446744073709551615 1 } 237 7 237 8 18446744073709551615 4 else 238 7 238 11 18446744073709551615 1 { 238 12 238 13 18446744073709551615 26 //printf("Can't decrypt"); 239 9 239 35 18446744073709551615 1 } 240 7 240 8 18446744073709551615 1 } 241 5 241 6 18446744073709551615 4 else 242 5 242 9 18446744073709551615 1 { 242 10 242 11 18446744073709551615 5 const 243 7 243 12 18446744073709551615 6 struct 243 13 243 19 18446744073709551615 9 sniff_LLC 243 20 243 29 21 1 * 243 30 243 31 18446744073709551615 7 hdr_llc 243 31 243 38 136 1 ; 243 38 243 39 18446744073709551615 7 hdr_llc 244 7 244 14 136 1 = 244 15 244 16 18446744073709551615 1 ( 244 17 244 18 18446744073709551615 6 struct 244 18 244 24 18446744073709551615 9 sniff_LLC 244 25 244 34 21 1 * 244 35 244 36 18446744073709551615 1 ) 244 36 244 37 18446744073709551615 1 ( 244 37 244 38 18446744073709551615 6 buffer 244 38 244 44 126 1 + 244 45 244 46 18446744073709551615 16 PRISM_HEADER_LEN 244 47 244 63 18446744073709551615 1 + 244 64 244 65 18446744073709551615 6 sizeof 244 66 244 72 18446744073709551615 1 ( 244 72 244 73 18446744073709551615 6 struct 244 73 244 79 18446744073709551615 12 sniff_802_11 244 80 244 92 5 1 ) 244 92 244 93 18446744073709551615 1 ) 244 93 244 94 18446744073709551615 1 ; 244 94 244 95 18446744073709551615 2 if 245 7 245 9 18446744073709551615 1 ( 245 9 245 10 18446744073709551615 7 hdr_llc 245 10 245 17 136 2 -> 245 17 245 19 18446744073709551615 4 dsap 245 19 245 23 22 2 == 245 24 245 26 18446744073709551615 4 0xaa 245 27 245 31 18446744073709551615 1 ) 245 31 245 32 18446744073709551615 1 { 245 33 245 34 18446744073709551615 5 const 246 9 246 14 18446744073709551615 6 struct 246 15 246 21 18446744073709551615 10 sniff_SNAP 246 22 246 32 25 1 * 246 33 246 34 18446744073709551615 8 hdr_snap 246 34 246 42 137 1 ; 246 42 246 43 18446744073709551615 8 hdr_snap 247 9 247 17 137 1 = 247 18 247 19 18446744073709551615 1 ( 247 20 247 21 18446744073709551615 6 struct 247 21 247 27 18446744073709551615 10 sniff_SNAP 247 28 247 38 25 1 * 247 39 247 40 18446744073709551615 1 ) 247 40 247 41 18446744073709551615 1 ( 247 41 247 42 18446744073709551615 6 buffer 247 42 247 48 126 1 + 247 49 247 50 18446744073709551615 16 PRISM_HEADER_LEN 247 51 247 67 18446744073709551615 1 + 247 68 247 69 18446744073709551615 6 sizeof 247 70 247 76 18446744073709551615 1 ( 247 76 247 77 18446744073709551615 6 struct 247 77 247 83 18446744073709551615 12 sniff_802_11 247 84 247 96 5 1 ) 247 96 247 97 18446744073709551615 1 + 247 98 247 99 18446744073709551615 6 sizeof 247 100 247 106 18446744073709551615 1 ( 247 106 247 107 18446744073709551615 6 struct 247 107 247 113 18446744073709551615 9 sniff_LLC 247 114 247 123 21 1 ) 247 123 247 124 18446744073709551615 1 ) 247 124 247 125 18446744073709551615 1 ; 247 125 247 126 18446744073709551615 6 u_char 248 9 248 15 6 11 ether_eapol 248 16 248 27 138 1 [ 248 27 248 28 18446744073709551615 1 ] 248 28 248 29 18446744073709551615 1 = 248 30 248 31 18446744073709551615 1 { 248 32 248 33 18446744073709551615 4 0x88 248 33 248 37 18446744073709551615 1 , 248 37 248 38 18446744073709551615 4 0x8e 248 39 248 43 18446744073709551615 1 } 248 43 248 44 18446744073709551615 1 ; 248 44 248 45 18446744073709551615 2 if 249 9 249 11 18446744073709551615 1 ( 249 11 249 12 18446744073709551615 6 memcmp 249 12 249 18 139 1 ( 249 18 249 19 139 8 hdr_snap 249 19 249 27 137 2 -> 249 27 249 29 18446744073709551615 4 type 249 29 249 33 27 1 , 249 33 249 34 139 11 ether_eapol 249 35 249 46 138 1 , 249 46 249 47 139 1 2 249 48 249 49 18446744073709551615 1 ) 249 49 249 50 139 2 == 249 51 249 53 18446744073709551615 1 0 249 54 249 55 18446744073709551615 1 ) 249 55 249 56 18446744073709551615 1 { 249 57 249 58 18446744073709551615 5 const 250 11 250 16 18446744073709551615 6 struct 250 17 250 23 18446744073709551615 17 sniff_802_1x_auth 250 24 250 41 28 1 * 250 42 250 43 18446744073709551615 10 hdr_802_1x 250 43 250 53 140 1 ; 250 53 250 54 18446744073709551615 10 hdr_802_1x 251 11 251 21 140 1 = 251 22 251 23 18446744073709551615 1 ( 251 24 251 25 18446744073709551615 6 struct 251 25 251 31 18446744073709551615 17 sniff_802_1x_auth 251 32 251 49 28 1 * 251 50 251 51 18446744073709551615 1 ) 251 51 251 52 18446744073709551615 1 ( 251 52 251 53 18446744073709551615 6 buffer 251 53 251 59 126 1 + 251 60 251 61 18446744073709551615 16 PRISM_HEADER_LEN 251 62 251 78 18446744073709551615 1 + 251 79 251 80 18446744073709551615 6 sizeof 251 81 251 87 18446744073709551615 1 ( 251 87 251 88 18446744073709551615 6 struct 251 88 251 94 18446744073709551615 12 sniff_802_11 251 95 251 107 5 1 ) 251 107 251 108 18446744073709551615 1 + 251 109 251 110 18446744073709551615 6 sizeof 251 111 251 117 18446744073709551615 1 ( 251 117 251 118 18446744073709551615 6 struct 251 118 251 124 18446744073709551615 9 sniff_LLC 251 125 251 134 21 1 ) 251 134 251 135 18446744073709551615 1 + 251 136 251 137 18446744073709551615 6 sizeof 251 138 251 144 18446744073709551615 1 ( 251 144 251 145 18446744073709551615 6 struct 251 145 251 151 18446744073709551615 10 sniff_SNAP 251 152 251 162 25 1 ) 251 162 251 163 18446744073709551615 1 ) 251 163 251 164 18446744073709551615 1 ; 251 164 251 165 18446744073709551615 3 int 252 11 252 14 18446744073709551615 20 get_from_hashmap_res 252 15 252 35 141 1 = 252 36 252 37 18446744073709551615 11 hashmap_get 252 38 252 49 133 1 ( 252 49 252 50 133 3 map 252 50 252 53 58 1 , 252 53 252 54 133 12 mac_toString 252 55 252 67 63 1 ( 252 67 252 68 63 11 sta_address 252 68 252 79 132 1 ) 252 79 252 80 63 1 , 252 80 252 81 133 1 ( 252 82 252 83 18446744073709551615 4 void 252 83 252 87 18446744073709551615 1 * 252 88 252 89 18446744073709551615 1 * 252 89 252 90 18446744073709551615 1 ) 252 90 252 91 18446744073709551615 1 & 252 91 252 92 18446744073709551615 17 packet_eapol_info 252 92 252 109 131 1 ) 252 109 252 110 133 1 ; 252 110 252 111 18446744073709551615 2 if 253 11 253 13 18446744073709551615 1 ( 253 13 253 14 18446744073709551615 20 get_from_hashmap_res 253 14 253 34 141 2 == 253 35 253 37 18446744073709551615 11 MAP_MISSING 253 38 253 49 18446744073709551615 1 ) 253 49 253 50 18446744073709551615 1 { 253 51 253 52 18446744073709551615 2 if 254 13 254 15 18446744073709551615 1 ( 254 15 254 16 18446744073709551615 16 packet_direction 254 16 254 32 129 2 == 254 33 254 35 18446744073709551615 1 2 254 36 254 37 18446744073709551615 1 ) 254 37 254 38 18446744073709551615 1 { 254 39 254 40 18446744073709551615 17 // msg 1 or msg 3 254 41 254 58 18446744073709551615 2 if 255 15 255 17 18446744073709551615 1 ( 255 17 255 18 18446744073709551615 1 ( 255 18 255 19 18446744073709551615 10 hdr_802_1x 255 19 255 29 140 2 -> 255 29 255 31 18446744073709551615 15 key_information 255 31 255 46 33 1 [ 255 46 255 47 18446744073709551615 1 0 255 47 255 48 18446744073709551615 1 ] 255 48 255 49 18446744073709551615 1 & 255 50 255 51 18446744073709551615 1 ( 255 52 255 53 18446744073709551615 1 1 255 53 255 54 18446744073709551615 2 << 255 55 255 57 18446744073709551615 1 8 255 58 255 59 18446744073709551615 1 ) 255 59 255 60 18446744073709551615 1 ) 255 60 255 61 18446744073709551615 2 == 255 62 255 64 18446744073709551615 1 0 255 65 255 66 18446744073709551615 1 ) 255 66 255 67 18446744073709551615 1 { 255 68 255 69 18446744073709551615 6 struct 256 17 256 23 18446744073709551615 10 eapol_info 256 24 256 34 48 1 * 256 35 256 36 18446744073709551615 21 new_packet_eapol_info 256 36 256 57 142 1 = 256 58 256 59 18446744073709551615 6 malloc 256 60 256 66 95 1 ( 256 66 256 67 95 6 sizeof 256 67 256 73 18446744073709551615 1 ( 256 73 256 74 18446744073709551615 6 struct 256 74 256 80 18446744073709551615 10 eapol_info 256 81 256 91 48 1 ) 256 91 256 92 18446744073709551615 1 ) 256 92 256 93 95 1 ; 256 93 256 94 18446744073709551615 11 hashmap_put 257 17 257 28 143 1 ( 257 28 257 29 143 3 map 257 29 257 32 58 1 , 257 32 257 33 143 12 mac_toString 257 34 257 46 63 1 ( 257 46 257 47 63 11 sta_address 257 47 257 58 132 1 ) 257 58 257 59 63 1 , 257 59 257 60 143 21 new_packet_eapol_info 257 61 257 82 142 1 ) 257 82 257 83 143 1 ; 257 83 257 84 18446744073709551615 6 memcpy 258 17 258 23 119 1 ( 258 23 258 24 119 21 new_packet_eapol_info 258 24 258 45 142 2 -> 258 45 258 47 18446744073709551615 6 ANonce 258 47 258 53 50 1 , 258 53 258 54 119 10 hdr_802_1x 258 55 258 65 140 2 -> 258 65 258 67 18446744073709551615 13 wpa_key_nonce 258 67 258 80 36 1 , 258 80 258 81 119 2 32 258 82 258 84 18446744073709551615 1 ) 258 84 258 85 119 1 ; 258 85 258 86 18446744073709551615 21 new_packet_eapol_info 259 17 259 38 142 2 -> 259 38 259 40 18446744073709551615 6 status 259 40 259 46 53 1 = 259 47 259 48 18446744073709551615 19 WAITING_EAPOL_KEY_2 259 49 259 68 0 1 ; 259 68 259 69 18446744073709551615 1 } 260 15 260 16 18446744073709551615 1 } 261 13 261 14 18446744073709551615 1 } 262 11 262 12 18446744073709551615 4 else 263 11 263 15 18446744073709551615 2 if 263 16 263 18 18446744073709551615 1 ( 263 18 263 19 18446744073709551615 20 get_from_hashmap_res 263 19 263 39 141 2 == 263 40 263 42 18446744073709551615 6 MAP_OK 263 43 263 49 18446744073709551615 1 ) 263 49 263 50 18446744073709551615 1 { 263 51 263 52 18446744073709551615 12 eapol_status 264 13 264 25 4 14 current_status 264 26 264 40 144 1 = 264 41 264 42 18446744073709551615 17 packet_eapol_info 264 43 264 60 131 2 -> 264 60 264 62 18446744073709551615 6 status 264 62 264 68 53 1 ; 264 68 264 69 18446744073709551615 2 if 265 13 265 15 18446744073709551615 1 ( 265 15 265 16 18446744073709551615 14 current_status 265 16 265 30 144 2 == 265 31 265 33 18446744073709551615 19 WAITING_EAPOL_KEY_2 265 34 265 53 0 2 && 265 54 265 56 18446744073709551615 16 packet_direction 265 57 265 73 129 2 == 265 74 265 76 18446744073709551615 1 1 265 77 265 78 18446744073709551615 2 && 265 79 265 81 18446744073709551615 1 ( 265 82 265 83 18446744073709551615 10 hdr_802_1x 265 83 265 93 140 2 -> 265 93 265 95 18446744073709551615 15 key_information 265 95 265 110 33 1 [ 265 110 265 111 18446744073709551615 1 0 265 111 265 112 18446744073709551615 1 ] 265 112 265 113 18446744073709551615 1 & 265 114 265 115 18446744073709551615 1 ( 265 116 265 117 18446744073709551615 1 1 265 117 265 118 18446744073709551615 2 << 265 119 265 121 18446744073709551615 1 8 265 122 265 123 18446744073709551615 1 ) 265 123 265 124 18446744073709551615 1 ) 265 124 265 125 18446744073709551615 2 && 265 126 265 128 18446744073709551615 1 ( 265 129 265 130 18446744073709551615 10 hdr_802_1x 265 130 265 140 140 2 -> 265 140 265 142 18446744073709551615 15 key_information 265 142 265 157 33 1 [ 265 157 265 158 18446744073709551615 1 0 265 158 265 159 18446744073709551615 1 ] 265 159 265 160 18446744073709551615 1 & 265 161 265 162 18446744073709551615 1 ( 265 163 265 164 18446744073709551615 1 1 265 164 265 165 18446744073709551615 2 << 265 166 265 168 18446744073709551615 1 6 265 169 265 170 18446744073709551615 1 ) 265 170 265 171 18446744073709551615 1 ) 265 171 265 172 18446744073709551615 2 == 265 173 265 175 18446744073709551615 1 0 265 176 265 177 18446744073709551615 2 && 265 178 265 180 18446744073709551615 1 ( 265 181 265 182 18446744073709551615 10 hdr_802_1x 265 182 265 192 140 2 -> 265 192 265 194 18446744073709551615 15 key_information 265 194 265 209 33 1 [ 265 209 265 210 18446744073709551615 1 0 265 210 265 211 18446744073709551615 1 ] 265 211 265 212 18446744073709551615 1 & 265 213 265 214 18446744073709551615 1 ( 265 215 265 216 18446744073709551615 1 1 265 216 265 217 18446744073709551615 2 << 265 218 265 220 18446744073709551615 1 7 265 221 265 222 18446744073709551615 1 ) 265 222 265 223 18446744073709551615 1 ) 265 223 265 224 18446744073709551615 2 == 265 225 265 227 18446744073709551615 1 0 265 228 265 229 18446744073709551615 1 ) 265 229 265 230 18446744073709551615 1 { 265 231 265 232 18446744073709551615 17 // msg 2 or msg 4 265 233 265 250 18446744073709551615 6 struct 266 15 266 21 18446744073709551615 3 ptk 266 22 266 25 42 1 * 266 26 266 27 18446744073709551615 3 PTK 266 27 266 30 145 1 = 266 31 266 32 18446744073709551615 1 ( 266 33 266 34 18446744073709551615 6 struct 266 34 266 40 18446744073709551615 3 ptk 266 41 266 44 42 1 * 266 45 266 46 18446744073709551615 1 ) 266 46 266 47 18446744073709551615 6 PRF512 266 47 266 53 64 1 ( 266 53 266 54 64 3 psk 266 54 266 57 55 1 , 266 57 266 58 64 1 A 266 59 266 60 64 1 , 266 60 266 61 64 6 strlen 266 62 266 68 85 1 ( 266 68 266 69 85 1 A 266 69 266 70 85 1 ) 266 70 266 71 85 1 , 266 71 266 72 64 14 ap_mac_address 266 73 266 87 54 1 , 266 87 266 88 64 11 sta_address 266 89 266 100 132 1 , 266 100 266 101 64 17 packet_eapol_info 266 102 266 119 131 2 -> 266 119 266 121 18446744073709551615 6 ANonce 266 121 266 127 50 1 , 266 127 266 128 64 10 hdr_802_1x 266 129 266 139 140 2 -> 266 139 266 141 18446744073709551615 13 wpa_key_nonce 266 141 266 154 36 1 ) 266 154 266 155 64 1 ; 266 155 266 156 18446744073709551615 1 } 267 13 267 14 18446744073709551615 4 else 268 13 268 17 18446744073709551615 2 if 268 18 268 20 18446744073709551615 1 ( 268 20 268 21 18446744073709551615 16 packet_direction 268 21 268 37 129 2 == 268 38 268 40 18446744073709551615 1 1 268 41 268 42 18446744073709551615 1 ) 268 42 268 43 18446744073709551615 1 { 268 44 268 45 18446744073709551615 17 // msg 2 or msg 4 268 46 268 63 18446744073709551615 1 } 269 13 269 14 18446744073709551615 4 else 270 13 270 17 18446744073709551615 2 if 270 18 270 20 18446744073709551615 1 ( 270 20 270 21 18446744073709551615 16 packet_direction 270 21 270 37 129 2 == 270 38 270 40 18446744073709551615 1 2 270 41 270 42 18446744073709551615 1 ) 270 42 270 43 18446744073709551615 1 { 270 44 270 45 18446744073709551615 17 // msg 1 or msg 3 270 46 270 63 18446744073709551615 1 } 271 13 271 14 18446744073709551615 4 else 272 13 272 17 18446744073709551615 2 if 272 18 272 20 18446744073709551615 1 ( 272 20 272 21 18446744073709551615 16 packet_direction 272 21 272 37 129 2 == 272 38 272 40 18446744073709551615 1 2 272 41 272 42 18446744073709551615 1 ) 272 42 272 43 18446744073709551615 1 { 272 44 272 45 18446744073709551615 17 // msg 1 or msg 3 272 46 272 63 18446744073709551615 1 } 273 13 273 14 18446744073709551615 1 } 274 11 274 12 18446744073709551615 1 } 275 9 275 10 18446744073709551615 1 } 276 7 276 8 18446744073709551615 1 } 277 5 277 6 18446744073709551615 1 } 278 3 278 4 18446744073709551615 6 return 279 3 279 9 18446744073709551615 1 1 279 10 279 11 18446744073709551615 1 ; 279 11 279 12 18446744073709551615 1 } 280 1 280 2 18446744073709551615 4 char 283 1 283 5 18446744073709551615 1 * 283 6 283 7 63 12 mac_toString 283 7 283 19 63 1 ( 283 19 283 20 63 6 u_char 283 20 283 26 6 1 * 283 27 283 28 18446744073709551615 4 addr 283 28 283 32 146 1 ) 283 32 283 33 63 1 { 283 34 283 35 18446744073709551615 6 static 284 3 284 9 18446744073709551615 4 char 284 10 284 14 18446744073709551615 3 str 284 15 284 18 147 1 [ 284 18 284 19 18446744073709551615 2 18 284 19 284 21 18446744073709551615 1 ] 284 21 284 22 18446744073709551615 1 ; 284 22 284 23 18446744073709551615 2 if 285 3 285 5 18446744073709551615 1 ( 285 5 285 6 18446744073709551615 4 addr 285 6 285 10 146 2 == 285 11 285 13 18446744073709551615 4 NULL 285 14 285 18 18446744073709551615 1 ) 285 18 285 19 18446744073709551615 6 return 286 5 286 11 18446744073709551615 2 "" 286 12 286 14 18446744073709551615 1 ; 286 14 286 15 18446744073709551615 8 snprintf 287 3 287 11 148 1 ( 287 11 287 12 148 3 str 287 12 287 15 147 1 , 287 15 287 16 148 6 sizeof 287 17 287 23 18446744073709551615 1 ( 287 23 287 24 18446744073709551615 3 str 287 24 287 27 147 1 ) 287 27 287 28 18446744073709551615 1 , 287 28 287 29 148 31 "%02x:%02x:%02x:%02x:%02x:%02x" 287 30 287 61 18446744073709551615 1 , 287 61 287 62 148 4 addr 288 12 288 16 146 1 [ 288 16 288 17 18446744073709551615 1 0 288 17 288 18 18446744073709551615 1 ] 288 18 288 19 18446744073709551615 1 , 288 19 288 20 148 4 addr 288 21 288 25 146 1 [ 288 25 288 26 18446744073709551615 1 1 288 26 288 27 18446744073709551615 1 ] 288 27 288 28 18446744073709551615 1 , 288 28 288 29 148 4 addr 288 30 288 34 146 1 [ 288 34 288 35 18446744073709551615 1 2 288 35 288 36 18446744073709551615 1 ] 288 36 288 37 18446744073709551615 1 , 288 37 288 38 148 4 addr 288 39 288 43 146 1 [ 288 43 288 44 18446744073709551615 1 3 288 44 288 45 18446744073709551615 1 ] 288 45 288 46 18446744073709551615 1 , 288 46 288 47 148 4 addr 288 48 288 52 146 1 [ 288 52 288 53 18446744073709551615 1 4 288 53 288 54 18446744073709551615 1 ] 288 54 288 55 18446744073709551615 1 , 288 55 288 56 148 4 addr 288 57 288 61 146 1 [ 288 61 288 62 18446744073709551615 1 5 288 62 288 63 18446744073709551615 1 ] 288 63 288 64 18446744073709551615 1 ) 288 64 288 65 148 1 ; 288 65 288 66 18446744073709551615 6 return 289 3 289 9 18446744073709551615 3 str 289 10 289 13 147 1 ; 289 13 289 14 18446744073709551615 1 } 290 1 290 2 18446744073709551615 6 u_char 292 1 292 7 6 1 * 292 8 292 9 64 6 PRF512 292 9 292 15 64 1 ( 292 15 292 16 64 6 u_char 292 16 292 22 6 1 * 292 23 292 24 18446744073709551615 3 PMK 292 24 292 27 149 1 , 292 27 292 28 64 6 u_char 292 29 292 35 6 1 * 292 36 292 37 18446744073709551615 1 A 292 37 292 38 64 1 , 292 38 292 39 64 6 size_t 292 40 292 46 64 4 lenA 292 47 292 51 64 1 , 292 51 292 52 64 6 u_char 292 53 292 59 64 1 * 292 60 292 61 64 7 AP_addr 292 61 292 68 64 1 , 292 68 292 69 64 6 u_char 292 70 292 76 64 1 * 292 77 292 78 64 8 STA_addr 292 78 292 86 64 1 , 292 86 292 87 64 6 u_char 292 88 292 94 64 1 * 292 95 292 96 64 6 ANonce 292 96 292 102 64 1 , 292 102 292 103 64 6 u_char 292 104 292 110 64 1 * 292 111 292 112 64 6 SNonce 292 112 292 118 64 1 ) 292 118 292 119 64 1 { 292 120 292 121 18446744073709551615 6 static 293 3 293 9 18446744073709551615 6 u_char 293 10 293 16 6 3 ptk 293 17 293 20 150 1 [ 293 20 293 21 18446744073709551615 2 64 293 21 293 23 18446744073709551615 1 ] 293 23 293 24 18446744073709551615 1 ; 293 24 293 25 18446744073709551615 6 u_char 294 3 294 9 6 1 B 294 10 294 11 151 1 [ 294 11 294 12 18446744073709551615 2 76 294 12 294 14 18446744073709551615 1 ] 294 14 294 15 18446744073709551615 1 ; 294 15 294 16 18446744073709551615 3 int 295 3 295 6 18446744073709551615 1 i 295 7 295 8 152 1 = 295 9 295 10 18446744073709551615 1 0 295 11 295 12 18446744073709551615 1 ; 295 12 295 13 18446744073709551615 6 u_char 296 3 296 9 6 1 c 296 10 296 11 153 1 = 296 12 296 13 18446744073709551615 4 0x00 296 14 296 18 18446744073709551615 1 ; 296 18 296 19 18446744073709551615 6 u_char 297 3 297 9 154 3 arg 297 10 297 13 154 1 [ 297 13 297 14 18446744073709551615 2 76 297 14 297 16 18446744073709551615 1 + 297 17 297 18 18446744073709551615 4 lenA 297 19 297 23 18446744073709551615 1 + 297 24 297 25 18446744073709551615 1 2 297 26 297 27 18446744073709551615 1 ] 297 27 297 28 18446744073709551615 1 ; 297 28 297 29 18446744073709551615 2 if 299 3 299 5 18446744073709551615 1 ( 299 5 299 6 18446744073709551615 6 strcmp 299 6 299 12 18446744073709551615 1 ( 299 12 299 13 18446744073709551615 7 AP_addr 299 13 299 20 18446744073709551615 1 , 299 20 299 21 18446744073709551615 8 STA_addr 299 22 299 30 18446744073709551615 1 ) 299 30 299 31 18446744073709551615 1 < 299 32 299 33 18446744073709551615 1 0 299 34 299 35 18446744073709551615 1 ) 299 35 299 36 18446744073709551615 1 { 299 37 299 38 18446744073709551615 6 memcpy 300 5 300 11 18446744073709551615 1 ( 300 11 300 12 18446744073709551615 1 B 300 12 300 13 18446744073709551615 1 , 300 13 300 14 18446744073709551615 7 AP_addr 300 15 300 22 18446744073709551615 1 , 300 22 300 23 18446744073709551615 12 MAC_ADDR_LEN 300 24 300 36 18446744073709551615 1 ) 300 36 300 37 18446744073709551615 1 ; 300 37 300 38 18446744073709551615 6 memcpy 301 5 301 11 18446744073709551615 1 ( 301 11 301 12 18446744073709551615 1 B 301 12 301 13 18446744073709551615 1 + 301 14 301 15 18446744073709551615 12 MAC_ADDR_LEN 301 16 301 28 18446744073709551615 1 , 301 28 301 29 18446744073709551615 8 STA_addr 301 30 301 38 18446744073709551615 1 , 301 38 301 39 18446744073709551615 12 MAC_ADDR_LEN 301 40 301 52 18446744073709551615 1 ) 301 52 301 53 18446744073709551615 1 ; 301 53 301 54 18446744073709551615 1 } 302 3 302 4 18446744073709551615 4 else 303 3 303 7 18446744073709551615 1 { 303 8 303 9 18446744073709551615 6 memcpy 304 5 304 11 18446744073709551615 1 ( 304 11 304 12 18446744073709551615 1 B 304 12 304 13 18446744073709551615 1 , 304 13 304 14 18446744073709551615 8 STA_addr 304 15 304 23 18446744073709551615 1 , 304 23 304 24 18446744073709551615 12 MAC_ADDR_LEN 304 25 304 37 18446744073709551615 1 ) 304 37 304 38 18446744073709551615 1 ; 304 38 304 39 18446744073709551615 6 memcpy 305 5 305 11 18446744073709551615 1 ( 305 11 305 12 18446744073709551615 1 B 305 12 305 13 18446744073709551615 1 + 305 14 305 15 18446744073709551615 12 MAC_ADDR_LEN 305 16 305 28 18446744073709551615 1 , 305 28 305 29 18446744073709551615 7 AP_addr 305 30 305 37 18446744073709551615 1 , 305 37 305 38 18446744073709551615 12 MAC_ADDR_LEN 305 39 305 51 18446744073709551615 1 ) 305 51 305 52 18446744073709551615 1 ; 305 52 305 53 18446744073709551615 1 } 306 3 306 4 18446744073709551615 2 if 307 3 307 5 18446744073709551615 1 ( 307 5 307 6 18446744073709551615 6 strcmp 307 6 307 12 18446744073709551615 1 ( 307 12 307 13 18446744073709551615 6 ANonce 307 13 307 19 18446744073709551615 1 , 307 19 307 20 18446744073709551615 6 SNonce 307 21 307 27 18446744073709551615 1 ) 307 27 307 28 18446744073709551615 1 < 307 29 307 30 18446744073709551615 1 0 307 31 307 32 18446744073709551615 1 ) 307 32 307 33 18446744073709551615 1 { 307 34 307 35 18446744073709551615 6 memcpy 308 5 308 11 18446744073709551615 1 ( 308 11 308 12 18446744073709551615 1 B 308 12 308 13 18446744073709551615 1 + 308 14 308 15 18446744073709551615 1 2 308 16 308 17 18446744073709551615 1 * 308 18 308 19 18446744073709551615 12 MAC_ADDR_LEN 308 20 308 32 18446744073709551615 1 , 308 32 308 33 18446744073709551615 6 ANonce 308 34 308 40 18446744073709551615 1 , 308 40 308 41 18446744073709551615 2 32 308 42 308 44 18446744073709551615 1 ) 308 44 308 45 18446744073709551615 1 ; 308 45 308 46 18446744073709551615 6 memcpy 309 5 309 11 18446744073709551615 1 ( 309 11 309 12 18446744073709551615 1 B 309 12 309 13 18446744073709551615 1 + 309 14 309 15 18446744073709551615 1 2 309 16 309 17 18446744073709551615 1 * 309 18 309 19 18446744073709551615 12 MAC_ADDR_LEN 309 20 309 32 18446744073709551615 1 + 309 33 309 34 18446744073709551615 2 32 309 35 309 37 18446744073709551615 1 , 309 37 309 38 18446744073709551615 6 SNonce 309 39 309 45 18446744073709551615 1 , 309 45 309 46 18446744073709551615 2 32 309 47 309 49 18446744073709551615 1 ) 309 49 309 50 18446744073709551615 1 ; 309 50 309 51 18446744073709551615 1 } 310 3 310 4 18446744073709551615 4 else 311 3 311 7 18446744073709551615 1 { 311 8 311 9 18446744073709551615 6 memcpy 312 5 312 11 18446744073709551615 1 ( 312 11 312 12 18446744073709551615 1 B 312 12 312 13 18446744073709551615 1 + 312 14 312 15 18446744073709551615 1 2 312 16 312 17 18446744073709551615 1 * 312 18 312 19 18446744073709551615 12 MAC_ADDR_LEN 312 20 312 32 18446744073709551615 1 , 312 32 312 33 18446744073709551615 6 SNonce 312 34 312 40 18446744073709551615 1 , 312 40 312 41 18446744073709551615 2 32 312 42 312 44 18446744073709551615 1 ) 312 44 312 45 18446744073709551615 1 ; 312 45 312 46 18446744073709551615 6 memcpy 313 5 313 11 18446744073709551615 1 ( 313 11 313 12 18446744073709551615 1 B 313 12 313 13 18446744073709551615 1 + 313 14 313 15 18446744073709551615 1 2 313 16 313 17 18446744073709551615 1 * 313 18 313 19 18446744073709551615 12 MAC_ADDR_LEN 313 20 313 32 18446744073709551615 1 + 313 33 313 34 18446744073709551615 2 32 313 35 313 37 18446744073709551615 1 , 313 37 313 38 18446744073709551615 6 ANonce 313 39 313 45 18446744073709551615 1 , 313 45 313 46 18446744073709551615 2 32 313 47 313 49 18446744073709551615 1 ) 313 49 313 50 18446744073709551615 1 ; 313 50 313 51 18446744073709551615 1 } 314 3 314 4 18446744073709551615 6 memcpy 316 3 316 9 18446744073709551615 1 ( 316 9 316 10 18446744073709551615 3 arg 316 10 316 13 18446744073709551615 1 , 316 13 316 14 18446744073709551615 1 A 316 15 316 16 18446744073709551615 1 , 316 16 316 17 18446744073709551615 4 lenA 316 18 316 22 18446744073709551615 1 ) 316 22 316 23 18446744073709551615 1 ; 316 23 316 24 18446744073709551615 3 arg 317 3 317 6 18446744073709551615 1 [ 317 6 317 7 18446744073709551615 4 lenA 317 7 317 11 18446744073709551615 1 ] 317 11 317 12 18446744073709551615 1 = 317 13 317 14 18446744073709551615 1 c 317 15 317 16 18446744073709551615 1 ; 317 16 317 17 18446744073709551615 6 memcpy 318 3 318 9 18446744073709551615 1 ( 318 9 318 10 18446744073709551615 3 arg 318 10 318 13 18446744073709551615 1 + 318 14 318 15 18446744073709551615 4 lenA 318 16 318 20 18446744073709551615 1 + 318 21 318 22 18446744073709551615 1 1 318 23 318 24 18446744073709551615 1 , 318 24 318 25 18446744073709551615 1 B 318 26 318 27 18446744073709551615 1 , 318 27 318 28 18446744073709551615 2 76 318 29 318 31 18446744073709551615 1 ) 318 31 318 32 18446744073709551615 1 ; 318 32 318 33 18446744073709551615 6 printf 319 3 319 9 99 1 ( 319 9 319 10 99 4 "\n" 319 10 319 14 18446744073709551615 1 ) 319 14 319 15 99 1 ; 319 15 319 16 18446744073709551615 6 u_char 320 3 320 9 6 13 hmac_sha1_res 320 10 320 23 155 1 [ 320 23 320 24 18446744073709551615 2 20 320 24 320 26 18446744073709551615 1 ] 320 26 320 27 18446744073709551615 1 ; 320 27 320 28 18446744073709551615 6 u_char 321 3 321 9 6 1 R 321 10 321 11 156 1 [ 321 11 321 12 18446744073709551615 1 ( 321 12 321 13 18446744073709551615 1 ( 321 13 321 14 18446744073709551615 3 512 321 14 321 17 18446744073709551615 1 + 321 18 321 19 18446744073709551615 3 159 321 20 321 23 18446744073709551615 1 ) 321 23 321 24 18446744073709551615 1 / 321 25 321 26 18446744073709551615 3 160 321 27 321 30 18446744073709551615 1 ) 321 30 321 31 18446744073709551615 1 * 321 32 321 33 18446744073709551615 2 20 321 34 321 36 18446744073709551615 1 ] 321 36 321 37 18446744073709551615 1 ; 321 37 321 38 18446744073709551615 5 u_int 322 3 322 8 157 10 sha_length 322 9 322 19 158 1 = 322 20 322 21 18446744073709551615 2 20 322 22 322 24 18446744073709551615 1 ; 322 24 322 25 18446744073709551615 5 while 323 3 323 8 18446744073709551615 1 ( 323 8 323 9 18446744073709551615 1 i 323 9 323 10 152 2 <= 323 11 323 13 18446744073709551615 1 ( 323 14 323 15 18446744073709551615 1 ( 323 15 323 16 18446744073709551615 3 512 323 16 323 19 18446744073709551615 1 + 323 20 323 21 18446744073709551615 3 159 323 22 323 25 18446744073709551615 1 ) 323 25 323 26 18446744073709551615 1 / 323 27 323 28 18446744073709551615 3 160 323 29 323 32 18446744073709551615 1 ) 323 32 323 33 18446744073709551615 1 ) 323 33 323 34 18446744073709551615 1 { 323 35 323 36 18446744073709551615 3 arg 324 5 324 8 18446744073709551615 1 [ 324 8 324 9 18446744073709551615 2 76 324 9 324 11 18446744073709551615 1 + 324 12 324 13 18446744073709551615 4 lenA 324 14 324 18 18446744073709551615 1 + 324 19 324 20 18446744073709551615 1 1 324 21 324 22 18446744073709551615 1 ] 324 22 324 23 18446744073709551615 1 = 324 24 324 25 18446744073709551615 4 0x00 324 26 324 30 18446744073709551615 1 + 324 31 324 32 18446744073709551615 1 i 324 33 324 34 18446744073709551615 1 ; 324 34 324 35 18446744073709551615 4 HMAC 325 5 325 9 18446744073709551615 1 ( 325 9 325 10 18446744073709551615 8 EVP_sha1 325 10 325 18 18446744073709551615 1 ( 325 18 325 19 18446744073709551615 1 ) 325 19 325 20 18446744073709551615 1 , 325 20 325 21 18446744073709551615 3 PMK 325 22 325 25 18446744073709551615 1 , 325 25 325 26 18446744073709551615 2 32 325 27 325 29 18446744073709551615 1 , 325 29 325 30 18446744073709551615 3 arg 325 31 325 34 18446744073709551615 1 , 325 34 325 35 18446744073709551615 2 76 325 36 325 38 18446744073709551615 1 + 325 39 325 40 18446744073709551615 4 lenA 325 41 325 45 18446744073709551615 1 + 325 46 325 47 18446744073709551615 1 2 325 48 325 49 18446744073709551615 1 , 325 49 325 50 18446744073709551615 13 hmac_sha1_res 325 51 325 64 18446744073709551615 1 , 325 64 325 65 18446744073709551615 1 & 325 66 325 67 18446744073709551615 10 sha_length 325 67 325 77 18446744073709551615 1 ) 325 77 325 78 18446744073709551615 1 ; 325 78 325 79 18446744073709551615 6 memcpy 326 5 326 11 119 1 ( 326 11 326 12 119 1 R 326 12 326 13 156 1 + 326 14 326 15 18446744073709551615 1 i 326 16 326 17 152 1 * 326 18 326 19 18446744073709551615 2 20 326 20 326 22 18446744073709551615 1 , 326 22 326 23 119 13 hmac_sha1_res 326 24 326 37 155 1 , 326 37 326 38 119 2 20 326 39 326 41 18446744073709551615 1 ) 326 41 326 42 119 1 ; 326 42 326 43 18446744073709551615 1 i 327 5 327 6 152 2 ++ 327 6 327 8 18446744073709551615 1 ; 327 8 327 9 18446744073709551615 1 } 328 3 328 4 18446744073709551615 6 memcpy 329 3 329 9 119 1 ( 329 9 329 10 119 3 ptk 329 10 329 13 150 1 , 329 13 329 14 119 1 R 329 15 329 16 156 1 , 329 16 329 17 119 2 64 329 18 329 20 18446744073709551615 1 ) 329 20 329 21 119 1 ; 329 21 329 22 18446744073709551615 6 return 330 3 330 9 18446744073709551615 3 ptk 330 10 330 13 150 1 ; 330 13 330 14 18446744073709551615 1 } 331 1 331 2 18446744073709551615 6 u_char 333 1 333 7 6 1 * 333 8 333 9 66 15 hexstr_to_bytes 333 9 333 24 66 1 ( 333 24 333 25 66 6 u_char 333 25 333 31 6 1 * 333 32 333 33 18446744073709551615 6 hexstr 333 33 333 39 159 1 ) 333 39 333 40 66 1 { 333 41 333 42 18446744073709551615 6 size_t 334 3 334 9 65 3 len 334 10 334 13 160 1 = 334 14 334 15 18446744073709551615 6 strlen 334 16 334 22 85 1 ( 334 22 334 23 85 6 hexstr 334 23 334 29 159 1 ) 334 29 334 30 85 1 ; 334 30 334 31 18446744073709551615 2 if 335 3 335 5 18446744073709551615 1 ( 335 5 335 6 18446744073709551615 3 len 335 6 335 9 160 1 % 335 10 335 11 18446744073709551615 1 2 335 12 335 13 18446744073709551615 2 != 335 14 335 16 18446744073709551615 1 0 335 17 335 18 18446744073709551615 1 ) 335 18 335 19 18446744073709551615 6 return 336 5 336 11 18446744073709551615 4 NULL 336 12 336 16 18446744073709551615 1 ; 336 16 336 17 18446744073709551615 6 size_t 337 3 337 9 65 9 final_len 337 10 337 19 161 1 = 337 20 337 21 18446744073709551615 3 len 337 22 337 25 160 1 / 337 26 337 27 18446744073709551615 1 2 337 28 337 29 18446744073709551615 1 ; 337 29 337 30 18446744073709551615 8 unsigned 338 3 338 11 18446744073709551615 4 char 338 12 338 16 18446744073709551615 1 * 338 17 338 18 18446744073709551615 4 chrs 338 18 338 22 162 1 = 338 23 338 24 18446744073709551615 1 ( 338 25 338 26 18446744073709551615 8 unsigned 338 26 338 34 18446744073709551615 4 char 338 35 338 39 18446744073709551615 1 * 338 40 338 41 18446744073709551615 1 ) 338 41 338 42 18446744073709551615 6 malloc 338 42 338 48 95 1 ( 338 48 338 49 95 1 ( 338 49 338 50 18446744073709551615 9 final_len 338 50 338 59 161 1 ) 338 59 338 60 18446744073709551615 1 * 338 61 338 62 18446744073709551615 6 sizeof 338 63 338 69 18446744073709551615 1 ( 338 69 338 70 18446744073709551615 1 * 338 70 338 71 18446744073709551615 4 chrs 338 71 338 75 162 1 ) 338 75 338 76 18446744073709551615 1 ) 338 76 338 77 95 1 ; 338 77 338 78 18446744073709551615 3 for 339 3 339 6 18446744073709551615 1 ( 339 6 339 7 18446744073709551615 6 size_t 339 7 339 13 65 1 i 339 14 339 15 163 1 = 339 16 339 17 18446744073709551615 1 0 339 18 339 19 18446744073709551615 1 , 339 19 339 20 18446744073709551615 1 j 339 21 339 22 164 1 = 339 23 339 24 18446744073709551615 1 0 339 25 339 26 18446744073709551615 1 ; 339 26 339 27 18446744073709551615 1 j 339 28 339 29 164 1 < 339 30 339 31 18446744073709551615 9 final_len 339 32 339 41 161 1 ; 339 41 339 42 18446744073709551615 1 i 339 43 339 44 163 2 += 339 45 339 47 18446744073709551615 1 2 339 48 339 49 18446744073709551615 1 , 339 49 339 50 18446744073709551615 1 j 339 51 339 52 164 2 ++ 339 52 339 54 18446744073709551615 1 ) 339 54 339 55 18446744073709551615 4 chrs 340 5 340 9 162 1 [ 340 9 340 10 18446744073709551615 1 j 340 10 340 11 164 1 ] 340 11 340 12 18446744073709551615 1 = 340 13 340 14 18446744073709551615 1 ( 340 15 340 16 18446744073709551615 6 hexstr 340 16 340 22 159 1 [ 340 22 340 23 18446744073709551615 1 i 340 23 340 24 163 1 ] 340 24 340 25 18446744073709551615 1 % 340 26 340 27 18446744073709551615 2 32 340 28 340 30 18446744073709551615 1 + 340 31 340 32 18446744073709551615 1 9 340 33 340 34 18446744073709551615 1 ) 340 34 340 35 18446744073709551615 1 % 340 36 340 37 18446744073709551615 2 25 340 38 340 40 18446744073709551615 1 * 340 41 340 42 18446744073709551615 2 16 340 43 340 45 18446744073709551615 1 + 340 46 340 47 18446744073709551615 1 ( 340 48 340 49 18446744073709551615 6 hexstr 340 49 340 55 159 1 [ 340 55 340 56 18446744073709551615 1 i 340 56 340 57 163 1 + 340 58 340 59 18446744073709551615 1 1 340 60 340 61 18446744073709551615 1 ] 340 61 340 62 18446744073709551615 1 % 340 63 340 64 18446744073709551615 2 32 340 65 340 67 18446744073709551615 1 + 340 68 340 69 18446744073709551615 1 9 340 70 340 71 18446744073709551615 1 ) 340 71 340 72 18446744073709551615 1 % 340 73 340 74 18446744073709551615 2 25 340 75 340 77 18446744073709551615 1 ; 340 77 340 78 18446744073709551615 6 return 341 3 341 9 18446744073709551615 4 chrs 341 10 341 14 162 1 ; 341 14 341 15 18446744073709551615 1 } 342 1 342 2 18446744073709551615 0 0 165 0 0 0 7 0 0 1 3 0 20 WAITING_EAPOL_KEY_2: 7 1 3 0 20 WAITING_EAPOL_KEY_3: 7 1 3 0 20 WAITING_EAPOL_KEY_4: 7 1 3 0 8 SUCCESS: 20 1 3 0 12 eapol_status 2 1 3 0 12 sniff_802_11 20 1 3 0 6 u_char 6 1 3 0 26 frame_control:sniff_802_11 6 1 3 0 24 duration_id:sniff_802_11 6 1 3 0 18 addr1:sniff_802_11 6 1 3 0 18 addr2:sniff_802_11 6 1 3 0 18 addr3:sniff_802_11 6 1 3 0 29 sequence_control:sniff_802_11 6 1 3 0 24 qos_control:sniff_802_11 2 1 3 0 19 sniff_802_11_beacon 6 1 3 0 33 frame_control:sniff_802_11_beacon 6 1 3 0 31 duration_id:sniff_802_11_beacon 6 1 3 0 25 addr1:sniff_802_11_beacon 6 1 3 0 25 addr2:sniff_802_11_beacon 6 1 3 0 25 addr3:sniff_802_11_beacon 6 1 3 0 36 sequence_control:sniff_802_11_beacon 2 1 3 0 9 sniff_LLC 6 1 3 0 14 dsap:sniff_LLC 6 1 3 0 14 ssap:sniff_LLC 6 1 3 0 23 control_field:sniff_LLC 2 1 3 0 10 sniff_SNAP 6 1 3 0 19 org_code:sniff_SNAP 6 1 3 0 15 type:sniff_SNAP 2 1 3 0 17 sniff_802_1x_auth 6 1 3 0 25 version:sniff_802_1x_auth 6 1 3 0 22 type:sniff_802_1x_auth 6 1 3 0 24 length:sniff_802_1x_auth 6 1 3 0 37 key_descriptor_type:sniff_802_1x_auth 6 1 3 0 33 key_information:sniff_802_1x_auth 6 1 3 0 28 key_length:sniff_802_1x_auth 6 1 3 0 32 replay_counter:sniff_802_1x_auth 6 1 3 0 31 wpa_key_nonce:sniff_802_1x_auth 6 1 3 0 28 wpa_key_IV:sniff_802_1x_auth 6 1 3 0 29 wpa_key_RSC:sniff_802_1x_auth 6 1 3 0 28 wpa_key_ID:sniff_802_1x_auth 6 1 3 0 29 wpa_key_MIC:sniff_802_1x_auth 6 1 3 0 37 wpa_key_data_length:sniff_802_1x_auth 2 1 3 0 3 ptk 6 1 3 0 7 kck:ptk 6 1 3 0 7 kek:ptk 6 1 3 0 6 tk:ptk 6 1 3 0 7 txk:ptk 6 1 3 0 7 trk:ptk 2 1 3 0 10 eapol_info 6 1 3 0 26 sta_mac_address:eapol_info 6 1 3 0 17 ANonce:eapol_info 6 1 3 0 17 SNonce:eapol_info 6 1 3 0 14 PTK:eapol_info 6 1 3 0 17 status:eapol_info 9 1 3 0 14 ap_mac_address 9 1 3 0 3 psk 9 1 3 0 4 ssid 20 1 3 0 5 map_t 9 1 3 0 3 map 8 1 3 0 14 process_beacon 2 1 3 0 11 pcap_pkthdr 8 1 3 0 13 process_eapol 8 1 3 0 14 process_packet 8 1 3 0 12 mac_toString 8 1 3 0 6 PRF512 20 1 3 0 6 size_t 8 1 3 0 15 hexstr_to_bytes 8 1 3 0 4 main 10 1 3 0 56 98:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 56 98:26:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_new 9 1 3 0 56 101:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 103:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 104:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 105:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 106:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 107:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 2 1 3 0 11 bpf_program 9 1 3 0 57 108:22:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 6 pcap_t 9 1 3 0 57 109:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 110:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 111:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 112:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 20 fastpbkdf2_hmac_sha1 8 1 3 0 6 strlen 9 1 3 0 57 117:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 120:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 121:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 122:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 123:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 124:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 126:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 128:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 129:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 malloc 8 1 3 0 4 HMAC 8 1 3 0 7 EVP_md5 9 1 3 0 57 131:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 printf 20 1 3 0 11 bpf_u_int32 9 1 3 0 57 136:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 137:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 14 pcap_lookupnet 8 1 3 0 7 fprintf 8 1 3 0 14 pcap_open_live 8 1 3 0 12 pcap_compile 8 1 3 0 11 pcap_geterr 8 1 3 0 14 pcap_setfilter 8 1 3 0 12 pcap_next_ex 8 1 3 0 8 asprintf 9 1 3 0 56 176:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 13 pcap_freecode 8 1 3 0 10 pcap_close 10 1 3 0 57 192:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 192:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 193:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 195:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 196:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memcpy 8 1 3 0 6 strcmp 10 1 3 0 57 206:48:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 206:70:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 207:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 209:35:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 213:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 213:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 214:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 216:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 217:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 218:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 219:22:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 221:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_get 6 1 3 0 18 caplen:pcap_pkthdr 9 1 3 0 57 233:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 243:31:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 246:34:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 248:16:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memcmp 9 1 3 0 57 250:43:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 252:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 256:36:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_put 9 1 3 0 57 264:26:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 266:27:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 283:28:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 284:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 8 snprintf 10 1 3 0 57 292:24:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 293:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 294:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 295:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 296:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 297:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 320:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 321:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 5 u_int 9 1 3 0 56 322:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 333:33:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 334:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 337:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 338:18:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 339:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 339:21:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 0 0 3 0 0 0 56 /home/florenzi/Documenti/juci_ws/wpa_decode/fastpbkdf2.h 1509296147 53 /home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 1262964973 50 /home/florenzi/Documenti/juci_ws/wpa_decode/main.c 1517166129