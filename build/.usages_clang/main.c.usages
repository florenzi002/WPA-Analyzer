22 serialization::archive 15 0 0 0 0 43 /home/florenzi/Documenti/juci_ws/wpa_decode 49 /home/florenzi/Documenti/juci_ws/wpa_decode/build 0 0 3385 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 14 "fastpbkdf2.h" 1 10 1 24 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 11 "hashmap.h" 2 10 2 21 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 7 openssl 3 11 3 18 18446744073709551615 1 / 3 18 3 19 18446744073709551615 4 hmac 3 19 3 23 18446744073709551615 1 . 3 23 3 24 18446744073709551615 1 h 3 24 3 25 18446744073709551615 1 > 3 25 3 26 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 7 openssl 4 11 4 18 18446744073709551615 1 / 4 18 4 19 18446744073709551615 3 sha 4 19 4 22 18446744073709551615 1 . 4 22 4 23 18446744073709551615 1 h 4 23 4 24 18446744073709551615 1 > 4 24 4 25 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 4 pcap 5 11 5 15 18446744073709551615 1 . 5 15 5 16 18446744073709551615 1 h 5 16 5 17 18446744073709551615 1 > 5 17 5 18 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 1 < 6 10 6 11 18446744073709551615 5 stdio 6 11 6 16 18446744073709551615 1 . 6 16 6 17 18446744073709551615 1 h 6 17 6 18 18446744073709551615 1 > 6 18 6 19 18446744073709551615 1 # 7 1 7 2 18446744073709551615 7 include 7 2 7 9 18446744073709551615 1 < 7 10 7 11 18446744073709551615 6 stdlib 7 11 7 17 18446744073709551615 1 . 7 17 7 18 18446744073709551615 1 h 7 18 7 19 18446744073709551615 1 > 7 19 7 20 18446744073709551615 1 # 9 1 9 2 18446744073709551615 6 define 9 2 9 8 18446744073709551615 16 PRISM_HEADER_LEN 9 9 9 25 18446744073709551615 3 144 9 26 9 29 18446744073709551615 1 # 10 1 10 2 18446744073709551615 6 define 10 2 10 8 18446744073709551615 11 SSID_OFFSET 10 9 10 20 18446744073709551615 2 12 10 21 10 23 18446744073709551615 1 # 11 1 11 2 18446744073709551615 6 define 11 2 11 8 18446744073709551615 13 SIZE_ETHERNET 11 9 11 22 18446744073709551615 2 14 11 23 11 25 18446744073709551615 1 # 12 1 12 2 18446744073709551615 6 define 12 2 12 8 18446744073709551615 12 MAC_ADDR_LEN 12 9 12 21 18446744073709551615 1 6 12 22 12 23 18446744073709551615 1 # 13 1 13 2 18446744073709551615 6 define 13 2 13 8 18446744073709551615 7 LLC_LEN 13 9 13 16 18446744073709551615 1 8 13 17 13 18 18446744073709551615 1 # 14 1 14 2 18446744073709551615 6 define 14 2 14 8 18446744073709551615 16 TAKE_N_BITS_FROM 14 9 14 25 18446744073709551615 1 ( 14 25 14 26 18446744073709551615 1 b 14 26 14 27 18446744073709551615 1 , 14 27 14 28 18446744073709551615 1 p 14 29 14 30 18446744073709551615 1 , 14 30 14 31 18446744073709551615 1 n 14 32 14 33 18446744073709551615 1 ) 14 33 14 34 18446744073709551615 1 ( 14 35 14 36 18446744073709551615 1 ( 14 36 14 37 18446744073709551615 1 b 14 37 14 38 18446744073709551615 1 ) 14 38 14 39 18446744073709551615 2 >> 14 40 14 42 18446744073709551615 1 ( 14 43 14 44 18446744073709551615 1 p 14 44 14 45 18446744073709551615 1 ) 14 45 14 46 18446744073709551615 1 ) 14 46 14 47 18446744073709551615 1 & 14 48 14 49 18446744073709551615 1 ( 14 50 14 51 18446744073709551615 1 ( 14 51 14 52 18446744073709551615 1 1 14 52 14 53 18446744073709551615 2 << 14 54 14 56 18446744073709551615 1 ( 14 57 14 58 18446744073709551615 1 n 14 58 14 59 18446744073709551615 1 ) 14 59 14 60 18446744073709551615 1 ) 14 60 14 61 18446744073709551615 1 - 14 62 14 63 18446744073709551615 1 1 14 64 14 65 18446744073709551615 1 ) 14 65 14 66 18446744073709551615 1 # 15 1 15 2 18446744073709551615 6 define 15 2 15 8 18446744073709551615 13 IS_BIG_ENDIAN 15 9 15 22 18446744073709551615 1 ( 15 23 15 24 18446744073709551615 1 ! 15 24 15 25 18446744073709551615 1 * 15 25 15 26 18446744073709551615 1 ( 15 26 15 27 18446744073709551615 8 unsigned 15 27 15 35 18446744073709551615 4 char 15 36 15 40 18446744073709551615 1 * 15 41 15 42 18446744073709551615 1 ) 15 42 15 43 18446744073709551615 1 & 15 43 15 44 18446744073709551615 1 ( 15 44 15 45 18446744073709551615 8 uint16_t 15 45 15 53 18446744073709551615 1 ) 15 53 15 54 18446744073709551615 1 { 15 54 15 55 18446744073709551615 1 1 15 55 15 56 18446744073709551615 1 } 15 56 15 57 18446744073709551615 1 ) 15 57 15 58 18446744073709551615 5 const 17 1 17 6 18446744073709551615 4 char 17 7 17 11 18446744073709551615 1 A 17 12 17 13 0 1 [ 17 13 17 14 18446744073709551615 1 ] 17 14 17 15 18446744073709551615 1 = 17 16 17 17 18446744073709551615 24 "Pairwise key expansion" 17 18 17 42 18446744073709551615 1 ; 17 42 17 43 18446744073709551615 5 const 18 1 18 6 18446744073709551615 6 u_char 18 7 18 13 1 8 NULL_MIC 18 14 18 22 2 1 [ 18 22 18 23 18446744073709551615 2 16 18 23 18 25 18446744073709551615 1 ] 18 25 18 26 18446744073709551615 1 = 18 27 18 28 18446744073709551615 1 { 18 29 18 30 18446744073709551615 1 0 18 30 18 31 18446744073709551615 1 } 18 31 18 32 18446744073709551615 1 ; 18 32 18 33 18446744073709551615 7 typedef 20 1 20 8 18446744073709551615 4 enum 20 9 20 13 18446744073709551615 1 { 20 14 20 15 18446744073709551615 19 WAITING_EAPOL_KEY_2 20 16 20 35 3 1 , 20 35 20 36 18446744073709551615 19 WAITING_EAPOL_KEY_3 21 16 21 35 4 1 , 21 35 21 36 18446744073709551615 19 WAITING_EAPOL_KEY_4 22 16 22 35 5 1 , 22 35 22 36 18446744073709551615 7 SUCCESS 23 16 23 23 6 1 } 23 24 23 25 18446744073709551615 12 eapol_status 23 26 23 38 7 1 ; 23 38 23 39 18446744073709551615 23 /* 802.11 MAC header */ 25 1 25 24 18446744073709551615 6 struct 26 1 26 7 18446744073709551615 12 sniff_802_11 26 8 26 20 8 1 { 26 21 26 22 18446744073709551615 6 u_char 27 3 27 9 1 13 frame_control 27 10 27 23 9 1 [ 27 23 27 24 18446744073709551615 1 2 27 24 27 25 18446744073709551615 1 ] 27 25 27 26 18446744073709551615 1 ; 27 26 27 27 18446744073709551615 6 u_char 28 3 28 9 1 11 duration_id 28 10 28 21 10 1 [ 28 21 28 22 18446744073709551615 1 2 28 22 28 23 18446744073709551615 1 ] 28 23 28 24 18446744073709551615 1 ; 28 24 28 25 18446744073709551615 6 u_char 29 3 29 9 1 5 addr1 29 10 29 15 11 1 [ 29 15 29 16 18446744073709551615 12 MAC_ADDR_LEN 29 16 29 28 11 1 ] 29 28 29 29 18446744073709551615 1 ; 29 29 29 30 18446744073709551615 6 u_char 30 3 30 9 1 5 addr2 30 10 30 15 12 1 [ 30 15 30 16 18446744073709551615 12 MAC_ADDR_LEN 30 16 30 28 12 1 ] 30 28 30 29 18446744073709551615 1 ; 30 29 30 30 18446744073709551615 6 u_char 31 3 31 9 1 5 addr3 31 10 31 15 13 1 [ 31 15 31 16 18446744073709551615 12 MAC_ADDR_LEN 31 16 31 28 13 1 ] 31 28 31 29 18446744073709551615 1 ; 31 29 31 30 18446744073709551615 6 u_char 32 3 32 9 1 16 sequence_control 32 10 32 26 14 1 [ 32 26 32 27 18446744073709551615 1 2 32 27 32 28 18446744073709551615 1 ] 32 28 32 29 18446744073709551615 1 ; 32 29 32 30 18446744073709551615 6 u_char 33 3 33 9 1 11 qos_control 33 10 33 21 15 1 [ 33 21 33 22 18446744073709551615 1 2 33 22 33 23 18446744073709551615 1 ] 33 23 33 24 18446744073709551615 1 ; 33 24 33 25 18446744073709551615 1 } 34 1 34 2 18446744073709551615 1 ; 34 2 34 3 18446744073709551615 6 struct 36 1 36 7 18446744073709551615 19 sniff_802_11_beacon 36 8 36 27 16 1 { 36 28 36 29 18446744073709551615 6 u_char 37 3 37 9 1 13 frame_control 37 10 37 23 17 1 [ 37 23 37 24 18446744073709551615 1 2 37 24 37 25 18446744073709551615 1 ] 37 25 37 26 18446744073709551615 1 ; 37 26 37 27 18446744073709551615 6 u_char 38 3 38 9 1 11 duration_id 38 10 38 21 18 1 [ 38 21 38 22 18446744073709551615 1 2 38 22 38 23 18446744073709551615 1 ] 38 23 38 24 18446744073709551615 1 ; 38 24 38 25 18446744073709551615 6 u_char 39 3 39 9 1 5 addr1 39 10 39 15 19 1 [ 39 15 39 16 18446744073709551615 12 MAC_ADDR_LEN 39 16 39 28 19 1 ] 39 28 39 29 18446744073709551615 1 ; 39 29 39 30 18446744073709551615 6 u_char 40 3 40 9 1 5 addr2 40 10 40 15 20 1 [ 40 15 40 16 18446744073709551615 12 MAC_ADDR_LEN 40 16 40 28 20 1 ] 40 28 40 29 18446744073709551615 1 ; 40 29 40 30 18446744073709551615 6 u_char 41 3 41 9 1 5 addr3 41 10 41 15 21 1 [ 41 15 41 16 18446744073709551615 12 MAC_ADDR_LEN 41 16 41 28 21 1 ] 41 28 41 29 18446744073709551615 1 ; 41 29 41 30 18446744073709551615 6 u_char 42 3 42 9 1 16 sequence_control 42 10 42 26 22 1 [ 42 26 42 27 18446744073709551615 1 2 42 27 42 28 18446744073709551615 1 ] 42 28 42 29 18446744073709551615 1 ; 42 29 42 30 18446744073709551615 1 } 43 1 43 2 18446744073709551615 1 ; 43 2 43 3 18446744073709551615 6 struct 45 1 45 7 18446744073709551615 9 sniff_LLC 45 8 45 17 23 1 { 45 18 45 19 18446744073709551615 6 u_char 46 3 46 9 1 4 dsap 46 10 46 14 24 1 ; 46 14 46 15 18446744073709551615 6 u_char 47 3 47 9 1 4 ssap 47 10 47 14 25 1 ; 47 14 47 15 18446744073709551615 6 u_char 48 3 48 9 1 13 control_field 48 10 48 23 26 1 ; 48 23 48 24 18446744073709551615 1 } 49 1 49 2 18446744073709551615 1 ; 49 2 49 3 18446744073709551615 6 struct 51 1 51 7 18446744073709551615 10 sniff_SNAP 51 8 51 18 27 1 { 51 19 51 20 18446744073709551615 6 u_char 52 3 52 9 1 8 org_code 52 10 52 18 28 1 [ 52 18 52 19 18446744073709551615 1 3 52 19 52 20 18446744073709551615 1 ] 52 20 52 21 18446744073709551615 1 ; 52 21 52 22 18446744073709551615 6 u_char 53 3 53 9 1 4 type 53 10 53 14 29 1 [ 53 14 53 15 18446744073709551615 1 2 53 15 53 16 18446744073709551615 1 ] 53 16 53 17 18446744073709551615 1 ; 53 17 53 18 18446744073709551615 1 } 54 1 54 2 18446744073709551615 1 ; 54 2 54 3 18446744073709551615 6 struct 56 1 56 7 18446744073709551615 17 sniff_802_1x_auth 56 8 56 25 30 1 { 56 26 56 27 18446744073709551615 6 u_char 57 3 57 9 1 7 version 57 10 57 17 31 1 ; 57 17 57 18 18446744073709551615 6 u_char 58 3 58 9 1 4 type 58 10 58 14 32 1 ; 58 14 58 15 18446744073709551615 6 u_char 59 3 59 9 1 6 length 59 10 59 16 33 1 [ 59 16 59 17 18446744073709551615 1 2 59 17 59 18 18446744073709551615 1 ] 59 18 59 19 18446744073709551615 1 ; 59 19 59 20 18446744073709551615 6 u_char 60 3 60 9 1 19 key_descriptor_type 60 10 60 29 34 1 ; 60 29 60 30 18446744073709551615 6 u_char 61 3 61 9 1 15 key_information 61 10 61 25 35 1 [ 61 25 61 26 18446744073709551615 1 2 61 26 61 27 18446744073709551615 1 ] 61 27 61 28 18446744073709551615 1 ; 61 28 61 29 18446744073709551615 6 u_char 62 3 62 9 1 10 key_length 62 10 62 20 36 1 [ 62 20 62 21 18446744073709551615 1 2 62 21 62 22 18446744073709551615 1 ] 62 22 62 23 18446744073709551615 1 ; 62 23 62 24 18446744073709551615 6 u_char 63 3 63 9 1 14 replay_counter 63 10 63 24 37 1 [ 63 24 63 25 18446744073709551615 1 8 63 25 63 26 18446744073709551615 1 ] 63 26 63 27 18446744073709551615 1 ; 63 27 63 28 18446744073709551615 6 u_char 64 3 64 9 1 13 wpa_key_nonce 64 10 64 23 38 1 [ 64 23 64 24 18446744073709551615 2 32 64 24 64 26 18446744073709551615 1 ] 64 26 64 27 18446744073709551615 1 ; 64 27 64 28 18446744073709551615 6 u_char 65 3 65 9 1 10 wpa_key_IV 65 10 65 20 39 1 [ 65 20 65 21 18446744073709551615 2 16 65 21 65 23 18446744073709551615 1 ] 65 23 65 24 18446744073709551615 1 ; 65 24 65 25 18446744073709551615 6 u_char 66 3 66 9 1 11 wpa_key_RSC 66 10 66 21 40 1 [ 66 21 66 22 18446744073709551615 1 8 66 22 66 23 18446744073709551615 1 ] 66 23 66 24 18446744073709551615 1 ; 66 24 66 25 18446744073709551615 6 u_char 67 3 67 9 1 10 wpa_key_ID 67 10 67 20 41 1 [ 67 20 67 21 18446744073709551615 1 8 67 21 67 22 18446744073709551615 1 ] 67 22 67 23 18446744073709551615 1 ; 67 23 67 24 18446744073709551615 6 u_char 68 3 68 9 1 11 wpa_key_MIC 68 10 68 21 42 1 [ 68 21 68 22 18446744073709551615 2 16 68 22 68 24 18446744073709551615 1 ] 68 24 68 25 18446744073709551615 1 ; 68 25 68 26 18446744073709551615 6 u_char 69 3 69 9 1 19 wpa_key_data_length 69 10 69 29 43 1 [ 69 29 69 30 18446744073709551615 1 2 69 30 69 31 18446744073709551615 1 ] 69 31 69 32 18446744073709551615 1 ; 69 32 69 33 18446744073709551615 1 } 70 1 70 2 18446744073709551615 1 ; 70 2 70 3 18446744073709551615 6 struct 72 1 72 7 18446744073709551615 3 ptk 72 8 72 11 44 1 { 72 12 72 13 18446744073709551615 6 u_char 73 3 73 9 1 3 kck 73 10 73 13 45 1 [ 73 13 73 14 18446744073709551615 2 16 73 14 73 16 18446744073709551615 1 ] 73 16 73 17 18446744073709551615 1 ; 73 17 73 18 18446744073709551615 6 u_char 74 3 74 9 1 3 kek 74 10 74 13 46 1 [ 74 13 74 14 18446744073709551615 2 16 74 14 74 16 18446744073709551615 1 ] 74 16 74 17 18446744073709551615 1 ; 74 17 74 18 18446744073709551615 6 u_char 75 3 75 9 1 2 tk 75 10 75 12 47 1 [ 75 12 75 13 18446744073709551615 2 16 75 13 75 15 18446744073709551615 1 ] 75 15 75 16 18446744073709551615 1 ; 75 16 75 17 18446744073709551615 6 u_char 76 3 76 9 1 3 txk 76 10 76 13 48 1 [ 76 13 76 14 18446744073709551615 1 8 76 14 76 15 18446744073709551615 1 ] 76 15 76 16 18446744073709551615 1 ; 76 16 76 17 18446744073709551615 6 u_char 77 3 77 9 1 3 trk 77 10 77 13 49 1 [ 77 13 77 14 18446744073709551615 1 8 77 14 77 15 18446744073709551615 1 ] 77 15 77 16 18446744073709551615 1 ; 77 16 77 17 18446744073709551615 1 } 78 1 78 2 18446744073709551615 1 ; 78 2 78 3 18446744073709551615 6 struct 80 1 80 7 18446744073709551615 10 eapol_info 80 8 80 18 50 1 { 80 19 80 20 18446744073709551615 6 u_char 81 3 81 9 1 15 sta_mac_address 81 10 81 25 51 1 [ 81 25 81 26 18446744073709551615 12 MAC_ADDR_LEN 81 26 81 38 51 1 ] 81 38 81 39 18446744073709551615 1 ; 81 39 81 40 18446744073709551615 6 u_char 82 3 82 9 1 6 ANonce 82 10 82 16 52 1 [ 82 16 82 17 18446744073709551615 2 32 82 17 82 19 18446744073709551615 1 ] 82 19 82 20 18446744073709551615 1 ; 82 20 82 21 18446744073709551615 6 u_char 83 3 83 9 1 6 SNonce 83 10 83 16 53 1 [ 83 16 83 17 18446744073709551615 2 32 83 17 83 19 18446744073709551615 1 ] 83 19 83 20 18446744073709551615 1 ; 83 20 83 21 18446744073709551615 6 struct 84 3 84 9 18446744073709551615 3 ptk 84 10 84 13 44 3 PTK 84 14 84 17 54 1 ; 84 17 84 18 18446744073709551615 12 eapol_status 85 3 85 15 7 6 status 85 16 85 22 55 1 ; 85 22 85 23 18446744073709551615 6 u_char 86 3 86 9 1 11 last_replay 86 10 86 21 56 1 [ 86 21 86 22 18446744073709551615 1 8 86 22 86 23 18446744073709551615 1 ] 86 23 86 24 18446744073709551615 1 ; 86 24 86 25 18446744073709551615 1 } 87 1 87 2 18446744073709551615 1 ; 87 2 87 3 18446744073709551615 6 u_char 89 1 89 7 1 14 ap_mac_address 89 8 89 22 57 1 [ 89 22 89 23 18446744073709551615 1 6 89 23 89 24 18446744073709551615 1 ] 89 24 89 25 18446744073709551615 1 ; 89 25 89 26 18446744073709551615 6 u_char 90 1 90 7 1 3 psk 90 8 90 11 58 1 [ 90 11 90 12 18446744073709551615 2 32 90 12 90 14 18446744073709551615 1 ] 90 14 90 15 18446744073709551615 1 ; 90 15 90 16 18446744073709551615 6 u_char 91 1 91 7 1 1 * 91 8 91 9 18446744073709551615 4 ssid 91 9 91 13 59 1 ; 91 13 91 14 18446744073709551615 5 map_t 92 1 92 6 60 1 * 92 7 92 8 18446744073709551615 3 map 92 8 92 11 61 1 ; 92 11 92 12 18446744073709551615 6 struct 93 1 93 7 18446744073709551615 3 ptk 93 8 93 11 44 1 * 93 12 93 13 18446744073709551615 4 PTK0 93 13 93 17 62 1 ; 93 17 93 18 18446744073709551615 6 u_char 96 1 96 7 1 14 process_beacon 96 8 96 22 63 1 ( 96 22 96 23 63 5 const 96 23 96 28 18446744073709551615 6 struct 96 29 96 35 18446744073709551615 11 pcap_pkthdr 96 36 96 47 64 1 * 96 48 96 49 18446744073709551615 1 , 96 49 96 50 63 5 const 96 51 96 56 18446744073709551615 6 u_char 96 57 96 63 1 1 * 96 64 96 65 18446744073709551615 1 ) 96 65 96 66 63 1 ; 96 66 96 67 18446744073709551615 6 u_char 97 1 97 7 1 13 process_eapol 97 8 97 21 65 1 ( 97 21 97 22 65 5 const 97 22 97 27 18446744073709551615 6 struct 97 28 97 34 18446744073709551615 11 pcap_pkthdr 97 35 97 46 64 1 * 97 47 97 48 18446744073709551615 1 , 97 48 97 49 65 5 const 97 50 97 55 18446744073709551615 6 u_char 97 56 97 62 1 1 * 97 63 97 64 18446744073709551615 1 ) 97 64 97 65 65 1 ; 97 65 97 66 18446744073709551615 6 u_char 98 1 98 7 1 14 process_packet 98 8 98 22 66 1 ( 98 22 98 23 66 5 const 98 23 98 28 18446744073709551615 6 struct 98 29 98 35 18446744073709551615 11 pcap_pkthdr 98 36 98 47 64 1 * 98 48 98 49 18446744073709551615 1 , 98 49 98 50 66 5 const 98 51 98 56 18446744073709551615 6 u_char 98 57 98 63 1 1 * 98 64 98 65 18446744073709551615 1 ) 98 65 98 66 66 1 ; 98 66 98 67 18446744073709551615 6 u_char 99 1 99 7 1 1 * 99 8 99 9 67 14 packet_decrypt 99 9 99 23 67 1 ( 99 23 99 24 67 5 const 99 24 99 29 18446744073709551615 6 struct 99 30 99 36 18446744073709551615 11 pcap_pkthdr 99 37 99 48 64 1 * 99 49 99 50 18446744073709551615 1 , 99 50 99 51 67 5 const 99 52 99 57 18446744073709551615 6 u_char 99 58 99 64 1 1 * 99 65 99 66 18446744073709551615 1 ) 99 66 99 67 67 1 ; 99 67 99 68 18446744073709551615 4 char 100 1 100 5 18446744073709551615 1 * 100 6 100 7 68 12 mac_toString 100 7 100 19 68 1 ( 100 19 100 20 68 6 u_char 100 20 100 26 1 1 * 100 27 100 28 18446744073709551615 1 ) 100 28 100 29 68 1 ; 100 29 100 30 18446744073709551615 6 u_char 101 1 101 7 1 1 * 101 8 101 9 69 6 PRF512 101 9 101 15 69 1 ( 101 15 101 16 69 6 u_char 101 16 101 22 1 1 * 101 23 101 24 18446744073709551615 1 , 101 24 101 25 69 6 u_char 101 26 101 32 1 1 * 101 33 101 34 18446744073709551615 1 , 101 34 101 35 69 6 size_t 101 36 101 42 70 1 , 101 42 101 43 69 6 u_char 101 44 101 50 1 1 * 101 51 101 52 18446744073709551615 1 , 101 52 101 53 69 6 u_char 101 54 101 60 1 1 * 101 61 101 62 18446744073709551615 1 , 101 62 101 63 69 6 u_char 101 64 101 70 1 1 * 101 71 101 72 18446744073709551615 1 , 101 72 101 73 69 6 u_char 101 74 101 80 1 1 * 101 81 101 82 18446744073709551615 1 ) 101 82 101 83 69 1 ; 101 83 101 84 18446744073709551615 6 u_char 102 1 102 7 1 1 * 102 8 102 9 71 15 hexstr_to_bytes 102 9 102 24 71 1 ( 102 24 102 25 71 6 u_char 102 25 102 31 1 1 * 102 32 102 33 18446744073709551615 1 ) 102 33 102 34 71 1 ; 102 34 102 35 18446744073709551615 3 int 104 1 104 4 18446744073709551615 4 main 104 5 104 9 72 1 ( 104 9 104 10 72 3 int 104 10 104 13 18446744073709551615 4 argc 104 14 104 18 73 1 , 104 18 104 19 72 4 char 104 20 104 24 18446744073709551615 1 * 104 25 104 26 18446744073709551615 4 argv 104 26 104 30 74 1 [ 104 30 104 31 18446744073709551615 1 ] 104 31 104 32 18446744073709551615 1 ) 104 32 104 33 72 1 { 104 34 104 35 18446744073709551615 3 map 106 3 106 6 61 1 = 106 7 106 8 18446744073709551615 11 hashmap_new 106 9 106 20 75 1 ( 106 20 106 21 75 1 ) 106 21 106 22 75 1 ; 106 22 106 23 18446744073709551615 4 char 107 3 107 7 18446744073709551615 1 * 107 8 107 9 18446744073709551615 3 dev 107 9 107 12 76 1 = 107 13 107 14 18446744073709551615 4 argv 107 15 107 19 74 1 [ 107 19 107 20 18446744073709551615 1 1 107 20 107 21 18446744073709551615 1 ] 107 21 107 22 18446744073709551615 1 ; 107 22 107 23 18446744073709551615 4 ssid 108 3 108 7 59 1 = 108 8 108 9 18446744073709551615 4 argv 108 10 108 14 74 1 [ 108 14 108 15 18446744073709551615 1 2 108 15 108 16 18446744073709551615 1 ] 108 16 108 17 18446744073709551615 1 ; 108 17 108 18 18446744073709551615 6 u_char 109 3 109 9 1 1 * 109 10 109 11 18446744073709551615 3 pwd 109 11 109 14 77 1 = 109 15 109 16 18446744073709551615 4 argv 109 17 109 21 74 1 [ 109 21 109 22 18446744073709551615 1 3 109 22 109 23 18446744073709551615 1 ] 109 23 109 24 18446744073709551615 1 ; 109 24 109 25 18446744073709551615 4 char 110 3 110 7 18446744073709551615 6 errbuf 110 8 110 14 78 1 [ 110 14 110 15 18446744073709551615 16 PCAP_ERRBUF_SIZE 110 15 110 31 78 1 ] 110 31 110 32 18446744073709551615 1 ; 110 32 110 33 18446744073709551615 4 char 111 3 111 7 18446744073709551615 13 filter_beacon 111 8 111 21 79 1 [ 111 21 111 22 18446744073709551615 1 ] 111 22 111 23 18446744073709551615 1 = 111 24 111 25 18446744073709551615 30 "wlan type mgt subtype beacon" 111 26 111 56 18446744073709551615 1 ; 111 56 111 57 18446744073709551615 4 char 112 3 112 7 18446744073709551615 25 filter_eapol_on_ssid_mask 112 8 112 33 80 1 [ 112 33 112 34 18446744073709551615 1 ] 112 34 112 35 18446744073709551615 1 = 112 36 112 37 18446744073709551615 32 "wlan addr1 %s or wlan addr2 %s" 112 38 112 70 18446744073709551615 1 ; 112 70 112 71 18446744073709551615 4 char 113 3 113 7 18446744073709551615 1 * 113 8 113 9 18446744073709551615 20 filter_eapol_on_ssid 113 9 113 29 81 1 ; 113 29 113 30 18446744073709551615 6 struct 114 3 114 9 18446744073709551615 11 bpf_program 114 10 114 21 82 2 fp 114 22 114 24 83 1 ; 114 24 114 25 18446744073709551615 6 pcap_t 115 3 115 9 84 1 * 115 10 115 11 18446744073709551615 6 handle 115 11 115 17 85 1 ; 115 17 115 18 18446744073709551615 6 struct 116 3 116 9 18446744073709551615 11 pcap_pkthdr 116 10 116 21 64 1 * 116 22 116 23 18446744073709551615 6 header 116 23 116 29 86 1 ; 116 29 116 30 18446744073709551615 5 const 117 3 117 8 18446744073709551615 6 u_char 117 9 117 15 1 1 * 117 16 117 17 18446744073709551615 6 packet 117 17 117 23 87 1 ; 117 23 117 24 18446744073709551615 4 char 118 3 118 7 18446744073709551615 18 ap_mac_address_str 118 8 118 26 88 1 [ 118 26 118 27 18446744073709551615 1 2 118 27 118 28 18446744073709551615 1 * 118 29 118 30 18446744073709551615 12 MAC_ADDR_LEN 118 31 118 43 18446744073709551615 1 ] 118 43 118 44 18446744073709551615 1 ; 118 44 118 45 18446744073709551615 18 ap_mac_address_str 119 3 119 21 88 1 [ 119 21 119 22 18446744073709551615 1 2 119 22 119 23 18446744073709551615 1 * 119 24 119 25 18446744073709551615 12 MAC_ADDR_LEN 119 26 119 38 18446744073709551615 1 - 119 39 119 40 18446744073709551615 1 1 119 41 119 42 18446744073709551615 1 ] 119 42 119 43 18446744073709551615 1 = 119 44 119 45 18446744073709551615 4 '\0' 119 46 119 50 18446744073709551615 1 ; 119 50 119 51 18446744073709551615 20 fastpbkdf2_hmac_sha1 121 3 121 23 89 1 ( 121 23 121 24 89 3 pwd 121 24 121 27 77 1 , 121 27 121 28 89 6 strlen 121 29 121 35 90 1 ( 121 35 121 36 90 3 pwd 121 36 121 39 77 1 ) 121 39 121 40 90 1 , 121 40 121 41 89 4 ssid 121 42 121 46 59 1 , 121 46 121 47 89 6 strlen 121 48 121 54 90 1 ( 121 54 121 55 90 4 ssid 121 55 121 59 59 1 ) 121 59 121 60 90 1 , 121 60 121 61 89 4 4096 121 62 121 66 18446744073709551615 1 , 121 66 121 67 89 3 psk 121 68 121 71 58 1 , 121 71 121 72 89 2 32 121 73 121 75 18446744073709551615 1 ) 121 75 121 76 89 1 ; 121 76 121 77 18446744073709551615 3 for 123 3 123 6 18446744073709551615 1 ( 123 6 123 7 18446744073709551615 3 int 123 7 123 10 18446744073709551615 1 i 123 11 123 12 91 1 = 123 13 123 14 18446744073709551615 1 0 123 15 123 16 18446744073709551615 1 ; 123 16 123 17 18446744073709551615 1 i 123 18 123 19 91 1 < 123 20 123 21 18446744073709551615 2 32 123 22 123 24 18446744073709551615 1 ; 123 24 123 25 18446744073709551615 1 i 123 26 123 27 91 2 ++ 123 27 123 29 18446744073709551615 1 ) 123 29 123 30 18446744073709551615 1 { 123 31 123 32 18446744073709551615 6 printf 124 5 124 11 92 1 ( 124 11 124 12 92 6 "%02x" 124 12 124 18 18446744073709551615 1 , 124 18 124 19 92 3 psk 124 20 124 23 58 1 [ 124 23 124 24 18446744073709551615 1 i 124 24 124 25 91 1 ] 124 25 124 26 18446744073709551615 1 ) 124 26 124 27 92 1 ; 124 27 124 28 18446744073709551615 1 } 125 3 125 4 18446744073709551615 6 printf 126 3 126 9 92 1 ( 126 9 126 10 92 4 "\n" 126 10 126 14 18446744073709551615 1 ) 126 14 126 15 92 1 ; 126 15 126 16 18446744073709551615 84 //u_char PMK[] = "01b809f9ab2fb5dc47984f52fb2d112e13d84ccb6b86d4a7193ec5299f851c48"; 128 3 128 87 18446744073709551615 38 //u_char passPhrase[] = "10zZz10ZZzZ"; 129 3 129 41 18446744073709551615 34 //u_char ssid[] = "Netgear 2/158"; 130 3 130 37 18446744073709551615 6 u_char 131 3 131 9 1 5 APmac 131 10 131 15 93 1 [ 131 15 131 16 18446744073709551615 1 ] 131 16 131 17 18446744073709551615 1 = 131 18 131 19 18446744073709551615 14 "c4ea1dbe06f5" 131 20 131 34 18446744073709551615 1 ; 131 34 131 35 18446744073709551615 6 u_char 132 3 132 9 1 9 Clientmac 132 10 132 19 94 1 [ 132 19 132 20 18446744073709551615 1 ] 132 20 132 21 18446744073709551615 1 = 132 22 132 23 18446744073709551615 14 "b0e5ed102445" 132 24 132 38 18446744073709551615 1 ; 132 38 132 39 18446744073709551615 6 u_char 133 3 133 9 1 6 ANonce 133 10 133 16 95 1 [ 133 16 133 17 18446744073709551615 1 ] 133 17 133 18 18446744073709551615 1 = 133 19 133 20 18446744073709551615 66 "faf4cf7ef3e37f25e833031a971343fb39b8ef00247febb110606aa11d7ff2d4" 133 21 133 87 18446744073709551615 1 ; 133 87 133 88 18446744073709551615 6 u_char 134 3 134 9 1 6 SNonce 134 10 134 16 96 1 [ 134 16 134 17 18446744073709551615 1 ] 134 17 134 18 18446744073709551615 1 = 134 19 134 20 18446744073709551615 66 "30143bb717c94943f744a749058dac154759a229012c95aeccc6193cff323cff" 134 21 134 87 18446744073709551615 1 ; 134 87 134 88 18446744073709551615 6 u_char 135 3 135 9 1 4 data 135 10 135 14 97 1 [ 135 14 135 15 18446744073709551615 1 ] 135 15 135 16 18446744073709551615 1 = 135 17 135 18 18446744073709551615 244 "0103007502010a0000000000000000000130143bb717c94943f744a749058dac154759a229012c95aeccc6193cff323cff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001630140100000fac020100000fac040100000fac020000" 135 19 135 263 18446744073709551615 1 ; 135 263 135 264 18446744073709551615 4 PTK0 137 3 137 7 62 1 = 137 8 137 9 18446744073709551615 1 ( 137 10 137 11 18446744073709551615 6 struct 137 11 137 17 18446744073709551615 3 ptk 137 18 137 21 44 1 * 137 22 137 23 18446744073709551615 1 ) 137 23 137 24 18446744073709551615 6 PRF512 137 24 137 30 69 1 ( 137 30 137 31 69 3 psk 137 31 137 34 58 1 , 137 34 137 35 69 1 A 137 36 137 37 0 1 , 137 37 137 38 69 6 strlen 137 39 137 45 90 1 ( 137 45 137 46 90 1 A 137 46 137 47 0 1 ) 137 47 137 48 90 1 , 137 48 137 49 69 15 hexstr_to_bytes 137 50 137 65 71 1 ( 137 65 137 66 71 5 APmac 137 66 137 71 93 1 ) 137 71 137 72 71 1 , 137 72 137 73 69 15 hexstr_to_bytes 137 74 137 89 71 1 ( 137 89 137 90 71 9 Clientmac 137 90 137 99 94 1 ) 137 99 137 100 71 1 , 137 100 137 101 69 15 hexstr_to_bytes 137 102 137 117 71 1 ( 137 117 137 118 71 6 ANonce 137 118 137 124 95 1 ) 137 124 137 125 71 1 , 137 125 137 126 69 15 hexstr_to_bytes 137 127 137 142 71 1 ( 137 142 137 143 71 6 SNonce 137 143 137 149 96 1 ) 137 149 137 150 71 1 ) 137 150 137 151 69 1 ; 137 151 137 152 18446744073709551615 3 int 139 3 139 6 18446744073709551615 10 sha_length 139 7 139 17 98 1 = 139 18 139 19 18446744073709551615 2 16 139 20 139 22 18446744073709551615 1 ; 139 22 139 23 18446744073709551615 6 u_char 140 3 140 9 1 1 * 140 10 140 11 18446744073709551615 3 MIC 140 11 140 14 99 1 = 140 15 140 16 18446744073709551615 6 malloc 140 17 140 23 100 1 ( 140 23 140 24 100 2 16 140 24 140 26 18446744073709551615 1 ) 140 26 140 27 100 1 ; 140 27 140 28 18446744073709551615 4 HMAC 141 3 141 7 101 1 ( 141 7 141 8 101 8 EVP_sha1 141 8 141 16 102 1 ( 141 16 141 17 102 1 ) 141 17 141 18 102 1 , 141 18 141 19 101 4 PTK0 141 20 141 24 62 2 -> 141 24 141 26 18446744073709551615 3 kck 141 26 141 29 45 1 , 141 29 141 30 101 2 16 141 31 141 33 18446744073709551615 1 , 141 33 141 34 101 15 hexstr_to_bytes 141 35 141 50 71 1 ( 141 50 141 51 71 4 data 141 51 141 55 97 1 ) 141 55 141 56 71 1 , 141 56 141 57 101 3 121 141 58 141 61 18446744073709551615 1 , 141 61 141 62 101 3 MIC 141 63 141 66 99 1 , 141 66 141 67 101 1 & 141 68 141 69 18446744073709551615 10 sha_length 141 69 141 79 98 1 ) 141 79 141 80 101 1 ; 141 80 141 81 18446744073709551615 3 for 142 3 142 6 18446744073709551615 1 ( 142 6 142 7 18446744073709551615 3 int 142 7 142 10 18446744073709551615 1 i 142 11 142 12 103 1 = 142 13 142 14 18446744073709551615 1 0 142 15 142 16 18446744073709551615 1 ; 142 16 142 17 18446744073709551615 1 i 142 18 142 19 103 1 < 142 20 142 21 18446744073709551615 2 16 142 22 142 24 18446744073709551615 1 ; 142 24 142 25 18446744073709551615 1 i 142 26 142 27 103 2 ++ 142 27 142 29 18446744073709551615 1 ) 142 29 142 30 18446744073709551615 1 { 142 31 142 32 18446744073709551615 6 printf 143 5 143 11 92 1 ( 143 11 143 12 92 6 "%02x" 143 12 143 18 18446744073709551615 1 , 143 18 143 19 92 3 MIC 143 20 143 23 99 1 [ 143 23 143 24 18446744073709551615 1 i 143 24 143 25 103 1 ] 143 25 143 26 18446744073709551615 1 ) 143 26 143 27 92 1 ; 143 27 143 28 18446744073709551615 1 } 144 3 144 4 18446744073709551615 6 printf 145 3 145 9 92 1 ( 145 9 145 10 92 4 "\n" 145 10 145 14 18446744073709551615 1 ) 145 14 145 15 92 1 ; 145 15 145 16 18446744073709551615 11 bpf_u_int32 147 3 147 14 104 4 mask 147 15 147 19 105 1 ; 147 19 147 20 18446744073709551615 40 /* The netmask of our sniffing device */ 147 21 147 61 18446744073709551615 11 bpf_u_int32 148 3 148 14 104 3 net 148 15 148 18 106 1 ; 148 18 148 19 18446744073709551615 35 /* The IP of our sniffing device */ 148 21 148 56 18446744073709551615 2 if 150 3 150 5 18446744073709551615 1 ( 150 5 150 6 18446744073709551615 14 pcap_lookupnet 150 6 150 20 107 1 ( 150 20 150 21 107 3 dev 150 21 150 24 76 1 , 150 24 150 25 107 1 & 150 26 150 27 18446744073709551615 3 net 150 27 150 30 106 1 , 150 30 150 31 107 1 & 150 32 150 33 18446744073709551615 4 mask 150 33 150 37 105 1 , 150 37 150 38 107 6 errbuf 150 39 150 45 78 1 ) 150 45 150 46 107 2 == 150 47 150 49 18446744073709551615 1 - 150 50 150 51 18446744073709551615 1 1 150 51 150 52 18446744073709551615 1 ) 150 52 150 53 18446744073709551615 1 { 150 54 150 55 18446744073709551615 7 fprintf 151 5 151 12 108 1 ( 151 12 151 13 108 6 stderr 151 13 151 19 108 1 , 151 19 151 20 108 35 "Can't get netmask for device %s\n" 151 21 151 56 18446744073709551615 1 , 151 56 151 57 108 3 dev 151 58 151 61 76 1 ) 151 61 151 62 108 1 ; 151 62 151 63 18446744073709551615 3 net 152 5 152 8 106 1 = 152 9 152 10 18446744073709551615 1 0 152 11 152 12 18446744073709551615 1 ; 152 12 152 13 18446744073709551615 4 mask 153 5 153 9 105 1 = 153 10 153 11 18446744073709551615 1 0 153 12 153 13 18446744073709551615 1 ; 153 13 153 14 18446744073709551615 1 } 154 3 154 4 18446744073709551615 4 char 156 3 156 7 18446744073709551615 8 filename 156 8 156 16 109 1 [ 156 16 156 17 18446744073709551615 1 ] 156 17 156 18 18446744073709551615 1 = 156 19 156 20 18446744073709551615 17 "../capture.pcap" 156 21 156 38 18446744073709551615 1 ; 156 38 156 39 18446744073709551615 56 //handle = pcap_open_live(dev, BUFSIZ, 1, 1000, errbuf); 157 3 157 59 18446744073709551615 6 handle 158 3 158 9 85 1 = 158 10 158 11 18446744073709551615 17 pcap_open_offline 158 12 158 29 110 1 ( 158 29 158 30 110 8 filename 158 30 158 38 109 1 , 158 38 158 39 110 6 errbuf 158 40 158 46 78 1 ) 158 46 158 47 110 1 ; 158 47 158 48 18446744073709551615 2 if 160 3 160 5 18446744073709551615 1 ( 160 5 160 6 18446744073709551615 6 handle 160 6 160 12 85 2 == 160 13 160 15 18446744073709551615 4 NULL 160 16 160 20 18446744073709551615 1 ) 160 20 160 21 18446744073709551615 1 { 160 22 160 23 18446744073709551615 7 fprintf 161 5 161 12 108 1 ( 161 12 161 13 108 6 stderr 161 13 161 19 108 1 , 161 19 161 20 108 31 "Couldn't open device %s: %s\n" 161 21 161 52 18446744073709551615 1 , 161 52 161 53 108 3 dev 161 54 161 57 76 1 , 161 57 161 58 108 6 errbuf 161 59 161 65 78 1 ) 161 65 161 66 108 1 ; 161 66 161 67 18446744073709551615 6 return 162 5 162 11 18446744073709551615 1 ( 162 12 162 13 18446744073709551615 1 2 162 13 162 14 18446744073709551615 1 ) 162 14 162 15 18446744073709551615 1 ; 162 15 162 16 18446744073709551615 1 } 163 3 163 4 18446744073709551615 2 if 165 3 165 5 18446744073709551615 1 ( 165 5 165 6 18446744073709551615 12 pcap_compile 165 6 165 18 111 1 ( 165 18 165 19 111 6 handle 165 19 165 25 85 1 , 165 25 165 26 111 1 & 165 27 165 28 18446744073709551615 2 fp 165 28 165 30 83 1 , 165 30 165 31 111 13 filter_beacon 165 32 165 45 79 1 , 165 45 165 46 111 1 0 165 47 165 48 18446744073709551615 1 , 165 48 165 49 111 3 net 165 50 165 53 106 1 ) 165 53 165 54 111 2 == 165 55 165 57 18446744073709551615 1 - 165 58 165 59 18446744073709551615 1 1 165 59 165 60 18446744073709551615 1 ) 165 60 165 61 18446744073709551615 1 { 165 62 165 63 18446744073709551615 7 fprintf 166 5 166 12 108 1 ( 166 12 166 13 108 6 stderr 166 13 166 19 108 1 , 166 19 166 20 108 32 "Couldn't parse filter %s: %s\n" 166 21 166 53 18446744073709551615 1 , 166 53 166 54 108 13 filter_beacon 166 55 166 68 79 1 , 166 68 166 69 108 11 pcap_geterr 166 70 166 81 112 1 ( 166 81 166 82 112 6 handle 166 82 166 88 85 1 ) 166 88 166 89 112 1 ) 166 89 166 90 108 1 ; 166 90 166 91 18446744073709551615 6 return 167 5 167 11 18446744073709551615 1 ( 167 12 167 13 18446744073709551615 1 2 167 13 167 14 18446744073709551615 1 ) 167 14 167 15 18446744073709551615 1 ; 167 15 167 16 18446744073709551615 1 } 168 3 168 4 18446744073709551615 2 if 170 3 170 5 18446744073709551615 1 ( 170 5 170 6 18446744073709551615 14 pcap_setfilter 170 6 170 20 113 1 ( 170 20 170 21 113 6 handle 170 21 170 27 85 1 , 170 27 170 28 113 1 & 170 29 170 30 18446744073709551615 2 fp 170 30 170 32 83 1 ) 170 32 170 33 113 2 == 170 34 170 36 18446744073709551615 1 - 170 37 170 38 18446744073709551615 1 1 170 38 170 39 18446744073709551615 1 ) 170 39 170 40 18446744073709551615 1 { 170 41 170 42 18446744073709551615 7 fprintf 171 5 171 12 108 1 ( 171 12 171 13 108 6 stderr 171 13 171 19 108 1 , 171 19 171 20 108 34 "Couldn't install filter %s: %s\n" 171 21 171 55 18446744073709551615 1 , 171 55 171 56 108 13 filter_beacon 171 57 171 70 79 1 , 171 70 171 71 108 11 pcap_geterr 171 72 171 83 112 1 ( 171 83 171 84 112 6 handle 171 84 171 90 85 1 ) 171 90 171 91 112 1 ) 171 91 171 92 108 1 ; 171 92 171 93 18446744073709551615 6 return 172 5 172 11 18446744073709551615 1 ( 172 12 172 13 18446744073709551615 1 2 172 13 172 14 18446744073709551615 1 ) 172 14 172 15 18446744073709551615 1 ; 172 15 172 16 18446744073709551615 1 } 173 3 173 4 18446744073709551615 6 printf 175 3 175 9 92 1 ( 175 9 175 10 92 14 "Device: %s\n" 175 10 175 24 18446744073709551615 1 , 175 24 175 25 92 3 dev 175 26 175 29 76 1 ) 175 29 175 30 92 1 ; 175 30 175 31 18446744073709551615 31 //Put the device in sniff loop; 176 3 176 34 18446744073709551615 5 while 177 3 177 8 18446744073709551615 1 ( 177 8 177 9 18446744073709551615 12 pcap_next_ex 177 9 177 21 114 1 ( 177 21 177 22 114 6 handle 177 22 177 28 85 1 , 177 28 177 29 114 1 & 177 30 177 31 18446744073709551615 6 header 177 31 177 37 86 1 , 177 37 177 38 114 1 & 177 39 177 40 18446744073709551615 6 packet 177 40 177 46 87 1 ) 177 46 177 47 114 2 && 177 48 177 50 18446744073709551615 1 ! 177 51 177 52 18446744073709551615 14 process_beacon 177 52 177 66 63 1 ( 177 66 177 67 63 6 header 177 67 177 73 86 1 , 177 73 177 74 63 6 packet 177 75 177 81 87 1 ) 177 81 177 82 63 1 ) 177 82 177 83 18446744073709551615 1 ; 178 5 178 6 18446744073709551615 8 asprintf 180 3 180 11 115 1 ( 180 11 180 12 115 1 & 180 12 180 13 18446744073709551615 20 filter_eapol_on_ssid 180 13 180 33 81 1 , 180 33 180 34 115 25 filter_eapol_on_ssid_mask 180 35 180 60 80 1 , 180 60 180 61 115 12 mac_toString 180 62 180 74 68 1 ( 180 74 180 75 68 14 ap_mac_address 180 75 180 89 57 1 ) 180 89 180 90 68 1 , 180 90 180 91 115 12 mac_toString 180 92 180 104 68 1 ( 180 104 180 105 68 14 ap_mac_address 180 105 180 119 57 1 ) 180 119 180 120 68 1 ) 180 120 180 121 115 1 ; 180 121 180 122 18446744073709551615 2 if 182 3 182 5 18446744073709551615 1 ( 182 5 182 6 18446744073709551615 12 pcap_compile 182 6 182 18 111 1 ( 182 18 182 19 111 6 handle 182 19 182 25 85 1 , 182 25 182 26 111 1 & 182 27 182 28 18446744073709551615 2 fp 182 28 182 30 83 1 , 182 30 182 31 111 20 filter_eapol_on_ssid 182 32 182 52 81 1 , 182 52 182 53 111 1 0 182 54 182 55 18446744073709551615 1 , 182 55 182 56 111 3 net 182 57 182 60 106 1 ) 182 60 182 61 111 2 == 182 62 182 64 18446744073709551615 1 - 182 65 182 66 18446744073709551615 1 1 182 66 182 67 18446744073709551615 1 ) 182 67 182 68 18446744073709551615 1 { 182 69 182 70 18446744073709551615 7 fprintf 183 5 183 12 108 1 ( 183 12 183 13 108 6 stderr 183 13 183 19 108 1 , 183 19 183 20 108 32 "Couldn't parse filter %s: %s\n" 183 21 183 53 18446744073709551615 1 , 183 53 183 54 108 20 filter_eapol_on_ssid 183 55 183 75 81 1 , 183 75 183 76 108 11 pcap_geterr 183 77 183 88 112 1 ( 183 88 183 89 112 6 handle 183 89 183 95 85 1 ) 183 95 183 96 112 1 ) 183 96 183 97 108 1 ; 183 97 183 98 18446744073709551615 6 return 184 5 184 11 18446744073709551615 1 ( 184 12 184 13 18446744073709551615 1 2 184 13 184 14 18446744073709551615 1 ) 184 14 184 15 18446744073709551615 1 ; 184 15 184 16 18446744073709551615 1 } 185 3 185 4 18446744073709551615 2 if 186 3 186 5 18446744073709551615 1 ( 186 5 186 6 18446744073709551615 14 pcap_setfilter 186 6 186 20 113 1 ( 186 20 186 21 113 6 handle 186 21 186 27 85 1 , 186 27 186 28 113 1 & 186 29 186 30 18446744073709551615 2 fp 186 30 186 32 83 1 ) 186 32 186 33 113 2 == 186 34 186 36 18446744073709551615 1 - 186 37 186 38 18446744073709551615 1 1 186 38 186 39 18446744073709551615 1 ) 186 39 186 40 18446744073709551615 1 { 186 41 186 42 18446744073709551615 7 fprintf 187 5 187 12 108 1 ( 187 12 187 13 108 6 stderr 187 13 187 19 108 1 , 187 19 187 20 108 34 "Couldn't install filter %s: %s\n" 187 21 187 55 18446744073709551615 1 , 187 55 187 56 108 20 filter_eapol_on_ssid 187 57 187 77 81 1 , 187 77 187 78 108 11 pcap_geterr 187 79 187 90 112 1 ( 187 90 187 91 112 6 handle 187 91 187 97 85 1 ) 187 97 187 98 112 1 ) 187 98 187 99 108 1 ; 187 99 187 100 18446744073709551615 6 return 188 5 188 11 18446744073709551615 1 ( 188 12 188 13 18446744073709551615 1 2 188 13 188 14 18446744073709551615 1 ) 188 14 188 15 18446744073709551615 1 ; 188 15 188 16 18446744073709551615 1 } 189 3 189 4 18446744073709551615 3 int 190 3 190 6 18446744073709551615 3 res 190 7 190 10 116 1 = 190 11 190 12 18446744073709551615 1 0 190 13 190 14 18446744073709551615 1 ; 190 14 190 15 18446744073709551615 5 while 191 3 191 8 18446744073709551615 1 ( 191 8 191 9 18446744073709551615 12 pcap_next_ex 191 9 191 21 114 1 ( 191 21 191 22 114 6 handle 191 22 191 28 85 1 , 191 28 191 29 114 1 & 191 30 191 31 18446744073709551615 6 header 191 31 191 37 86 1 , 191 37 191 38 114 1 & 191 39 191 40 18446744073709551615 6 packet 191 40 191 46 87 1 ) 191 46 191 47 114 2 >= 191 48 191 50 18446744073709551615 1 0 191 51 191 52 18446744073709551615 2 && 191 53 191 55 18446744073709551615 14 process_packet 191 56 191 70 66 1 ( 191 70 191 71 66 6 header 191 71 191 77 86 1 , 191 77 191 78 66 6 packet 191 79 191 85 87 1 ) 191 85 191 86 66 1 ) 191 86 191 87 18446744073709551615 1 ; 192 5 192 6 18446744073709551615 273 /*printf("AP mac address: ");
  for(int i = 0; i < MAC_ADDR_LEN; i++) {
    printf("%02x", ap_mac_address[i]);
  }
  printf(".\n");
  printf("%s\n", mac_toString(ap_mac_address));
  printf(filter_eapol_on_ssid, mac_toString(ap_mac_address), mac_toString(ap_mac_address));*/ 193 3 199 94 18446744073709551615 13 pcap_freecode 201 3 201 16 117 1 ( 201 16 201 17 117 1 & 201 17 201 18 18446744073709551615 2 fp 201 18 201 20 83 1 ) 201 20 201 21 117 1 ; 201 21 201 22 18446744073709551615 10 pcap_close 202 3 202 13 118 1 ( 202 13 202 14 118 6 handle 202 14 202 20 85 1 ) 202 20 202 21 118 1 ; 202 21 202 22 18446744073709551615 6 return 203 3 203 9 18446744073709551615 1 ( 203 10 203 11 18446744073709551615 1 0 203 11 203 12 18446744073709551615 1 ) 203 12 203 13 18446744073709551615 1 ; 203 13 203 14 18446744073709551615 1 } 204 1 204 2 18446744073709551615 6 u_char 206 1 206 7 1 14 process_beacon 206 8 206 22 63 1 ( 206 22 206 23 63 5 const 206 23 206 28 18446744073709551615 6 struct 206 29 206 35 18446744073709551615 11 pcap_pkthdr 206 36 206 47 64 1 * 206 48 206 49 18446744073709551615 6 header 206 49 206 55 119 1 , 206 55 206 56 63 5 const 206 57 206 62 18446744073709551615 6 u_char 206 63 206 69 1 1 * 206 70 206 71 18446744073709551615 6 buffer 206 71 206 77 120 1 ) 206 77 206 78 63 1 { 206 79 206 80 18446744073709551615 5 const 207 3 207 8 18446744073709551615 6 struct 207 9 207 15 18446744073709551615 19 sniff_802_11_beacon 207 16 207 35 16 1 * 207 36 207 37 18446744073709551615 10 hdr_802_11 207 37 207 47 121 1 ; 207 47 207 48 18446744073709551615 10 hdr_802_11 208 3 208 13 121 1 = 208 14 208 15 18446744073709551615 1 ( 208 16 208 17 18446744073709551615 6 struct 208 17 208 23 18446744073709551615 19 sniff_802_11_beacon 208 24 208 43 16 1 * 208 44 208 45 18446744073709551615 1 ) 208 45 208 46 18446744073709551615 1 ( 208 46 208 47 18446744073709551615 6 buffer 208 47 208 53 120 1 + 208 54 208 55 18446744073709551615 16 PRISM_HEADER_LEN 208 56 208 72 18446744073709551615 1 ) 208 72 208 73 18446744073709551615 1 ; 208 73 208 74 18446744073709551615 3 int 209 3 209 6 18446744073709551615 11 ssid_length 209 7 209 18 122 1 = 209 19 209 20 18446744073709551615 1 ( 209 21 209 22 18446744073709551615 3 int 209 22 209 25 18446744073709551615 1 ) 209 25 209 26 18446744073709551615 1 ( 209 26 209 27 18446744073709551615 6 buffer 209 27 209 33 120 1 + 209 34 209 35 18446744073709551615 16 PRISM_HEADER_LEN 209 36 209 52 18446744073709551615 1 + 209 53 209 54 18446744073709551615 6 sizeof 209 55 209 61 18446744073709551615 1 ( 209 61 209 62 18446744073709551615 6 struct 209 62 209 68 18446744073709551615 19 sniff_802_11_beacon 209 69 209 88 16 1 ) 209 88 209 89 18446744073709551615 1 + 209 90 209 91 18446744073709551615 2 13 209 92 209 94 18446744073709551615 1 ) 209 94 209 95 18446744073709551615 1 [ 209 95 209 96 18446744073709551615 1 0 209 96 209 97 18446744073709551615 1 ] 209 97 209 98 18446744073709551615 1 ; 209 98 209 99 18446744073709551615 6 u_char 210 3 210 9 1 11 beacon_ssid 210 10 210 21 123 1 [ 210 21 210 22 18446744073709551615 11 ssid_length 210 22 210 33 122 1 + 210 34 210 35 18446744073709551615 1 1 210 36 210 37 18446744073709551615 1 ] 210 37 210 38 18446744073709551615 1 ; 210 38 210 39 18446744073709551615 6 memcpy 211 3 211 9 124 1 ( 211 9 211 10 124 11 beacon_ssid 211 10 211 21 123 1 , 211 21 211 22 124 1 ( 211 23 211 24 18446744073709551615 6 buffer 211 24 211 30 120 1 + 211 31 211 32 18446744073709551615 16 PRISM_HEADER_LEN 211 33 211 49 18446744073709551615 1 + 211 50 211 51 18446744073709551615 6 sizeof 211 52 211 58 18446744073709551615 1 ( 211 58 211 59 18446744073709551615 6 struct 211 59 211 65 18446744073709551615 19 sniff_802_11_beacon 211 66 211 85 16 1 ) 211 85 211 86 18446744073709551615 1 + 211 87 211 88 18446744073709551615 2 14 211 89 211 91 18446744073709551615 1 ) 211 91 211 92 18446744073709551615 1 , 211 92 211 93 124 11 ssid_length 211 94 211 105 122 1 ) 211 105 211 106 124 1 ; 211 106 211 107 18446744073709551615 11 beacon_ssid 212 3 212 14 123 1 [ 212 14 212 15 18446744073709551615 11 ssid_length 212 15 212 26 122 1 ] 212 26 212 27 18446744073709551615 1 = 212 28 212 29 18446744073709551615 4 '\0' 212 30 212 34 18446744073709551615 1 ; 212 34 212 35 18446744073709551615 2 if 213 3 213 5 18446744073709551615 1 ( 213 5 213 6 18446744073709551615 6 strcmp 213 6 213 12 125 1 ( 213 12 213 13 125 11 beacon_ssid 213 13 213 24 123 1 , 213 24 213 25 125 4 ssid 213 26 213 30 59 1 ) 213 30 213 31 125 2 == 213 32 213 34 18446744073709551615 1 0 213 35 213 36 18446744073709551615 1 ) 213 36 213 37 18446744073709551615 1 { 213 38 213 39 18446744073709551615 6 memcpy 214 5 214 11 124 1 ( 214 11 214 12 124 14 ap_mac_address 214 12 214 26 57 1 , 214 26 214 27 124 10 hdr_802_11 214 28 214 38 121 2 -> 214 38 214 40 18446744073709551615 5 addr2 214 40 214 45 20 1 , 214 45 214 46 124 12 MAC_ADDR_LEN 214 47 214 59 124 1 ) 214 59 214 60 124 1 ; 214 60 214 61 18446744073709551615 6 return 215 5 215 11 18446744073709551615 1 ( 215 12 215 13 18446744073709551615 1 1 215 13 215 14 18446744073709551615 1 ) 215 14 215 15 18446744073709551615 1 ; 215 15 215 16 18446744073709551615 1 } 216 3 216 4 18446744073709551615 6 return 217 3 217 9 18446744073709551615 1 ( 217 10 217 11 18446744073709551615 1 0 217 11 217 12 18446744073709551615 1 ) 217 12 217 13 18446744073709551615 1 ; 217 13 217 14 18446744073709551615 1 } 218 1 218 2 18446744073709551615 6 u_char 220 1 220 7 1 13 process_eapol 220 8 220 21 65 1 ( 220 21 220 22 65 5 const 220 22 220 27 18446744073709551615 6 struct 220 28 220 34 18446744073709551615 11 pcap_pkthdr 220 35 220 46 64 1 * 220 47 220 48 18446744073709551615 6 header 220 48 220 54 126 1 , 220 54 220 55 65 5 const 220 56 220 61 18446744073709551615 6 u_char 220 62 220 68 1 1 * 220 69 220 70 18446744073709551615 6 buffer 220 70 220 76 127 1 ) 220 76 220 77 65 1 { 220 78 220 79 18446744073709551615 5 const 221 3 221 8 18446744073709551615 6 struct 221 9 221 15 18446744073709551615 12 sniff_802_11 221 16 221 28 8 1 * 221 29 221 30 18446744073709551615 10 hdr_802_11 221 30 221 40 128 1 ; 221 40 221 41 18446744073709551615 10 hdr_802_11 222 3 222 13 128 1 = 222 14 222 15 18446744073709551615 1 ( 222 16 222 17 18446744073709551615 6 struct 222 17 222 23 18446744073709551615 12 sniff_802_11 222 24 222 36 8 1 * 222 37 222 38 18446744073709551615 1 ) 222 38 222 39 18446744073709551615 1 ( 222 39 222 40 18446744073709551615 6 buffer 222 40 222 46 127 1 + 222 47 222 48 18446744073709551615 16 PRISM_HEADER_LEN 222 49 222 65 18446744073709551615 1 ) 222 65 222 66 18446744073709551615 1 ; 222 66 222 67 18446744073709551615 5 const 223 3 223 8 18446744073709551615 6 struct 223 9 223 15 18446744073709551615 17 sniff_802_1x_auth 223 16 223 33 30 1 * 223 34 223 35 18446744073709551615 15 hdr_802_1x_auth 223 35 223 50 129 1 ; 223 50 223 51 18446744073709551615 15 hdr_802_1x_auth 224 3 224 18 129 1 = 224 19 224 20 18446744073709551615 1 ( 224 21 224 22 18446744073709551615 6 struct 224 22 224 28 18446744073709551615 17 sniff_802_1x_auth 224 29 224 46 30 1 * 224 47 224 48 18446744073709551615 1 ) 224 48 224 49 18446744073709551615 1 ( 224 49 224 50 18446744073709551615 6 buffer 224 50 224 56 127 1 + 224 57 224 58 18446744073709551615 16 PRISM_HEADER_LEN 224 59 224 75 18446744073709551615 1 + 224 76 224 77 18446744073709551615 6 sizeof 224 78 224 84 18446744073709551615 1 ( 224 84 224 85 18446744073709551615 6 struct 224 85 224 91 18446744073709551615 12 sniff_802_11 224 92 224 104 8 1 ) 224 104 224 105 18446744073709551615 1 + 224 106 224 107 18446744073709551615 7 LLC_LEN 224 108 224 115 18446744073709551615 1 ) 224 115 224 116 18446744073709551615 1 ; 224 116 224 117 18446744073709551615 1 } 225 1 225 2 18446744073709551615 6 u_char 227 1 227 7 1 14 process_packet 227 8 227 22 66 1 ( 227 22 227 23 66 5 const 227 23 227 28 18446744073709551615 6 struct 227 29 227 35 18446744073709551615 11 pcap_pkthdr 227 36 227 47 64 1 * 227 48 227 49 18446744073709551615 6 header 227 49 227 55 130 1 , 227 55 227 56 66 5 const 227 57 227 62 18446744073709551615 6 u_char 227 63 227 69 1 1 * 227 70 227 71 18446744073709551615 6 buffer 227 71 227 77 131 1 ) 227 77 227 78 66 1 { 227 79 227 80 18446744073709551615 5 const 228 3 228 8 18446744073709551615 6 struct 228 9 228 15 18446744073709551615 12 sniff_802_11 228 16 228 28 8 1 * 228 29 228 30 18446744073709551615 10 hdr_802_11 228 30 228 40 132 1 ; 228 40 228 41 18446744073709551615 10 hdr_802_11 229 3 229 13 132 1 = 229 14 229 15 18446744073709551615 1 ( 229 16 229 17 18446744073709551615 6 struct 229 17 229 23 18446744073709551615 12 sniff_802_11 229 24 229 36 8 1 * 229 37 229 38 18446744073709551615 1 ) 229 38 229 39 18446744073709551615 1 ( 229 39 229 40 18446744073709551615 6 buffer 229 40 229 46 131 1 + 229 47 229 48 18446744073709551615 16 PRISM_HEADER_LEN 229 49 229 65 18446744073709551615 1 ) 229 65 229 66 18446744073709551615 1 ; 229 66 229 67 18446744073709551615 3 int 230 3 230 6 18446744073709551615 8 qos_type 230 7 230 15 133 1 = 230 16 230 17 18446744073709551615 16 TAKE_N_BITS_FROM 230 18 230 34 133 1 ( 230 34 230 35 18446744073709551615 10 hdr_802_11 230 35 230 45 18446744073709551615 2 -> 230 45 230 47 18446744073709551615 13 frame_control 230 47 230 60 18446744073709551615 1 [ 230 60 230 61 18446744073709551615 1 0 230 61 230 62 18446744073709551615 1 ] 230 62 230 63 18446744073709551615 1 , 230 63 230 64 18446744073709551615 1 2 230 65 230 66 18446744073709551615 1 , 230 66 230 67 18446744073709551615 1 2 230 68 230 69 18446744073709551615 1 ) 230 69 230 70 18446744073709551615 1 ; 230 70 230 71 18446744073709551615 3 int 231 3 231 6 18446744073709551615 16 packet_direction 231 7 231 23 134 1 = 231 24 231 25 18446744073709551615 16 TAKE_N_BITS_FROM 231 26 231 42 134 1 ( 231 42 231 43 18446744073709551615 10 hdr_802_11 231 43 231 53 18446744073709551615 2 -> 231 53 231 55 18446744073709551615 13 frame_control 231 55 231 68 18446744073709551615 1 [ 231 68 231 69 18446744073709551615 1 1 231 69 231 70 18446744073709551615 1 ] 231 70 231 71 18446744073709551615 1 , 231 71 231 72 18446744073709551615 1 0 231 73 231 74 18446744073709551615 1 , 231 74 231 75 18446744073709551615 1 2 231 76 231 77 18446744073709551615 1 ) 231 77 231 78 18446744073709551615 1 ; 231 78 231 79 18446744073709551615 3 int 232 3 232 6 18446744073709551615 14 data_protected 232 7 232 21 135 1 = 232 22 232 23 18446744073709551615 16 TAKE_N_BITS_FROM 232 24 232 40 135 1 ( 232 40 232 41 18446744073709551615 10 hdr_802_11 232 41 232 51 18446744073709551615 2 -> 232 51 232 53 18446744073709551615 13 frame_control 232 53 232 66 18446744073709551615 1 [ 232 66 232 67 18446744073709551615 1 1 232 67 232 68 18446744073709551615 1 ] 232 68 232 69 18446744073709551615 1 , 232 69 232 70 18446744073709551615 1 6 232 71 232 72 18446744073709551615 1 , 232 72 232 73 18446744073709551615 1 1 232 74 232 75 18446744073709551615 1 ) 232 75 232 76 18446744073709551615 1 ; 232 76 232 77 18446744073709551615 6 struct 233 3 233 9 18446744073709551615 10 eapol_info 233 10 233 20 50 1 * 233 21 233 22 18446744073709551615 17 packet_eapol_info 233 22 233 39 136 1 = 233 40 233 41 18446744073709551615 4 NULL 233 42 233 46 136 1 ; 233 46 233 47 18446744073709551615 3 int 235 3 235 6 18446744073709551615 11 sha1_length 235 7 235 18 137 1 = 235 19 235 20 18446744073709551615 2 16 235 21 235 23 18446744073709551615 1 ; 235 23 235 24 18446744073709551615 6 u_char 237 3 237 9 1 1 * 237 10 237 11 18446744073709551615 11 sta_address 237 11 237 22 138 1 ; 237 22 237 23 18446744073709551615 2 if 238 3 238 5 18446744073709551615 1 ( 238 5 238 6 18446744073709551615 16 packet_direction 238 6 238 22 134 2 == 238 23 238 25 18446744073709551615 1 2 238 26 238 27 18446744073709551615 1 ) 238 27 238 28 18446744073709551615 1 { 238 29 238 30 18446744073709551615 11 sta_address 239 5 239 16 138 1 = 239 17 239 18 18446744073709551615 10 hdr_802_11 239 19 239 29 132 2 -> 239 29 239 31 18446744073709551615 5 addr1 239 31 239 36 11 1 ; 239 36 239 37 18446744073709551615 1 } 240 3 240 4 18446744073709551615 4 else 241 3 241 7 18446744073709551615 2 if 241 8 241 10 18446744073709551615 1 ( 241 10 241 11 18446744073709551615 16 packet_direction 241 11 241 27 134 2 == 241 28 241 30 18446744073709551615 1 1 241 31 241 32 18446744073709551615 1 ) 241 32 241 33 18446744073709551615 1 { 241 34 241 35 18446744073709551615 11 sta_address 242 5 242 16 138 1 = 242 17 242 18 18446744073709551615 10 hdr_802_11 242 19 242 29 132 2 -> 242 29 242 31 18446744073709551615 5 addr2 242 31 242 36 12 1 ; 242 36 242 37 18446744073709551615 1 } 243 3 243 4 18446744073709551615 2 if 245 3 245 5 18446744073709551615 1 ( 245 5 245 6 18446744073709551615 8 qos_type 245 6 245 14 133 2 == 245 15 245 17 18446744073709551615 1 2 245 18 245 19 18446744073709551615 1 ) 245 19 245 20 18446744073709551615 1 { 245 21 245 22 18446744073709551615 2 if 246 5 246 7 18446744073709551615 1 ( 246 7 246 8 18446744073709551615 14 data_protected 246 8 246 22 135 1 ) 246 22 246 23 18446744073709551615 1 { 246 24 246 25 18446744073709551615 2 if 247 7 247 9 18446744073709551615 1 ( 247 9 247 10 18446744073709551615 11 hashmap_get 247 10 247 21 139 1 ( 247 21 247 22 139 3 map 247 22 247 25 61 1 , 247 25 247 26 139 12 mac_toString 247 27 247 39 68 1 ( 247 39 247 40 68 11 sta_address 247 40 247 51 138 1 ) 247 51 247 52 68 1 , 247 52 247 53 139 1 ( 247 54 247 55 18446744073709551615 4 void 247 55 247 59 18446744073709551615 1 * 247 60 247 61 18446744073709551615 1 * 247 61 247 62 18446744073709551615 1 ) 247 62 247 63 18446744073709551615 1 & 247 63 247 64 18446744073709551615 17 packet_eapol_info 247 64 247 81 136 1 ) 247 81 247 82 139 2 == 247 83 247 85 18446744073709551615 6 MAP_OK 247 86 247 92 18446744073709551615 2 && 247 93 247 95 18446744073709551615 17 packet_eapol_info 247 96 247 113 136 2 -> 247 113 247 115 18446744073709551615 6 status 247 115 247 121 55 2 == 247 122 247 124 18446744073709551615 7 SUCCESS 247 125 247 132 6 1 ) 247 132 247 133 18446744073709551615 1 { 247 134 247 135 18446744073709551615 6 printf 248 9 248 15 92 1 ( 248 15 248 16 92 25 "I'm going to decrypt.\n" 248 16 248 41 18446744073709551615 1 ) 248 41 248 42 92 1 ; 248 42 248 43 18446744073709551615 14 packet_decrypt 249 9 249 23 67 1 ( 249 23 249 24 67 6 header 249 24 249 30 130 1 , 249 30 249 31 67 6 buffer 249 32 249 38 131 1 ) 249 38 249 39 67 1 ; 249 39 249 40 18446744073709551615 1 } 250 7 250 8 18446744073709551615 4 else 251 7 251 11 18446744073709551615 1 { 251 12 251 13 18446744073709551615 10 // Discard 252 9 252 19 18446744073709551615 1 } 253 7 253 8 18446744073709551615 1 } 254 5 254 6 18446744073709551615 4 else 255 5 255 9 18446744073709551615 1 { 255 10 255 11 18446744073709551615 5 const 256 7 256 12 18446744073709551615 6 struct 256 13 256 19 18446744073709551615 9 sniff_LLC 256 20 256 29 23 1 * 256 30 256 31 18446744073709551615 7 hdr_llc 256 31 256 38 140 1 ; 256 38 256 39 18446744073709551615 7 hdr_llc 257 7 257 14 140 1 = 257 15 257 16 18446744073709551615 1 ( 257 17 257 18 18446744073709551615 6 struct 257 18 257 24 18446744073709551615 9 sniff_LLC 257 25 257 34 23 1 * 257 35 257 36 18446744073709551615 1 ) 257 36 257 37 18446744073709551615 1 ( 257 37 257 38 18446744073709551615 6 buffer 257 38 257 44 131 1 + 257 45 257 46 18446744073709551615 16 PRISM_HEADER_LEN 257 47 257 63 18446744073709551615 1 + 257 64 257 65 18446744073709551615 6 sizeof 257 66 257 72 18446744073709551615 1 ( 257 72 257 73 18446744073709551615 6 struct 257 73 257 79 18446744073709551615 12 sniff_802_11 257 80 257 92 8 1 ) 257 92 257 93 18446744073709551615 1 ) 257 93 257 94 18446744073709551615 1 ; 257 94 257 95 18446744073709551615 2 if 258 7 258 9 18446744073709551615 1 ( 258 9 258 10 18446744073709551615 7 hdr_llc 258 10 258 17 140 2 -> 258 17 258 19 18446744073709551615 4 dsap 258 19 258 23 24 2 == 258 24 258 26 18446744073709551615 4 0xaa 258 27 258 31 18446744073709551615 1 ) 258 31 258 32 18446744073709551615 1 { 258 33 258 34 18446744073709551615 5 const 259 9 259 14 18446744073709551615 6 struct 259 15 259 21 18446744073709551615 10 sniff_SNAP 259 22 259 32 27 1 * 259 33 259 34 18446744073709551615 8 hdr_snap 259 34 259 42 141 1 ; 259 42 259 43 18446744073709551615 8 hdr_snap 260 9 260 17 141 1 = 260 18 260 19 18446744073709551615 1 ( 260 20 260 21 18446744073709551615 6 struct 260 21 260 27 18446744073709551615 10 sniff_SNAP 260 28 260 38 27 1 * 260 39 260 40 18446744073709551615 1 ) 260 40 260 41 18446744073709551615 1 ( 260 41 260 42 18446744073709551615 6 buffer 260 42 260 48 131 1 + 260 49 260 50 18446744073709551615 16 PRISM_HEADER_LEN 260 51 260 67 18446744073709551615 1 + 260 68 260 69 18446744073709551615 6 sizeof 260 70 260 76 18446744073709551615 1 ( 260 76 260 77 18446744073709551615 6 struct 260 77 260 83 18446744073709551615 12 sniff_802_11 260 84 260 96 8 1 ) 260 96 260 97 18446744073709551615 1 + 260 98 260 99 18446744073709551615 6 sizeof 260 100 260 106 18446744073709551615 1 ( 260 106 260 107 18446744073709551615 6 struct 260 107 260 113 18446744073709551615 9 sniff_LLC 260 114 260 123 23 1 ) 260 123 260 124 18446744073709551615 1 ) 260 124 260 125 18446744073709551615 1 ; 260 125 260 126 18446744073709551615 6 u_char 261 9 261 15 1 11 ether_eapol 261 16 261 27 142 1 [ 261 27 261 28 18446744073709551615 1 ] 261 28 261 29 18446744073709551615 1 = 261 30 261 31 18446744073709551615 1 { 261 32 261 33 18446744073709551615 4 0x88 261 33 261 37 18446744073709551615 1 , 261 37 261 38 18446744073709551615 4 0x8e 261 39 261 43 18446744073709551615 1 } 261 43 261 44 18446744073709551615 1 ; 261 44 261 45 18446744073709551615 2 if 262 9 262 11 18446744073709551615 1 ( 262 11 262 12 18446744073709551615 6 memcmp 262 12 262 18 143 1 ( 262 18 262 19 143 8 hdr_snap 262 19 262 27 141 2 -> 262 27 262 29 18446744073709551615 4 type 262 29 262 33 29 1 , 262 33 262 34 143 11 ether_eapol 262 35 262 46 142 1 , 262 46 262 47 143 1 2 262 48 262 49 18446744073709551615 1 ) 262 49 262 50 143 2 == 262 51 262 53 18446744073709551615 1 0 262 54 262 55 18446744073709551615 1 ) 262 55 262 56 18446744073709551615 1 { 262 57 262 58 18446744073709551615 5 const 263 11 263 16 18446744073709551615 6 struct 263 17 263 23 18446744073709551615 17 sniff_802_1x_auth 263 24 263 41 30 1 * 263 42 263 43 18446744073709551615 10 hdr_802_1x 263 43 263 53 144 1 ; 263 53 263 54 18446744073709551615 10 hdr_802_1x 264 11 264 21 144 1 = 264 22 264 23 18446744073709551615 1 ( 264 24 264 25 18446744073709551615 6 struct 264 25 264 31 18446744073709551615 17 sniff_802_1x_auth 264 32 264 49 30 1 * 264 50 264 51 18446744073709551615 1 ) 264 51 264 52 18446744073709551615 1 ( 264 52 264 53 18446744073709551615 6 buffer 264 53 264 59 131 1 + 264 60 264 61 18446744073709551615 16 PRISM_HEADER_LEN 264 62 264 78 18446744073709551615 1 + 264 79 264 80 18446744073709551615 6 sizeof 264 81 264 87 18446744073709551615 1 ( 264 87 264 88 18446744073709551615 6 struct 264 88 264 94 18446744073709551615 12 sniff_802_11 264 95 264 107 8 1 ) 264 107 264 108 18446744073709551615 1 + 264 109 264 110 18446744073709551615 6 sizeof 264 111 264 117 18446744073709551615 1 ( 264 117 264 118 18446744073709551615 6 struct 264 118 264 124 18446744073709551615 9 sniff_LLC 264 125 264 134 23 1 ) 264 134 264 135 18446744073709551615 1 + 264 136 264 137 18446744073709551615 6 sizeof 264 138 264 144 18446744073709551615 1 ( 264 144 264 145 18446744073709551615 6 struct 264 145 264 151 18446744073709551615 10 sniff_SNAP 264 152 264 162 27 1 ) 264 162 264 163 18446744073709551615 1 ) 264 163 264 164 18446744073709551615 1 ; 264 164 264 165 18446744073709551615 3 int 265 11 265 14 18446744073709551615 20 get_from_hashmap_res 265 15 265 35 145 1 = 265 36 265 37 18446744073709551615 11 hashmap_get 265 38 265 49 139 1 ( 265 49 265 50 139 3 map 265 50 265 53 61 1 , 265 53 265 54 139 12 mac_toString 265 55 265 67 68 1 ( 265 67 265 68 68 11 sta_address 265 68 265 79 138 1 ) 265 79 265 80 68 1 , 265 80 265 81 139 1 ( 265 82 265 83 18446744073709551615 4 void 265 83 265 87 18446744073709551615 1 * 265 88 265 89 18446744073709551615 1 * 265 89 265 90 18446744073709551615 1 ) 265 90 265 91 18446744073709551615 1 & 265 91 265 92 18446744073709551615 17 packet_eapol_info 265 92 265 109 136 1 ) 265 109 265 110 139 1 ; 265 110 265 111 18446744073709551615 2 if 267 11 267 13 18446744073709551615 1 ( 267 13 267 14 18446744073709551615 20 get_from_hashmap_res 267 14 267 34 145 2 == 267 35 267 37 18446744073709551615 11 MAP_MISSING 267 38 267 49 18446744073709551615 2 && 267 50 267 52 18446744073709551615 16 packet_direction 267 53 267 69 134 2 == 267 70 267 72 18446744073709551615 1 2 267 73 267 74 18446744073709551615 2 && 267 75 267 77 18446744073709551615 1 ( 267 78 267 79 18446744073709551615 16 TAKE_N_BITS_FROM 267 79 267 95 18446744073709551615 1 ( 267 95 267 96 18446744073709551615 10 hdr_802_1x 267 96 267 106 18446744073709551615 2 -> 267 106 267 108 18446744073709551615 15 key_information 267 108 267 123 18446744073709551615 1 [ 267 123 267 124 18446744073709551615 1 0 267 124 267 125 18446744073709551615 1 ] 267 125 267 126 18446744073709551615 1 , 267 126 267 127 18446744073709551615 1 0 267 128 267 129 18446744073709551615 1 , 267 129 267 130 18446744073709551615 1 1 267 131 267 132 18446744073709551615 1 ) 267 132 267 133 18446744073709551615 1 ) 267 133 267 134 18446744073709551615 2 == 267 135 267 137 18446744073709551615 1 0 267 138 267 139 18446744073709551615 1 ) 267 139 267 140 18446744073709551615 1 { 267 141 267 142 18446744073709551615 6 struct 268 13 268 19 18446744073709551615 10 eapol_info 268 20 268 30 50 1 * 268 31 268 32 18446744073709551615 21 new_packet_eapol_info 268 32 268 53 146 1 = 268 54 268 55 18446744073709551615 6 malloc 268 56 268 62 100 1 ( 268 62 268 63 100 6 sizeof 268 63 268 69 18446744073709551615 1 ( 268 69 268 70 18446744073709551615 6 struct 268 70 268 76 18446744073709551615 10 eapol_info 268 77 268 87 50 1 ) 268 87 268 88 18446744073709551615 1 ) 268 88 268 89 100 1 ; 268 89 268 90 18446744073709551615 11 hashmap_put 269 13 269 24 147 1 ( 269 24 269 25 147 3 map 269 25 269 28 61 1 , 269 28 269 29 147 12 mac_toString 269 30 269 42 68 1 ( 269 42 269 43 68 11 sta_address 269 43 269 54 138 1 ) 269 54 269 55 68 1 , 269 55 269 56 147 21 new_packet_eapol_info 269 57 269 78 146 1 ) 269 78 269 79 147 1 ; 269 79 269 80 18446744073709551615 6 memcpy 270 13 270 19 124 1 ( 270 19 270 20 124 21 new_packet_eapol_info 270 20 270 41 146 2 -> 270 41 270 43 18446744073709551615 6 ANonce 270 43 270 49 52 1 , 270 49 270 50 124 10 hdr_802_1x 270 51 270 61 144 2 -> 270 61 270 63 18446744073709551615 13 wpa_key_nonce 270 63 270 76 38 1 , 270 76 270 77 124 2 32 270 78 270 80 18446744073709551615 1 ) 270 80 270 81 124 1 ; 270 81 270 82 18446744073709551615 6 memcpy 271 13 271 19 124 1 ( 271 19 271 20 124 21 new_packet_eapol_info 271 20 271 41 146 2 -> 271 41 271 43 18446744073709551615 11 last_replay 271 43 271 54 56 1 , 271 54 271 55 124 10 hdr_802_1x 271 56 271 66 144 2 -> 271 66 271 68 18446744073709551615 14 replay_counter 271 68 271 82 37 1 , 271 82 271 83 124 1 8 271 84 271 85 18446744073709551615 1 ) 271 85 271 86 124 1 ; 271 86 271 87 18446744073709551615 21 new_packet_eapol_info 272 13 272 34 146 2 -> 272 34 272 36 18446744073709551615 6 status 272 36 272 42 55 1 = 272 43 272 44 18446744073709551615 19 WAITING_EAPOL_KEY_2 272 45 272 64 3 1 ; 272 64 272 65 18446744073709551615 1 } 273 11 273 12 18446744073709551615 4 else 274 11 274 15 18446744073709551615 2 if 274 16 274 18 18446744073709551615 1 ( 274 18 274 19 18446744073709551615 20 get_from_hashmap_res 274 19 274 39 145 2 == 274 40 274 42 18446744073709551615 6 MAP_OK 274 43 274 49 18446744073709551615 1 ) 274 49 274 50 18446744073709551615 1 { 274 51 274 52 18446744073709551615 12 eapol_status 275 13 275 25 7 14 current_status 275 26 275 40 148 1 = 275 41 275 42 18446744073709551615 17 packet_eapol_info 275 43 275 60 136 2 -> 275 60 275 62 18446744073709551615 6 status 275 62 275 68 55 1 ; 275 68 275 69 18446744073709551615 7 u_short 276 13 276 20 149 11 data_length 276 21 276 32 150 1 = 276 33 276 34 18446744073709551615 1 ( 276 35 276 36 18446744073709551615 1 ( 276 36 276 37 18446744073709551615 10 hdr_802_1x 276 37 276 47 144 2 -> 276 47 276 49 18446744073709551615 19 wpa_key_data_length 276 49 276 68 43 1 [ 276 68 276 69 18446744073709551615 1 0 276 69 276 70 18446744073709551615 1 ] 276 70 276 71 18446744073709551615 2 << 276 72 276 74 18446744073709551615 1 8 276 75 276 76 18446744073709551615 1 ) 276 76 276 77 18446744073709551615 1 + 276 78 276 79 18446744073709551615 1 ( 276 80 276 81 18446744073709551615 10 hdr_802_1x 276 81 276 91 144 2 -> 276 91 276 93 18446744073709551615 19 wpa_key_data_length 276 93 276 112 43 1 [ 276 112 276 113 18446744073709551615 1 1 276 113 276 114 18446744073709551615 1 ] 276 114 276 115 18446744073709551615 1 ) 276 115 276 116 18446744073709551615 1 ) 276 116 276 117 18446744073709551615 1 ; 276 117 276 118 18446744073709551615 2 if 277 13 277 15 18446744073709551615 1 ( 277 15 277 16 18446744073709551615 16 packet_direction 277 16 277 32 134 2 == 277 33 277 35 18446744073709551615 1 2 277 36 277 37 18446744073709551615 2 && 277 38 277 40 18446744073709551615 1 ( 277 41 277 42 18446744073709551615 16 TAKE_N_BITS_FROM 277 42 277 58 18446744073709551615 1 ( 277 58 277 59 18446744073709551615 10 hdr_802_1x 277 59 277 69 18446744073709551615 2 -> 277 69 277 71 18446744073709551615 15 key_information 277 71 277 86 18446744073709551615 1 [ 277 86 277 87 18446744073709551615 1 0 277 87 277 88 18446744073709551615 1 ] 277 88 277 89 18446744073709551615 1 , 277 89 277 90 18446744073709551615 1 0 277 91 277 92 18446744073709551615 1 , 277 92 277 93 18446744073709551615 1 1 277 94 277 95 18446744073709551615 1 ) 277 95 277 96 18446744073709551615 1 ) 277 96 277 97 18446744073709551615 2 == 277 98 277 100 18446744073709551615 1 0 277 101 277 102 18446744073709551615 1 ) 277 102 277 103 18446744073709551615 1 { 277 104 277 105 18446744073709551615 8 // msg 1 277 106 277 114 18446744073709551615 14 hashmap_remove 278 15 278 29 151 1 ( 278 29 278 30 151 3 map 278 30 278 33 61 1 , 278 33 278 34 151 12 mac_toString 278 35 278 47 68 1 ( 278 47 278 48 68 11 sta_address 278 48 278 59 138 1 ) 278 59 278 60 68 1 ) 278 60 278 61 151 1 ; 278 61 278 62 18446744073709551615 6 struct 279 15 279 21 18446744073709551615 10 eapol_info 279 22 279 32 50 1 * 279 33 279 34 18446744073709551615 21 new_packet_eapol_info 279 34 279 55 152 1 = 279 56 279 57 18446744073709551615 6 malloc 279 58 279 64 100 1 ( 279 64 279 65 100 6 sizeof 279 65 279 71 18446744073709551615 1 ( 279 71 279 72 18446744073709551615 6 struct 279 72 279 78 18446744073709551615 10 eapol_info 279 79 279 89 50 1 ) 279 89 279 90 18446744073709551615 1 ) 279 90 279 91 100 1 ; 279 91 279 92 18446744073709551615 11 hashmap_put 280 15 280 26 147 1 ( 280 26 280 27 147 3 map 280 27 280 30 61 1 , 280 30 280 31 147 12 mac_toString 280 32 280 44 68 1 ( 280 44 280 45 68 11 sta_address 280 45 280 56 138 1 ) 280 56 280 57 68 1 , 280 57 280 58 147 21 new_packet_eapol_info 280 59 280 80 152 1 ) 280 80 280 81 147 1 ; 280 81 280 82 18446744073709551615 6 memcpy 281 15 281 21 124 1 ( 281 21 281 22 124 21 new_packet_eapol_info 281 22 281 43 152 2 -> 281 43 281 45 18446744073709551615 6 ANonce 281 45 281 51 52 1 , 281 51 281 52 124 10 hdr_802_1x 281 53 281 63 144 2 -> 281 63 281 65 18446744073709551615 13 wpa_key_nonce 281 65 281 78 38 1 , 281 78 281 79 124 2 32 281 80 281 82 18446744073709551615 1 ) 281 82 281 83 124 1 ; 281 83 281 84 18446744073709551615 6 memcpy 282 15 282 21 124 1 ( 282 21 282 22 124 21 new_packet_eapol_info 282 22 282 43 152 2 -> 282 43 282 45 18446744073709551615 11 last_replay 282 45 282 56 56 1 , 282 56 282 57 124 10 hdr_802_1x 282 58 282 68 144 2 -> 282 68 282 70 18446744073709551615 14 replay_counter 282 70 282 84 37 1 , 282 84 282 85 124 1 8 282 86 282 87 18446744073709551615 1 ) 282 87 282 88 124 1 ; 282 88 282 89 18446744073709551615 21 new_packet_eapol_info 283 15 283 36 152 2 -> 283 36 283 38 18446744073709551615 6 status 283 38 283 44 55 1 = 283 45 283 46 18446744073709551615 19 WAITING_EAPOL_KEY_2 283 47 283 66 3 1 ; 283 66 283 67 18446744073709551615 1 } 284 13 284 14 18446744073709551615 2 if 285 13 285 15 18446744073709551615 1 ( 285 15 285 16 18446744073709551615 14 current_status 285 16 285 30 148 2 == 285 31 285 33 18446744073709551615 19 WAITING_EAPOL_KEY_2 285 34 285 53 3 2 && 285 54 285 56 18446744073709551615 16 packet_direction 285 57 285 73 134 2 == 285 74 285 76 18446744073709551615 1 1 285 77 285 78 18446744073709551615 2 && 285 79 285 81 18446744073709551615 16 TAKE_N_BITS_FROM 285 82 285 98 18446744073709551615 1 ( 285 98 285 99 18446744073709551615 10 hdr_802_1x 285 99 285 109 18446744073709551615 2 -> 285 109 285 111 18446744073709551615 15 key_information 285 111 285 126 18446744073709551615 1 [ 285 126 285 127 18446744073709551615 1 0 285 127 285 128 18446744073709551615 1 ] 285 128 285 129 18446744073709551615 1 , 285 129 285 130 18446744073709551615 1 0 285 131 285 132 18446744073709551615 1 , 285 132 285 133 18446744073709551615 1 1 285 134 285 135 18446744073709551615 1 ) 285 135 285 136 18446744073709551615 2 && 285 137 285 139 18446744073709551615 1 ( 285 140 285 141 18446744073709551615 16 TAKE_N_BITS_FROM 285 141 285 157 18446744073709551615 1 ( 285 157 285 158 18446744073709551615 10 hdr_802_1x 285 158 285 168 18446744073709551615 2 -> 285 168 285 170 18446744073709551615 15 key_information 285 170 285 185 18446744073709551615 1 [ 285 185 285 186 18446744073709551615 1 1 285 186 285 187 18446744073709551615 1 ] 285 187 285 188 18446744073709551615 1 , 285 188 285 189 18446744073709551615 1 6 285 190 285 191 18446744073709551615 1 , 285 191 285 192 18446744073709551615 1 1 285 193 285 194 18446744073709551615 1 ) 285 194 285 195 18446744073709551615 1 ) 285 195 285 196 18446744073709551615 2 == 285 197 285 199 18446744073709551615 1 0 285 200 285 201 18446744073709551615 2 && 285 202 285 204 18446744073709551615 1 ( 285 205 285 206 18446744073709551615 16 TAKE_N_BITS_FROM 285 206 285 222 18446744073709551615 1 ( 285 222 285 223 18446744073709551615 10 hdr_802_1x 285 223 285 233 18446744073709551615 2 -> 285 233 285 235 18446744073709551615 15 key_information 285 235 285 250 18446744073709551615 1 [ 285 250 285 251 18446744073709551615 1 1 285 251 285 252 18446744073709551615 1 ] 285 252 285 253 18446744073709551615 1 , 285 253 285 254 18446744073709551615 1 7 285 255 285 256 18446744073709551615 1 , 285 256 285 257 18446744073709551615 1 1 285 258 285 259 18446744073709551615 1 ) 285 259 285 260 18446744073709551615 1 ) 285 260 285 261 18446744073709551615 2 == 285 262 285 264 18446744073709551615 1 0 285 265 285 266 18446744073709551615 2 && 285 267 285 269 18446744073709551615 11 data_length 285 270 285 281 150 1 > 285 282 285 283 18446744073709551615 1 0 285 284 285 285 18446744073709551615 2 && 285 286 285 288 18446744073709551615 6 memcmp 285 289 285 295 143 1 ( 285 295 285 296 143 17 packet_eapol_info 285 296 285 313 136 2 -> 285 313 285 315 18446744073709551615 11 last_replay 285 315 285 326 56 1 , 285 326 285 327 143 10 hdr_802_1x 285 328 285 338 144 2 -> 285 338 285 340 18446744073709551615 14 replay_counter 285 340 285 354 37 1 , 285 354 285 355 143 1 8 285 356 285 357 18446744073709551615 1 ) 285 357 285 358 143 2 == 285 359 285 361 18446744073709551615 1 0 285 362 285 363 18446744073709551615 1 ) 285 363 285 364 18446744073709551615 1 { 285 365 285 366 18446744073709551615 8 // msg 2 285 367 285 375 18446744073709551615 6 struct 286 15 286 21 18446744073709551615 3 ptk 286 22 286 25 44 1 * 286 26 286 27 18446744073709551615 3 PTK 286 27 286 30 153 1 = 286 31 286 32 18446744073709551615 1 ( 286 33 286 34 18446744073709551615 6 struct 286 34 286 40 18446744073709551615 3 ptk 286 41 286 44 44 1 * 286 45 286 46 18446744073709551615 1 ) 286 46 286 47 18446744073709551615 6 PRF512 286 47 286 53 69 1 ( 286 53 286 54 69 3 psk 286 54 286 57 58 1 , 286 57 286 58 69 1 A 286 59 286 60 0 1 , 286 60 286 61 69 6 strlen 286 62 286 68 90 1 ( 286 68 286 69 90 1 A 286 69 286 70 0 1 ) 286 70 286 71 90 1 , 286 71 286 72 69 14 ap_mac_address 286 73 286 87 57 1 , 286 87 286 88 69 11 sta_address 286 89 286 100 138 1 , 286 100 286 101 69 17 packet_eapol_info 286 102 286 119 136 2 -> 286 119 286 121 18446744073709551615 6 ANonce 286 121 286 127 52 1 , 286 127 286 128 69 10 hdr_802_1x 286 129 286 139 144 2 -> 286 139 286 141 18446744073709551615 13 wpa_key_nonce 286 141 286 154 38 1 ) 286 154 286 155 69 1 ; 286 155 286 156 18446744073709551615 6 u_char 287 15 287 21 1 1 * 287 22 287 23 18446744073709551615 8 real_MIC 287 23 287 31 154 1 = 287 32 287 33 18446744073709551615 6 malloc 287 34 287 40 100 1 ( 287 40 287 41 100 2 16 287 41 287 43 18446744073709551615 1 ) 287 43 287 44 100 1 ; 287 44 287 45 18446744073709551615 6 u_char 288 15 288 21 1 1 * 288 22 288 23 18446744073709551615 14 calculated_MIC 288 23 288 37 155 1 = 288 38 288 39 18446744073709551615 6 malloc 288 40 288 46 100 1 ( 288 46 288 47 100 2 16 288 47 288 49 18446744073709551615 1 ) 288 49 288 50 100 1 ; 288 50 288 51 18446744073709551615 6 memcpy 289 15 289 21 124 1 ( 289 21 289 22 124 8 real_MIC 289 22 289 30 154 1 , 289 30 289 31 124 10 hdr_802_1x 289 32 289 42 144 2 -> 289 42 289 44 18446744073709551615 11 wpa_key_MIC 289 44 289 55 42 1 , 289 55 289 56 124 2 16 289 57 289 59 18446744073709551615 1 ) 289 59 289 60 124 1 ; 289 60 289 61 18446744073709551615 6 memcpy 290 15 290 21 124 1 ( 290 21 290 22 124 10 hdr_802_1x 290 22 290 32 144 2 -> 290 32 290 34 18446744073709551615 11 wpa_key_MIC 290 34 290 45 42 1 , 290 45 290 46 124 8 NULL_MIC 290 47 290 55 2 1 , 290 55 290 56 124 2 16 290 57 290 59 18446744073709551615 1 ) 290 59 290 60 124 1 ; 290 60 290 61 18446744073709551615 4 HMAC 291 15 291 19 101 1 ( 291 19 291 20 101 8 EVP_sha1 291 20 291 28 102 1 ( 291 28 291 29 102 1 ) 291 29 291 30 102 1 , 291 30 291 31 101 3 PTK 291 32 291 35 153 2 -> 291 35 291 37 18446744073709551615 3 kck 291 37 291 40 45 1 , 291 40 291 41 101 2 16 291 42 291 44 18446744073709551615 1 , 291 44 291 45 101 10 hdr_802_1x 291 46 291 56 144 1 , 291 56 291 57 101 2 99 291 58 291 60 18446744073709551615 1 + 291 61 291 62 18446744073709551615 11 data_length 291 63 291 74 150 1 , 291 74 291 75 101 14 calculated_MIC 291 76 291 90 155 1 , 291 90 291 91 101 1 & 291 92 291 93 18446744073709551615 11 sha1_length 291 93 291 104 137 1 ) 291 104 291 105 101 1 ; 291 105 291 106 18446744073709551615 2 if 292 15 292 17 18446744073709551615 1 ( 292 17 292 18 18446744073709551615 6 memcmp 292 18 292 24 143 1 ( 292 24 292 25 143 8 real_MIC 292 25 292 33 154 1 , 292 33 292 34 143 14 calculated_MIC 292 35 292 49 155 1 , 292 49 292 50 143 2 16 292 51 292 53 18446744073709551615 1 ) 292 53 292 54 143 2 == 292 55 292 57 18446744073709551615 1 0 292 58 292 59 18446744073709551615 1 ) 292 59 292 60 18446744073709551615 1 { 292 61 292 62 18446744073709551615 6 memcpy 293 17 293 23 124 1 ( 293 23 293 24 124 17 packet_eapol_info 293 24 293 41 136 2 -> 293 41 293 43 18446744073709551615 6 SNonce 293 43 293 49 53 1 , 293 49 293 50 124 10 hdr_802_1x 293 51 293 61 144 2 -> 293 61 293 63 18446744073709551615 13 wpa_key_nonce 293 63 293 76 38 1 , 293 76 293 77 124 2 32 293 78 293 80 18446744073709551615 1 ) 293 80 293 81 124 1 ; 293 81 293 82 18446744073709551615 6 memcpy 294 17 294 23 124 1 ( 294 23 294 24 124 1 & 294 24 294 25 18446744073709551615 17 packet_eapol_info 294 25 294 42 136 2 -> 294 42 294 44 18446744073709551615 3 PTK 294 44 294 47 54 1 , 294 47 294 48 124 3 PTK 294 49 294 52 153 1 , 294 52 294 53 124 6 sizeof 294 54 294 60 18446744073709551615 1 ( 294 60 294 61 18446744073709551615 6 struct 294 61 294 67 18446744073709551615 3 ptk 294 68 294 71 44 1 ) 294 71 294 72 18446744073709551615 1 ) 294 72 294 73 124 1 ; 294 73 294 74 18446744073709551615 17 packet_eapol_info 295 17 295 34 136 2 -> 295 34 295 36 18446744073709551615 6 status 295 36 295 42 55 1 = 295 43 295 44 18446744073709551615 19 WAITING_EAPOL_KEY_3 295 45 295 64 4 1 ; 295 64 295 65 18446744073709551615 1 } 296 15 296 16 18446744073709551615 1 } 297 13 297 14 18446744073709551615 4 else 298 13 298 17 18446744073709551615 2 if 298 18 298 20 18446744073709551615 1 ( 298 20 298 21 18446744073709551615 14 current_status 298 21 298 35 148 2 == 298 36 298 38 18446744073709551615 19 WAITING_EAPOL_KEY_3 298 39 298 58 4 2 && 298 59 298 61 18446744073709551615 16 packet_direction 298 62 298 78 134 2 == 298 79 298 81 18446744073709551615 1 2 298 82 298 83 18446744073709551615 2 && 298 84 298 86 18446744073709551615 16 TAKE_N_BITS_FROM 298 87 298 103 18446744073709551615 1 ( 298 103 298 104 18446744073709551615 10 hdr_802_1x 298 104 298 114 18446744073709551615 2 -> 298 114 298 116 18446744073709551615 15 key_information 298 116 298 131 18446744073709551615 1 [ 298 131 298 132 18446744073709551615 1 0 298 132 298 133 18446744073709551615 1 ] 298 133 298 134 18446744073709551615 1 , 298 134 298 135 18446744073709551615 1 0 298 136 298 137 18446744073709551615 1 , 298 137 298 138 18446744073709551615 1 1 298 139 298 140 18446744073709551615 1 ) 298 140 298 141 18446744073709551615 2 && 298 142 298 144 18446744073709551615 1 ( 298 145 298 146 18446744073709551615 16 TAKE_N_BITS_FROM 298 146 298 162 18446744073709551615 1 ( 298 162 298 163 18446744073709551615 10 hdr_802_1x 298 163 298 173 18446744073709551615 2 -> 298 173 298 175 18446744073709551615 15 key_information 298 175 298 190 18446744073709551615 1 [ 298 190 298 191 18446744073709551615 1 1 298 191 298 192 18446744073709551615 1 ] 298 192 298 193 18446744073709551615 1 , 298 193 298 194 18446744073709551615 1 6 298 195 298 196 18446744073709551615 1 , 298 196 298 197 18446744073709551615 1 1 298 198 298 199 18446744073709551615 1 ) 298 199 298 200 18446744073709551615 1 ) 298 200 298 201 18446744073709551615 2 && 298 202 298 204 18446744073709551615 1 ( 298 205 298 206 18446744073709551615 16 TAKE_N_BITS_FROM 298 206 298 222 18446744073709551615 1 ( 298 222 298 223 18446744073709551615 10 hdr_802_1x 298 223 298 233 18446744073709551615 2 -> 298 233 298 235 18446744073709551615 15 key_information 298 235 298 250 18446744073709551615 1 [ 298 250 298 251 18446744073709551615 1 1 298 251 298 252 18446744073709551615 1 ] 298 252 298 253 18446744073709551615 1 , 298 253 298 254 18446744073709551615 1 7 298 255 298 256 18446744073709551615 1 , 298 256 298 257 18446744073709551615 1 1 298 258 298 259 18446744073709551615 1 ) 298 259 298 260 18446744073709551615 1 ) 298 260 298 261 18446744073709551615 1 ) 298 261 298 262 18446744073709551615 1 { 298 263 298 264 18446744073709551615 8 // msg 3 298 265 298 273 18446744073709551615 6 u_char 299 15 299 21 1 1 * 299 22 299 23 18446744073709551615 3 KCK 299 23 299 26 156 1 = 299 27 299 28 18446744073709551615 17 packet_eapol_info 299 29 299 46 136 2 -> 299 46 299 48 18446744073709551615 3 PTK 299 48 299 51 54 1 . 299 51 299 52 18446744073709551615 3 kck 299 52 299 55 45 1 ; 299 55 299 56 18446744073709551615 6 u_char 300 15 300 21 1 1 * 300 22 300 23 18446744073709551615 8 real_MIC 300 23 300 31 157 1 = 300 32 300 33 18446744073709551615 6 malloc 300 34 300 40 100 1 ( 300 40 300 41 100 2 16 300 41 300 43 18446744073709551615 1 ) 300 43 300 44 100 1 ; 300 44 300 45 18446744073709551615 6 u_char 301 15 301 21 1 1 * 301 22 301 23 18446744073709551615 14 calculated_MIC 301 23 301 37 158 1 = 301 38 301 39 18446744073709551615 6 malloc 301 40 301 46 100 1 ( 301 46 301 47 100 2 16 301 47 301 49 18446744073709551615 1 ) 301 49 301 50 100 1 ; 301 50 301 51 18446744073709551615 6 memcpy 302 15 302 21 124 1 ( 302 21 302 22 124 8 real_MIC 302 22 302 30 157 1 , 302 30 302 31 124 10 hdr_802_1x 302 32 302 42 144 2 -> 302 42 302 44 18446744073709551615 11 wpa_key_MIC 302 44 302 55 42 1 , 302 55 302 56 124 2 16 302 57 302 59 18446744073709551615 1 ) 302 59 302 60 124 1 ; 302 60 302 61 18446744073709551615 6 memcpy 303 15 303 21 124 1 ( 303 21 303 22 124 10 hdr_802_1x 303 22 303 32 144 2 -> 303 32 303 34 18446744073709551615 11 wpa_key_MIC 303 34 303 45 42 1 , 303 45 303 46 124 8 NULL_MIC 303 47 303 55 2 1 , 303 55 303 56 124 2 16 303 57 303 59 18446744073709551615 1 ) 303 59 303 60 124 1 ; 303 60 303 61 18446744073709551615 4 HMAC 304 15 304 19 101 1 ( 304 19 304 20 101 8 EVP_sha1 304 20 304 28 102 1 ( 304 28 304 29 102 1 ) 304 29 304 30 102 1 , 304 30 304 31 101 3 KCK 304 32 304 35 156 1 , 304 35 304 36 101 2 16 304 37 304 39 18446744073709551615 1 , 304 39 304 40 101 10 hdr_802_1x 304 41 304 51 144 1 , 304 51 304 52 101 2 99 304 53 304 55 18446744073709551615 1 + 304 56 304 57 18446744073709551615 11 data_length 304 58 304 69 150 1 , 304 69 304 70 101 14 calculated_MIC 304 71 304 85 158 1 , 304 85 304 86 101 1 & 304 87 304 88 18446744073709551615 11 sha1_length 304 88 304 99 137 1 ) 304 99 304 100 101 1 ; 304 100 304 101 18446744073709551615 2 if 305 15 305 17 18446744073709551615 1 ( 305 17 305 18 18446744073709551615 6 memcmp 305 18 305 24 143 1 ( 305 24 305 25 143 8 real_MIC 305 25 305 33 157 1 , 305 33 305 34 143 14 calculated_MIC 305 35 305 49 158 1 , 305 49 305 50 143 2 16 305 51 305 53 18446744073709551615 1 ) 305 53 305 54 143 2 == 305 55 305 57 18446744073709551615 1 0 305 58 305 59 18446744073709551615 1 ) 305 59 305 60 18446744073709551615 1 { 305 61 305 62 18446744073709551615 17 packet_eapol_info 306 17 306 34 136 2 -> 306 34 306 36 18446744073709551615 6 status 306 36 306 42 55 1 = 306 43 306 44 18446744073709551615 19 WAITING_EAPOL_KEY_4 306 45 306 64 5 1 ; 306 64 306 65 18446744073709551615 6 memcpy 307 17 307 23 124 1 ( 307 23 307 24 124 17 packet_eapol_info 307 24 307 41 136 2 -> 307 41 307 43 18446744073709551615 11 last_replay 307 43 307 54 56 1 , 307 54 307 55 124 10 hdr_802_1x 307 56 307 66 144 2 -> 307 66 307 68 18446744073709551615 14 replay_counter 307 68 307 82 37 1 , 307 82 307 83 124 1 8 307 84 307 85 18446744073709551615 1 ) 307 85 307 86 124 1 ; 307 86 307 87 18446744073709551615 1 } 308 15 308 16 18446744073709551615 1 } 309 13 309 14 18446744073709551615 4 else 310 13 310 17 18446744073709551615 2 if 310 18 310 20 18446744073709551615 1 ( 310 20 310 21 18446744073709551615 14 current_status 310 21 310 35 148 2 == 310 36 310 38 18446744073709551615 19 WAITING_EAPOL_KEY_4 310 39 310 58 5 2 && 310 59 310 61 18446744073709551615 16 packet_direction 310 62 310 78 134 2 == 310 79 310 81 18446744073709551615 1 1 310 82 310 83 18446744073709551615 2 && 310 84 310 86 18446744073709551615 16 TAKE_N_BITS_FROM 310 87 310 103 18446744073709551615 1 ( 310 103 310 104 18446744073709551615 10 hdr_802_1x 310 104 310 114 18446744073709551615 2 -> 310 114 310 116 18446744073709551615 15 key_information 310 116 310 131 18446744073709551615 1 [ 310 131 310 132 18446744073709551615 1 0 310 132 310 133 18446744073709551615 1 ] 310 133 310 134 18446744073709551615 1 , 310 134 310 135 18446744073709551615 1 0 310 136 310 137 18446744073709551615 1 , 310 137 310 138 18446744073709551615 1 1 310 139 310 140 18446744073709551615 1 ) 310 140 310 141 18446744073709551615 2 && 310 142 310 144 18446744073709551615 1 ( 310 145 310 146 18446744073709551615 16 TAKE_N_BITS_FROM 310 146 310 162 18446744073709551615 1 ( 310 162 310 163 18446744073709551615 10 hdr_802_1x 310 163 310 173 18446744073709551615 2 -> 310 173 310 175 18446744073709551615 15 key_information 310 175 310 190 18446744073709551615 1 [ 310 190 310 191 18446744073709551615 1 1 310 191 310 192 18446744073709551615 1 ] 310 192 310 193 18446744073709551615 1 , 310 193 310 194 18446744073709551615 1 6 310 195 310 196 18446744073709551615 1 , 310 196 310 197 18446744073709551615 1 1 310 198 310 199 18446744073709551615 1 ) 310 199 310 200 18446744073709551615 1 ) 310 200 310 201 18446744073709551615 2 == 310 202 310 204 18446744073709551615 1 0 310 205 310 206 18446744073709551615 2 && 310 207 310 209 18446744073709551615 1 ( 310 210 310 211 18446744073709551615 16 TAKE_N_BITS_FROM 310 211 310 227 18446744073709551615 1 ( 310 227 310 228 18446744073709551615 10 hdr_802_1x 310 228 310 238 18446744073709551615 2 -> 310 238 310 240 18446744073709551615 15 key_information 310 240 310 255 18446744073709551615 1 [ 310 255 310 256 18446744073709551615 1 1 310 256 310 257 18446744073709551615 1 ] 310 257 310 258 18446744073709551615 1 , 310 258 310 259 18446744073709551615 1 7 310 260 310 261 18446744073709551615 1 , 310 261 310 262 18446744073709551615 1 1 310 263 310 264 18446744073709551615 1 ) 310 264 310 265 18446744073709551615 1 ) 310 265 310 266 18446744073709551615 2 == 310 267 310 269 18446744073709551615 1 0 310 270 310 271 18446744073709551615 2 && 310 272 310 274 18446744073709551615 6 memcmp 310 275 310 281 143 1 ( 310 281 310 282 143 17 packet_eapol_info 310 282 310 299 136 2 -> 310 299 310 301 18446744073709551615 11 last_replay 310 301 310 312 56 1 , 310 312 310 313 143 10 hdr_802_1x 310 314 310 324 144 2 -> 310 324 310 326 18446744073709551615 14 replay_counter 310 326 310 340 37 1 , 310 340 310 341 143 1 8 310 342 310 343 18446744073709551615 1 ) 310 343 310 344 143 2 == 310 345 310 347 18446744073709551615 1 0 310 348 310 349 18446744073709551615 1 ) 310 349 310 350 18446744073709551615 1 { 310 351 310 352 18446744073709551615 8 // msg 4 310 353 310 361 18446744073709551615 6 u_char 311 15 311 21 1 1 * 311 22 311 23 18446744073709551615 3 KCK 311 23 311 26 159 1 = 311 27 311 28 18446744073709551615 17 packet_eapol_info 311 29 311 46 136 2 -> 311 46 311 48 18446744073709551615 3 PTK 311 48 311 51 54 1 . 311 51 311 52 18446744073709551615 3 kck 311 52 311 55 45 1 ; 311 55 311 56 18446744073709551615 6 u_char 312 15 312 21 1 1 * 312 22 312 23 18446744073709551615 8 real_MIC 312 23 312 31 160 1 = 312 32 312 33 18446744073709551615 6 malloc 312 34 312 40 100 1 ( 312 40 312 41 100 2 16 312 41 312 43 18446744073709551615 1 ) 312 43 312 44 100 1 ; 312 44 312 45 18446744073709551615 6 u_char 313 15 313 21 1 1 * 313 22 313 23 18446744073709551615 14 calculated_MIC 313 23 313 37 161 1 = 313 38 313 39 18446744073709551615 6 malloc 313 40 313 46 100 1 ( 313 46 313 47 100 2 16 313 47 313 49 18446744073709551615 1 ) 313 49 313 50 100 1 ; 313 50 313 51 18446744073709551615 6 memcpy 314 15 314 21 124 1 ( 314 21 314 22 124 8 real_MIC 314 22 314 30 160 1 , 314 30 314 31 124 10 hdr_802_1x 314 32 314 42 144 2 -> 314 42 314 44 18446744073709551615 11 wpa_key_MIC 314 44 314 55 42 1 , 314 55 314 56 124 2 16 314 57 314 59 18446744073709551615 1 ) 314 59 314 60 124 1 ; 314 60 314 61 18446744073709551615 6 memcpy 315 15 315 21 124 1 ( 315 21 315 22 124 10 hdr_802_1x 315 22 315 32 144 2 -> 315 32 315 34 18446744073709551615 11 wpa_key_MIC 315 34 315 45 42 1 , 315 45 315 46 124 8 NULL_MIC 315 47 315 55 2 1 , 315 55 315 56 124 2 16 315 57 315 59 18446744073709551615 1 ) 315 59 315 60 124 1 ; 315 60 315 61 18446744073709551615 4 HMAC 316 15 316 19 101 1 ( 316 19 316 20 101 8 EVP_sha1 316 20 316 28 102 1 ( 316 28 316 29 102 1 ) 316 29 316 30 102 1 , 316 30 316 31 101 3 KCK 316 32 316 35 159 1 , 316 35 316 36 101 2 16 316 37 316 39 18446744073709551615 1 , 316 39 316 40 101 10 hdr_802_1x 316 41 316 51 144 1 , 316 51 316 52 101 2 99 316 53 316 55 18446744073709551615 1 + 316 56 316 57 18446744073709551615 11 data_length 316 58 316 69 150 1 , 316 69 316 70 101 14 calculated_MIC 316 71 316 85 161 1 , 316 85 316 86 101 1 & 316 87 316 88 18446744073709551615 11 sha1_length 316 88 316 99 137 1 ) 316 99 316 100 101 1 ; 316 100 316 101 18446744073709551615 2 if 317 15 317 17 18446744073709551615 1 ( 317 17 317 18 18446744073709551615 6 memcmp 317 18 317 24 143 1 ( 317 24 317 25 143 8 real_MIC 317 25 317 33 160 1 , 317 33 317 34 143 14 calculated_MIC 317 35 317 49 161 1 , 317 49 317 50 143 2 16 317 51 317 53 18446744073709551615 1 ) 317 53 317 54 143 2 == 317 55 317 57 18446744073709551615 1 0 317 58 317 59 18446744073709551615 1 ) 317 59 317 60 18446744073709551615 1 { 317 61 317 62 18446744073709551615 17 packet_eapol_info 318 17 318 34 136 2 -> 318 34 318 36 18446744073709551615 6 status 318 36 318 42 55 1 = 318 43 318 44 18446744073709551615 7 SUCCESS 318 45 318 52 6 1 ; 318 52 318 53 18446744073709551615 1 } 319 15 319 16 18446744073709551615 1 } 320 13 320 14 18446744073709551615 1 } 321 11 321 12 18446744073709551615 1 } 322 9 322 10 18446744073709551615 1 } 323 7 323 8 18446744073709551615 1 } 324 5 324 6 18446744073709551615 1 } 325 3 325 4 18446744073709551615 6 return 326 3 326 9 18446744073709551615 1 1 326 10 326 11 18446744073709551615 1 ; 326 11 326 12 18446744073709551615 1 } 327 1 327 2 18446744073709551615 4 char 330 1 330 5 18446744073709551615 1 * 330 6 330 7 68 12 mac_toString 330 7 330 19 68 1 ( 330 19 330 20 68 6 u_char 330 20 330 26 1 1 * 330 27 330 28 18446744073709551615 4 addr 330 28 330 32 162 1 ) 330 32 330 33 68 1 { 330 34 330 35 18446744073709551615 6 static 331 3 331 9 18446744073709551615 4 char 331 10 331 14 18446744073709551615 3 str 331 15 331 18 163 1 [ 331 18 331 19 18446744073709551615 2 18 331 19 331 21 18446744073709551615 1 ] 331 21 331 22 18446744073709551615 1 ; 331 22 331 23 18446744073709551615 2 if 332 3 332 5 18446744073709551615 1 ( 332 5 332 6 18446744073709551615 4 addr 332 6 332 10 162 2 == 332 11 332 13 18446744073709551615 4 NULL 332 14 332 18 18446744073709551615 1 ) 332 18 332 19 18446744073709551615 6 return 333 5 333 11 18446744073709551615 2 "" 333 12 333 14 18446744073709551615 1 ; 333 14 333 15 18446744073709551615 8 snprintf 334 3 334 11 164 1 ( 334 11 334 12 164 3 str 334 12 334 15 163 1 , 334 15 334 16 164 6 sizeof 334 17 334 23 18446744073709551615 1 ( 334 23 334 24 18446744073709551615 3 str 334 24 334 27 163 1 ) 334 27 334 28 18446744073709551615 1 , 334 28 334 29 164 31 "%02x:%02x:%02x:%02x:%02x:%02x" 334 30 334 61 18446744073709551615 1 , 334 61 334 62 164 4 addr 335 12 335 16 162 1 [ 335 16 335 17 18446744073709551615 1 0 335 17 335 18 18446744073709551615 1 ] 335 18 335 19 18446744073709551615 1 , 335 19 335 20 164 4 addr 335 21 335 25 162 1 [ 335 25 335 26 18446744073709551615 1 1 335 26 335 27 18446744073709551615 1 ] 335 27 335 28 18446744073709551615 1 , 335 28 335 29 164 4 addr 335 30 335 34 162 1 [ 335 34 335 35 18446744073709551615 1 2 335 35 335 36 18446744073709551615 1 ] 335 36 335 37 18446744073709551615 1 , 335 37 335 38 164 4 addr 335 39 335 43 162 1 [ 335 43 335 44 18446744073709551615 1 3 335 44 335 45 18446744073709551615 1 ] 335 45 335 46 18446744073709551615 1 , 335 46 335 47 164 4 addr 335 48 335 52 162 1 [ 335 52 335 53 18446744073709551615 1 4 335 53 335 54 18446744073709551615 1 ] 335 54 335 55 18446744073709551615 1 , 335 55 335 56 164 4 addr 335 57 335 61 162 1 [ 335 61 335 62 18446744073709551615 1 5 335 62 335 63 18446744073709551615 1 ] 335 63 335 64 18446744073709551615 1 ) 335 64 335 65 164 1 ; 335 65 335 66 18446744073709551615 6 return 336 3 336 9 18446744073709551615 3 str 336 10 336 13 163 1 ; 336 13 336 14 18446744073709551615 1 } 337 1 337 2 18446744073709551615 6 u_char 339 1 339 7 1 1 * 339 8 339 9 69 6 PRF512 339 9 339 15 69 1 ( 339 15 339 16 69 6 u_char 339 16 339 22 1 1 * 339 23 339 24 18446744073709551615 3 PMK 339 24 339 27 165 1 , 339 27 339 28 69 6 u_char 339 29 339 35 1 1 * 339 36 339 37 18446744073709551615 1 A 339 37 339 38 166 1 , 339 38 339 39 69 6 size_t 339 40 339 46 70 4 lenA 339 47 339 51 167 1 , 339 51 339 52 69 6 u_char 339 53 339 59 1 1 * 339 60 339 61 18446744073709551615 7 AP_addr 339 61 339 68 168 1 , 339 68 339 69 69 6 u_char 339 70 339 76 1 1 * 339 77 339 78 18446744073709551615 8 STA_addr 339 78 339 86 169 1 , 339 86 339 87 69 6 u_char 339 88 339 94 1 1 * 339 95 339 96 18446744073709551615 6 ANonce 339 96 339 102 170 1 , 339 102 339 103 69 6 u_char 339 104 339 110 1 1 * 339 111 339 112 18446744073709551615 6 SNonce 339 112 339 118 171 1 ) 339 118 339 119 69 1 { 339 120 339 121 18446744073709551615 6 static 340 3 340 9 18446744073709551615 6 u_char 340 10 340 16 1 3 ptk 340 17 340 20 172 1 [ 340 20 340 21 18446744073709551615 2 64 340 21 340 23 18446744073709551615 1 ] 340 23 340 24 18446744073709551615 1 ; 340 24 340 25 18446744073709551615 6 u_char 341 3 341 9 1 1 B 341 10 341 11 173 1 [ 341 11 341 12 18446744073709551615 2 76 341 12 341 14 18446744073709551615 1 ] 341 14 341 15 18446744073709551615 1 ; 341 15 341 16 18446744073709551615 3 int 342 3 342 6 18446744073709551615 1 i 342 7 342 8 174 1 = 342 9 342 10 18446744073709551615 1 0 342 11 342 12 18446744073709551615 1 ; 342 12 342 13 18446744073709551615 6 u_char 343 3 343 9 1 1 c 343 10 343 11 175 1 = 343 12 343 13 18446744073709551615 4 0x00 343 14 343 18 18446744073709551615 1 ; 343 18 343 19 18446744073709551615 6 u_char 344 3 344 9 1 3 arg 344 10 344 13 176 1 [ 344 13 344 14 18446744073709551615 2 76 344 14 344 16 18446744073709551615 1 + 344 17 344 18 18446744073709551615 4 lenA 344 19 344 23 167 1 + 344 24 344 25 18446744073709551615 1 2 344 26 344 27 18446744073709551615 1 ] 344 27 344 28 18446744073709551615 1 ; 344 28 344 29 18446744073709551615 2 if 346 3 346 5 18446744073709551615 1 ( 346 5 346 6 18446744073709551615 6 strcmp 346 6 346 12 125 1 ( 346 12 346 13 125 7 AP_addr 346 13 346 20 168 1 , 346 20 346 21 125 8 STA_addr 346 22 346 30 169 1 ) 346 30 346 31 125 1 < 346 32 346 33 18446744073709551615 1 0 346 34 346 35 18446744073709551615 1 ) 346 35 346 36 18446744073709551615 1 { 346 37 346 38 18446744073709551615 6 memcpy 347 5 347 11 124 1 ( 347 11 347 12 124 1 B 347 12 347 13 173 1 , 347 13 347 14 124 7 AP_addr 347 15 347 22 168 1 , 347 22 347 23 124 12 MAC_ADDR_LEN 347 24 347 36 124 1 ) 347 36 347 37 124 1 ; 347 37 347 38 18446744073709551615 6 memcpy 348 5 348 11 124 1 ( 348 11 348 12 124 1 B 348 12 348 13 173 1 + 348 14 348 15 18446744073709551615 12 MAC_ADDR_LEN 348 16 348 28 18446744073709551615 1 , 348 28 348 29 124 8 STA_addr 348 30 348 38 169 1 , 348 38 348 39 124 12 MAC_ADDR_LEN 348 40 348 52 124 1 ) 348 52 348 53 124 1 ; 348 53 348 54 18446744073709551615 1 } 349 3 349 4 18446744073709551615 4 else 350 3 350 7 18446744073709551615 1 { 350 8 350 9 18446744073709551615 6 memcpy 351 5 351 11 124 1 ( 351 11 351 12 124 1 B 351 12 351 13 173 1 , 351 13 351 14 124 8 STA_addr 351 15 351 23 169 1 , 351 23 351 24 124 12 MAC_ADDR_LEN 351 25 351 37 124 1 ) 351 37 351 38 124 1 ; 351 38 351 39 18446744073709551615 6 memcpy 352 5 352 11 124 1 ( 352 11 352 12 124 1 B 352 12 352 13 173 1 + 352 14 352 15 18446744073709551615 12 MAC_ADDR_LEN 352 16 352 28 18446744073709551615 1 , 352 28 352 29 124 7 AP_addr 352 30 352 37 168 1 , 352 37 352 38 124 12 MAC_ADDR_LEN 352 39 352 51 124 1 ) 352 51 352 52 124 1 ; 352 52 352 53 18446744073709551615 1 } 353 3 353 4 18446744073709551615 2 if 354 3 354 5 18446744073709551615 1 ( 354 5 354 6 18446744073709551615 6 strcmp 354 6 354 12 125 1 ( 354 12 354 13 125 6 ANonce 354 13 354 19 170 1 , 354 19 354 20 125 6 SNonce 354 21 354 27 171 1 ) 354 27 354 28 125 1 < 354 29 354 30 18446744073709551615 1 0 354 31 354 32 18446744073709551615 1 ) 354 32 354 33 18446744073709551615 1 { 354 34 354 35 18446744073709551615 6 memcpy 355 5 355 11 124 1 ( 355 11 355 12 124 1 B 355 12 355 13 173 1 + 355 14 355 15 18446744073709551615 1 2 355 16 355 17 18446744073709551615 1 * 355 18 355 19 18446744073709551615 12 MAC_ADDR_LEN 355 20 355 32 18446744073709551615 1 , 355 32 355 33 124 6 ANonce 355 34 355 40 170 1 , 355 40 355 41 124 2 32 355 42 355 44 18446744073709551615 1 ) 355 44 355 45 124 1 ; 355 45 355 46 18446744073709551615 6 memcpy 356 5 356 11 124 1 ( 356 11 356 12 124 1 B 356 12 356 13 173 1 + 356 14 356 15 18446744073709551615 1 2 356 16 356 17 18446744073709551615 1 * 356 18 356 19 18446744073709551615 12 MAC_ADDR_LEN 356 20 356 32 18446744073709551615 1 + 356 33 356 34 18446744073709551615 2 32 356 35 356 37 18446744073709551615 1 , 356 37 356 38 124 6 SNonce 356 39 356 45 171 1 , 356 45 356 46 124 2 32 356 47 356 49 18446744073709551615 1 ) 356 49 356 50 124 1 ; 356 50 356 51 18446744073709551615 1 } 357 3 357 4 18446744073709551615 4 else 358 3 358 7 18446744073709551615 1 { 358 8 358 9 18446744073709551615 6 memcpy 359 5 359 11 124 1 ( 359 11 359 12 124 1 B 359 12 359 13 173 1 + 359 14 359 15 18446744073709551615 1 2 359 16 359 17 18446744073709551615 1 * 359 18 359 19 18446744073709551615 12 MAC_ADDR_LEN 359 20 359 32 18446744073709551615 1 , 359 32 359 33 124 6 SNonce 359 34 359 40 171 1 , 359 40 359 41 124 2 32 359 42 359 44 18446744073709551615 1 ) 359 44 359 45 124 1 ; 359 45 359 46 18446744073709551615 6 memcpy 360 5 360 11 124 1 ( 360 11 360 12 124 1 B 360 12 360 13 173 1 + 360 14 360 15 18446744073709551615 1 2 360 16 360 17 18446744073709551615 1 * 360 18 360 19 18446744073709551615 12 MAC_ADDR_LEN 360 20 360 32 18446744073709551615 1 + 360 33 360 34 18446744073709551615 2 32 360 35 360 37 18446744073709551615 1 , 360 37 360 38 124 6 ANonce 360 39 360 45 170 1 , 360 45 360 46 124 2 32 360 47 360 49 18446744073709551615 1 ) 360 49 360 50 124 1 ; 360 50 360 51 18446744073709551615 1 } 361 3 361 4 18446744073709551615 6 memcpy 363 3 363 9 124 1 ( 363 9 363 10 124 3 arg 363 10 363 13 176 1 , 363 13 363 14 124 1 A 363 15 363 16 166 1 , 363 16 363 17 124 4 lenA 363 18 363 22 167 1 ) 363 22 363 23 124 1 ; 363 23 363 24 18446744073709551615 3 arg 364 3 364 6 176 1 [ 364 6 364 7 18446744073709551615 4 lenA 364 7 364 11 167 1 ] 364 11 364 12 18446744073709551615 1 = 364 13 364 14 18446744073709551615 1 c 364 15 364 16 175 1 ; 364 16 364 17 18446744073709551615 6 memcpy 365 3 365 9 124 1 ( 365 9 365 10 124 3 arg 365 10 365 13 176 1 + 365 14 365 15 18446744073709551615 4 lenA 365 16 365 20 167 1 + 365 21 365 22 18446744073709551615 1 1 365 23 365 24 18446744073709551615 1 , 365 24 365 25 124 1 B 365 26 365 27 173 1 , 365 27 365 28 124 2 76 365 29 365 31 18446744073709551615 1 ) 365 31 365 32 124 1 ; 365 32 365 33 18446744073709551615 6 printf 366 3 366 9 92 1 ( 366 9 366 10 92 4 "\n" 366 10 366 14 18446744073709551615 1 ) 366 14 366 15 92 1 ; 366 15 366 16 18446744073709551615 6 u_char 367 3 367 9 1 13 hmac_sha1_res 367 10 367 23 177 1 [ 367 23 367 24 18446744073709551615 2 20 367 24 367 26 18446744073709551615 1 ] 367 26 367 27 18446744073709551615 1 ; 367 27 367 28 18446744073709551615 6 u_char 368 3 368 9 1 1 R 368 10 368 11 178 1 [ 368 11 368 12 18446744073709551615 1 ( 368 12 368 13 18446744073709551615 1 ( 368 13 368 14 18446744073709551615 3 512 368 14 368 17 18446744073709551615 1 + 368 18 368 19 18446744073709551615 3 159 368 20 368 23 18446744073709551615 1 ) 368 23 368 24 18446744073709551615 1 / 368 25 368 26 18446744073709551615 3 160 368 27 368 30 18446744073709551615 1 ) 368 30 368 31 18446744073709551615 1 * 368 32 368 33 18446744073709551615 2 20 368 34 368 36 18446744073709551615 1 ] 368 36 368 37 18446744073709551615 1 ; 368 37 368 38 18446744073709551615 5 u_int 369 3 369 8 179 10 sha_length 369 9 369 19 180 1 = 369 20 369 21 18446744073709551615 2 20 369 22 369 24 18446744073709551615 1 ; 369 24 369 25 18446744073709551615 5 while 370 3 370 8 18446744073709551615 1 ( 370 8 370 9 18446744073709551615 1 i 370 9 370 10 174 2 <= 370 11 370 13 18446744073709551615 1 ( 370 14 370 15 18446744073709551615 1 ( 370 15 370 16 18446744073709551615 3 512 370 16 370 19 18446744073709551615 1 + 370 20 370 21 18446744073709551615 3 159 370 22 370 25 18446744073709551615 1 ) 370 25 370 26 18446744073709551615 1 / 370 27 370 28 18446744073709551615 3 160 370 29 370 32 18446744073709551615 1 ) 370 32 370 33 18446744073709551615 1 ) 370 33 370 34 18446744073709551615 1 { 370 35 370 36 18446744073709551615 3 arg 371 5 371 8 176 1 [ 371 8 371 9 18446744073709551615 2 76 371 9 371 11 18446744073709551615 1 + 371 12 371 13 18446744073709551615 4 lenA 371 14 371 18 167 1 + 371 19 371 20 18446744073709551615 1 1 371 21 371 22 18446744073709551615 1 ] 371 22 371 23 18446744073709551615 1 = 371 24 371 25 18446744073709551615 4 0x00 371 26 371 30 18446744073709551615 1 + 371 31 371 32 18446744073709551615 1 i 371 33 371 34 174 1 ; 371 34 371 35 18446744073709551615 4 HMAC 372 5 372 9 101 1 ( 372 9 372 10 101 8 EVP_sha1 372 10 372 18 102 1 ( 372 18 372 19 102 1 ) 372 19 372 20 102 1 , 372 20 372 21 101 3 PMK 372 22 372 25 165 1 , 372 25 372 26 101 2 32 372 27 372 29 18446744073709551615 1 , 372 29 372 30 101 3 arg 372 31 372 34 176 1 , 372 34 372 35 101 2 76 372 36 372 38 18446744073709551615 1 + 372 39 372 40 18446744073709551615 4 lenA 372 41 372 45 167 1 + 372 46 372 47 18446744073709551615 1 2 372 48 372 49 18446744073709551615 1 , 372 49 372 50 101 13 hmac_sha1_res 372 51 372 64 177 1 , 372 64 372 65 101 1 & 372 66 372 67 18446744073709551615 10 sha_length 372 67 372 77 180 1 ) 372 77 372 78 101 1 ; 372 78 372 79 18446744073709551615 6 memcpy 373 5 373 11 124 1 ( 373 11 373 12 124 1 R 373 12 373 13 178 1 + 373 14 373 15 18446744073709551615 1 i 373 16 373 17 174 1 * 373 18 373 19 18446744073709551615 2 20 373 20 373 22 18446744073709551615 1 , 373 22 373 23 124 13 hmac_sha1_res 373 24 373 37 177 1 , 373 37 373 38 124 2 20 373 39 373 41 18446744073709551615 1 ) 373 41 373 42 124 1 ; 373 42 373 43 18446744073709551615 1 i 374 5 374 6 174 2 ++ 374 6 374 8 18446744073709551615 1 ; 374 8 374 9 18446744073709551615 1 } 375 3 375 4 18446744073709551615 6 memcpy 376 3 376 9 124 1 ( 376 9 376 10 124 3 ptk 376 10 376 13 172 1 , 376 13 376 14 124 1 R 376 15 376 16 178 1 , 376 16 376 17 124 2 64 376 18 376 20 18446744073709551615 1 ) 376 20 376 21 124 1 ; 376 21 376 22 18446744073709551615 6 return 377 3 377 9 18446744073709551615 3 ptk 377 10 377 13 172 1 ; 377 13 377 14 18446744073709551615 1 } 378 1 378 2 18446744073709551615 6 u_char 380 1 380 7 1 1 * 380 8 380 9 71 15 hexstr_to_bytes 380 9 380 24 71 1 ( 380 24 380 25 71 6 u_char 380 25 380 31 1 1 * 380 32 380 33 18446744073709551615 6 hexstr 380 33 380 39 181 1 ) 380 39 380 40 71 1 { 380 41 380 42 18446744073709551615 6 size_t 381 3 381 9 70 3 len 381 10 381 13 182 1 = 381 14 381 15 18446744073709551615 6 strlen 381 16 381 22 90 1 ( 381 22 381 23 90 6 hexstr 381 23 381 29 181 1 ) 381 29 381 30 90 1 ; 381 30 381 31 18446744073709551615 2 if 382 3 382 5 18446744073709551615 1 ( 382 5 382 6 18446744073709551615 3 len 382 6 382 9 182 1 % 382 10 382 11 18446744073709551615 1 2 382 12 382 13 18446744073709551615 2 != 382 14 382 16 18446744073709551615 1 0 382 17 382 18 18446744073709551615 1 ) 382 18 382 19 18446744073709551615 6 return 383 5 383 11 18446744073709551615 4 NULL 383 12 383 16 18446744073709551615 1 ; 383 16 383 17 18446744073709551615 6 size_t 384 3 384 9 70 9 final_len 384 10 384 19 183 1 = 384 20 384 21 18446744073709551615 3 len 384 22 384 25 182 1 / 384 26 384 27 18446744073709551615 1 2 384 28 384 29 18446744073709551615 1 ; 384 29 384 30 18446744073709551615 8 unsigned 385 3 385 11 18446744073709551615 4 char 385 12 385 16 18446744073709551615 1 * 385 17 385 18 18446744073709551615 4 chrs 385 18 385 22 184 1 = 385 23 385 24 18446744073709551615 1 ( 385 25 385 26 18446744073709551615 8 unsigned 385 26 385 34 18446744073709551615 4 char 385 35 385 39 18446744073709551615 1 * 385 40 385 41 18446744073709551615 1 ) 385 41 385 42 18446744073709551615 6 malloc 385 42 385 48 100 1 ( 385 48 385 49 100 1 ( 385 49 385 50 18446744073709551615 9 final_len 385 50 385 59 183 1 ) 385 59 385 60 18446744073709551615 1 * 385 61 385 62 18446744073709551615 6 sizeof 385 63 385 69 18446744073709551615 1 ( 385 69 385 70 18446744073709551615 1 * 385 70 385 71 18446744073709551615 4 chrs 385 71 385 75 184 1 ) 385 75 385 76 18446744073709551615 1 ) 385 76 385 77 100 1 ; 385 77 385 78 18446744073709551615 3 for 386 3 386 6 18446744073709551615 1 ( 386 6 386 7 18446744073709551615 6 size_t 386 7 386 13 70 1 i 386 14 386 15 185 1 = 386 16 386 17 18446744073709551615 1 0 386 18 386 19 18446744073709551615 1 , 386 19 386 20 18446744073709551615 1 j 386 21 386 22 186 1 = 386 23 386 24 18446744073709551615 1 0 386 25 386 26 18446744073709551615 1 ; 386 26 386 27 18446744073709551615 1 j 386 28 386 29 186 1 < 386 30 386 31 18446744073709551615 9 final_len 386 32 386 41 183 1 ; 386 41 386 42 18446744073709551615 1 i 386 43 386 44 185 2 += 386 45 386 47 18446744073709551615 1 2 386 48 386 49 18446744073709551615 1 , 386 49 386 50 18446744073709551615 1 j 386 51 386 52 186 2 ++ 386 52 386 54 18446744073709551615 1 ) 386 54 386 55 18446744073709551615 4 chrs 387 5 387 9 184 1 [ 387 9 387 10 18446744073709551615 1 j 387 10 387 11 186 1 ] 387 11 387 12 18446744073709551615 1 = 387 13 387 14 18446744073709551615 1 ( 387 15 387 16 18446744073709551615 6 hexstr 387 16 387 22 181 1 [ 387 22 387 23 18446744073709551615 1 i 387 23 387 24 185 1 ] 387 24 387 25 18446744073709551615 1 % 387 26 387 27 18446744073709551615 2 32 387 28 387 30 18446744073709551615 1 + 387 31 387 32 18446744073709551615 1 9 387 33 387 34 18446744073709551615 1 ) 387 34 387 35 18446744073709551615 1 % 387 36 387 37 18446744073709551615 2 25 387 38 387 40 18446744073709551615 1 * 387 41 387 42 18446744073709551615 2 16 387 43 387 45 18446744073709551615 1 + 387 46 387 47 18446744073709551615 1 ( 387 48 387 49 18446744073709551615 6 hexstr 387 49 387 55 181 1 [ 387 55 387 56 18446744073709551615 1 i 387 56 387 57 185 1 + 387 58 387 59 18446744073709551615 1 1 387 60 387 61 18446744073709551615 1 ] 387 61 387 62 18446744073709551615 1 % 387 63 387 64 18446744073709551615 2 32 387 65 387 67 18446744073709551615 1 + 387 68 387 69 18446744073709551615 1 9 387 70 387 71 18446744073709551615 1 ) 387 71 387 72 18446744073709551615 1 % 387 73 387 74 18446744073709551615 2 25 387 75 387 77 18446744073709551615 1 ; 387 77 387 78 18446744073709551615 6 return 388 3 388 9 18446744073709551615 4 chrs 388 10 388 14 184 1 ; 388 14 388 15 18446744073709551615 1 } 389 1 389 2 18446744073709551615 6 u_char 391 1 391 7 1 1 * 391 8 391 9 67 14 packet_decrypt 391 9 391 23 67 1 ( 391 23 391 24 67 5 const 391 24 391 29 18446744073709551615 6 struct 391 30 391 36 18446744073709551615 11 pcap_pkthdr 391 37 391 48 64 1 * 391 49 391 50 18446744073709551615 6 header 391 50 391 56 187 1 , 391 56 391 57 67 5 const 391 58 391 63 18446744073709551615 6 u_char 391 64 391 70 1 1 * 391 71 391 72 18446744073709551615 6 buffer 391 72 391 78 188 1 ) 391 78 391 79 67 1 { 391 80 391 81 18446744073709551615 5 const 392 3 392 8 18446744073709551615 6 struct 392 9 392 15 18446744073709551615 12 sniff_802_11 392 16 392 28 8 1 * 392 29 392 30 18446744073709551615 10 hdr_802_11 392 30 392 40 189 1 ; 392 40 392 41 18446744073709551615 10 hdr_802_11 393 3 393 13 189 1 = 393 14 393 15 18446744073709551615 1 ( 393 16 393 17 18446744073709551615 6 struct 393 17 393 23 18446744073709551615 12 sniff_802_11 393 24 393 36 8 1 * 393 37 393 38 18446744073709551615 1 ) 393 38 393 39 18446744073709551615 1 ( 393 39 393 40 18446744073709551615 6 buffer 393 40 393 46 188 1 + 393 47 393 48 18446744073709551615 16 PRISM_HEADER_LEN 393 49 393 65 18446744073709551615 1 ) 393 65 393 66 18446744073709551615 1 ; 393 66 393 67 18446744073709551615 3 int 394 3 394 6 18446744073709551615 5 is_a4 394 7 394 12 190 1 , 394 12 394 13 18446744073709551615 1 i 394 14 394 15 191 1 , 394 15 394 16 18446744073709551615 1 n 394 17 394 18 192 1 , 394 18 394 19 18446744073709551615 15 hdr_ccmp_offset 394 20 394 35 193 1 , 394 35 394 36 18446744073709551615 6 blocks 394 37 394 43 194 1 , 394 43 394 44 18446744073709551615 6 is_qos 394 45 394 51 195 1 ; 394 51 394 52 18446744073709551615 3 int 395 3 395 6 18446744073709551615 8 data_len 395 7 395 15 196 1 , 395 15 395 16 18446744073709551615 4 last 395 17 395 21 197 1 , 395 21 395 22 18446744073709551615 6 offset 395 23 395 29 198 1 ; 395 29 395 30 18446744073709551615 6 u_char 396 3 396 9 1 12 ccmp_aes_ctr 396 10 396 22 199 1 [ 396 22 396 23 18446744073709551615 2 16 396 23 396 25 18446744073709551615 1 ] 396 25 396 26 18446744073709551615 1 , 396 26 396 27 18446744073709551615 1 B 396 28 396 29 200 1 [ 396 29 396 30 18446744073709551615 2 16 396 30 396 32 18446744073709551615 1 ] 396 32 396 33 18446744073709551615 1 , 396 33 396 34 18446744073709551615 3 MIC 396 35 396 38 201 1 [ 396 38 396 39 18446744073709551615 2 16 396 39 396 41 18446744073709551615 1 ] 396 41 396 42 18446744073709551615 1 ; 396 42 396 43 18446744073709551615 6 u_char 397 3 397 9 1 13 packet_number 397 10 397 23 202 1 [ 397 23 397 24 18446744073709551615 1 6 397 24 397 25 18446744073709551615 1 ] 397 25 397 26 18446744073709551615 1 ; 397 26 397 27 18446744073709551615 5 is_a4 399 3 399 8 190 1 = 399 9 399 10 18446744073709551615 1 ( 399 11 399 12 18446744073709551615 10 hdr_802_11 399 12 399 22 189 2 -> 399 22 399 24 18446744073709551615 13 frame_control 399 24 399 37 9 1 [ 399 37 399 38 18446744073709551615 1 1 399 38 399 39 18446744073709551615 1 ] 399 39 399 40 18446744073709551615 1 & 399 41 399 42 18446744073709551615 1 3 399 43 399 44 18446744073709551615 1 ) 399 44 399 45 18446744073709551615 2 == 399 46 399 48 18446744073709551615 1 3 399 49 399 50 18446744073709551615 1 ; 399 50 399 51 18446744073709551615 6 is_qos 400 3 400 9 195 1 = 400 10 400 11 18446744073709551615 1 ( 400 12 400 13 18446744073709551615 10 hdr_802_11 400 13 400 23 189 2 -> 400 23 400 25 18446744073709551615 13 frame_control 400 25 400 38 9 1 [ 400 38 400 39 18446744073709551615 1 0 400 39 400 40 18446744073709551615 1 ] 400 40 400 41 18446744073709551615 1 & 400 42 400 43 18446744073709551615 4 0x8C 400 44 400 48 18446744073709551615 1 ) 400 48 400 49 18446744073709551615 2 == 400 50 400 52 18446744073709551615 4 0x88 400 53 400 57 18446744073709551615 1 ; 400 57 400 58 18446744073709551615 15 hdr_ccmp_offset 401 3 401 18 193 1 = 401 19 401 20 18446744073709551615 2 24 401 21 401 23 18446744073709551615 1 + 401 24 401 25 18446744073709551615 1 6 401 26 401 27 18446744073709551615 1 * 401 28 401 29 18446744073709551615 5 is_a4 401 30 401 35 190 1 ; 401 35 401 36 18446744073709551615 15 hdr_ccmp_offset 402 3 402 18 193 2 += 402 19 402 21 18446744073709551615 1 2 402 22 402 23 18446744073709551615 1 * 402 24 402 25 18446744073709551615 6 is_qos 402 26 402 32 195 1 ; 402 32 402 33 18446744073709551615 8 data_len 404 3 404 11 196 1 = 404 12 404 13 18446744073709551615 6 header 404 14 404 20 187 2 -> 404 20 404 22 18446744073709551615 6 caplen 404 22 404 28 203 1 - 404 29 404 30 18446744073709551615 16 PRISM_HEADER_LEN 404 31 404 47 18446744073709551615 1 - 404 48 404 49 18446744073709551615 15 hdr_ccmp_offset 404 50 404 65 193 1 - 404 66 404 67 18446744073709551615 1 8 404 68 404 69 18446744073709551615 1 - 404 70 404 71 18446744073709551615 1 4 404 72 404 73 18446744073709551615 1 ; 404 73 404 74 18446744073709551615 6 printf 405 3 405 9 92 1 ( 405 9 405 10 92 6 "%d\n" 405 10 405 16 18446744073709551615 1 , 405 16 405 17 92 8 data_len 405 18 405 26 196 1 ) 405 26 405 27 92 1 ; 405 27 405 28 18446744073709551615 13 packet_number 407 3 407 16 202 1 [ 407 16 407 17 18446744073709551615 1 0 407 17 407 18 18446744073709551615 1 ] 407 18 407 19 18446744073709551615 1 = 407 20 407 21 18446744073709551615 1 * 407 22 407 23 18446744073709551615 1 ( 407 23 407 24 18446744073709551615 6 buffer 407 24 407 30 188 1 + 407 31 407 32 18446744073709551615 16 PRISM_HEADER_LEN 407 33 407 49 18446744073709551615 1 + 407 50 407 51 18446744073709551615 15 hdr_ccmp_offset 407 52 407 67 193 1 + 407 68 407 69 18446744073709551615 1 7 407 70 407 71 18446744073709551615 1 ) 407 71 407 72 18446744073709551615 1 ; 407 72 407 73 18446744073709551615 13 packet_number 408 3 408 16 202 1 [ 408 16 408 17 18446744073709551615 1 1 408 17 408 18 18446744073709551615 1 ] 408 18 408 19 18446744073709551615 1 = 408 20 408 21 18446744073709551615 1 * 408 22 408 23 18446744073709551615 1 ( 408 23 408 24 18446744073709551615 6 buffer 408 24 408 30 188 1 + 408 31 408 32 18446744073709551615 16 PRISM_HEADER_LEN 408 33 408 49 18446744073709551615 1 + 408 50 408 51 18446744073709551615 15 hdr_ccmp_offset 408 52 408 67 193 1 + 408 68 408 69 18446744073709551615 1 6 408 70 408 71 18446744073709551615 1 ) 408 71 408 72 18446744073709551615 1 ; 408 72 408 73 18446744073709551615 13 packet_number 409 3 409 16 202 1 [ 409 16 409 17 18446744073709551615 1 2 409 17 409 18 18446744073709551615 1 ] 409 18 409 19 18446744073709551615 1 = 409 20 409 21 18446744073709551615 1 * 409 22 409 23 18446744073709551615 1 ( 409 23 409 24 18446744073709551615 6 buffer 409 24 409 30 188 1 + 409 31 409 32 18446744073709551615 16 PRISM_HEADER_LEN 409 33 409 49 18446744073709551615 1 + 409 50 409 51 18446744073709551615 15 hdr_ccmp_offset 409 52 409 67 193 1 + 409 68 409 69 18446744073709551615 1 5 409 70 409 71 18446744073709551615 1 ) 409 71 409 72 18446744073709551615 1 ; 409 72 409 73 18446744073709551615 13 packet_number 410 3 410 16 202 1 [ 410 16 410 17 18446744073709551615 1 3 410 17 410 18 18446744073709551615 1 ] 410 18 410 19 18446744073709551615 1 = 410 20 410 21 18446744073709551615 1 * 410 22 410 23 18446744073709551615 1 ( 410 23 410 24 18446744073709551615 6 buffer 410 24 410 30 188 1 + 410 31 410 32 18446744073709551615 16 PRISM_HEADER_LEN 410 33 410 49 18446744073709551615 1 + 410 50 410 51 18446744073709551615 15 hdr_ccmp_offset 410 52 410 67 193 1 + 410 68 410 69 18446744073709551615 1 4 410 70 410 71 18446744073709551615 1 ) 410 71 410 72 18446744073709551615 1 ; 410 72 410 73 18446744073709551615 13 packet_number 411 3 411 16 202 1 [ 411 16 411 17 18446744073709551615 1 4 411 17 411 18 18446744073709551615 1 ] 411 18 411 19 18446744073709551615 1 = 411 20 411 21 18446744073709551615 1 * 411 22 411 23 18446744073709551615 1 ( 411 23 411 24 18446744073709551615 6 buffer 411 24 411 30 188 1 + 411 31 411 32 18446744073709551615 16 PRISM_HEADER_LEN 411 33 411 49 18446744073709551615 1 + 411 50 411 51 18446744073709551615 15 hdr_ccmp_offset 411 52 411 67 193 1 + 411 68 411 69 18446744073709551615 1 1 411 70 411 71 18446744073709551615 1 ) 411 71 411 72 18446744073709551615 1 ; 411 72 411 73 18446744073709551615 13 packet_number 412 3 412 16 202 1 [ 412 16 412 17 18446744073709551615 1 5 412 17 412 18 18446744073709551615 1 ] 412 18 412 19 18446744073709551615 1 = 412 20 412 21 18446744073709551615 1 * 412 22 412 23 18446744073709551615 1 ( 412 23 412 24 18446744073709551615 6 buffer 412 24 412 30 188 1 + 412 31 412 32 18446744073709551615 16 PRISM_HEADER_LEN 412 33 412 49 18446744073709551615 1 + 412 50 412 51 18446744073709551615 15 hdr_ccmp_offset 412 52 412 67 193 1 ) 412 67 412 68 18446744073709551615 1 ; 412 68 412 69 18446744073709551615 57 //ccmp_aes_ctr [0x59|priority|src_addr|packet_number|ctr] 414 3 414 60 18446744073709551615 12 ccmp_aes_ctr 415 3 415 15 199 1 [ 415 15 415 16 18446744073709551615 1 0 415 16 415 17 18446744073709551615 1 ] 415 17 415 18 18446744073709551615 1 = 415 19 415 20 18446744073709551615 4 0x59 415 21 415 25 18446744073709551615 1 ; 415 25 415 26 18446744073709551615 12 ccmp_aes_ctr 416 3 416 15 199 1 [ 416 15 416 16 18446744073709551615 1 1 416 16 416 17 18446744073709551615 1 ] 416 17 416 18 18446744073709551615 1 = 416 19 416 20 18446744073709551615 4 0x00 416 21 416 25 18446744073709551615 1 ; 416 25 416 26 18446744073709551615 6 memcpy 417 3 417 9 124 1 ( 417 9 417 10 124 1 & 417 10 417 11 18446744073709551615 12 ccmp_aes_ctr 417 11 417 23 199 1 [ 417 23 417 24 18446744073709551615 1 2 417 24 417 25 18446744073709551615 1 ] 417 25 417 26 18446744073709551615 1 , 417 26 417 27 124 10 hdr_802_11 417 28 417 38 189 2 -> 417 38 417 40 18446744073709551615 5 addr2 417 40 417 45 12 1 , 417 45 417 46 124 12 MAC_ADDR_LEN 417 47 417 59 124 1 ) 417 59 417 60 124 1 ; 417 60 417 61 18446744073709551615 6 memcpy 418 3 418 9 124 1 ( 418 9 418 10 124 1 & 418 10 418 11 18446744073709551615 12 ccmp_aes_ctr 418 11 418 23 199 1 [ 418 23 418 24 18446744073709551615 1 2 418 24 418 25 18446744073709551615 1 + 418 26 418 27 18446744073709551615 12 MAC_ADDR_LEN 418 28 418 40 18446744073709551615 1 ] 418 40 418 41 18446744073709551615 1 , 418 41 418 42 124 13 packet_number 418 43 418 56 202 1 , 418 56 418 57 124 1 6 418 58 418 59 18446744073709551615 1 ) 418 59 418 60 124 1 ; 418 60 418 61 18446744073709551615 12 ccmp_aes_ctr 419 3 419 15 199 1 [ 419 15 419 16 18446744073709551615 2 14 419 16 419 18 18446744073709551615 1 ] 419 18 419 19 18446744073709551615 1 = 419 20 419 21 18446744073709551615 1 ( 419 22 419 23 18446744073709551615 8 data_len 419 23 419 31 196 2 >> 419 32 419 34 18446744073709551615 1 8 419 35 419 36 18446744073709551615 1 ) 419 36 419 37 18446744073709551615 1 & 419 38 419 39 18446744073709551615 4 0xFF 419 40 419 44 18446744073709551615 1 ; 419 44 419 45 18446744073709551615 12 ccmp_aes_ctr 420 3 420 15 199 1 [ 420 15 420 16 18446744073709551615 2 15 420 16 420 18 18446744073709551615 1 ] 420 18 420 19 18446744073709551615 1 = 420 20 420 21 18446744073709551615 1 ( 420 22 420 23 18446744073709551615 8 data_len 420 23 420 31 196 1 & 420 32 420 33 18446744073709551615 4 0xFF 420 34 420 38 18446744073709551615 1 ) 420 38 420 39 18446744073709551615 1 ; 420 39 420 40 18446744073709551615 6 u_char 422 3 422 9 1 3 AAD 422 10 422 13 204 1 [ 422 13 422 14 18446744073709551615 2 32 422 14 422 16 18446744073709551615 1 ] 422 16 422 17 18446744073709551615 1 = 422 18 422 19 18446744073709551615 1 { 422 20 422 21 18446744073709551615 1 0 422 21 422 22 18446744073709551615 1 } 422 22 422 23 18446744073709551615 1 ; 422 23 422 24 18446744073709551615 3 AAD 423 3 423 6 204 1 [ 423 6 423 7 18446744073709551615 1 2 423 7 423 8 18446744073709551615 1 ] 423 8 423 9 18446744073709551615 1 = 423 10 423 11 18446744073709551615 10 hdr_802_11 423 12 423 22 189 2 -> 423 22 423 24 18446744073709551615 13 frame_control 423 24 423 37 9 1 [ 423 37 423 38 18446744073709551615 1 0 423 38 423 39 18446744073709551615 1 ] 423 39 423 40 18446744073709551615 1 & 423 41 423 42 18446744073709551615 4 0x8F 423 43 423 47 18446744073709551615 1 ; 423 47 423 48 18446744073709551615 3 AAD 424 3 424 6 204 1 [ 424 6 424 7 18446744073709551615 1 3 424 7 424 8 18446744073709551615 1 ] 424 8 424 9 18446744073709551615 1 = 424 10 424 11 18446744073709551615 10 hdr_802_11 424 12 424 22 189 2 -> 424 22 424 24 18446744073709551615 13 frame_control 424 24 424 37 9 1 [ 424 37 424 38 18446744073709551615 1 1 424 38 424 39 18446744073709551615 1 ] 424 39 424 40 18446744073709551615 1 & 424 41 424 42 18446744073709551615 4 0xC7 424 43 424 47 18446744073709551615 1 ; 424 47 424 48 18446744073709551615 6 memcpy 425 3 425 9 124 1 ( 425 9 425 10 124 3 AAD 425 11 425 14 204 1 + 425 15 425 16 18446744073709551615 1 4 425 17 425 18 18446744073709551615 1 , 425 18 425 19 124 1 & 425 20 425 21 18446744073709551615 1 ( 425 21 425 22 18446744073709551615 10 hdr_802_11 425 22 425 32 189 2 -> 425 32 425 34 18446744073709551615 5 addr1 425 34 425 39 11 1 ) 425 39 425 40 18446744073709551615 1 , 425 40 425 41 124 1 3 425 42 425 43 18446744073709551615 1 * 425 44 425 45 18446744073709551615 1 6 425 46 425 47 18446744073709551615 1 ) 425 48 425 49 124 1 ; 425 49 425 50 18446744073709551615 30 //AAD[22] = h80211[22] & 0x0F; 426 3 426 33 18446744073709551615 1 } 429 1 429 2 18446744073709551615 0 0 205 0 0 0 9 0 0 1 3 0 1 A 20 1 3 0 6 u_char 9 1 3 0 8 NULL_MIC 7 1 3 0 20 WAITING_EAPOL_KEY_2: 7 1 3 0 20 WAITING_EAPOL_KEY_3: 7 1 3 0 20 WAITING_EAPOL_KEY_4: 7 1 3 0 8 SUCCESS: 20 1 3 0 12 eapol_status 2 1 3 0 12 sniff_802_11 6 1 3 0 26 frame_control:sniff_802_11 6 1 3 0 24 duration_id:sniff_802_11 6 1 3 0 18 addr1:sniff_802_11 6 1 3 0 18 addr2:sniff_802_11 6 1 3 0 18 addr3:sniff_802_11 6 1 3 0 29 sequence_control:sniff_802_11 6 1 3 0 24 qos_control:sniff_802_11 2 1 3 0 19 sniff_802_11_beacon 6 1 3 0 33 frame_control:sniff_802_11_beacon 6 1 3 0 31 duration_id:sniff_802_11_beacon 6 1 3 0 25 addr1:sniff_802_11_beacon 6 1 3 0 25 addr2:sniff_802_11_beacon 6 1 3 0 25 addr3:sniff_802_11_beacon 6 1 3 0 36 sequence_control:sniff_802_11_beacon 2 1 3 0 9 sniff_LLC 6 1 3 0 14 dsap:sniff_LLC 6 1 3 0 14 ssap:sniff_LLC 6 1 3 0 23 control_field:sniff_LLC 2 1 3 0 10 sniff_SNAP 6 1 3 0 19 org_code:sniff_SNAP 6 1 3 0 15 type:sniff_SNAP 2 1 3 0 17 sniff_802_1x_auth 6 1 3 0 25 version:sniff_802_1x_auth 6 1 3 0 22 type:sniff_802_1x_auth 6 1 3 0 24 length:sniff_802_1x_auth 6 1 3 0 37 key_descriptor_type:sniff_802_1x_auth 6 1 3 0 33 key_information:sniff_802_1x_auth 6 1 3 0 28 key_length:sniff_802_1x_auth 6 1 3 0 32 replay_counter:sniff_802_1x_auth 6 1 3 0 31 wpa_key_nonce:sniff_802_1x_auth 6 1 3 0 28 wpa_key_IV:sniff_802_1x_auth 6 1 3 0 29 wpa_key_RSC:sniff_802_1x_auth 6 1 3 0 28 wpa_key_ID:sniff_802_1x_auth 6 1 3 0 29 wpa_key_MIC:sniff_802_1x_auth 6 1 3 0 37 wpa_key_data_length:sniff_802_1x_auth 2 1 3 0 3 ptk 6 1 3 0 7 kck:ptk 6 1 3 0 7 kek:ptk 6 1 3 0 6 tk:ptk 6 1 3 0 7 txk:ptk 6 1 3 0 7 trk:ptk 2 1 3 0 10 eapol_info 6 1 3 0 26 sta_mac_address:eapol_info 6 1 3 0 17 ANonce:eapol_info 6 1 3 0 17 SNonce:eapol_info 6 1 3 0 14 PTK:eapol_info 6 1 3 0 17 status:eapol_info 6 1 3 0 22 last_replay:eapol_info 9 1 3 0 14 ap_mac_address 9 1 3 0 3 psk 9 1 3 0 4 ssid 20 1 3 0 5 map_t 9 1 3 0 3 map 9 1 3 0 4 PTK0 8 1 3 0 14 process_beacon 2 1 3 0 11 pcap_pkthdr 8 1 3 0 13 process_eapol 8 1 3 0 14 process_packet 8 1 3 0 14 packet_decrypt 8 1 3 0 12 mac_toString 8 1 3 0 6 PRF512 20 1 3 0 6 size_t 8 1 3 0 15 hexstr_to_bytes 8 1 3 0 4 main 10 1 3 0 57 104:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 104:26:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_new 9 1 3 0 56 107:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 109:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 110:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 111:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 112:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 113:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 2 1 3 0 11 bpf_program 9 1 3 0 57 114:22:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 6 pcap_t 9 1 3 0 57 115:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 116:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 117:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 118:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 20 fastpbkdf2_hmac_sha1 8 1 3 0 6 strlen 9 1 3 0 57 123:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 printf 9 1 3 0 57 131:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 132:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 133:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 134:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 135:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 139:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 140:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 malloc 8 1 3 0 4 HMAC 8 1 3 0 8 EVP_sha1 9 1 3 0 57 142:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 11 bpf_u_int32 9 1 3 0 57 147:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 148:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 14 pcap_lookupnet 8 1 3 0 7 fprintf 9 1 3 0 56 156:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 17 pcap_open_offline 8 1 3 0 12 pcap_compile 8 1 3 0 11 pcap_geterr 8 1 3 0 14 pcap_setfilter 8 1 3 0 12 pcap_next_ex 8 1 3 0 8 asprintf 9 1 3 0 56 190:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 13 pcap_freecode 8 1 3 0 10 pcap_close 10 1 3 0 57 206:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 206:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 207:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 209:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 210:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memcpy 8 1 3 0 6 strcmp 10 1 3 0 57 220:48:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 220:70:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 221:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 223:35:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 227:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 227:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 228:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 230:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 231:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 232:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 233:22:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 235:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 237:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_get 9 1 3 0 57 256:31:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 259:34:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 261:16:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memcmp 9 1 3 0 57 263:43:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 265:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 268:32:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_put 9 1 3 0 57 275:26:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 7 u_short 9 1 3 0 57 276:21:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 14 hashmap_remove 9 1 3 0 57 279:34:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 286:27:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 287:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 288:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 299:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 300:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 301:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 311:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 312:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 313:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 330:28:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 331:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 8 snprintf 10 1 3 0 57 339:24:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 339:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 339:47:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 339:61:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 339:78:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 339:96:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 58 339:112:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 340:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 341:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 342:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 343:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 344:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 367:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 368:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 5 u_int 9 1 3 0 56 369:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 380:33:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 381:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 384:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 385:18:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 386:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 386:21:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 391:50:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 391:72:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 392:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 394:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 394:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 394:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 394:20:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 394:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 394:45:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 395:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 395:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 395:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 396:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 396:28:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 396:35:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 397:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 6 1 3 0 18 caplen:pcap_pkthdr 9 1 3 0 57 422:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 0 0 3 0 0 0 56 /home/florenzi/Documenti/juci_ws/wpa_decode/fastpbkdf2.h 1509296147 53 /home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 1262964973 50 /home/florenzi/Documenti/juci_ws/wpa_decode/main.c 1517329337