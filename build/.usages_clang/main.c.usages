22 serialization::archive 15 0 0 0 0 43 /home/florenzi/Documenti/juci_ws/wpa_decode 49 /home/florenzi/Documenti/juci_ws/wpa_decode/build 0 0 4012 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 14 "fastpbkdf2.h" 1 10 1 24 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 11 "hashmap.h" 2 10 2 21 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 7 openssl 3 11 3 18 18446744073709551615 1 / 3 18 3 19 18446744073709551615 3 aes 3 19 3 22 18446744073709551615 1 . 3 22 3 23 18446744073709551615 1 h 3 23 3 24 18446744073709551615 1 > 3 24 3 25 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 7 openssl 4 11 4 18 18446744073709551615 1 / 4 18 4 19 18446744073709551615 4 hmac 4 19 4 23 18446744073709551615 1 . 4 23 4 24 18446744073709551615 1 h 4 24 4 25 18446744073709551615 1 > 4 25 4 26 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 7 openssl 5 11 5 18 18446744073709551615 1 / 5 18 5 19 18446744073709551615 3 sha 5 19 5 22 18446744073709551615 1 . 5 22 5 23 18446744073709551615 1 h 5 23 5 24 18446744073709551615 1 > 5 24 5 25 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 1 < 6 10 6 11 18446744073709551615 4 pcap 6 11 6 15 18446744073709551615 1 . 6 15 6 16 18446744073709551615 1 h 6 16 6 17 18446744073709551615 1 > 6 17 6 18 18446744073709551615 1 # 7 1 7 2 18446744073709551615 7 include 7 2 7 9 18446744073709551615 1 < 7 10 7 11 18446744073709551615 5 stdio 7 11 7 16 18446744073709551615 1 . 7 16 7 17 18446744073709551615 1 h 7 17 7 18 18446744073709551615 1 > 7 18 7 19 18446744073709551615 1 # 8 1 8 2 18446744073709551615 7 include 8 2 8 9 18446744073709551615 1 < 8 10 8 11 18446744073709551615 6 stdlib 8 11 8 17 18446744073709551615 1 . 8 17 8 18 18446744073709551615 1 h 8 18 8 19 18446744073709551615 1 > 8 19 8 20 18446744073709551615 1 # 10 1 10 2 18446744073709551615 6 define 10 2 10 8 18446744073709551615 16 PRISM_HEADER_LEN 10 9 10 25 18446744073709551615 3 144 10 26 10 29 18446744073709551615 1 # 11 1 11 2 18446744073709551615 6 define 11 2 11 8 18446744073709551615 11 SSID_OFFSET 11 9 11 20 18446744073709551615 2 12 11 21 11 23 18446744073709551615 1 # 12 1 12 2 18446744073709551615 6 define 12 2 12 8 18446744073709551615 13 SIZE_ETHERNET 12 9 12 22 18446744073709551615 2 14 12 23 12 25 18446744073709551615 1 # 13 1 13 2 18446744073709551615 6 define 13 2 13 8 18446744073709551615 12 MAC_ADDR_LEN 13 9 13 21 18446744073709551615 1 6 13 22 13 23 18446744073709551615 1 # 14 1 14 2 18446744073709551615 6 define 14 2 14 8 18446744073709551615 7 LLC_LEN 14 9 14 16 18446744073709551615 1 8 14 17 14 18 18446744073709551615 1 # 15 1 15 2 18446744073709551615 6 define 15 2 15 8 18446744073709551615 16 TAKE_N_BITS_FROM 15 9 15 25 18446744073709551615 1 ( 15 25 15 26 18446744073709551615 1 b 15 26 15 27 18446744073709551615 1 , 15 27 15 28 18446744073709551615 1 p 15 29 15 30 18446744073709551615 1 , 15 30 15 31 18446744073709551615 1 n 15 32 15 33 18446744073709551615 1 ) 15 33 15 34 18446744073709551615 1 ( 15 35 15 36 18446744073709551615 1 ( 15 36 15 37 18446744073709551615 1 b 15 37 15 38 18446744073709551615 1 ) 15 38 15 39 18446744073709551615 2 >> 15 40 15 42 18446744073709551615 1 ( 15 43 15 44 18446744073709551615 1 p 15 44 15 45 18446744073709551615 1 ) 15 45 15 46 18446744073709551615 1 ) 15 46 15 47 18446744073709551615 1 & 15 48 15 49 18446744073709551615 1 ( 15 50 15 51 18446744073709551615 1 ( 15 51 15 52 18446744073709551615 1 1 15 52 15 53 18446744073709551615 2 << 15 54 15 56 18446744073709551615 1 ( 15 57 15 58 18446744073709551615 1 n 15 58 15 59 18446744073709551615 1 ) 15 59 15 60 18446744073709551615 1 ) 15 60 15 61 18446744073709551615 1 - 15 62 15 63 18446744073709551615 1 1 15 64 15 65 18446744073709551615 1 ) 15 65 15 66 18446744073709551615 1 # 16 1 16 2 18446744073709551615 6 define 16 2 16 8 18446744073709551615 13 IS_BIG_ENDIAN 16 9 16 22 18446744073709551615 1 ( 16 23 16 24 18446744073709551615 1 ! 16 24 16 25 18446744073709551615 1 * 16 25 16 26 18446744073709551615 1 ( 16 26 16 27 18446744073709551615 8 unsigned 16 27 16 35 18446744073709551615 4 char 16 36 16 40 18446744073709551615 1 * 16 41 16 42 18446744073709551615 1 ) 16 42 16 43 18446744073709551615 1 & 16 43 16 44 18446744073709551615 1 ( 16 44 16 45 18446744073709551615 8 uint16_t 16 45 16 53 18446744073709551615 1 ) 16 53 16 54 18446744073709551615 1 { 16 54 16 55 18446744073709551615 1 1 16 55 16 56 18446744073709551615 1 } 16 56 16 57 18446744073709551615 1 ) 16 57 16 58 18446744073709551615 5 const 18 1 18 6 18446744073709551615 4 char 18 7 18 11 18446744073709551615 1 A 18 12 18 13 0 1 [ 18 13 18 14 18446744073709551615 1 ] 18 14 18 15 18446744073709551615 1 = 18 16 18 17 18446744073709551615 24 "Pairwise key expansion" 18 18 18 42 18446744073709551615 1 ; 18 42 18 43 18446744073709551615 5 const 19 1 19 6 18446744073709551615 6 u_char 19 7 19 13 1 8 NULL_MIC 19 14 19 22 2 1 [ 19 22 19 23 18446744073709551615 2 16 19 23 19 25 18446744073709551615 1 ] 19 25 19 26 18446744073709551615 1 = 19 27 19 28 18446744073709551615 1 { 19 29 19 30 18446744073709551615 1 0 19 30 19 31 18446744073709551615 1 } 19 31 19 32 18446744073709551615 1 ; 19 32 19 33 18446744073709551615 7 typedef 21 1 21 8 18446744073709551615 4 enum 21 9 21 13 18446744073709551615 1 { 21 14 21 15 18446744073709551615 19 WAITING_EAPOL_KEY_2 21 16 21 35 3 1 , 21 35 21 36 18446744073709551615 19 WAITING_EAPOL_KEY_3 22 16 22 35 4 1 , 22 35 22 36 18446744073709551615 19 WAITING_EAPOL_KEY_4 23 16 23 35 5 1 , 23 35 23 36 18446744073709551615 7 SUCCESS 24 16 24 23 6 1 } 24 24 24 25 18446744073709551615 12 eapol_status 24 26 24 38 7 1 ; 24 38 24 39 18446744073709551615 23 /* 802.11 MAC header */ 26 1 26 24 18446744073709551615 6 struct 27 1 27 7 18446744073709551615 12 sniff_802_11 27 8 27 20 8 1 { 27 21 27 22 18446744073709551615 6 u_char 28 3 28 9 1 13 frame_control 28 10 28 23 9 1 [ 28 23 28 24 18446744073709551615 1 2 28 24 28 25 18446744073709551615 1 ] 28 25 28 26 18446744073709551615 1 ; 28 26 28 27 18446744073709551615 6 u_char 29 3 29 9 1 11 duration_id 29 10 29 21 10 1 [ 29 21 29 22 18446744073709551615 1 2 29 22 29 23 18446744073709551615 1 ] 29 23 29 24 18446744073709551615 1 ; 29 24 29 25 18446744073709551615 6 u_char 30 3 30 9 1 5 addr1 30 10 30 15 11 1 [ 30 15 30 16 18446744073709551615 12 MAC_ADDR_LEN 30 16 30 28 11 1 ] 30 28 30 29 18446744073709551615 1 ; 30 29 30 30 18446744073709551615 6 u_char 31 3 31 9 1 5 addr2 31 10 31 15 12 1 [ 31 15 31 16 18446744073709551615 12 MAC_ADDR_LEN 31 16 31 28 12 1 ] 31 28 31 29 18446744073709551615 1 ; 31 29 31 30 18446744073709551615 6 u_char 32 3 32 9 1 5 addr3 32 10 32 15 13 1 [ 32 15 32 16 18446744073709551615 12 MAC_ADDR_LEN 32 16 32 28 13 1 ] 32 28 32 29 18446744073709551615 1 ; 32 29 32 30 18446744073709551615 6 u_char 33 3 33 9 1 16 sequence_control 33 10 33 26 14 1 [ 33 26 33 27 18446744073709551615 1 2 33 27 33 28 18446744073709551615 1 ] 33 28 33 29 18446744073709551615 1 ; 33 29 33 30 18446744073709551615 6 u_char 34 3 34 9 1 11 qos_control 34 10 34 21 15 1 [ 34 21 34 22 18446744073709551615 1 2 34 22 34 23 18446744073709551615 1 ] 34 23 34 24 18446744073709551615 1 ; 34 24 34 25 18446744073709551615 1 } 35 1 35 2 18446744073709551615 1 ; 35 2 35 3 18446744073709551615 6 struct 37 1 37 7 18446744073709551615 19 sniff_802_11_beacon 37 8 37 27 16 1 { 37 28 37 29 18446744073709551615 6 u_char 38 3 38 9 1 13 frame_control 38 10 38 23 17 1 [ 38 23 38 24 18446744073709551615 1 2 38 24 38 25 18446744073709551615 1 ] 38 25 38 26 18446744073709551615 1 ; 38 26 38 27 18446744073709551615 6 u_char 39 3 39 9 1 11 duration_id 39 10 39 21 18 1 [ 39 21 39 22 18446744073709551615 1 2 39 22 39 23 18446744073709551615 1 ] 39 23 39 24 18446744073709551615 1 ; 39 24 39 25 18446744073709551615 6 u_char 40 3 40 9 1 5 addr1 40 10 40 15 19 1 [ 40 15 40 16 18446744073709551615 12 MAC_ADDR_LEN 40 16 40 28 19 1 ] 40 28 40 29 18446744073709551615 1 ; 40 29 40 30 18446744073709551615 6 u_char 41 3 41 9 1 5 addr2 41 10 41 15 20 1 [ 41 15 41 16 18446744073709551615 12 MAC_ADDR_LEN 41 16 41 28 20 1 ] 41 28 41 29 18446744073709551615 1 ; 41 29 41 30 18446744073709551615 6 u_char 42 3 42 9 1 5 addr3 42 10 42 15 21 1 [ 42 15 42 16 18446744073709551615 12 MAC_ADDR_LEN 42 16 42 28 21 1 ] 42 28 42 29 18446744073709551615 1 ; 42 29 42 30 18446744073709551615 6 u_char 43 3 43 9 1 16 sequence_control 43 10 43 26 22 1 [ 43 26 43 27 18446744073709551615 1 2 43 27 43 28 18446744073709551615 1 ] 43 28 43 29 18446744073709551615 1 ; 43 29 43 30 18446744073709551615 1 } 44 1 44 2 18446744073709551615 1 ; 44 2 44 3 18446744073709551615 6 struct 46 1 46 7 18446744073709551615 9 sniff_LLC 46 8 46 17 23 1 { 46 18 46 19 18446744073709551615 6 u_char 47 3 47 9 1 4 dsap 47 10 47 14 24 1 ; 47 14 47 15 18446744073709551615 6 u_char 48 3 48 9 1 4 ssap 48 10 48 14 25 1 ; 48 14 48 15 18446744073709551615 6 u_char 49 3 49 9 1 13 control_field 49 10 49 23 26 1 ; 49 23 49 24 18446744073709551615 1 } 50 1 50 2 18446744073709551615 1 ; 50 2 50 3 18446744073709551615 6 struct 52 1 52 7 18446744073709551615 10 sniff_SNAP 52 8 52 18 27 1 { 52 19 52 20 18446744073709551615 6 u_char 53 3 53 9 1 8 org_code 53 10 53 18 28 1 [ 53 18 53 19 18446744073709551615 1 3 53 19 53 20 18446744073709551615 1 ] 53 20 53 21 18446744073709551615 1 ; 53 21 53 22 18446744073709551615 6 u_char 54 3 54 9 1 4 type 54 10 54 14 29 1 [ 54 14 54 15 18446744073709551615 1 2 54 15 54 16 18446744073709551615 1 ] 54 16 54 17 18446744073709551615 1 ; 54 17 54 18 18446744073709551615 1 } 55 1 55 2 18446744073709551615 1 ; 55 2 55 3 18446744073709551615 6 struct 57 1 57 7 18446744073709551615 17 sniff_802_1x_auth 57 8 57 25 30 1 { 57 26 57 27 18446744073709551615 6 u_char 58 3 58 9 1 7 version 58 10 58 17 31 1 ; 58 17 58 18 18446744073709551615 6 u_char 59 3 59 9 1 4 type 59 10 59 14 32 1 ; 59 14 59 15 18446744073709551615 6 u_char 60 3 60 9 1 6 length 60 10 60 16 33 1 [ 60 16 60 17 18446744073709551615 1 2 60 17 60 18 18446744073709551615 1 ] 60 18 60 19 18446744073709551615 1 ; 60 19 60 20 18446744073709551615 6 u_char 61 3 61 9 1 19 key_descriptor_type 61 10 61 29 34 1 ; 61 29 61 30 18446744073709551615 6 u_char 62 3 62 9 1 15 key_information 62 10 62 25 35 1 [ 62 25 62 26 18446744073709551615 1 2 62 26 62 27 18446744073709551615 1 ] 62 27 62 28 18446744073709551615 1 ; 62 28 62 29 18446744073709551615 6 u_char 63 3 63 9 1 10 key_length 63 10 63 20 36 1 [ 63 20 63 21 18446744073709551615 1 2 63 21 63 22 18446744073709551615 1 ] 63 22 63 23 18446744073709551615 1 ; 63 23 63 24 18446744073709551615 6 u_char 64 3 64 9 1 14 replay_counter 64 10 64 24 37 1 [ 64 24 64 25 18446744073709551615 1 8 64 25 64 26 18446744073709551615 1 ] 64 26 64 27 18446744073709551615 1 ; 64 27 64 28 18446744073709551615 6 u_char 65 3 65 9 1 13 wpa_key_nonce 65 10 65 23 38 1 [ 65 23 65 24 18446744073709551615 2 32 65 24 65 26 18446744073709551615 1 ] 65 26 65 27 18446744073709551615 1 ; 65 27 65 28 18446744073709551615 6 u_char 66 3 66 9 1 10 wpa_key_IV 66 10 66 20 39 1 [ 66 20 66 21 18446744073709551615 2 16 66 21 66 23 18446744073709551615 1 ] 66 23 66 24 18446744073709551615 1 ; 66 24 66 25 18446744073709551615 6 u_char 67 3 67 9 1 11 wpa_key_RSC 67 10 67 21 40 1 [ 67 21 67 22 18446744073709551615 1 8 67 22 67 23 18446744073709551615 1 ] 67 23 67 24 18446744073709551615 1 ; 67 24 67 25 18446744073709551615 6 u_char 68 3 68 9 1 10 wpa_key_ID 68 10 68 20 41 1 [ 68 20 68 21 18446744073709551615 1 8 68 21 68 22 18446744073709551615 1 ] 68 22 68 23 18446744073709551615 1 ; 68 23 68 24 18446744073709551615 6 u_char 69 3 69 9 1 11 wpa_key_MIC 69 10 69 21 42 1 [ 69 21 69 22 18446744073709551615 2 16 69 22 69 24 18446744073709551615 1 ] 69 24 69 25 18446744073709551615 1 ; 69 25 69 26 18446744073709551615 6 u_char 70 3 70 9 1 19 wpa_key_data_length 70 10 70 29 43 1 [ 70 29 70 30 18446744073709551615 1 2 70 30 70 31 18446744073709551615 1 ] 70 31 70 32 18446744073709551615 1 ; 70 32 70 33 18446744073709551615 1 } 71 1 71 2 18446744073709551615 1 ; 71 2 71 3 18446744073709551615 6 struct 73 1 73 7 18446744073709551615 5 iphdr 73 8 73 13 44 1 { 73 14 73 15 18446744073709551615 6 u_char 74 3 74 9 1 4 ip_v 74 10 74 14 45 1 : 74 14 74 15 18446744073709551615 1 4 74 15 74 16 18446744073709551615 1 , 74 16 74 17 18446744073709551615 5 ip_hl 74 18 74 23 46 1 : 74 23 74 24 18446744073709551615 1 4 74 24 74 25 18446744073709551615 1 ; 74 25 74 26 18446744073709551615 6 u_char 75 3 75 9 1 6 ip_dss 75 10 75 16 47 1 ; 75 16 75 17 18446744073709551615 6 u_char 76 3 76 9 1 15 ip_total_length 76 10 76 25 48 1 [ 76 25 76 26 18446744073709551615 1 2 76 26 76 27 18446744073709551615 1 ] 76 27 76 28 18446744073709551615 1 ; 76 28 76 29 18446744073709551615 6 u_char 77 3 77 9 1 2 id 77 10 77 12 49 1 [ 77 12 77 13 18446744073709551615 1 2 77 13 77 14 18446744073709551615 1 ] 77 14 77 15 18446744073709551615 1 ; 77 15 77 16 18446744073709551615 6 u_char 78 3 78 9 1 5 flags 78 10 78 15 50 1 ; 78 15 78 16 18446744073709551615 6 u_char 79 3 79 9 1 15 fragment_offset 79 10 79 25 51 1 ; 79 25 79 26 18446744073709551615 6 u_char 80 3 80 9 1 3 ttl 80 10 80 13 52 1 ; 80 13 80 14 18446744073709551615 6 u_char 81 3 81 9 1 8 protocol 81 10 81 18 53 1 ; 81 18 81 19 18446744073709551615 6 u_char 82 3 82 9 1 12 hdr_checksum 82 10 82 22 54 1 [ 82 22 82 23 18446744073709551615 1 2 82 23 82 24 18446744073709551615 1 ] 82 24 82 25 18446744073709551615 1 ; 82 25 82 26 18446744073709551615 6 u_char 83 3 83 9 1 3 src 83 10 83 13 55 1 [ 83 13 83 14 18446744073709551615 1 4 83 14 83 15 18446744073709551615 1 ] 83 15 83 16 18446744073709551615 1 ; 83 16 83 17 18446744073709551615 6 u_char 84 3 84 9 1 3 dst 84 10 84 13 56 1 [ 84 13 84 14 18446744073709551615 1 4 84 14 84 15 18446744073709551615 1 ] 84 15 84 16 18446744073709551615 1 ; 84 16 84 17 18446744073709551615 1 } 85 1 85 2 18446744073709551615 1 ; 85 2 85 3 18446744073709551615 6 struct 87 1 87 7 18446744073709551615 3 ptk 87 8 87 11 57 1 { 87 12 87 13 18446744073709551615 6 u_char 88 3 88 9 1 3 kck 88 10 88 13 58 1 [ 88 13 88 14 18446744073709551615 2 16 88 14 88 16 18446744073709551615 1 ] 88 16 88 17 18446744073709551615 1 ; 88 17 88 18 18446744073709551615 6 u_char 89 3 89 9 1 3 kek 89 10 89 13 59 1 [ 89 13 89 14 18446744073709551615 2 16 89 14 89 16 18446744073709551615 1 ] 89 16 89 17 18446744073709551615 1 ; 89 17 89 18 18446744073709551615 6 u_char 90 3 90 9 1 2 tk 90 10 90 12 60 1 [ 90 12 90 13 18446744073709551615 2 16 90 13 90 15 18446744073709551615 1 ] 90 15 90 16 18446744073709551615 1 ; 90 16 90 17 18446744073709551615 6 u_char 91 3 91 9 1 3 txk 91 10 91 13 61 1 [ 91 13 91 14 18446744073709551615 1 8 91 14 91 15 18446744073709551615 1 ] 91 15 91 16 18446744073709551615 1 ; 91 16 91 17 18446744073709551615 6 u_char 92 3 92 9 1 3 trk 92 10 92 13 62 1 [ 92 13 92 14 18446744073709551615 1 8 92 14 92 15 18446744073709551615 1 ] 92 15 92 16 18446744073709551615 1 ; 92 16 92 17 18446744073709551615 1 } 93 1 93 2 18446744073709551615 1 ; 93 2 93 3 18446744073709551615 6 struct 95 1 95 7 18446744073709551615 10 eapol_info 95 8 95 18 63 1 { 95 19 95 20 18446744073709551615 6 u_char 96 3 96 9 1 15 sta_mac_address 96 10 96 25 64 1 [ 96 25 96 26 18446744073709551615 12 MAC_ADDR_LEN 96 26 96 38 64 1 ] 96 38 96 39 18446744073709551615 1 ; 96 39 96 40 18446744073709551615 6 u_char 97 3 97 9 1 6 ANonce 97 10 97 16 65 1 [ 97 16 97 17 18446744073709551615 2 32 97 17 97 19 18446744073709551615 1 ] 97 19 97 20 18446744073709551615 1 ; 97 20 97 21 18446744073709551615 6 u_char 98 3 98 9 1 6 SNonce 98 10 98 16 66 1 [ 98 16 98 17 18446744073709551615 2 32 98 17 98 19 18446744073709551615 1 ] 98 19 98 20 18446744073709551615 1 ; 98 20 98 21 18446744073709551615 6 struct 99 3 99 9 18446744073709551615 3 ptk 99 10 99 13 57 3 PTK 99 14 99 17 67 1 ; 99 17 99 18 18446744073709551615 12 eapol_status 100 3 100 15 7 6 status 100 16 100 22 68 1 ; 100 22 100 23 18446744073709551615 6 u_char 101 3 101 9 1 11 last_replay 101 10 101 21 69 1 [ 101 21 101 22 18446744073709551615 1 8 101 22 101 23 18446744073709551615 1 ] 101 23 101 24 18446744073709551615 1 ; 101 24 101 25 18446744073709551615 1 } 102 1 102 2 18446744073709551615 1 ; 102 2 102 3 18446744073709551615 6 u_char 104 1 104 7 1 14 ap_mac_address 104 8 104 22 70 1 [ 104 22 104 23 18446744073709551615 1 6 104 23 104 24 18446744073709551615 1 ] 104 24 104 25 18446744073709551615 1 ; 104 25 104 26 18446744073709551615 6 u_char 105 1 105 7 1 3 psk 105 8 105 11 71 1 [ 105 11 105 12 18446744073709551615 2 32 105 12 105 14 18446744073709551615 1 ] 105 14 105 15 18446744073709551615 1 ; 105 15 105 16 18446744073709551615 6 u_char 106 1 106 7 1 1 * 106 8 106 9 18446744073709551615 4 ssid 106 9 106 13 72 1 ; 106 13 106 14 18446744073709551615 5 map_t 107 1 107 6 73 1 * 107 7 107 8 18446744073709551615 3 map 107 8 107 11 74 1 ; 107 11 107 12 18446744073709551615 6 struct 108 1 108 7 18446744073709551615 3 ptk 108 8 108 11 57 1 * 108 12 108 13 18446744073709551615 4 PTK0 108 13 108 17 75 1 ; 108 17 108 18 18446744073709551615 6 u_char 111 1 111 7 1 14 process_beacon 111 8 111 22 76 1 ( 111 22 111 23 76 5 const 111 23 111 28 18446744073709551615 6 struct 111 29 111 35 18446744073709551615 11 pcap_pkthdr 111 36 111 47 77 1 * 111 48 111 49 18446744073709551615 1 , 111 49 111 50 76 5 const 111 51 111 56 18446744073709551615 6 u_char 111 57 111 63 1 1 * 111 64 111 65 18446744073709551615 1 ) 111 65 111 66 76 1 ; 111 66 111 67 18446744073709551615 6 u_char 112 1 112 7 1 13 process_eapol 112 8 112 21 78 1 ( 112 21 112 22 78 5 const 112 22 112 27 18446744073709551615 6 struct 112 28 112 34 18446744073709551615 11 pcap_pkthdr 112 35 112 46 77 1 * 112 47 112 48 18446744073709551615 1 , 112 48 112 49 78 5 const 112 50 112 55 18446744073709551615 6 u_char 112 56 112 62 1 1 * 112 63 112 64 18446744073709551615 1 ) 112 64 112 65 78 1 ; 112 65 112 66 18446744073709551615 6 u_char 113 1 113 7 1 14 process_packet 113 8 113 22 79 1 ( 113 22 113 23 79 5 const 113 23 113 28 18446744073709551615 6 struct 113 29 113 35 18446744073709551615 11 pcap_pkthdr 113 36 113 47 77 1 * 113 48 113 49 18446744073709551615 1 , 113 49 113 50 79 5 const 113 51 113 56 18446744073709551615 6 u_char 113 57 113 63 1 1 * 113 64 113 65 18446744073709551615 1 ) 113 65 113 66 79 1 ; 113 66 113 67 18446744073709551615 6 u_char 114 1 114 7 1 14 packet_decrypt 114 8 114 22 80 1 ( 114 22 114 23 80 5 const 114 23 114 28 18446744073709551615 6 struct 114 29 114 35 18446744073709551615 11 pcap_pkthdr 114 36 114 47 77 1 * 114 48 114 49 18446744073709551615 1 , 114 49 114 50 80 5 const 114 51 114 56 18446744073709551615 6 u_char 114 57 114 63 1 1 * 114 64 114 65 18446744073709551615 1 , 114 65 114 66 80 6 struct 114 67 114 73 18446744073709551615 10 eapol_info 114 74 114 84 63 1 * 114 85 114 86 18446744073709551615 1 ) 114 86 114 87 80 1 ; 114 87 114 88 18446744073709551615 4 char 115 1 115 5 18446744073709551615 1 * 115 6 115 7 81 12 mac_toString 115 7 115 19 81 1 ( 115 19 115 20 81 6 u_char 115 20 115 26 1 1 * 115 27 115 28 18446744073709551615 1 ) 115 28 115 29 81 1 ; 115 29 115 30 18446744073709551615 6 u_char 116 1 116 7 1 1 * 116 8 116 9 82 6 PRF512 116 9 116 15 82 1 ( 116 15 116 16 82 6 u_char 116 16 116 22 1 1 * 116 23 116 24 18446744073709551615 1 , 116 24 116 25 82 6 u_char 116 26 116 32 1 1 * 116 33 116 34 18446744073709551615 1 , 116 34 116 35 82 6 size_t 116 36 116 42 83 1 , 116 42 116 43 82 6 u_char 116 44 116 50 1 1 * 116 51 116 52 18446744073709551615 1 , 116 52 116 53 82 6 u_char 116 54 116 60 1 1 * 116 61 116 62 18446744073709551615 1 , 116 62 116 63 82 6 u_char 116 64 116 70 1 1 * 116 71 116 72 18446744073709551615 1 , 116 72 116 73 82 6 u_char 116 74 116 80 1 1 * 116 81 116 82 18446744073709551615 1 ) 116 82 116 83 82 1 ; 116 83 116 84 18446744073709551615 6 u_char 117 1 117 7 1 1 * 117 8 117 9 84 15 hexstr_to_bytes 117 9 117 24 84 1 ( 117 24 117 25 84 6 u_char 117 25 117 31 1 1 * 117 32 117 33 18446744073709551615 1 ) 117 33 117 34 84 1 ; 117 34 117 35 18446744073709551615 6 static 118 1 118 7 18446744073709551615 6 inline 118 8 118 14 18446744073709551615 4 void 118 15 118 19 18446744073709551615 3 XOR 118 20 118 23 85 1 ( 118 23 118 24 85 8 unsigned 118 24 118 32 18446744073709551615 4 char 118 33 118 37 18446744073709551615 1 * 118 38 118 39 18446744073709551615 1 , 118 39 118 40 85 8 unsigned 118 41 118 49 18446744073709551615 4 char 118 50 118 54 18446744073709551615 1 * 118 55 118 56 18446744073709551615 1 , 118 56 118 57 85 3 int 118 58 118 61 18446744073709551615 3 len 118 62 118 65 86 1 ) 118 65 118 66 85 1 ; 118 66 118 67 18446744073709551615 3 int 120 1 120 4 18446744073709551615 4 main 120 5 120 9 87 1 ( 120 9 120 10 87 3 int 120 10 120 13 18446744073709551615 4 argc 120 14 120 18 88 1 , 120 18 120 19 87 4 char 120 20 120 24 18446744073709551615 1 * 120 25 120 26 18446744073709551615 4 argv 120 26 120 30 89 1 [ 120 30 120 31 18446744073709551615 1 ] 120 31 120 32 18446744073709551615 1 ) 120 32 120 33 87 1 { 120 34 120 35 18446744073709551615 3 map 122 3 122 6 74 1 = 122 7 122 8 18446744073709551615 11 hashmap_new 122 9 122 20 90 1 ( 122 20 122 21 90 1 ) 122 21 122 22 90 1 ; 122 22 122 23 18446744073709551615 4 char 123 3 123 7 18446744073709551615 1 * 123 8 123 9 18446744073709551615 3 dev 123 9 123 12 91 1 = 123 13 123 14 18446744073709551615 4 argv 123 15 123 19 89 1 [ 123 19 123 20 18446744073709551615 1 1 123 20 123 21 18446744073709551615 1 ] 123 21 123 22 18446744073709551615 1 ; 123 22 123 23 18446744073709551615 4 ssid 124 3 124 7 72 1 = 124 8 124 9 18446744073709551615 4 argv 124 10 124 14 89 1 [ 124 14 124 15 18446744073709551615 1 2 124 15 124 16 18446744073709551615 1 ] 124 16 124 17 18446744073709551615 1 ; 124 17 124 18 18446744073709551615 6 u_char 125 3 125 9 1 1 * 125 10 125 11 18446744073709551615 3 pwd 125 11 125 14 92 1 = 125 15 125 16 18446744073709551615 4 argv 125 17 125 21 89 1 [ 125 21 125 22 18446744073709551615 1 3 125 22 125 23 18446744073709551615 1 ] 125 23 125 24 18446744073709551615 1 ; 125 24 125 25 18446744073709551615 4 char 126 3 126 7 18446744073709551615 6 errbuf 126 8 126 14 93 1 [ 126 14 126 15 18446744073709551615 16 PCAP_ERRBUF_SIZE 126 15 126 31 93 1 ] 126 31 126 32 18446744073709551615 1 ; 126 32 126 33 18446744073709551615 4 char 127 3 127 7 18446744073709551615 13 filter_beacon 127 8 127 21 94 1 [ 127 21 127 22 18446744073709551615 1 ] 127 22 127 23 18446744073709551615 1 = 127 24 127 25 18446744073709551615 30 "wlan type mgt subtype beacon" 127 26 127 56 18446744073709551615 1 ; 127 56 127 57 18446744073709551615 4 char 128 3 128 7 18446744073709551615 25 filter_eapol_on_ssid_mask 128 8 128 33 95 1 [ 128 33 128 34 18446744073709551615 1 ] 128 34 128 35 18446744073709551615 1 = 128 36 128 37 18446744073709551615 32 "wlan addr1 %s or wlan addr2 %s" 128 38 128 70 18446744073709551615 1 ; 128 70 128 71 18446744073709551615 4 char 129 3 129 7 18446744073709551615 1 * 129 8 129 9 18446744073709551615 20 filter_eapol_on_ssid 129 9 129 29 96 1 ; 129 29 129 30 18446744073709551615 6 struct 130 3 130 9 18446744073709551615 11 bpf_program 130 10 130 21 97 2 fp 130 22 130 24 98 1 ; 130 24 130 25 18446744073709551615 6 pcap_t 131 3 131 9 99 1 * 131 10 131 11 18446744073709551615 6 handle 131 11 131 17 100 1 ; 131 17 131 18 18446744073709551615 6 struct 132 3 132 9 18446744073709551615 11 pcap_pkthdr 132 10 132 21 77 1 * 132 22 132 23 18446744073709551615 6 header 132 23 132 29 101 1 ; 132 29 132 30 18446744073709551615 5 const 133 3 133 8 18446744073709551615 6 u_char 133 9 133 15 1 1 * 133 16 133 17 18446744073709551615 6 packet 133 17 133 23 102 1 ; 133 23 133 24 18446744073709551615 4 char 134 3 134 7 18446744073709551615 18 ap_mac_address_str 134 8 134 26 103 1 [ 134 26 134 27 18446744073709551615 1 2 134 27 134 28 18446744073709551615 1 * 134 29 134 30 18446744073709551615 12 MAC_ADDR_LEN 134 31 134 43 18446744073709551615 1 ] 134 43 134 44 18446744073709551615 1 ; 134 44 134 45 18446744073709551615 18 ap_mac_address_str 135 3 135 21 103 1 [ 135 21 135 22 18446744073709551615 1 2 135 22 135 23 18446744073709551615 1 * 135 24 135 25 18446744073709551615 12 MAC_ADDR_LEN 135 26 135 38 18446744073709551615 1 - 135 39 135 40 18446744073709551615 1 1 135 41 135 42 18446744073709551615 1 ] 135 42 135 43 18446744073709551615 1 = 135 44 135 45 18446744073709551615 4 '\0' 135 46 135 50 18446744073709551615 1 ; 135 50 135 51 18446744073709551615 20 fastpbkdf2_hmac_sha1 137 3 137 23 104 1 ( 137 23 137 24 104 3 pwd 137 24 137 27 92 1 , 137 27 137 28 104 6 strlen 137 29 137 35 105 1 ( 137 35 137 36 105 3 pwd 137 36 137 39 92 1 ) 137 39 137 40 105 1 , 137 40 137 41 104 4 ssid 137 42 137 46 72 1 , 137 46 137 47 104 6 strlen 137 48 137 54 105 1 ( 137 54 137 55 105 4 ssid 137 55 137 59 72 1 ) 137 59 137 60 105 1 , 137 60 137 61 104 4 4096 137 62 137 66 18446744073709551615 1 , 137 66 137 67 104 3 psk 137 68 137 71 71 1 , 137 71 137 72 104 2 32 137 73 137 75 18446744073709551615 1 ) 137 75 137 76 104 1 ; 137 76 137 77 18446744073709551615 3 for 139 3 139 6 18446744073709551615 1 ( 139 6 139 7 18446744073709551615 3 int 139 7 139 10 18446744073709551615 1 i 139 11 139 12 106 1 = 139 13 139 14 18446744073709551615 1 0 139 15 139 16 18446744073709551615 1 ; 139 16 139 17 18446744073709551615 1 i 139 18 139 19 106 1 < 139 20 139 21 18446744073709551615 2 32 139 22 139 24 18446744073709551615 1 ; 139 24 139 25 18446744073709551615 1 i 139 26 139 27 106 2 ++ 139 27 139 29 18446744073709551615 1 ) 139 29 139 30 18446744073709551615 1 { 139 31 139 32 18446744073709551615 6 printf 140 5 140 11 107 1 ( 140 11 140 12 107 6 "%02x" 140 12 140 18 18446744073709551615 1 , 140 18 140 19 107 3 psk 140 20 140 23 71 1 [ 140 23 140 24 18446744073709551615 1 i 140 24 140 25 106 1 ] 140 25 140 26 18446744073709551615 1 ) 140 26 140 27 107 1 ; 140 27 140 28 18446744073709551615 1 } 141 3 141 4 18446744073709551615 6 printf 142 3 142 9 107 1 ( 142 9 142 10 107 4 "\n" 142 10 142 14 18446744073709551615 1 ) 142 14 142 15 107 1 ; 142 15 142 16 18446744073709551615 84 //u_char PMK[] = "01b809f9ab2fb5dc47984f52fb2d112e13d84ccb6b86d4a7193ec5299f851c48"; 144 3 144 87 18446744073709551615 38 //u_char passPhrase[] = "10zZz10ZZzZ"; 145 3 145 41 18446744073709551615 34 //u_char ssid[] = "Netgear 2/158"; 146 3 146 37 18446744073709551615 6 u_char 147 3 147 9 1 5 APmac 147 10 147 15 108 1 [ 147 15 147 16 18446744073709551615 1 ] 147 16 147 17 18446744073709551615 1 = 147 18 147 19 18446744073709551615 14 "c4ea1dbe06f5" 147 20 147 34 18446744073709551615 1 ; 147 34 147 35 18446744073709551615 6 u_char 148 3 148 9 1 9 Clientmac 148 10 148 19 109 1 [ 148 19 148 20 18446744073709551615 1 ] 148 20 148 21 18446744073709551615 1 = 148 22 148 23 18446744073709551615 14 "b0e5ed102445" 148 24 148 38 18446744073709551615 1 ; 148 38 148 39 18446744073709551615 6 u_char 149 3 149 9 1 6 ANonce 149 10 149 16 110 1 [ 149 16 149 17 18446744073709551615 1 ] 149 17 149 18 18446744073709551615 1 = 149 19 149 20 18446744073709551615 66 "faf4cf7ef3e37f25e833031a971343fb39b8ef00247febb110606aa11d7ff2d4" 149 21 149 87 18446744073709551615 1 ; 149 87 149 88 18446744073709551615 6 u_char 150 3 150 9 1 6 SNonce 150 10 150 16 111 1 [ 150 16 150 17 18446744073709551615 1 ] 150 17 150 18 18446744073709551615 1 = 150 19 150 20 18446744073709551615 66 "30143bb717c94943f744a749058dac154759a229012c95aeccc6193cff323cff" 150 21 150 87 18446744073709551615 1 ; 150 87 150 88 18446744073709551615 6 u_char 151 3 151 9 1 4 data 151 10 151 14 112 1 [ 151 14 151 15 18446744073709551615 1 ] 151 15 151 16 18446744073709551615 1 = 151 17 151 18 18446744073709551615 244 "0103007502010a0000000000000000000130143bb717c94943f744a749058dac154759a229012c95aeccc6193cff323cff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001630140100000fac020100000fac040100000fac020000" 151 19 151 263 18446744073709551615 1 ; 151 263 151 264 18446744073709551615 4 PTK0 153 3 153 7 75 1 = 153 8 153 9 18446744073709551615 1 ( 153 10 153 11 18446744073709551615 6 struct 153 11 153 17 18446744073709551615 3 ptk 153 18 153 21 57 1 * 153 22 153 23 18446744073709551615 1 ) 153 23 153 24 18446744073709551615 6 PRF512 153 24 153 30 82 1 ( 153 30 153 31 82 3 psk 153 31 153 34 71 1 , 153 34 153 35 82 1 A 153 36 153 37 0 1 , 153 37 153 38 82 6 strlen 153 39 153 45 105 1 ( 153 45 153 46 105 1 A 153 46 153 47 0 1 ) 153 47 153 48 105 1 , 153 48 153 49 82 15 hexstr_to_bytes 153 50 153 65 84 1 ( 153 65 153 66 84 5 APmac 153 66 153 71 108 1 ) 153 71 153 72 84 1 , 153 72 153 73 82 15 hexstr_to_bytes 153 74 153 89 84 1 ( 153 89 153 90 84 9 Clientmac 153 90 153 99 109 1 ) 153 99 153 100 84 1 , 153 100 153 101 82 15 hexstr_to_bytes 153 102 153 117 84 1 ( 153 117 153 118 84 6 ANonce 153 118 153 124 110 1 ) 153 124 153 125 84 1 , 153 125 153 126 82 15 hexstr_to_bytes 153 127 153 142 84 1 ( 153 142 153 143 84 6 SNonce 153 143 153 149 111 1 ) 153 149 153 150 84 1 ) 153 150 153 151 82 1 ; 153 151 153 152 18446744073709551615 3 int 155 3 155 6 18446744073709551615 10 sha_length 155 7 155 17 113 1 = 155 18 155 19 18446744073709551615 2 16 155 20 155 22 18446744073709551615 1 ; 155 22 155 23 18446744073709551615 6 u_char 156 3 156 9 1 1 * 156 10 156 11 18446744073709551615 3 MIC 156 11 156 14 114 1 = 156 15 156 16 18446744073709551615 6 malloc 156 17 156 23 115 1 ( 156 23 156 24 115 2 16 156 24 156 26 18446744073709551615 1 ) 156 26 156 27 115 1 ; 156 27 156 28 18446744073709551615 4 HMAC 157 3 157 7 116 1 ( 157 7 157 8 116 8 EVP_sha1 157 8 157 16 117 1 ( 157 16 157 17 117 1 ) 157 17 157 18 117 1 , 157 18 157 19 116 4 PTK0 157 20 157 24 75 2 -> 157 24 157 26 18446744073709551615 3 kck 157 26 157 29 58 1 , 157 29 157 30 116 2 16 157 31 157 33 18446744073709551615 1 , 157 33 157 34 116 15 hexstr_to_bytes 157 35 157 50 84 1 ( 157 50 157 51 84 4 data 157 51 157 55 112 1 ) 157 55 157 56 84 1 , 157 56 157 57 116 3 121 157 58 157 61 18446744073709551615 1 , 157 61 157 62 116 3 MIC 157 63 157 66 114 1 , 157 66 157 67 116 1 & 157 68 157 69 18446744073709551615 10 sha_length 157 69 157 79 113 1 ) 157 79 157 80 116 1 ; 157 80 157 81 18446744073709551615 3 for 158 3 158 6 18446744073709551615 1 ( 158 6 158 7 18446744073709551615 3 int 158 7 158 10 18446744073709551615 1 i 158 11 158 12 118 1 = 158 13 158 14 18446744073709551615 1 0 158 15 158 16 18446744073709551615 1 ; 158 16 158 17 18446744073709551615 1 i 158 18 158 19 118 1 < 158 20 158 21 18446744073709551615 2 16 158 22 158 24 18446744073709551615 1 ; 158 24 158 25 18446744073709551615 1 i 158 26 158 27 118 2 ++ 158 27 158 29 18446744073709551615 1 ) 158 29 158 30 18446744073709551615 1 { 158 31 158 32 18446744073709551615 6 printf 159 5 159 11 107 1 ( 159 11 159 12 107 6 "%02x" 159 12 159 18 18446744073709551615 1 , 159 18 159 19 107 3 MIC 159 20 159 23 114 1 [ 159 23 159 24 18446744073709551615 1 i 159 24 159 25 118 1 ] 159 25 159 26 18446744073709551615 1 ) 159 26 159 27 107 1 ; 159 27 159 28 18446744073709551615 1 } 160 3 160 4 18446744073709551615 6 printf 161 3 161 9 107 1 ( 161 9 161 10 107 4 "\n" 161 10 161 14 18446744073709551615 1 ) 161 14 161 15 107 1 ; 161 15 161 16 18446744073709551615 11 bpf_u_int32 163 3 163 14 119 4 mask 163 15 163 19 120 1 ; 163 19 163 20 18446744073709551615 40 /* The netmask of our sniffing device */ 163 21 163 61 18446744073709551615 11 bpf_u_int32 164 3 164 14 119 3 net 164 15 164 18 121 1 ; 164 18 164 19 18446744073709551615 35 /* The IP of our sniffing device */ 164 21 164 56 18446744073709551615 2 if 166 3 166 5 18446744073709551615 1 ( 166 5 166 6 18446744073709551615 14 pcap_lookupnet 166 6 166 20 122 1 ( 166 20 166 21 122 3 dev 166 21 166 24 91 1 , 166 24 166 25 122 1 & 166 26 166 27 18446744073709551615 3 net 166 27 166 30 121 1 , 166 30 166 31 122 1 & 166 32 166 33 18446744073709551615 4 mask 166 33 166 37 120 1 , 166 37 166 38 122 6 errbuf 166 39 166 45 93 1 ) 166 45 166 46 122 2 == 166 47 166 49 18446744073709551615 1 - 166 50 166 51 18446744073709551615 1 1 166 51 166 52 18446744073709551615 1 ) 166 52 166 53 18446744073709551615 1 { 166 54 166 55 18446744073709551615 7 fprintf 167 5 167 12 123 1 ( 167 12 167 13 123 6 stderr 167 13 167 19 123 1 , 167 19 167 20 123 35 "Can't get netmask for device %s\n" 167 21 167 56 18446744073709551615 1 , 167 56 167 57 123 3 dev 167 58 167 61 91 1 ) 167 61 167 62 123 1 ; 167 62 167 63 18446744073709551615 3 net 168 5 168 8 121 1 = 168 9 168 10 18446744073709551615 1 0 168 11 168 12 18446744073709551615 1 ; 168 12 168 13 18446744073709551615 4 mask 169 5 169 9 120 1 = 169 10 169 11 18446744073709551615 1 0 169 12 169 13 18446744073709551615 1 ; 169 13 169 14 18446744073709551615 1 } 170 3 170 4 18446744073709551615 4 char 172 3 172 7 18446744073709551615 8 filename 172 8 172 16 124 1 [ 172 16 172 17 18446744073709551615 1 ] 172 17 172 18 18446744073709551615 1 = 172 19 172 20 18446744073709551615 17 "../capture.pcap" 172 21 172 38 18446744073709551615 1 ; 172 38 172 39 18446744073709551615 56 //handle = pcap_open_live(dev, BUFSIZ, 1, 1000, errbuf); 173 3 173 59 18446744073709551615 6 handle 174 3 174 9 100 1 = 174 10 174 11 18446744073709551615 17 pcap_open_offline 174 12 174 29 125 1 ( 174 29 174 30 125 8 filename 174 30 174 38 124 1 , 174 38 174 39 125 6 errbuf 174 40 174 46 93 1 ) 174 46 174 47 125 1 ; 174 47 174 48 18446744073709551615 2 if 176 3 176 5 18446744073709551615 1 ( 176 5 176 6 18446744073709551615 6 handle 176 6 176 12 100 2 == 176 13 176 15 18446744073709551615 4 NULL 176 16 176 20 18446744073709551615 1 ) 176 20 176 21 18446744073709551615 1 { 176 22 176 23 18446744073709551615 7 fprintf 177 5 177 12 123 1 ( 177 12 177 13 123 6 stderr 177 13 177 19 123 1 , 177 19 177 20 123 31 "Couldn't open device %s: %s\n" 177 21 177 52 18446744073709551615 1 , 177 52 177 53 123 3 dev 177 54 177 57 91 1 , 177 57 177 58 123 6 errbuf 177 59 177 65 93 1 ) 177 65 177 66 123 1 ; 177 66 177 67 18446744073709551615 6 return 178 5 178 11 18446744073709551615 1 ( 178 12 178 13 18446744073709551615 1 2 178 13 178 14 18446744073709551615 1 ) 178 14 178 15 18446744073709551615 1 ; 178 15 178 16 18446744073709551615 1 } 179 3 179 4 18446744073709551615 2 if 181 3 181 5 18446744073709551615 1 ( 181 5 181 6 18446744073709551615 12 pcap_compile 181 6 181 18 126 1 ( 181 18 181 19 126 6 handle 181 19 181 25 100 1 , 181 25 181 26 126 1 & 181 27 181 28 18446744073709551615 2 fp 181 28 181 30 98 1 , 181 30 181 31 126 13 filter_beacon 181 32 181 45 94 1 , 181 45 181 46 126 1 0 181 47 181 48 18446744073709551615 1 , 181 48 181 49 126 3 net 181 50 181 53 121 1 ) 181 53 181 54 126 2 == 181 55 181 57 18446744073709551615 1 - 181 58 181 59 18446744073709551615 1 1 181 59 181 60 18446744073709551615 1 ) 181 60 181 61 18446744073709551615 1 { 181 62 181 63 18446744073709551615 7 fprintf 182 5 182 12 123 1 ( 182 12 182 13 123 6 stderr 182 13 182 19 123 1 , 182 19 182 20 123 32 "Couldn't parse filter %s: %s\n" 182 21 182 53 18446744073709551615 1 , 182 53 182 54 123 13 filter_beacon 182 55 182 68 94 1 , 182 68 182 69 123 11 pcap_geterr 182 70 182 81 127 1 ( 182 81 182 82 127 6 handle 182 82 182 88 100 1 ) 182 88 182 89 127 1 ) 182 89 182 90 123 1 ; 182 90 182 91 18446744073709551615 6 return 183 5 183 11 18446744073709551615 1 ( 183 12 183 13 18446744073709551615 1 2 183 13 183 14 18446744073709551615 1 ) 183 14 183 15 18446744073709551615 1 ; 183 15 183 16 18446744073709551615 1 } 184 3 184 4 18446744073709551615 2 if 186 3 186 5 18446744073709551615 1 ( 186 5 186 6 18446744073709551615 14 pcap_setfilter 186 6 186 20 128 1 ( 186 20 186 21 128 6 handle 186 21 186 27 100 1 , 186 27 186 28 128 1 & 186 29 186 30 18446744073709551615 2 fp 186 30 186 32 98 1 ) 186 32 186 33 128 2 == 186 34 186 36 18446744073709551615 1 - 186 37 186 38 18446744073709551615 1 1 186 38 186 39 18446744073709551615 1 ) 186 39 186 40 18446744073709551615 1 { 186 41 186 42 18446744073709551615 7 fprintf 187 5 187 12 123 1 ( 187 12 187 13 123 6 stderr 187 13 187 19 123 1 , 187 19 187 20 123 34 "Couldn't install filter %s: %s\n" 187 21 187 55 18446744073709551615 1 , 187 55 187 56 123 13 filter_beacon 187 57 187 70 94 1 , 187 70 187 71 123 11 pcap_geterr 187 72 187 83 127 1 ( 187 83 187 84 127 6 handle 187 84 187 90 100 1 ) 187 90 187 91 127 1 ) 187 91 187 92 123 1 ; 187 92 187 93 18446744073709551615 6 return 188 5 188 11 18446744073709551615 1 ( 188 12 188 13 18446744073709551615 1 2 188 13 188 14 18446744073709551615 1 ) 188 14 188 15 18446744073709551615 1 ; 188 15 188 16 18446744073709551615 1 } 189 3 189 4 18446744073709551615 6 printf 191 3 191 9 107 1 ( 191 9 191 10 107 14 "Device: %s\n" 191 10 191 24 18446744073709551615 1 , 191 24 191 25 107 3 dev 191 26 191 29 91 1 ) 191 29 191 30 107 1 ; 191 30 191 31 18446744073709551615 31 //Put the device in sniff loop; 192 3 192 34 18446744073709551615 5 while 193 3 193 8 18446744073709551615 1 ( 193 8 193 9 18446744073709551615 12 pcap_next_ex 193 9 193 21 129 1 ( 193 21 193 22 129 6 handle 193 22 193 28 100 1 , 193 28 193 29 129 1 & 193 30 193 31 18446744073709551615 6 header 193 31 193 37 101 1 , 193 37 193 38 129 1 & 193 39 193 40 18446744073709551615 6 packet 193 40 193 46 102 1 ) 193 46 193 47 129 2 && 193 48 193 50 18446744073709551615 1 ! 193 51 193 52 18446744073709551615 14 process_beacon 193 52 193 66 76 1 ( 193 66 193 67 76 6 header 193 67 193 73 101 1 , 193 73 193 74 76 6 packet 193 75 193 81 102 1 ) 193 81 193 82 76 1 ) 193 82 193 83 18446744073709551615 1 ; 194 5 194 6 18446744073709551615 8 asprintf 196 3 196 11 130 1 ( 196 11 196 12 130 1 & 196 12 196 13 18446744073709551615 20 filter_eapol_on_ssid 196 13 196 33 96 1 , 196 33 196 34 130 25 filter_eapol_on_ssid_mask 196 35 196 60 95 1 , 196 60 196 61 130 12 mac_toString 196 62 196 74 81 1 ( 196 74 196 75 81 14 ap_mac_address 196 75 196 89 70 1 ) 196 89 196 90 81 1 , 196 90 196 91 130 12 mac_toString 196 92 196 104 81 1 ( 196 104 196 105 81 14 ap_mac_address 196 105 196 119 70 1 ) 196 119 196 120 81 1 ) 196 120 196 121 130 1 ; 196 121 196 122 18446744073709551615 2 if 198 3 198 5 18446744073709551615 1 ( 198 5 198 6 18446744073709551615 12 pcap_compile 198 6 198 18 126 1 ( 198 18 198 19 126 6 handle 198 19 198 25 100 1 , 198 25 198 26 126 1 & 198 27 198 28 18446744073709551615 2 fp 198 28 198 30 98 1 , 198 30 198 31 126 20 filter_eapol_on_ssid 198 32 198 52 96 1 , 198 52 198 53 126 1 0 198 54 198 55 18446744073709551615 1 , 198 55 198 56 126 3 net 198 57 198 60 121 1 ) 198 60 198 61 126 2 == 198 62 198 64 18446744073709551615 1 - 198 65 198 66 18446744073709551615 1 1 198 66 198 67 18446744073709551615 1 ) 198 67 198 68 18446744073709551615 1 { 198 69 198 70 18446744073709551615 7 fprintf 199 5 199 12 123 1 ( 199 12 199 13 123 6 stderr 199 13 199 19 123 1 , 199 19 199 20 123 32 "Couldn't parse filter %s: %s\n" 199 21 199 53 18446744073709551615 1 , 199 53 199 54 123 20 filter_eapol_on_ssid 199 55 199 75 96 1 , 199 75 199 76 123 11 pcap_geterr 199 77 199 88 127 1 ( 199 88 199 89 127 6 handle 199 89 199 95 100 1 ) 199 95 199 96 127 1 ) 199 96 199 97 123 1 ; 199 97 199 98 18446744073709551615 6 return 200 5 200 11 18446744073709551615 1 ( 200 12 200 13 18446744073709551615 1 2 200 13 200 14 18446744073709551615 1 ) 200 14 200 15 18446744073709551615 1 ; 200 15 200 16 18446744073709551615 1 } 201 3 201 4 18446744073709551615 2 if 202 3 202 5 18446744073709551615 1 ( 202 5 202 6 18446744073709551615 14 pcap_setfilter 202 6 202 20 128 1 ( 202 20 202 21 128 6 handle 202 21 202 27 100 1 , 202 27 202 28 128 1 & 202 29 202 30 18446744073709551615 2 fp 202 30 202 32 98 1 ) 202 32 202 33 128 2 == 202 34 202 36 18446744073709551615 1 - 202 37 202 38 18446744073709551615 1 1 202 38 202 39 18446744073709551615 1 ) 202 39 202 40 18446744073709551615 1 { 202 41 202 42 18446744073709551615 7 fprintf 203 5 203 12 123 1 ( 203 12 203 13 123 6 stderr 203 13 203 19 123 1 , 203 19 203 20 123 34 "Couldn't install filter %s: %s\n" 203 21 203 55 18446744073709551615 1 , 203 55 203 56 123 20 filter_eapol_on_ssid 203 57 203 77 96 1 , 203 77 203 78 123 11 pcap_geterr 203 79 203 90 127 1 ( 203 90 203 91 127 6 handle 203 91 203 97 100 1 ) 203 97 203 98 127 1 ) 203 98 203 99 123 1 ; 203 99 203 100 18446744073709551615 6 return 204 5 204 11 18446744073709551615 1 ( 204 12 204 13 18446744073709551615 1 2 204 13 204 14 18446744073709551615 1 ) 204 14 204 15 18446744073709551615 1 ; 204 15 204 16 18446744073709551615 1 } 205 3 205 4 18446744073709551615 3 int 206 3 206 6 18446744073709551615 3 res 206 7 206 10 131 1 = 206 11 206 12 18446744073709551615 1 0 206 13 206 14 18446744073709551615 1 ; 206 14 206 15 18446744073709551615 5 while 207 3 207 8 18446744073709551615 1 ( 207 8 207 9 18446744073709551615 12 pcap_next_ex 207 9 207 21 129 1 ( 207 21 207 22 129 6 handle 207 22 207 28 100 1 , 207 28 207 29 129 1 & 207 30 207 31 18446744073709551615 6 header 207 31 207 37 101 1 , 207 37 207 38 129 1 & 207 39 207 40 18446744073709551615 6 packet 207 40 207 46 102 1 ) 207 46 207 47 129 2 >= 207 48 207 50 18446744073709551615 1 0 207 51 207 52 18446744073709551615 2 && 207 53 207 55 18446744073709551615 14 process_packet 207 56 207 70 79 1 ( 207 70 207 71 79 6 header 207 71 207 77 101 1 , 207 77 207 78 79 6 packet 207 79 207 85 102 1 ) 207 85 207 86 79 1 ) 207 86 207 87 18446744073709551615 1 ; 208 5 208 6 18446744073709551615 273 /*printf("AP mac address: ");
  for(int i = 0; i < MAC_ADDR_LEN; i++) {
    printf("%02x", ap_mac_address[i]);
  }
  printf(".\n");
  printf("%s\n", mac_toString(ap_mac_address));
  printf(filter_eapol_on_ssid, mac_toString(ap_mac_address), mac_toString(ap_mac_address));*/ 209 3 215 94 18446744073709551615 13 pcap_freecode 217 3 217 16 132 1 ( 217 16 217 17 132 1 & 217 17 217 18 18446744073709551615 2 fp 217 18 217 20 98 1 ) 217 20 217 21 132 1 ; 217 21 217 22 18446744073709551615 10 pcap_close 218 3 218 13 133 1 ( 218 13 218 14 133 6 handle 218 14 218 20 100 1 ) 218 20 218 21 133 1 ; 218 21 218 22 18446744073709551615 6 return 219 3 219 9 18446744073709551615 1 ( 219 10 219 11 18446744073709551615 1 0 219 11 219 12 18446744073709551615 1 ) 219 12 219 13 18446744073709551615 1 ; 219 13 219 14 18446744073709551615 1 } 220 1 220 2 18446744073709551615 6 u_char 222 1 222 7 1 14 process_beacon 222 8 222 22 76 1 ( 222 22 222 23 76 5 const 222 23 222 28 18446744073709551615 6 struct 222 29 222 35 18446744073709551615 11 pcap_pkthdr 222 36 222 47 77 1 * 222 48 222 49 18446744073709551615 6 header 222 49 222 55 134 1 , 222 55 222 56 76 5 const 222 57 222 62 18446744073709551615 6 u_char 222 63 222 69 1 1 * 222 70 222 71 18446744073709551615 6 buffer 222 71 222 77 135 1 ) 222 77 222 78 76 1 { 222 79 222 80 18446744073709551615 5 const 223 3 223 8 18446744073709551615 6 struct 223 9 223 15 18446744073709551615 19 sniff_802_11_beacon 223 16 223 35 16 1 * 223 36 223 37 18446744073709551615 10 hdr_802_11 223 37 223 47 136 1 ; 223 47 223 48 18446744073709551615 10 hdr_802_11 224 3 224 13 136 1 = 224 14 224 15 18446744073709551615 1 ( 224 16 224 17 18446744073709551615 6 struct 224 17 224 23 18446744073709551615 19 sniff_802_11_beacon 224 24 224 43 16 1 * 224 44 224 45 18446744073709551615 1 ) 224 45 224 46 18446744073709551615 1 ( 224 46 224 47 18446744073709551615 6 buffer 224 47 224 53 135 1 + 224 54 224 55 18446744073709551615 16 PRISM_HEADER_LEN 224 56 224 72 18446744073709551615 1 ) 224 72 224 73 18446744073709551615 1 ; 224 73 224 74 18446744073709551615 3 int 225 3 225 6 18446744073709551615 11 ssid_length 225 7 225 18 137 1 = 225 19 225 20 18446744073709551615 1 ( 225 21 225 22 18446744073709551615 3 int 225 22 225 25 18446744073709551615 1 ) 225 25 225 26 18446744073709551615 1 ( 225 26 225 27 18446744073709551615 6 buffer 225 27 225 33 135 1 + 225 34 225 35 18446744073709551615 16 PRISM_HEADER_LEN 225 36 225 52 18446744073709551615 1 + 225 53 225 54 18446744073709551615 6 sizeof 225 55 225 61 18446744073709551615 1 ( 225 61 225 62 18446744073709551615 6 struct 225 62 225 68 18446744073709551615 19 sniff_802_11_beacon 225 69 225 88 16 1 ) 225 88 225 89 18446744073709551615 1 + 225 90 225 91 18446744073709551615 2 13 225 92 225 94 18446744073709551615 1 ) 225 94 225 95 18446744073709551615 1 [ 225 95 225 96 18446744073709551615 1 0 225 96 225 97 18446744073709551615 1 ] 225 97 225 98 18446744073709551615 1 ; 225 98 225 99 18446744073709551615 6 u_char 226 3 226 9 1 11 beacon_ssid 226 10 226 21 138 1 [ 226 21 226 22 18446744073709551615 11 ssid_length 226 22 226 33 137 1 + 226 34 226 35 18446744073709551615 1 1 226 36 226 37 18446744073709551615 1 ] 226 37 226 38 18446744073709551615 1 ; 226 38 226 39 18446744073709551615 6 memcpy 227 3 227 9 139 1 ( 227 9 227 10 139 11 beacon_ssid 227 10 227 21 138 1 , 227 21 227 22 139 1 ( 227 23 227 24 18446744073709551615 6 buffer 227 24 227 30 135 1 + 227 31 227 32 18446744073709551615 16 PRISM_HEADER_LEN 227 33 227 49 18446744073709551615 1 + 227 50 227 51 18446744073709551615 6 sizeof 227 52 227 58 18446744073709551615 1 ( 227 58 227 59 18446744073709551615 6 struct 227 59 227 65 18446744073709551615 19 sniff_802_11_beacon 227 66 227 85 16 1 ) 227 85 227 86 18446744073709551615 1 + 227 87 227 88 18446744073709551615 2 14 227 89 227 91 18446744073709551615 1 ) 227 91 227 92 18446744073709551615 1 , 227 92 227 93 139 11 ssid_length 227 94 227 105 137 1 ) 227 105 227 106 139 1 ; 227 106 227 107 18446744073709551615 11 beacon_ssid 228 3 228 14 138 1 [ 228 14 228 15 18446744073709551615 11 ssid_length 228 15 228 26 137 1 ] 228 26 228 27 18446744073709551615 1 = 228 28 228 29 18446744073709551615 4 '\0' 228 30 228 34 18446744073709551615 1 ; 228 34 228 35 18446744073709551615 2 if 229 3 229 5 18446744073709551615 1 ( 229 5 229 6 18446744073709551615 6 strcmp 229 6 229 12 140 1 ( 229 12 229 13 140 11 beacon_ssid 229 13 229 24 138 1 , 229 24 229 25 140 4 ssid 229 26 229 30 72 1 ) 229 30 229 31 140 2 == 229 32 229 34 18446744073709551615 1 0 229 35 229 36 18446744073709551615 1 ) 229 36 229 37 18446744073709551615 1 { 229 38 229 39 18446744073709551615 6 memcpy 230 5 230 11 139 1 ( 230 11 230 12 139 14 ap_mac_address 230 12 230 26 70 1 , 230 26 230 27 139 10 hdr_802_11 230 28 230 38 136 2 -> 230 38 230 40 18446744073709551615 5 addr2 230 40 230 45 20 1 , 230 45 230 46 139 12 MAC_ADDR_LEN 230 47 230 59 139 1 ) 230 59 230 60 139 1 ; 230 60 230 61 18446744073709551615 6 return 231 5 231 11 18446744073709551615 1 ( 231 12 231 13 18446744073709551615 1 1 231 13 231 14 18446744073709551615 1 ) 231 14 231 15 18446744073709551615 1 ; 231 15 231 16 18446744073709551615 1 } 232 3 232 4 18446744073709551615 6 return 233 3 233 9 18446744073709551615 1 ( 233 10 233 11 18446744073709551615 1 0 233 11 233 12 18446744073709551615 1 ) 233 12 233 13 18446744073709551615 1 ; 233 13 233 14 18446744073709551615 1 } 234 1 234 2 18446744073709551615 6 u_char 236 1 236 7 1 13 process_eapol 236 8 236 21 78 1 ( 236 21 236 22 78 5 const 236 22 236 27 18446744073709551615 6 struct 236 28 236 34 18446744073709551615 11 pcap_pkthdr 236 35 236 46 77 1 * 236 47 236 48 18446744073709551615 6 header 236 48 236 54 141 1 , 236 54 236 55 78 5 const 236 56 236 61 18446744073709551615 6 u_char 236 62 236 68 1 1 * 236 69 236 70 18446744073709551615 6 buffer 236 70 236 76 142 1 ) 236 76 236 77 78 1 { 236 78 236 79 18446744073709551615 5 const 237 3 237 8 18446744073709551615 6 struct 237 9 237 15 18446744073709551615 12 sniff_802_11 237 16 237 28 8 1 * 237 29 237 30 18446744073709551615 10 hdr_802_11 237 30 237 40 143 1 ; 237 40 237 41 18446744073709551615 10 hdr_802_11 238 3 238 13 143 1 = 238 14 238 15 18446744073709551615 1 ( 238 16 238 17 18446744073709551615 6 struct 238 17 238 23 18446744073709551615 12 sniff_802_11 238 24 238 36 8 1 * 238 37 238 38 18446744073709551615 1 ) 238 38 238 39 18446744073709551615 1 ( 238 39 238 40 18446744073709551615 6 buffer 238 40 238 46 142 1 + 238 47 238 48 18446744073709551615 16 PRISM_HEADER_LEN 238 49 238 65 18446744073709551615 1 ) 238 65 238 66 18446744073709551615 1 ; 238 66 238 67 18446744073709551615 5 const 239 3 239 8 18446744073709551615 6 struct 239 9 239 15 18446744073709551615 17 sniff_802_1x_auth 239 16 239 33 30 1 * 239 34 239 35 18446744073709551615 15 hdr_802_1x_auth 239 35 239 50 144 1 ; 239 50 239 51 18446744073709551615 15 hdr_802_1x_auth 240 3 240 18 144 1 = 240 19 240 20 18446744073709551615 1 ( 240 21 240 22 18446744073709551615 6 struct 240 22 240 28 18446744073709551615 17 sniff_802_1x_auth 240 29 240 46 30 1 * 240 47 240 48 18446744073709551615 1 ) 240 48 240 49 18446744073709551615 1 ( 240 49 240 50 18446744073709551615 6 buffer 240 50 240 56 142 1 + 240 57 240 58 18446744073709551615 16 PRISM_HEADER_LEN 240 59 240 75 18446744073709551615 1 + 240 76 240 77 18446744073709551615 6 sizeof 240 78 240 84 18446744073709551615 1 ( 240 84 240 85 18446744073709551615 6 struct 240 85 240 91 18446744073709551615 12 sniff_802_11 240 92 240 104 8 1 ) 240 104 240 105 18446744073709551615 1 + 240 106 240 107 18446744073709551615 7 LLC_LEN 240 108 240 115 18446744073709551615 1 ) 240 115 240 116 18446744073709551615 1 ; 240 116 240 117 18446744073709551615 1 } 241 1 241 2 18446744073709551615 6 u_char 243 1 243 7 1 14 process_packet 243 8 243 22 79 1 ( 243 22 243 23 79 5 const 243 23 243 28 18446744073709551615 6 struct 243 29 243 35 18446744073709551615 11 pcap_pkthdr 243 36 243 47 77 1 * 243 48 243 49 18446744073709551615 6 header 243 49 243 55 145 1 , 243 55 243 56 79 5 const 243 57 243 62 18446744073709551615 6 u_char 243 63 243 69 1 1 * 243 70 243 71 18446744073709551615 6 buffer 243 71 243 77 146 1 ) 243 77 243 78 79 1 { 243 79 243 80 18446744073709551615 5 const 244 3 244 8 18446744073709551615 6 struct 244 9 244 15 18446744073709551615 12 sniff_802_11 244 16 244 28 8 1 * 244 29 244 30 18446744073709551615 10 hdr_802_11 244 30 244 40 147 1 ; 244 40 244 41 18446744073709551615 10 hdr_802_11 245 3 245 13 147 1 = 245 14 245 15 18446744073709551615 1 ( 245 16 245 17 18446744073709551615 6 struct 245 17 245 23 18446744073709551615 12 sniff_802_11 245 24 245 36 8 1 * 245 37 245 38 18446744073709551615 1 ) 245 38 245 39 18446744073709551615 1 ( 245 39 245 40 18446744073709551615 6 buffer 245 40 245 46 146 1 + 245 47 245 48 18446744073709551615 16 PRISM_HEADER_LEN 245 49 245 65 18446744073709551615 1 ) 245 65 245 66 18446744073709551615 1 ; 245 66 245 67 18446744073709551615 3 int 246 3 246 6 18446744073709551615 8 qos_type 246 7 246 15 148 1 = 246 16 246 17 18446744073709551615 16 TAKE_N_BITS_FROM 246 18 246 34 148 1 ( 246 34 246 35 18446744073709551615 10 hdr_802_11 246 35 246 45 18446744073709551615 2 -> 246 45 246 47 18446744073709551615 13 frame_control 246 47 246 60 18446744073709551615 1 [ 246 60 246 61 18446744073709551615 1 0 246 61 246 62 18446744073709551615 1 ] 246 62 246 63 18446744073709551615 1 , 246 63 246 64 18446744073709551615 1 2 246 65 246 66 18446744073709551615 1 , 246 66 246 67 18446744073709551615 1 2 246 68 246 69 18446744073709551615 1 ) 246 69 246 70 18446744073709551615 1 ; 246 70 246 71 18446744073709551615 3 int 247 3 247 6 18446744073709551615 16 packet_direction 247 7 247 23 149 1 = 247 24 247 25 18446744073709551615 16 TAKE_N_BITS_FROM 247 26 247 42 149 1 ( 247 42 247 43 18446744073709551615 10 hdr_802_11 247 43 247 53 18446744073709551615 2 -> 247 53 247 55 18446744073709551615 13 frame_control 247 55 247 68 18446744073709551615 1 [ 247 68 247 69 18446744073709551615 1 1 247 69 247 70 18446744073709551615 1 ] 247 70 247 71 18446744073709551615 1 , 247 71 247 72 18446744073709551615 1 0 247 73 247 74 18446744073709551615 1 , 247 74 247 75 18446744073709551615 1 2 247 76 247 77 18446744073709551615 1 ) 247 77 247 78 18446744073709551615 1 ; 247 78 247 79 18446744073709551615 3 int 248 3 248 6 18446744073709551615 14 data_protected 248 7 248 21 150 1 = 248 22 248 23 18446744073709551615 16 TAKE_N_BITS_FROM 248 24 248 40 150 1 ( 248 40 248 41 18446744073709551615 10 hdr_802_11 248 41 248 51 18446744073709551615 2 -> 248 51 248 53 18446744073709551615 13 frame_control 248 53 248 66 18446744073709551615 1 [ 248 66 248 67 18446744073709551615 1 1 248 67 248 68 18446744073709551615 1 ] 248 68 248 69 18446744073709551615 1 , 248 69 248 70 18446744073709551615 1 6 248 71 248 72 18446744073709551615 1 , 248 72 248 73 18446744073709551615 1 1 248 74 248 75 18446744073709551615 1 ) 248 75 248 76 18446744073709551615 1 ; 248 76 248 77 18446744073709551615 6 struct 249 3 249 9 18446744073709551615 10 eapol_info 249 10 249 20 63 1 * 249 21 249 22 18446744073709551615 17 packet_eapol_info 249 22 249 39 151 1 = 249 40 249 41 18446744073709551615 4 NULL 249 42 249 46 151 1 ; 249 46 249 47 18446744073709551615 3 int 251 3 251 6 18446744073709551615 11 sha1_length 251 7 251 18 152 1 = 251 19 251 20 18446744073709551615 2 16 251 21 251 23 18446744073709551615 1 ; 251 23 251 24 18446744073709551615 6 u_char 253 3 253 9 1 1 * 253 10 253 11 18446744073709551615 11 sta_address 253 11 253 22 153 1 ; 253 22 253 23 18446744073709551615 2 if 255 3 255 5 18446744073709551615 1 ( 255 5 255 6 18446744073709551615 16 packet_direction 255 6 255 22 149 2 == 255 23 255 25 18446744073709551615 1 2 255 26 255 27 18446744073709551615 1 ) 255 27 255 28 18446744073709551615 1 { 255 29 255 30 18446744073709551615 11 sta_address 256 5 256 16 153 1 = 256 17 256 18 18446744073709551615 10 hdr_802_11 256 19 256 29 147 2 -> 256 29 256 31 18446744073709551615 5 addr1 256 31 256 36 11 1 ; 256 36 256 37 18446744073709551615 1 } 257 3 257 4 18446744073709551615 4 else 258 3 258 7 18446744073709551615 2 if 258 8 258 10 18446744073709551615 1 ( 258 10 258 11 18446744073709551615 16 packet_direction 258 11 258 27 149 2 == 258 28 258 30 18446744073709551615 1 1 258 31 258 32 18446744073709551615 1 ) 258 32 258 33 18446744073709551615 1 { 258 34 258 35 18446744073709551615 11 sta_address 259 5 259 16 153 1 = 259 17 259 18 18446744073709551615 10 hdr_802_11 259 19 259 29 147 2 -> 259 29 259 31 18446744073709551615 5 addr2 259 31 259 36 12 1 ; 259 36 259 37 18446744073709551615 1 } 260 3 260 4 18446744073709551615 2 if 262 3 262 5 18446744073709551615 1 ( 262 5 262 6 18446744073709551615 8 qos_type 262 6 262 14 148 2 == 262 15 262 17 18446744073709551615 1 2 262 18 262 19 18446744073709551615 1 ) 262 19 262 20 18446744073709551615 1 { 262 21 262 22 18446744073709551615 2 if 263 5 263 7 18446744073709551615 1 ( 263 7 263 8 18446744073709551615 14 data_protected 263 8 263 22 150 1 ) 263 22 263 23 18446744073709551615 1 { 263 24 263 25 18446744073709551615 2 if 264 7 264 9 18446744073709551615 1 ( 264 9 264 10 18446744073709551615 11 hashmap_get 264 10 264 21 154 1 ( 264 21 264 22 154 3 map 264 22 264 25 74 1 , 264 25 264 26 154 12 mac_toString 264 27 264 39 81 1 ( 264 39 264 40 81 11 sta_address 264 40 264 51 153 1 ) 264 51 264 52 81 1 , 264 52 264 53 154 1 ( 264 54 264 55 18446744073709551615 4 void 264 55 264 59 18446744073709551615 1 * 264 60 264 61 18446744073709551615 1 * 264 61 264 62 18446744073709551615 1 ) 264 62 264 63 18446744073709551615 1 & 264 63 264 64 18446744073709551615 17 packet_eapol_info 264 64 264 81 151 1 ) 264 81 264 82 154 2 == 264 83 264 85 18446744073709551615 6 MAP_OK 264 86 264 92 18446744073709551615 2 && 264 93 264 95 18446744073709551615 17 packet_eapol_info 264 96 264 113 151 2 -> 264 113 264 115 18446744073709551615 6 status 264 115 264 121 68 2 == 264 122 264 124 18446744073709551615 7 SUCCESS 264 125 264 132 6 1 ) 264 132 264 133 18446744073709551615 1 { 264 134 264 135 18446744073709551615 2 if 265 9 265 11 18446744073709551615 1 ( 265 11 265 12 18446744073709551615 14 packet_decrypt 265 12 265 26 80 1 ( 265 26 265 27 80 6 header 265 27 265 33 145 1 , 265 33 265 34 80 6 buffer 265 35 265 41 146 1 , 265 41 265 42 80 17 packet_eapol_info 265 43 265 60 151 1 ) 265 60 265 61 80 1 ) 265 61 265 62 18446744073709551615 1 { 265 63 265 64 18446744073709551615 5 const 266 11 266 16 18446744073709551615 6 struct 266 17 266 23 18446744073709551615 9 sniff_LLC 266 24 266 33 23 1 * 266 34 266 35 18446744073709551615 7 hdr_llc 266 35 266 42 155 1 ; 266 42 266 43 18446744073709551615 7 hdr_llc 267 11 267 18 155 1 = 267 19 267 20 18446744073709551615 1 ( 267 21 267 22 18446744073709551615 6 struct 267 22 267 28 18446744073709551615 9 sniff_LLC 267 29 267 38 23 1 * 267 39 267 40 18446744073709551615 1 ) 267 40 267 41 18446744073709551615 1 ( 267 41 267 42 18446744073709551615 6 buffer 267 42 267 48 146 1 + 267 49 267 50 18446744073709551615 16 PRISM_HEADER_LEN 267 51 267 67 18446744073709551615 1 + 267 68 267 69 18446744073709551615 6 sizeof 267 70 267 76 18446744073709551615 1 ( 267 76 267 77 18446744073709551615 6 struct 267 77 267 83 18446744073709551615 12 sniff_802_11 267 84 267 96 8 1 ) 267 96 267 97 18446744073709551615 1 + 267 98 267 99 18446744073709551615 1 8 267 100 267 101 18446744073709551615 1 ) 267 101 267 102 18446744073709551615 1 ; 267 102 267 103 18446744073709551615 2 if 268 11 268 13 18446744073709551615 1 ( 268 13 268 14 18446744073709551615 7 hdr_llc 268 14 268 21 155 2 -> 268 21 268 23 18446744073709551615 4 dsap 268 23 268 27 24 2 == 268 28 268 30 18446744073709551615 4 0xaa 268 31 268 35 18446744073709551615 1 ) 268 35 268 36 18446744073709551615 1 { 268 37 268 38 18446744073709551615 5 const 269 13 269 18 18446744073709551615 6 struct 269 19 269 25 18446744073709551615 10 sniff_SNAP 269 26 269 36 27 1 * 269 37 269 38 18446744073709551615 8 hdr_snap 269 38 269 46 156 1 ; 269 46 269 47 18446744073709551615 8 hdr_snap 270 13 270 21 156 1 = 270 22 270 23 18446744073709551615 1 ( 270 24 270 25 18446744073709551615 6 struct 270 25 270 31 18446744073709551615 10 sniff_SNAP 270 32 270 42 27 1 * 270 43 270 44 18446744073709551615 1 ) 270 44 270 45 18446744073709551615 1 ( 270 45 270 46 18446744073709551615 6 buffer 270 46 270 52 146 1 + 270 53 270 54 18446744073709551615 16 PRISM_HEADER_LEN 270 55 270 71 18446744073709551615 1 + 270 72 270 73 18446744073709551615 6 sizeof 270 74 270 80 18446744073709551615 1 ( 270 80 270 81 18446744073709551615 6 struct 270 81 270 87 18446744073709551615 12 sniff_802_11 270 88 270 100 8 1 ) 270 100 270 101 18446744073709551615 1 + 270 102 270 103 18446744073709551615 1 8 270 104 270 105 18446744073709551615 1 + 270 106 270 107 18446744073709551615 6 sizeof 270 108 270 114 18446744073709551615 1 ( 270 114 270 115 18446744073709551615 6 struct 270 115 270 121 18446744073709551615 9 sniff_LLC 270 122 270 131 23 1 ) 270 131 270 132 18446744073709551615 1 ) 270 132 270 133 18446744073709551615 1 ; 270 133 270 134 18446744073709551615 6 u_char 271 13 271 19 1 10 ether_IPv4 271 20 271 30 157 1 [ 271 30 271 31 18446744073709551615 1 ] 271 31 271 32 18446744073709551615 1 = 271 33 271 34 18446744073709551615 1 { 271 35 271 36 18446744073709551615 4 0x08 271 36 271 40 18446744073709551615 1 , 271 40 271 41 18446744073709551615 4 0x00 271 42 271 46 18446744073709551615 1 } 271 46 271 47 18446744073709551615 1 ; 271 47 271 48 18446744073709551615 2 if 272 13 272 15 18446744073709551615 1 ( 272 15 272 16 18446744073709551615 6 memcmp 272 16 272 22 158 1 ( 272 22 272 23 158 8 hdr_snap 272 23 272 31 156 2 -> 272 31 272 33 18446744073709551615 4 type 272 33 272 37 29 1 , 272 37 272 38 158 10 ether_IPv4 272 39 272 49 157 1 , 272 49 272 50 158 1 2 272 51 272 52 18446744073709551615 1 ) 272 52 272 53 158 2 == 272 54 272 56 18446744073709551615 1 0 272 57 272 58 18446744073709551615 1 ) 272 58 272 59 18446744073709551615 1 { 272 59 272 60 18446744073709551615 5 const 273 15 273 20 18446744073709551615 6 struct 273 21 273 27 18446744073709551615 5 iphdr 273 28 273 33 44 1 * 273 34 273 35 18446744073709551615 6 hdr_ip 273 35 273 41 159 1 ; 273 41 273 42 18446744073709551615 6 hdr_ip 274 15 274 21 159 1 = 274 22 274 23 18446744073709551615 1 ( 274 24 274 25 18446744073709551615 6 struct 274 25 274 31 18446744073709551615 5 iphdr 274 32 274 37 44 1 * 274 38 274 39 18446744073709551615 1 ) 274 39 274 40 18446744073709551615 1 ( 274 40 274 41 18446744073709551615 6 buffer 274 41 274 47 146 1 + 274 48 274 49 18446744073709551615 16 PRISM_HEADER_LEN 274 50 274 66 18446744073709551615 1 + 274 67 274 68 18446744073709551615 6 sizeof 274 69 274 75 18446744073709551615 1 ( 274 75 274 76 18446744073709551615 6 struct 274 76 274 82 18446744073709551615 12 sniff_802_11 274 83 274 95 8 1 ) 274 95 274 96 18446744073709551615 1 + 274 97 274 98 18446744073709551615 1 8 274 99 274 100 18446744073709551615 1 + 274 101 274 102 18446744073709551615 6 sizeof 274 103 274 109 18446744073709551615 1 ( 274 109 274 110 18446744073709551615 6 struct 274 110 274 116 18446744073709551615 9 sniff_LLC 274 117 274 126 23 1 ) 274 126 274 127 18446744073709551615 1 + 274 128 274 129 18446744073709551615 6 sizeof 274 130 274 136 18446744073709551615 1 ( 274 136 274 137 18446744073709551615 6 struct 274 137 274 143 18446744073709551615 10 sniff_SNAP 274 144 274 154 27 1 ) 274 154 274 155 18446744073709551615 1 ) 274 155 274 156 18446744073709551615 1 ; 274 156 274 157 18446744073709551615 2 if 275 15 275 17 18446744073709551615 1 ( 275 17 275 18 18446744073709551615 6 hdr_ip 275 18 275 24 159 2 -> 275 24 275 26 18446744073709551615 8 protocol 275 26 275 34 53 2 == 275 35 275 37 18446744073709551615 4 0x06 275 38 275 42 18446744073709551615 1 ) 275 42 275 43 18446744073709551615 1 { 275 43 275 44 18446744073709551615 1 } 277 15 277 16 18446744073709551615 1 } 278 13 278 14 18446744073709551615 1 } 279 11 279 12 18446744073709551615 1 } 280 9 280 10 18446744073709551615 4 else 281 9 281 13 18446744073709551615 1 { 281 14 281 15 18446744073709551615 10 // Discard 282 11 282 21 18446744073709551615 1 } 283 9 283 10 18446744073709551615 1 } 284 7 284 8 18446744073709551615 4 else 285 7 285 11 18446744073709551615 1 { 285 12 285 13 18446744073709551615 10 // Discard 286 9 286 19 18446744073709551615 1 } 287 7 287 8 18446744073709551615 1 } 288 5 288 6 18446744073709551615 4 else 289 5 289 9 18446744073709551615 1 { 289 10 289 11 18446744073709551615 5 const 290 7 290 12 18446744073709551615 6 struct 290 13 290 19 18446744073709551615 9 sniff_LLC 290 20 290 29 23 1 * 290 30 290 31 18446744073709551615 7 hdr_llc 290 31 290 38 160 1 ; 290 38 290 39 18446744073709551615 7 hdr_llc 291 7 291 14 160 1 = 291 15 291 16 18446744073709551615 1 ( 291 17 291 18 18446744073709551615 6 struct 291 18 291 24 18446744073709551615 9 sniff_LLC 291 25 291 34 23 1 * 291 35 291 36 18446744073709551615 1 ) 291 36 291 37 18446744073709551615 1 ( 291 37 291 38 18446744073709551615 6 buffer 291 38 291 44 146 1 + 291 45 291 46 18446744073709551615 16 PRISM_HEADER_LEN 291 47 291 63 18446744073709551615 1 + 291 64 291 65 18446744073709551615 6 sizeof 291 66 291 72 18446744073709551615 1 ( 291 72 291 73 18446744073709551615 6 struct 291 73 291 79 18446744073709551615 12 sniff_802_11 291 80 291 92 8 1 ) 291 92 291 93 18446744073709551615 1 ) 291 93 291 94 18446744073709551615 1 ; 291 94 291 95 18446744073709551615 2 if 292 7 292 9 18446744073709551615 1 ( 292 9 292 10 18446744073709551615 7 hdr_llc 292 10 292 17 160 2 -> 292 17 292 19 18446744073709551615 4 dsap 292 19 292 23 24 2 == 292 24 292 26 18446744073709551615 4 0xaa 292 27 292 31 18446744073709551615 1 ) 292 31 292 32 18446744073709551615 1 { 292 33 292 34 18446744073709551615 5 const 293 9 293 14 18446744073709551615 6 struct 293 15 293 21 18446744073709551615 10 sniff_SNAP 293 22 293 32 27 1 * 293 33 293 34 18446744073709551615 8 hdr_snap 293 34 293 42 161 1 ; 293 42 293 43 18446744073709551615 8 hdr_snap 294 9 294 17 161 1 = 294 18 294 19 18446744073709551615 1 ( 294 20 294 21 18446744073709551615 6 struct 294 21 294 27 18446744073709551615 10 sniff_SNAP 294 28 294 38 27 1 * 294 39 294 40 18446744073709551615 1 ) 294 40 294 41 18446744073709551615 1 ( 294 41 294 42 18446744073709551615 6 buffer 294 42 294 48 146 1 + 294 49 294 50 18446744073709551615 16 PRISM_HEADER_LEN 294 51 294 67 18446744073709551615 1 + 294 68 294 69 18446744073709551615 6 sizeof 294 70 294 76 18446744073709551615 1 ( 294 76 294 77 18446744073709551615 6 struct 294 77 294 83 18446744073709551615 12 sniff_802_11 294 84 294 96 8 1 ) 294 96 294 97 18446744073709551615 1 + 294 98 294 99 18446744073709551615 6 sizeof 294 100 294 106 18446744073709551615 1 ( 294 106 294 107 18446744073709551615 6 struct 294 107 294 113 18446744073709551615 9 sniff_LLC 294 114 294 123 23 1 ) 294 123 294 124 18446744073709551615 1 ) 294 124 294 125 18446744073709551615 1 ; 294 125 294 126 18446744073709551615 6 u_char 295 9 295 15 1 11 ether_eapol 295 16 295 27 162 1 [ 295 27 295 28 18446744073709551615 1 ] 295 28 295 29 18446744073709551615 1 = 295 30 295 31 18446744073709551615 1 { 295 32 295 33 18446744073709551615 4 0x88 295 33 295 37 18446744073709551615 1 , 295 37 295 38 18446744073709551615 4 0x8e 295 39 295 43 18446744073709551615 1 } 295 43 295 44 18446744073709551615 1 ; 295 44 295 45 18446744073709551615 2 if 296 9 296 11 18446744073709551615 1 ( 296 11 296 12 18446744073709551615 6 memcmp 296 12 296 18 158 1 ( 296 18 296 19 158 8 hdr_snap 296 19 296 27 161 2 -> 296 27 296 29 18446744073709551615 4 type 296 29 296 33 29 1 , 296 33 296 34 158 11 ether_eapol 296 35 296 46 162 1 , 296 46 296 47 158 1 2 296 48 296 49 18446744073709551615 1 ) 296 49 296 50 158 2 == 296 51 296 53 18446744073709551615 1 0 296 54 296 55 18446744073709551615 1 ) 296 55 296 56 18446744073709551615 1 { 296 57 296 58 18446744073709551615 5 const 297 11 297 16 18446744073709551615 6 struct 297 17 297 23 18446744073709551615 17 sniff_802_1x_auth 297 24 297 41 30 1 * 297 42 297 43 18446744073709551615 10 hdr_802_1x 297 43 297 53 163 1 ; 297 53 297 54 18446744073709551615 10 hdr_802_1x 298 11 298 21 163 1 = 298 22 298 23 18446744073709551615 1 ( 298 24 298 25 18446744073709551615 6 struct 298 25 298 31 18446744073709551615 17 sniff_802_1x_auth 298 32 298 49 30 1 * 298 50 298 51 18446744073709551615 1 ) 298 51 298 52 18446744073709551615 1 ( 298 52 298 53 18446744073709551615 6 buffer 298 53 298 59 146 1 + 298 60 298 61 18446744073709551615 16 PRISM_HEADER_LEN 298 62 298 78 18446744073709551615 1 + 298 79 298 80 18446744073709551615 6 sizeof 298 81 298 87 18446744073709551615 1 ( 298 87 298 88 18446744073709551615 6 struct 298 88 298 94 18446744073709551615 12 sniff_802_11 298 95 298 107 8 1 ) 298 107 298 108 18446744073709551615 1 + 298 109 298 110 18446744073709551615 6 sizeof 298 111 298 117 18446744073709551615 1 ( 298 117 298 118 18446744073709551615 6 struct 298 118 298 124 18446744073709551615 9 sniff_LLC 298 125 298 134 23 1 ) 298 134 298 135 18446744073709551615 1 + 298 136 298 137 18446744073709551615 6 sizeof 298 138 298 144 18446744073709551615 1 ( 298 144 298 145 18446744073709551615 6 struct 298 145 298 151 18446744073709551615 10 sniff_SNAP 298 152 298 162 27 1 ) 298 162 298 163 18446744073709551615 1 ) 298 163 298 164 18446744073709551615 1 ; 298 164 298 165 18446744073709551615 3 int 299 11 299 14 18446744073709551615 20 get_from_hashmap_res 299 15 299 35 164 1 = 299 36 299 37 18446744073709551615 11 hashmap_get 299 38 299 49 154 1 ( 299 49 299 50 154 3 map 299 50 299 53 74 1 , 299 53 299 54 154 12 mac_toString 299 55 299 67 81 1 ( 299 67 299 68 81 11 sta_address 299 68 299 79 153 1 ) 299 79 299 80 81 1 , 299 80 299 81 154 1 ( 299 82 299 83 18446744073709551615 4 void 299 83 299 87 18446744073709551615 1 * 299 88 299 89 18446744073709551615 1 * 299 89 299 90 18446744073709551615 1 ) 299 90 299 91 18446744073709551615 1 & 299 91 299 92 18446744073709551615 17 packet_eapol_info 299 92 299 109 151 1 ) 299 109 299 110 154 1 ; 299 110 299 111 18446744073709551615 2 if 301 11 301 13 18446744073709551615 1 ( 301 13 301 14 18446744073709551615 20 get_from_hashmap_res 301 14 301 34 164 2 == 301 35 301 37 18446744073709551615 11 MAP_MISSING 301 38 301 49 18446744073709551615 2 && 301 50 301 52 18446744073709551615 16 packet_direction 301 53 301 69 149 2 == 301 70 301 72 18446744073709551615 1 2 301 73 301 74 18446744073709551615 2 && 301 75 301 77 18446744073709551615 1 ( 301 78 301 79 18446744073709551615 16 TAKE_N_BITS_FROM 301 79 301 95 18446744073709551615 1 ( 301 95 301 96 18446744073709551615 10 hdr_802_1x 301 96 301 106 18446744073709551615 2 -> 301 106 301 108 18446744073709551615 15 key_information 301 108 301 123 18446744073709551615 1 [ 301 123 301 124 18446744073709551615 1 0 301 124 301 125 18446744073709551615 1 ] 301 125 301 126 18446744073709551615 1 , 301 126 301 127 18446744073709551615 1 0 301 128 301 129 18446744073709551615 1 , 301 129 301 130 18446744073709551615 1 1 301 131 301 132 18446744073709551615 1 ) 301 132 301 133 18446744073709551615 1 ) 301 133 301 134 18446744073709551615 2 == 301 135 301 137 18446744073709551615 1 0 301 138 301 139 18446744073709551615 1 ) 301 139 301 140 18446744073709551615 1 { 301 141 301 142 18446744073709551615 6 struct 302 13 302 19 18446744073709551615 10 eapol_info 302 20 302 30 63 1 * 302 31 302 32 18446744073709551615 21 new_packet_eapol_info 302 32 302 53 165 1 = 302 54 302 55 18446744073709551615 6 malloc 302 56 302 62 115 1 ( 302 62 302 63 115 6 sizeof 302 63 302 69 18446744073709551615 1 ( 302 69 302 70 18446744073709551615 6 struct 302 70 302 76 18446744073709551615 10 eapol_info 302 77 302 87 63 1 ) 302 87 302 88 18446744073709551615 1 ) 302 88 302 89 115 1 ; 302 89 302 90 18446744073709551615 11 hashmap_put 303 13 303 24 166 1 ( 303 24 303 25 166 3 map 303 25 303 28 74 1 , 303 28 303 29 166 12 mac_toString 303 30 303 42 81 1 ( 303 42 303 43 81 11 sta_address 303 43 303 54 153 1 ) 303 54 303 55 81 1 , 303 55 303 56 166 21 new_packet_eapol_info 303 57 303 78 165 1 ) 303 78 303 79 166 1 ; 303 79 303 80 18446744073709551615 6 memcpy 304 13 304 19 139 1 ( 304 19 304 20 139 21 new_packet_eapol_info 304 20 304 41 165 2 -> 304 41 304 43 18446744073709551615 6 ANonce 304 43 304 49 65 1 , 304 49 304 50 139 10 hdr_802_1x 304 51 304 61 163 2 -> 304 61 304 63 18446744073709551615 13 wpa_key_nonce 304 63 304 76 38 1 , 304 76 304 77 139 2 32 304 78 304 80 18446744073709551615 1 ) 304 80 304 81 139 1 ; 304 81 304 82 18446744073709551615 6 memcpy 305 13 305 19 139 1 ( 305 19 305 20 139 21 new_packet_eapol_info 305 20 305 41 165 2 -> 305 41 305 43 18446744073709551615 11 last_replay 305 43 305 54 69 1 , 305 54 305 55 139 10 hdr_802_1x 305 56 305 66 163 2 -> 305 66 305 68 18446744073709551615 14 replay_counter 305 68 305 82 37 1 , 305 82 305 83 139 1 8 305 84 305 85 18446744073709551615 1 ) 305 85 305 86 139 1 ; 305 86 305 87 18446744073709551615 21 new_packet_eapol_info 306 13 306 34 165 2 -> 306 34 306 36 18446744073709551615 6 status 306 36 306 42 68 1 = 306 43 306 44 18446744073709551615 19 WAITING_EAPOL_KEY_2 306 45 306 64 3 1 ; 306 64 306 65 18446744073709551615 1 } 307 11 307 12 18446744073709551615 4 else 308 11 308 15 18446744073709551615 2 if 308 16 308 18 18446744073709551615 1 ( 308 18 308 19 18446744073709551615 20 get_from_hashmap_res 308 19 308 39 164 2 == 308 40 308 42 18446744073709551615 6 MAP_OK 308 43 308 49 18446744073709551615 1 ) 308 49 308 50 18446744073709551615 1 { 308 51 308 52 18446744073709551615 12 eapol_status 309 13 309 25 7 14 current_status 309 26 309 40 167 1 = 309 41 309 42 18446744073709551615 17 packet_eapol_info 309 43 309 60 151 2 -> 309 60 309 62 18446744073709551615 6 status 309 62 309 68 68 1 ; 309 68 309 69 18446744073709551615 7 u_short 310 13 310 20 168 11 data_length 310 21 310 32 169 1 = 310 33 310 34 18446744073709551615 1 ( 310 35 310 36 18446744073709551615 1 ( 310 36 310 37 18446744073709551615 10 hdr_802_1x 310 37 310 47 163 2 -> 310 47 310 49 18446744073709551615 19 wpa_key_data_length 310 49 310 68 43 1 [ 310 68 310 69 18446744073709551615 1 0 310 69 310 70 18446744073709551615 1 ] 310 70 310 71 18446744073709551615 2 << 310 72 310 74 18446744073709551615 1 8 310 75 310 76 18446744073709551615 1 ) 310 76 310 77 18446744073709551615 1 + 310 78 310 79 18446744073709551615 1 ( 310 80 310 81 18446744073709551615 10 hdr_802_1x 310 81 310 91 163 2 -> 310 91 310 93 18446744073709551615 19 wpa_key_data_length 310 93 310 112 43 1 [ 310 112 310 113 18446744073709551615 1 1 310 113 310 114 18446744073709551615 1 ] 310 114 310 115 18446744073709551615 1 ) 310 115 310 116 18446744073709551615 1 ) 310 116 310 117 18446744073709551615 1 ; 310 117 310 118 18446744073709551615 2 if 311 13 311 15 18446744073709551615 1 ( 311 15 311 16 18446744073709551615 16 packet_direction 311 16 311 32 149 2 == 311 33 311 35 18446744073709551615 1 2 311 36 311 37 18446744073709551615 2 && 311 38 311 40 18446744073709551615 1 ( 311 41 311 42 18446744073709551615 16 TAKE_N_BITS_FROM 311 42 311 58 18446744073709551615 1 ( 311 58 311 59 18446744073709551615 10 hdr_802_1x 311 59 311 69 18446744073709551615 2 -> 311 69 311 71 18446744073709551615 15 key_information 311 71 311 86 18446744073709551615 1 [ 311 86 311 87 18446744073709551615 1 0 311 87 311 88 18446744073709551615 1 ] 311 88 311 89 18446744073709551615 1 , 311 89 311 90 18446744073709551615 1 0 311 91 311 92 18446744073709551615 1 , 311 92 311 93 18446744073709551615 1 1 311 94 311 95 18446744073709551615 1 ) 311 95 311 96 18446744073709551615 1 ) 311 96 311 97 18446744073709551615 2 == 311 98 311 100 18446744073709551615 1 0 311 101 311 102 18446744073709551615 1 ) 311 102 311 103 18446744073709551615 1 { 311 104 311 105 18446744073709551615 8 // msg 1 311 106 311 114 18446744073709551615 14 hashmap_remove 312 15 312 29 170 1 ( 312 29 312 30 170 3 map 312 30 312 33 74 1 , 312 33 312 34 170 12 mac_toString 312 35 312 47 81 1 ( 312 47 312 48 81 11 sta_address 312 48 312 59 153 1 ) 312 59 312 60 81 1 ) 312 60 312 61 170 1 ; 312 61 312 62 18446744073709551615 6 struct 313 15 313 21 18446744073709551615 10 eapol_info 313 22 313 32 63 1 * 313 33 313 34 18446744073709551615 21 new_packet_eapol_info 313 34 313 55 171 1 = 313 56 313 57 18446744073709551615 6 malloc 313 58 313 64 115 1 ( 313 64 313 65 115 6 sizeof 313 65 313 71 18446744073709551615 1 ( 313 71 313 72 18446744073709551615 6 struct 313 72 313 78 18446744073709551615 10 eapol_info 313 79 313 89 63 1 ) 313 89 313 90 18446744073709551615 1 ) 313 90 313 91 115 1 ; 313 91 313 92 18446744073709551615 11 hashmap_put 314 15 314 26 166 1 ( 314 26 314 27 166 3 map 314 27 314 30 74 1 , 314 30 314 31 166 12 mac_toString 314 32 314 44 81 1 ( 314 44 314 45 81 11 sta_address 314 45 314 56 153 1 ) 314 56 314 57 81 1 , 314 57 314 58 166 21 new_packet_eapol_info 314 59 314 80 171 1 ) 314 80 314 81 166 1 ; 314 81 314 82 18446744073709551615 6 memcpy 315 15 315 21 139 1 ( 315 21 315 22 139 21 new_packet_eapol_info 315 22 315 43 171 2 -> 315 43 315 45 18446744073709551615 6 ANonce 315 45 315 51 65 1 , 315 51 315 52 139 10 hdr_802_1x 315 53 315 63 163 2 -> 315 63 315 65 18446744073709551615 13 wpa_key_nonce 315 65 315 78 38 1 , 315 78 315 79 139 2 32 315 80 315 82 18446744073709551615 1 ) 315 82 315 83 139 1 ; 315 83 315 84 18446744073709551615 6 memcpy 316 15 316 21 139 1 ( 316 21 316 22 139 21 new_packet_eapol_info 316 22 316 43 171 2 -> 316 43 316 45 18446744073709551615 11 last_replay 316 45 316 56 69 1 , 316 56 316 57 139 10 hdr_802_1x 316 58 316 68 163 2 -> 316 68 316 70 18446744073709551615 14 replay_counter 316 70 316 84 37 1 , 316 84 316 85 139 1 8 316 86 316 87 18446744073709551615 1 ) 316 87 316 88 139 1 ; 316 88 316 89 18446744073709551615 21 new_packet_eapol_info 317 15 317 36 171 2 -> 317 36 317 38 18446744073709551615 6 status 317 38 317 44 68 1 = 317 45 317 46 18446744073709551615 19 WAITING_EAPOL_KEY_2 317 47 317 66 3 1 ; 317 66 317 67 18446744073709551615 1 } 318 13 318 14 18446744073709551615 2 if 319 13 319 15 18446744073709551615 1 ( 319 15 319 16 18446744073709551615 14 current_status 319 16 319 30 167 2 == 319 31 319 33 18446744073709551615 19 WAITING_EAPOL_KEY_2 319 34 319 53 3 2 && 319 54 319 56 18446744073709551615 16 packet_direction 319 57 319 73 149 2 == 319 74 319 76 18446744073709551615 1 1 319 77 319 78 18446744073709551615 2 && 319 79 319 81 18446744073709551615 16 TAKE_N_BITS_FROM 319 82 319 98 18446744073709551615 1 ( 319 98 319 99 18446744073709551615 10 hdr_802_1x 319 99 319 109 18446744073709551615 2 -> 319 109 319 111 18446744073709551615 15 key_information 319 111 319 126 18446744073709551615 1 [ 319 126 319 127 18446744073709551615 1 0 319 127 319 128 18446744073709551615 1 ] 319 128 319 129 18446744073709551615 1 , 319 129 319 130 18446744073709551615 1 0 319 131 319 132 18446744073709551615 1 , 319 132 319 133 18446744073709551615 1 1 319 134 319 135 18446744073709551615 1 ) 319 135 319 136 18446744073709551615 2 && 319 137 319 139 18446744073709551615 1 ( 319 140 319 141 18446744073709551615 16 TAKE_N_BITS_FROM 319 141 319 157 18446744073709551615 1 ( 319 157 319 158 18446744073709551615 10 hdr_802_1x 319 158 319 168 18446744073709551615 2 -> 319 168 319 170 18446744073709551615 15 key_information 319 170 319 185 18446744073709551615 1 [ 319 185 319 186 18446744073709551615 1 1 319 186 319 187 18446744073709551615 1 ] 319 187 319 188 18446744073709551615 1 , 319 188 319 189 18446744073709551615 1 6 319 190 319 191 18446744073709551615 1 , 319 191 319 192 18446744073709551615 1 1 319 193 319 194 18446744073709551615 1 ) 319 194 319 195 18446744073709551615 1 ) 319 195 319 196 18446744073709551615 2 == 319 197 319 199 18446744073709551615 1 0 319 200 319 201 18446744073709551615 2 && 319 202 319 204 18446744073709551615 1 ( 319 205 319 206 18446744073709551615 16 TAKE_N_BITS_FROM 319 206 319 222 18446744073709551615 1 ( 319 222 319 223 18446744073709551615 10 hdr_802_1x 319 223 319 233 18446744073709551615 2 -> 319 233 319 235 18446744073709551615 15 key_information 319 235 319 250 18446744073709551615 1 [ 319 250 319 251 18446744073709551615 1 1 319 251 319 252 18446744073709551615 1 ] 319 252 319 253 18446744073709551615 1 , 319 253 319 254 18446744073709551615 1 7 319 255 319 256 18446744073709551615 1 , 319 256 319 257 18446744073709551615 1 1 319 258 319 259 18446744073709551615 1 ) 319 259 319 260 18446744073709551615 1 ) 319 260 319 261 18446744073709551615 2 == 319 262 319 264 18446744073709551615 1 0 319 265 319 266 18446744073709551615 2 && 319 267 319 269 18446744073709551615 11 data_length 319 270 319 281 169 1 > 319 282 319 283 18446744073709551615 1 0 319 284 319 285 18446744073709551615 2 && 319 286 319 288 18446744073709551615 6 memcmp 319 289 319 295 158 1 ( 319 295 319 296 158 17 packet_eapol_info 319 296 319 313 151 2 -> 319 313 319 315 18446744073709551615 11 last_replay 319 315 319 326 69 1 , 319 326 319 327 158 10 hdr_802_1x 319 328 319 338 163 2 -> 319 338 319 340 18446744073709551615 14 replay_counter 319 340 319 354 37 1 , 319 354 319 355 158 1 8 319 356 319 357 18446744073709551615 1 ) 319 357 319 358 158 2 == 319 359 319 361 18446744073709551615 1 0 319 362 319 363 18446744073709551615 1 ) 319 363 319 364 18446744073709551615 1 { 319 365 319 366 18446744073709551615 8 // msg 2 319 367 319 375 18446744073709551615 6 struct 320 15 320 21 18446744073709551615 3 ptk 320 22 320 25 57 1 * 320 26 320 27 18446744073709551615 3 PTK 320 27 320 30 172 1 = 320 31 320 32 18446744073709551615 1 ( 320 33 320 34 18446744073709551615 6 struct 320 34 320 40 18446744073709551615 3 ptk 320 41 320 44 57 1 * 320 45 320 46 18446744073709551615 1 ) 320 46 320 47 18446744073709551615 6 PRF512 320 47 320 53 82 1 ( 320 53 320 54 82 3 psk 320 54 320 57 71 1 , 320 57 320 58 82 1 A 320 59 320 60 0 1 , 320 60 320 61 82 6 strlen 320 62 320 68 105 1 ( 320 68 320 69 105 1 A 320 69 320 70 0 1 ) 320 70 320 71 105 1 , 320 71 320 72 82 14 ap_mac_address 320 73 320 87 70 1 , 320 87 320 88 82 11 sta_address 320 89 320 100 153 1 , 320 100 320 101 82 17 packet_eapol_info 320 102 320 119 151 2 -> 320 119 320 121 18446744073709551615 6 ANonce 320 121 320 127 65 1 , 320 127 320 128 82 10 hdr_802_1x 320 129 320 139 163 2 -> 320 139 320 141 18446744073709551615 13 wpa_key_nonce 320 141 320 154 38 1 ) 320 154 320 155 82 1 ; 320 155 320 156 18446744073709551615 6 u_char 321 15 321 21 1 1 * 321 22 321 23 18446744073709551615 8 real_MIC 321 23 321 31 173 1 = 321 32 321 33 18446744073709551615 6 malloc 321 34 321 40 115 1 ( 321 40 321 41 115 2 16 321 41 321 43 18446744073709551615 1 ) 321 43 321 44 115 1 ; 321 44 321 45 18446744073709551615 6 u_char 322 15 322 21 1 1 * 322 22 322 23 18446744073709551615 14 calculated_MIC 322 23 322 37 174 1 = 322 38 322 39 18446744073709551615 6 malloc 322 40 322 46 115 1 ( 322 46 322 47 115 2 16 322 47 322 49 18446744073709551615 1 ) 322 49 322 50 115 1 ; 322 50 322 51 18446744073709551615 6 memcpy 323 15 323 21 139 1 ( 323 21 323 22 139 8 real_MIC 323 22 323 30 173 1 , 323 30 323 31 139 10 hdr_802_1x 323 32 323 42 163 2 -> 323 42 323 44 18446744073709551615 11 wpa_key_MIC 323 44 323 55 42 1 , 323 55 323 56 139 2 16 323 57 323 59 18446744073709551615 1 ) 323 59 323 60 139 1 ; 323 60 323 61 18446744073709551615 6 memcpy 324 15 324 21 139 1 ( 324 21 324 22 139 10 hdr_802_1x 324 22 324 32 163 2 -> 324 32 324 34 18446744073709551615 11 wpa_key_MIC 324 34 324 45 42 1 , 324 45 324 46 139 8 NULL_MIC 324 47 324 55 2 1 , 324 55 324 56 139 2 16 324 57 324 59 18446744073709551615 1 ) 324 59 324 60 139 1 ; 324 60 324 61 18446744073709551615 4 HMAC 325 15 325 19 116 1 ( 325 19 325 20 116 8 EVP_sha1 325 20 325 28 117 1 ( 325 28 325 29 117 1 ) 325 29 325 30 117 1 , 325 30 325 31 116 3 PTK 325 32 325 35 172 2 -> 325 35 325 37 18446744073709551615 3 kck 325 37 325 40 58 1 , 325 40 325 41 116 2 16 325 42 325 44 18446744073709551615 1 , 325 44 325 45 116 10 hdr_802_1x 325 46 325 56 163 1 , 325 56 325 57 116 2 99 325 58 325 60 18446744073709551615 1 + 325 61 325 62 18446744073709551615 11 data_length 325 63 325 74 169 1 , 325 74 325 75 116 14 calculated_MIC 325 76 325 90 174 1 , 325 90 325 91 116 1 & 325 92 325 93 18446744073709551615 11 sha1_length 325 93 325 104 152 1 ) 325 104 325 105 116 1 ; 325 105 325 106 18446744073709551615 2 if 326 15 326 17 18446744073709551615 1 ( 326 17 326 18 18446744073709551615 6 memcmp 326 18 326 24 158 1 ( 326 24 326 25 158 8 real_MIC 326 25 326 33 173 1 , 326 33 326 34 158 14 calculated_MIC 326 35 326 49 174 1 , 326 49 326 50 158 2 16 326 51 326 53 18446744073709551615 1 ) 326 53 326 54 158 2 == 326 55 326 57 18446744073709551615 1 0 326 58 326 59 18446744073709551615 1 ) 326 59 326 60 18446744073709551615 1 { 326 61 326 62 18446744073709551615 6 memcpy 327 17 327 23 139 1 ( 327 23 327 24 139 17 packet_eapol_info 327 24 327 41 151 2 -> 327 41 327 43 18446744073709551615 6 SNonce 327 43 327 49 66 1 , 327 49 327 50 139 10 hdr_802_1x 327 51 327 61 163 2 -> 327 61 327 63 18446744073709551615 13 wpa_key_nonce 327 63 327 76 38 1 , 327 76 327 77 139 2 32 327 78 327 80 18446744073709551615 1 ) 327 80 327 81 139 1 ; 327 81 327 82 18446744073709551615 6 memcpy 328 17 328 23 139 1 ( 328 23 328 24 139 1 & 328 24 328 25 18446744073709551615 17 packet_eapol_info 328 25 328 42 151 2 -> 328 42 328 44 18446744073709551615 3 PTK 328 44 328 47 67 1 , 328 47 328 48 139 3 PTK 328 49 328 52 172 1 , 328 52 328 53 139 6 sizeof 328 54 328 60 18446744073709551615 1 ( 328 60 328 61 18446744073709551615 6 struct 328 61 328 67 18446744073709551615 3 ptk 328 68 328 71 57 1 ) 328 71 328 72 18446744073709551615 1 ) 328 72 328 73 139 1 ; 328 73 328 74 18446744073709551615 17 packet_eapol_info 329 17 329 34 151 2 -> 329 34 329 36 18446744073709551615 6 status 329 36 329 42 68 1 = 329 43 329 44 18446744073709551615 19 WAITING_EAPOL_KEY_3 329 45 329 64 4 1 ; 329 64 329 65 18446744073709551615 1 } 330 15 330 16 18446744073709551615 1 } 331 13 331 14 18446744073709551615 4 else 332 13 332 17 18446744073709551615 2 if 332 18 332 20 18446744073709551615 1 ( 332 20 332 21 18446744073709551615 14 current_status 332 21 332 35 167 2 == 332 36 332 38 18446744073709551615 19 WAITING_EAPOL_KEY_3 332 39 332 58 4 2 && 332 59 332 61 18446744073709551615 16 packet_direction 332 62 332 78 149 2 == 332 79 332 81 18446744073709551615 1 2 332 82 332 83 18446744073709551615 2 && 332 84 332 86 18446744073709551615 16 TAKE_N_BITS_FROM 332 87 332 103 18446744073709551615 1 ( 332 103 332 104 18446744073709551615 10 hdr_802_1x 332 104 332 114 18446744073709551615 2 -> 332 114 332 116 18446744073709551615 15 key_information 332 116 332 131 18446744073709551615 1 [ 332 131 332 132 18446744073709551615 1 0 332 132 332 133 18446744073709551615 1 ] 332 133 332 134 18446744073709551615 1 , 332 134 332 135 18446744073709551615 1 0 332 136 332 137 18446744073709551615 1 , 332 137 332 138 18446744073709551615 1 1 332 139 332 140 18446744073709551615 1 ) 332 140 332 141 18446744073709551615 2 && 332 142 332 144 18446744073709551615 1 ( 332 145 332 146 18446744073709551615 16 TAKE_N_BITS_FROM 332 146 332 162 18446744073709551615 1 ( 332 162 332 163 18446744073709551615 10 hdr_802_1x 332 163 332 173 18446744073709551615 2 -> 332 173 332 175 18446744073709551615 15 key_information 332 175 332 190 18446744073709551615 1 [ 332 190 332 191 18446744073709551615 1 1 332 191 332 192 18446744073709551615 1 ] 332 192 332 193 18446744073709551615 1 , 332 193 332 194 18446744073709551615 1 6 332 195 332 196 18446744073709551615 1 , 332 196 332 197 18446744073709551615 1 1 332 198 332 199 18446744073709551615 1 ) 332 199 332 200 18446744073709551615 1 ) 332 200 332 201 18446744073709551615 2 && 332 202 332 204 18446744073709551615 1 ( 332 205 332 206 18446744073709551615 16 TAKE_N_BITS_FROM 332 206 332 222 18446744073709551615 1 ( 332 222 332 223 18446744073709551615 10 hdr_802_1x 332 223 332 233 18446744073709551615 2 -> 332 233 332 235 18446744073709551615 15 key_information 332 235 332 250 18446744073709551615 1 [ 332 250 332 251 18446744073709551615 1 1 332 251 332 252 18446744073709551615 1 ] 332 252 332 253 18446744073709551615 1 , 332 253 332 254 18446744073709551615 1 7 332 255 332 256 18446744073709551615 1 , 332 256 332 257 18446744073709551615 1 1 332 258 332 259 18446744073709551615 1 ) 332 259 332 260 18446744073709551615 1 ) 332 260 332 261 18446744073709551615 1 ) 332 261 332 262 18446744073709551615 1 { 332 263 332 264 18446744073709551615 8 // msg 3 332 265 332 273 18446744073709551615 6 u_char 333 15 333 21 1 1 * 333 22 333 23 18446744073709551615 3 KCK 333 23 333 26 175 1 = 333 27 333 28 18446744073709551615 17 packet_eapol_info 333 29 333 46 151 2 -> 333 46 333 48 18446744073709551615 3 PTK 333 48 333 51 67 1 . 333 51 333 52 18446744073709551615 3 kck 333 52 333 55 58 1 ; 333 55 333 56 18446744073709551615 6 u_char 334 15 334 21 1 1 * 334 22 334 23 18446744073709551615 8 real_MIC 334 23 334 31 176 1 = 334 32 334 33 18446744073709551615 6 malloc 334 34 334 40 115 1 ( 334 40 334 41 115 2 16 334 41 334 43 18446744073709551615 1 ) 334 43 334 44 115 1 ; 334 44 334 45 18446744073709551615 6 u_char 335 15 335 21 1 1 * 335 22 335 23 18446744073709551615 14 calculated_MIC 335 23 335 37 177 1 = 335 38 335 39 18446744073709551615 6 malloc 335 40 335 46 115 1 ( 335 46 335 47 115 2 16 335 47 335 49 18446744073709551615 1 ) 335 49 335 50 115 1 ; 335 50 335 51 18446744073709551615 6 memcpy 336 15 336 21 139 1 ( 336 21 336 22 139 8 real_MIC 336 22 336 30 176 1 , 336 30 336 31 139 10 hdr_802_1x 336 32 336 42 163 2 -> 336 42 336 44 18446744073709551615 11 wpa_key_MIC 336 44 336 55 42 1 , 336 55 336 56 139 2 16 336 57 336 59 18446744073709551615 1 ) 336 59 336 60 139 1 ; 336 60 336 61 18446744073709551615 6 memcpy 337 15 337 21 139 1 ( 337 21 337 22 139 10 hdr_802_1x 337 22 337 32 163 2 -> 337 32 337 34 18446744073709551615 11 wpa_key_MIC 337 34 337 45 42 1 , 337 45 337 46 139 8 NULL_MIC 337 47 337 55 2 1 , 337 55 337 56 139 2 16 337 57 337 59 18446744073709551615 1 ) 337 59 337 60 139 1 ; 337 60 337 61 18446744073709551615 4 HMAC 338 15 338 19 116 1 ( 338 19 338 20 116 8 EVP_sha1 338 20 338 28 117 1 ( 338 28 338 29 117 1 ) 338 29 338 30 117 1 , 338 30 338 31 116 3 KCK 338 32 338 35 175 1 , 338 35 338 36 116 2 16 338 37 338 39 18446744073709551615 1 , 338 39 338 40 116 10 hdr_802_1x 338 41 338 51 163 1 , 338 51 338 52 116 2 99 338 53 338 55 18446744073709551615 1 + 338 56 338 57 18446744073709551615 11 data_length 338 58 338 69 169 1 , 338 69 338 70 116 14 calculated_MIC 338 71 338 85 177 1 , 338 85 338 86 116 1 & 338 87 338 88 18446744073709551615 11 sha1_length 338 88 338 99 152 1 ) 338 99 338 100 116 1 ; 338 100 338 101 18446744073709551615 2 if 339 15 339 17 18446744073709551615 1 ( 339 17 339 18 18446744073709551615 6 memcmp 339 18 339 24 158 1 ( 339 24 339 25 158 8 real_MIC 339 25 339 33 176 1 , 339 33 339 34 158 14 calculated_MIC 339 35 339 49 177 1 , 339 49 339 50 158 2 16 339 51 339 53 18446744073709551615 1 ) 339 53 339 54 158 2 == 339 55 339 57 18446744073709551615 1 0 339 58 339 59 18446744073709551615 1 ) 339 59 339 60 18446744073709551615 1 { 339 61 339 62 18446744073709551615 17 packet_eapol_info 340 17 340 34 151 2 -> 340 34 340 36 18446744073709551615 6 status 340 36 340 42 68 1 = 340 43 340 44 18446744073709551615 19 WAITING_EAPOL_KEY_4 340 45 340 64 5 1 ; 340 64 340 65 18446744073709551615 6 memcpy 341 17 341 23 139 1 ( 341 23 341 24 139 17 packet_eapol_info 341 24 341 41 151 2 -> 341 41 341 43 18446744073709551615 11 last_replay 341 43 341 54 69 1 , 341 54 341 55 139 10 hdr_802_1x 341 56 341 66 163 2 -> 341 66 341 68 18446744073709551615 14 replay_counter 341 68 341 82 37 1 , 341 82 341 83 139 1 8 341 84 341 85 18446744073709551615 1 ) 341 85 341 86 139 1 ; 341 86 341 87 18446744073709551615 1 } 342 15 342 16 18446744073709551615 1 } 343 13 343 14 18446744073709551615 4 else 344 13 344 17 18446744073709551615 2 if 344 18 344 20 18446744073709551615 1 ( 344 20 344 21 18446744073709551615 14 current_status 344 21 344 35 167 2 == 344 36 344 38 18446744073709551615 19 WAITING_EAPOL_KEY_4 344 39 344 58 5 2 && 344 59 344 61 18446744073709551615 16 packet_direction 344 62 344 78 149 2 == 344 79 344 81 18446744073709551615 1 1 344 82 344 83 18446744073709551615 2 && 344 84 344 86 18446744073709551615 16 TAKE_N_BITS_FROM 344 87 344 103 18446744073709551615 1 ( 344 103 344 104 18446744073709551615 10 hdr_802_1x 344 104 344 114 18446744073709551615 2 -> 344 114 344 116 18446744073709551615 15 key_information 344 116 344 131 18446744073709551615 1 [ 344 131 344 132 18446744073709551615 1 0 344 132 344 133 18446744073709551615 1 ] 344 133 344 134 18446744073709551615 1 , 344 134 344 135 18446744073709551615 1 0 344 136 344 137 18446744073709551615 1 , 344 137 344 138 18446744073709551615 1 1 344 139 344 140 18446744073709551615 1 ) 344 140 344 141 18446744073709551615 2 && 344 142 344 144 18446744073709551615 1 ( 344 145 344 146 18446744073709551615 16 TAKE_N_BITS_FROM 344 146 344 162 18446744073709551615 1 ( 344 162 344 163 18446744073709551615 10 hdr_802_1x 344 163 344 173 18446744073709551615 2 -> 344 173 344 175 18446744073709551615 15 key_information 344 175 344 190 18446744073709551615 1 [ 344 190 344 191 18446744073709551615 1 1 344 191 344 192 18446744073709551615 1 ] 344 192 344 193 18446744073709551615 1 , 344 193 344 194 18446744073709551615 1 6 344 195 344 196 18446744073709551615 1 , 344 196 344 197 18446744073709551615 1 1 344 198 344 199 18446744073709551615 1 ) 344 199 344 200 18446744073709551615 1 ) 344 200 344 201 18446744073709551615 2 == 344 202 344 204 18446744073709551615 1 0 344 205 344 206 18446744073709551615 2 && 344 207 344 209 18446744073709551615 1 ( 344 210 344 211 18446744073709551615 16 TAKE_N_BITS_FROM 344 211 344 227 18446744073709551615 1 ( 344 227 344 228 18446744073709551615 10 hdr_802_1x 344 228 344 238 18446744073709551615 2 -> 344 238 344 240 18446744073709551615 15 key_information 344 240 344 255 18446744073709551615 1 [ 344 255 344 256 18446744073709551615 1 1 344 256 344 257 18446744073709551615 1 ] 344 257 344 258 18446744073709551615 1 , 344 258 344 259 18446744073709551615 1 7 344 260 344 261 18446744073709551615 1 , 344 261 344 262 18446744073709551615 1 1 344 263 344 264 18446744073709551615 1 ) 344 264 344 265 18446744073709551615 1 ) 344 265 344 266 18446744073709551615 2 == 344 267 344 269 18446744073709551615 1 0 344 270 344 271 18446744073709551615 2 && 344 272 344 274 18446744073709551615 6 memcmp 344 275 344 281 158 1 ( 344 281 344 282 158 17 packet_eapol_info 344 282 344 299 151 2 -> 344 299 344 301 18446744073709551615 11 last_replay 344 301 344 312 69 1 , 344 312 344 313 158 10 hdr_802_1x 344 314 344 324 163 2 -> 344 324 344 326 18446744073709551615 14 replay_counter 344 326 344 340 37 1 , 344 340 344 341 158 1 8 344 342 344 343 18446744073709551615 1 ) 344 343 344 344 158 2 == 344 345 344 347 18446744073709551615 1 0 344 348 344 349 18446744073709551615 1 ) 344 349 344 350 18446744073709551615 1 { 344 351 344 352 18446744073709551615 8 // msg 4 344 353 344 361 18446744073709551615 6 u_char 345 15 345 21 1 1 * 345 22 345 23 18446744073709551615 3 KCK 345 23 345 26 178 1 = 345 27 345 28 18446744073709551615 17 packet_eapol_info 345 29 345 46 151 2 -> 345 46 345 48 18446744073709551615 3 PTK 345 48 345 51 67 1 . 345 51 345 52 18446744073709551615 3 kck 345 52 345 55 58 1 ; 345 55 345 56 18446744073709551615 6 u_char 346 15 346 21 1 1 * 346 22 346 23 18446744073709551615 8 real_MIC 346 23 346 31 179 1 = 346 32 346 33 18446744073709551615 6 malloc 346 34 346 40 115 1 ( 346 40 346 41 115 2 16 346 41 346 43 18446744073709551615 1 ) 346 43 346 44 115 1 ; 346 44 346 45 18446744073709551615 6 u_char 347 15 347 21 1 1 * 347 22 347 23 18446744073709551615 14 calculated_MIC 347 23 347 37 180 1 = 347 38 347 39 18446744073709551615 6 malloc 347 40 347 46 115 1 ( 347 46 347 47 115 2 16 347 47 347 49 18446744073709551615 1 ) 347 49 347 50 115 1 ; 347 50 347 51 18446744073709551615 6 memcpy 348 15 348 21 139 1 ( 348 21 348 22 139 8 real_MIC 348 22 348 30 179 1 , 348 30 348 31 139 10 hdr_802_1x 348 32 348 42 163 2 -> 348 42 348 44 18446744073709551615 11 wpa_key_MIC 348 44 348 55 42 1 , 348 55 348 56 139 2 16 348 57 348 59 18446744073709551615 1 ) 348 59 348 60 139 1 ; 348 60 348 61 18446744073709551615 6 memcpy 349 15 349 21 139 1 ( 349 21 349 22 139 10 hdr_802_1x 349 22 349 32 163 2 -> 349 32 349 34 18446744073709551615 11 wpa_key_MIC 349 34 349 45 42 1 , 349 45 349 46 139 8 NULL_MIC 349 47 349 55 2 1 , 349 55 349 56 139 2 16 349 57 349 59 18446744073709551615 1 ) 349 59 349 60 139 1 ; 349 60 349 61 18446744073709551615 4 HMAC 350 15 350 19 116 1 ( 350 19 350 20 116 8 EVP_sha1 350 20 350 28 117 1 ( 350 28 350 29 117 1 ) 350 29 350 30 117 1 , 350 30 350 31 116 3 KCK 350 32 350 35 178 1 , 350 35 350 36 116 2 16 350 37 350 39 18446744073709551615 1 , 350 39 350 40 116 10 hdr_802_1x 350 41 350 51 163 1 , 350 51 350 52 116 2 99 350 53 350 55 18446744073709551615 1 + 350 56 350 57 18446744073709551615 11 data_length 350 58 350 69 169 1 , 350 69 350 70 116 14 calculated_MIC 350 71 350 85 180 1 , 350 85 350 86 116 1 & 350 87 350 88 18446744073709551615 11 sha1_length 350 88 350 99 152 1 ) 350 99 350 100 116 1 ; 350 100 350 101 18446744073709551615 2 if 351 15 351 17 18446744073709551615 1 ( 351 17 351 18 18446744073709551615 6 memcmp 351 18 351 24 158 1 ( 351 24 351 25 158 8 real_MIC 351 25 351 33 179 1 , 351 33 351 34 158 14 calculated_MIC 351 35 351 49 180 1 , 351 49 351 50 158 2 16 351 51 351 53 18446744073709551615 1 ) 351 53 351 54 158 2 == 351 55 351 57 18446744073709551615 1 0 351 58 351 59 18446744073709551615 1 ) 351 59 351 60 18446744073709551615 1 { 351 61 351 62 18446744073709551615 17 packet_eapol_info 352 17 352 34 151 2 -> 352 34 352 36 18446744073709551615 6 status 352 36 352 42 68 1 = 352 43 352 44 18446744073709551615 7 SUCCESS 352 45 352 52 6 1 ; 352 52 352 53 18446744073709551615 1 } 353 15 353 16 18446744073709551615 1 } 354 13 354 14 18446744073709551615 1 } 355 11 355 12 18446744073709551615 1 } 356 9 356 10 18446744073709551615 1 } 357 7 357 8 18446744073709551615 1 } 358 5 358 6 18446744073709551615 1 } 359 3 359 4 18446744073709551615 6 return 360 3 360 9 18446744073709551615 1 1 360 10 360 11 18446744073709551615 1 ; 360 11 360 12 18446744073709551615 1 } 361 1 361 2 18446744073709551615 4 char 364 1 364 5 18446744073709551615 1 * 364 6 364 7 81 12 mac_toString 364 7 364 19 81 1 ( 364 19 364 20 81 6 u_char 364 20 364 26 1 1 * 364 27 364 28 18446744073709551615 4 addr 364 28 364 32 181 1 ) 364 32 364 33 81 1 { 364 34 364 35 18446744073709551615 6 static 365 3 365 9 18446744073709551615 4 char 365 10 365 14 18446744073709551615 3 str 365 15 365 18 182 1 [ 365 18 365 19 18446744073709551615 2 18 365 19 365 21 18446744073709551615 1 ] 365 21 365 22 18446744073709551615 1 ; 365 22 365 23 18446744073709551615 2 if 366 3 366 5 18446744073709551615 1 ( 366 5 366 6 18446744073709551615 4 addr 366 6 366 10 181 2 == 366 11 366 13 18446744073709551615 4 NULL 366 14 366 18 18446744073709551615 1 ) 366 18 366 19 18446744073709551615 6 return 367 5 367 11 18446744073709551615 2 "" 367 12 367 14 18446744073709551615 1 ; 367 14 367 15 18446744073709551615 8 snprintf 368 3 368 11 183 1 ( 368 11 368 12 183 3 str 368 12 368 15 182 1 , 368 15 368 16 183 6 sizeof 368 17 368 23 18446744073709551615 1 ( 368 23 368 24 18446744073709551615 3 str 368 24 368 27 182 1 ) 368 27 368 28 18446744073709551615 1 , 368 28 368 29 183 31 "%02x:%02x:%02x:%02x:%02x:%02x" 368 30 368 61 18446744073709551615 1 , 368 61 368 62 183 4 addr 369 12 369 16 181 1 [ 369 16 369 17 18446744073709551615 1 0 369 17 369 18 18446744073709551615 1 ] 369 18 369 19 18446744073709551615 1 , 369 19 369 20 183 4 addr 369 21 369 25 181 1 [ 369 25 369 26 18446744073709551615 1 1 369 26 369 27 18446744073709551615 1 ] 369 27 369 28 18446744073709551615 1 , 369 28 369 29 183 4 addr 369 30 369 34 181 1 [ 369 34 369 35 18446744073709551615 1 2 369 35 369 36 18446744073709551615 1 ] 369 36 369 37 18446744073709551615 1 , 369 37 369 38 183 4 addr 369 39 369 43 181 1 [ 369 43 369 44 18446744073709551615 1 3 369 44 369 45 18446744073709551615 1 ] 369 45 369 46 18446744073709551615 1 , 369 46 369 47 183 4 addr 369 48 369 52 181 1 [ 369 52 369 53 18446744073709551615 1 4 369 53 369 54 18446744073709551615 1 ] 369 54 369 55 18446744073709551615 1 , 369 55 369 56 183 4 addr 369 57 369 61 181 1 [ 369 61 369 62 18446744073709551615 1 5 369 62 369 63 18446744073709551615 1 ] 369 63 369 64 18446744073709551615 1 ) 369 64 369 65 183 1 ; 369 65 369 66 18446744073709551615 6 return 370 3 370 9 18446744073709551615 3 str 370 10 370 13 182 1 ; 370 13 370 14 18446744073709551615 1 } 371 1 371 2 18446744073709551615 6 u_char 373 1 373 7 1 1 * 373 8 373 9 82 6 PRF512 373 9 373 15 82 1 ( 373 15 373 16 82 6 u_char 373 16 373 22 1 1 * 373 23 373 24 18446744073709551615 3 PMK 373 24 373 27 184 1 , 373 27 373 28 82 6 u_char 373 29 373 35 1 1 * 373 36 373 37 18446744073709551615 1 A 373 37 373 38 185 1 , 373 38 373 39 82 6 size_t 373 40 373 46 83 4 lenA 373 47 373 51 186 1 , 373 51 373 52 82 6 u_char 373 53 373 59 1 1 * 373 60 373 61 18446744073709551615 7 AP_addr 373 61 373 68 187 1 , 373 68 373 69 82 6 u_char 373 70 373 76 1 1 * 373 77 373 78 18446744073709551615 8 STA_addr 373 78 373 86 188 1 , 373 86 373 87 82 6 u_char 373 88 373 94 1 1 * 373 95 373 96 18446744073709551615 6 ANonce 373 96 373 102 189 1 , 373 102 373 103 82 6 u_char 373 104 373 110 1 1 * 373 111 373 112 18446744073709551615 6 SNonce 373 112 373 118 190 1 ) 373 118 373 119 82 1 { 373 120 373 121 18446744073709551615 6 static 374 3 374 9 18446744073709551615 6 u_char 374 10 374 16 1 3 ptk 374 17 374 20 191 1 [ 374 20 374 21 18446744073709551615 2 64 374 21 374 23 18446744073709551615 1 ] 374 23 374 24 18446744073709551615 1 ; 374 24 374 25 18446744073709551615 6 u_char 375 3 375 9 1 1 B 375 10 375 11 192 1 [ 375 11 375 12 18446744073709551615 2 76 375 12 375 14 18446744073709551615 1 ] 375 14 375 15 18446744073709551615 1 ; 375 15 375 16 18446744073709551615 3 int 376 3 376 6 18446744073709551615 1 i 376 7 376 8 193 1 = 376 9 376 10 18446744073709551615 1 0 376 11 376 12 18446744073709551615 1 ; 376 12 376 13 18446744073709551615 6 u_char 377 3 377 9 1 1 c 377 10 377 11 194 1 = 377 12 377 13 18446744073709551615 4 0x00 377 14 377 18 18446744073709551615 1 ; 377 18 377 19 18446744073709551615 6 u_char 378 3 378 9 1 3 arg 378 10 378 13 195 1 [ 378 13 378 14 18446744073709551615 2 76 378 14 378 16 18446744073709551615 1 + 378 17 378 18 18446744073709551615 4 lenA 378 19 378 23 186 1 + 378 24 378 25 18446744073709551615 1 2 378 26 378 27 18446744073709551615 1 ] 378 27 378 28 18446744073709551615 1 ; 378 28 378 29 18446744073709551615 2 if 380 3 380 5 18446744073709551615 1 ( 380 5 380 6 18446744073709551615 6 strcmp 380 6 380 12 140 1 ( 380 12 380 13 140 7 AP_addr 380 13 380 20 187 1 , 380 20 380 21 140 8 STA_addr 380 22 380 30 188 1 ) 380 30 380 31 140 1 < 380 32 380 33 18446744073709551615 1 0 380 34 380 35 18446744073709551615 1 ) 380 35 380 36 18446744073709551615 1 { 380 37 380 38 18446744073709551615 6 memcpy 381 5 381 11 139 1 ( 381 11 381 12 139 1 B 381 12 381 13 192 1 , 381 13 381 14 139 7 AP_addr 381 15 381 22 187 1 , 381 22 381 23 139 12 MAC_ADDR_LEN 381 24 381 36 139 1 ) 381 36 381 37 139 1 ; 381 37 381 38 18446744073709551615 6 memcpy 382 5 382 11 139 1 ( 382 11 382 12 139 1 B 382 12 382 13 192 1 + 382 14 382 15 18446744073709551615 12 MAC_ADDR_LEN 382 16 382 28 18446744073709551615 1 , 382 28 382 29 139 8 STA_addr 382 30 382 38 188 1 , 382 38 382 39 139 12 MAC_ADDR_LEN 382 40 382 52 139 1 ) 382 52 382 53 139 1 ; 382 53 382 54 18446744073709551615 1 } 383 3 383 4 18446744073709551615 4 else 384 3 384 7 18446744073709551615 1 { 384 8 384 9 18446744073709551615 6 memcpy 385 5 385 11 139 1 ( 385 11 385 12 139 1 B 385 12 385 13 192 1 , 385 13 385 14 139 8 STA_addr 385 15 385 23 188 1 , 385 23 385 24 139 12 MAC_ADDR_LEN 385 25 385 37 139 1 ) 385 37 385 38 139 1 ; 385 38 385 39 18446744073709551615 6 memcpy 386 5 386 11 139 1 ( 386 11 386 12 139 1 B 386 12 386 13 192 1 + 386 14 386 15 18446744073709551615 12 MAC_ADDR_LEN 386 16 386 28 18446744073709551615 1 , 386 28 386 29 139 7 AP_addr 386 30 386 37 187 1 , 386 37 386 38 139 12 MAC_ADDR_LEN 386 39 386 51 139 1 ) 386 51 386 52 139 1 ; 386 52 386 53 18446744073709551615 1 } 387 3 387 4 18446744073709551615 2 if 388 3 388 5 18446744073709551615 1 ( 388 5 388 6 18446744073709551615 6 strcmp 388 6 388 12 140 1 ( 388 12 388 13 140 6 ANonce 388 13 388 19 189 1 , 388 19 388 20 140 6 SNonce 388 21 388 27 190 1 ) 388 27 388 28 140 1 < 388 29 388 30 18446744073709551615 1 0 388 31 388 32 18446744073709551615 1 ) 388 32 388 33 18446744073709551615 1 { 388 34 388 35 18446744073709551615 6 memcpy 389 5 389 11 139 1 ( 389 11 389 12 139 1 B 389 12 389 13 192 1 + 389 14 389 15 18446744073709551615 1 2 389 16 389 17 18446744073709551615 1 * 389 18 389 19 18446744073709551615 12 MAC_ADDR_LEN 389 20 389 32 18446744073709551615 1 , 389 32 389 33 139 6 ANonce 389 34 389 40 189 1 , 389 40 389 41 139 2 32 389 42 389 44 18446744073709551615 1 ) 389 44 389 45 139 1 ; 389 45 389 46 18446744073709551615 6 memcpy 390 5 390 11 139 1 ( 390 11 390 12 139 1 B 390 12 390 13 192 1 + 390 14 390 15 18446744073709551615 1 2 390 16 390 17 18446744073709551615 1 * 390 18 390 19 18446744073709551615 12 MAC_ADDR_LEN 390 20 390 32 18446744073709551615 1 + 390 33 390 34 18446744073709551615 2 32 390 35 390 37 18446744073709551615 1 , 390 37 390 38 139 6 SNonce 390 39 390 45 190 1 , 390 45 390 46 139 2 32 390 47 390 49 18446744073709551615 1 ) 390 49 390 50 139 1 ; 390 50 390 51 18446744073709551615 1 } 391 3 391 4 18446744073709551615 4 else 392 3 392 7 18446744073709551615 1 { 392 8 392 9 18446744073709551615 6 memcpy 393 5 393 11 139 1 ( 393 11 393 12 139 1 B 393 12 393 13 192 1 + 393 14 393 15 18446744073709551615 1 2 393 16 393 17 18446744073709551615 1 * 393 18 393 19 18446744073709551615 12 MAC_ADDR_LEN 393 20 393 32 18446744073709551615 1 , 393 32 393 33 139 6 SNonce 393 34 393 40 190 1 , 393 40 393 41 139 2 32 393 42 393 44 18446744073709551615 1 ) 393 44 393 45 139 1 ; 393 45 393 46 18446744073709551615 6 memcpy 394 5 394 11 139 1 ( 394 11 394 12 139 1 B 394 12 394 13 192 1 + 394 14 394 15 18446744073709551615 1 2 394 16 394 17 18446744073709551615 1 * 394 18 394 19 18446744073709551615 12 MAC_ADDR_LEN 394 20 394 32 18446744073709551615 1 + 394 33 394 34 18446744073709551615 2 32 394 35 394 37 18446744073709551615 1 , 394 37 394 38 139 6 ANonce 394 39 394 45 189 1 , 394 45 394 46 139 2 32 394 47 394 49 18446744073709551615 1 ) 394 49 394 50 139 1 ; 394 50 394 51 18446744073709551615 1 } 395 3 395 4 18446744073709551615 6 memcpy 397 3 397 9 139 1 ( 397 9 397 10 139 3 arg 397 10 397 13 195 1 , 397 13 397 14 139 1 A 397 15 397 16 185 1 , 397 16 397 17 139 4 lenA 397 18 397 22 186 1 ) 397 22 397 23 139 1 ; 397 23 397 24 18446744073709551615 3 arg 398 3 398 6 195 1 [ 398 6 398 7 18446744073709551615 4 lenA 398 7 398 11 186 1 ] 398 11 398 12 18446744073709551615 1 = 398 13 398 14 18446744073709551615 1 c 398 15 398 16 194 1 ; 398 16 398 17 18446744073709551615 6 memcpy 399 3 399 9 139 1 ( 399 9 399 10 139 3 arg 399 10 399 13 195 1 + 399 14 399 15 18446744073709551615 4 lenA 399 16 399 20 186 1 + 399 21 399 22 18446744073709551615 1 1 399 23 399 24 18446744073709551615 1 , 399 24 399 25 139 1 B 399 26 399 27 192 1 , 399 27 399 28 139 2 76 399 29 399 31 18446744073709551615 1 ) 399 31 399 32 139 1 ; 399 32 399 33 18446744073709551615 6 u_char 401 3 401 9 1 13 hmac_sha1_res 401 10 401 23 196 1 [ 401 23 401 24 18446744073709551615 2 20 401 24 401 26 18446744073709551615 1 ] 401 26 401 27 18446744073709551615 1 ; 401 27 401 28 18446744073709551615 6 u_char 402 3 402 9 1 1 R 402 10 402 11 197 1 [ 402 11 402 12 18446744073709551615 1 ( 402 12 402 13 18446744073709551615 1 ( 402 13 402 14 18446744073709551615 3 512 402 14 402 17 18446744073709551615 1 + 402 18 402 19 18446744073709551615 3 159 402 20 402 23 18446744073709551615 1 ) 402 23 402 24 18446744073709551615 1 / 402 25 402 26 18446744073709551615 3 160 402 27 402 30 18446744073709551615 1 ) 402 30 402 31 18446744073709551615 1 * 402 32 402 33 18446744073709551615 2 20 402 34 402 36 18446744073709551615 1 ] 402 36 402 37 18446744073709551615 1 ; 402 37 402 38 18446744073709551615 5 u_int 403 3 403 8 198 10 sha_length 403 9 403 19 199 1 = 403 20 403 21 18446744073709551615 2 20 403 22 403 24 18446744073709551615 1 ; 403 24 403 25 18446744073709551615 5 while 404 3 404 8 18446744073709551615 1 ( 404 8 404 9 18446744073709551615 1 i 404 9 404 10 193 2 <= 404 11 404 13 18446744073709551615 1 ( 404 14 404 15 18446744073709551615 1 ( 404 15 404 16 18446744073709551615 3 512 404 16 404 19 18446744073709551615 1 + 404 20 404 21 18446744073709551615 3 159 404 22 404 25 18446744073709551615 1 ) 404 25 404 26 18446744073709551615 1 / 404 27 404 28 18446744073709551615 3 160 404 29 404 32 18446744073709551615 1 ) 404 32 404 33 18446744073709551615 1 ) 404 33 404 34 18446744073709551615 1 { 404 35 404 36 18446744073709551615 3 arg 405 5 405 8 195 1 [ 405 8 405 9 18446744073709551615 2 76 405 9 405 11 18446744073709551615 1 + 405 12 405 13 18446744073709551615 4 lenA 405 14 405 18 186 1 + 405 19 405 20 18446744073709551615 1 1 405 21 405 22 18446744073709551615 1 ] 405 22 405 23 18446744073709551615 1 = 405 24 405 25 18446744073709551615 4 0x00 405 26 405 30 18446744073709551615 1 + 405 31 405 32 18446744073709551615 1 i 405 33 405 34 193 1 ; 405 34 405 35 18446744073709551615 4 HMAC 406 5 406 9 116 1 ( 406 9 406 10 116 8 EVP_sha1 406 10 406 18 117 1 ( 406 18 406 19 117 1 ) 406 19 406 20 117 1 , 406 20 406 21 116 3 PMK 406 22 406 25 184 1 , 406 25 406 26 116 2 32 406 27 406 29 18446744073709551615 1 , 406 29 406 30 116 3 arg 406 31 406 34 195 1 , 406 34 406 35 116 2 76 406 36 406 38 18446744073709551615 1 + 406 39 406 40 18446744073709551615 4 lenA 406 41 406 45 186 1 + 406 46 406 47 18446744073709551615 1 2 406 48 406 49 18446744073709551615 1 , 406 49 406 50 116 13 hmac_sha1_res 406 51 406 64 196 1 , 406 64 406 65 116 1 & 406 66 406 67 18446744073709551615 10 sha_length 406 67 406 77 199 1 ) 406 77 406 78 116 1 ; 406 78 406 79 18446744073709551615 6 memcpy 407 5 407 11 139 1 ( 407 11 407 12 139 1 R 407 12 407 13 197 1 + 407 14 407 15 18446744073709551615 1 i 407 16 407 17 193 1 * 407 18 407 19 18446744073709551615 2 20 407 20 407 22 18446744073709551615 1 , 407 22 407 23 139 13 hmac_sha1_res 407 24 407 37 196 1 , 407 37 407 38 139 2 20 407 39 407 41 18446744073709551615 1 ) 407 41 407 42 139 1 ; 407 42 407 43 18446744073709551615 1 i 408 5 408 6 193 2 ++ 408 6 408 8 18446744073709551615 1 ; 408 8 408 9 18446744073709551615 1 } 409 3 409 4 18446744073709551615 6 memcpy 410 3 410 9 139 1 ( 410 9 410 10 139 3 ptk 410 10 410 13 191 1 , 410 13 410 14 139 1 R 410 15 410 16 197 1 , 410 16 410 17 139 2 64 410 18 410 20 18446744073709551615 1 ) 410 20 410 21 139 1 ; 410 21 410 22 18446744073709551615 6 return 411 3 411 9 18446744073709551615 3 ptk 411 10 411 13 191 1 ; 411 13 411 14 18446744073709551615 1 } 412 1 412 2 18446744073709551615 6 u_char 414 1 414 7 1 1 * 414 8 414 9 84 15 hexstr_to_bytes 414 9 414 24 84 1 ( 414 24 414 25 84 6 u_char 414 25 414 31 1 1 * 414 32 414 33 18446744073709551615 6 hexstr 414 33 414 39 200 1 ) 414 39 414 40 84 1 { 414 41 414 42 18446744073709551615 6 size_t 415 3 415 9 83 3 len 415 10 415 13 201 1 = 415 14 415 15 18446744073709551615 6 strlen 415 16 415 22 105 1 ( 415 22 415 23 105 6 hexstr 415 23 415 29 200 1 ) 415 29 415 30 105 1 ; 415 30 415 31 18446744073709551615 2 if 416 3 416 5 18446744073709551615 1 ( 416 5 416 6 18446744073709551615 3 len 416 6 416 9 201 1 % 416 10 416 11 18446744073709551615 1 2 416 12 416 13 18446744073709551615 2 != 416 14 416 16 18446744073709551615 1 0 416 17 416 18 18446744073709551615 1 ) 416 18 416 19 18446744073709551615 6 return 417 5 417 11 18446744073709551615 4 NULL 417 12 417 16 18446744073709551615 1 ; 417 16 417 17 18446744073709551615 6 size_t 418 3 418 9 83 9 final_len 418 10 418 19 202 1 = 418 20 418 21 18446744073709551615 3 len 418 22 418 25 201 1 / 418 26 418 27 18446744073709551615 1 2 418 28 418 29 18446744073709551615 1 ; 418 29 418 30 18446744073709551615 8 unsigned 419 3 419 11 18446744073709551615 4 char 419 12 419 16 18446744073709551615 1 * 419 17 419 18 18446744073709551615 4 chrs 419 18 419 22 203 1 = 419 23 419 24 18446744073709551615 1 ( 419 25 419 26 18446744073709551615 8 unsigned 419 26 419 34 18446744073709551615 4 char 419 35 419 39 18446744073709551615 1 * 419 40 419 41 18446744073709551615 1 ) 419 41 419 42 18446744073709551615 6 malloc 419 42 419 48 115 1 ( 419 48 419 49 115 1 ( 419 49 419 50 18446744073709551615 9 final_len 419 50 419 59 202 1 ) 419 59 419 60 18446744073709551615 1 * 419 61 419 62 18446744073709551615 6 sizeof 419 63 419 69 18446744073709551615 1 ( 419 69 419 70 18446744073709551615 1 * 419 70 419 71 18446744073709551615 4 chrs 419 71 419 75 203 1 ) 419 75 419 76 18446744073709551615 1 ) 419 76 419 77 115 1 ; 419 77 419 78 18446744073709551615 3 for 420 3 420 6 18446744073709551615 1 ( 420 6 420 7 18446744073709551615 6 size_t 420 7 420 13 83 1 i 420 14 420 15 204 1 = 420 16 420 17 18446744073709551615 1 0 420 18 420 19 18446744073709551615 1 , 420 19 420 20 18446744073709551615 1 j 420 21 420 22 205 1 = 420 23 420 24 18446744073709551615 1 0 420 25 420 26 18446744073709551615 1 ; 420 26 420 27 18446744073709551615 1 j 420 28 420 29 205 1 < 420 30 420 31 18446744073709551615 9 final_len 420 32 420 41 202 1 ; 420 41 420 42 18446744073709551615 1 i 420 43 420 44 204 2 += 420 45 420 47 18446744073709551615 1 2 420 48 420 49 18446744073709551615 1 , 420 49 420 50 18446744073709551615 1 j 420 51 420 52 205 2 ++ 420 52 420 54 18446744073709551615 1 ) 420 54 420 55 18446744073709551615 4 chrs 421 5 421 9 203 1 [ 421 9 421 10 18446744073709551615 1 j 421 10 421 11 205 1 ] 421 11 421 12 18446744073709551615 1 = 421 13 421 14 18446744073709551615 1 ( 421 15 421 16 18446744073709551615 6 hexstr 421 16 421 22 200 1 [ 421 22 421 23 18446744073709551615 1 i 421 23 421 24 204 1 ] 421 24 421 25 18446744073709551615 1 % 421 26 421 27 18446744073709551615 2 32 421 28 421 30 18446744073709551615 1 + 421 31 421 32 18446744073709551615 1 9 421 33 421 34 18446744073709551615 1 ) 421 34 421 35 18446744073709551615 1 % 421 36 421 37 18446744073709551615 2 25 421 38 421 40 18446744073709551615 1 * 421 41 421 42 18446744073709551615 2 16 421 43 421 45 18446744073709551615 1 + 421 46 421 47 18446744073709551615 1 ( 421 48 421 49 18446744073709551615 6 hexstr 421 49 421 55 200 1 [ 421 55 421 56 18446744073709551615 1 i 421 56 421 57 204 1 + 421 58 421 59 18446744073709551615 1 1 421 60 421 61 18446744073709551615 1 ] 421 61 421 62 18446744073709551615 1 % 421 63 421 64 18446744073709551615 2 32 421 65 421 67 18446744073709551615 1 + 421 68 421 69 18446744073709551615 1 9 421 70 421 71 18446744073709551615 1 ) 421 71 421 72 18446744073709551615 1 % 421 73 421 74 18446744073709551615 2 25 421 75 421 77 18446744073709551615 1 ; 421 77 421 78 18446744073709551615 6 return 422 3 422 9 18446744073709551615 4 chrs 422 10 422 14 203 1 ; 422 14 422 15 18446744073709551615 1 } 423 1 423 2 18446744073709551615 6 u_char 425 1 425 7 1 14 packet_decrypt 425 8 425 22 80 1 ( 425 22 425 23 80 5 const 425 23 425 28 18446744073709551615 6 struct 425 29 425 35 18446744073709551615 11 pcap_pkthdr 425 36 425 47 77 1 * 425 48 425 49 18446744073709551615 6 header 425 49 425 55 206 1 , 425 55 425 56 80 5 const 425 57 425 62 18446744073709551615 6 u_char 425 63 425 69 1 1 * 425 70 425 71 18446744073709551615 6 buffer 425 71 425 77 207 1 , 425 77 425 78 80 6 struct 425 79 425 85 18446744073709551615 10 eapol_info 425 86 425 96 63 1 * 425 97 425 98 18446744073709551615 10 eapol_keys 425 98 425 108 208 1 ) 425 108 425 109 80 1 { 425 110 425 111 18446744073709551615 5 const 426 3 426 8 18446744073709551615 6 struct 426 9 426 15 18446744073709551615 12 sniff_802_11 426 16 426 28 8 1 * 426 29 426 30 18446744073709551615 10 hdr_802_11 426 30 426 40 209 1 ; 426 40 426 41 18446744073709551615 10 hdr_802_11 427 3 427 13 209 1 = 427 14 427 15 18446744073709551615 1 ( 427 16 427 17 18446744073709551615 6 struct 427 17 427 23 18446744073709551615 12 sniff_802_11 427 24 427 36 8 1 * 427 37 427 38 18446744073709551615 1 ) 427 38 427 39 18446744073709551615 1 ( 427 39 427 40 18446744073709551615 6 buffer 427 40 427 46 207 1 + 427 47 427 48 18446744073709551615 16 PRISM_HEADER_LEN 427 49 427 65 18446744073709551615 1 ) 427 65 427 66 18446744073709551615 1 ; 427 66 427 67 18446744073709551615 3 int 428 3 428 6 18446744073709551615 5 is_a4 428 7 428 12 210 1 , 428 12 428 13 18446744073709551615 1 i 428 14 428 15 211 1 , 428 15 428 16 18446744073709551615 1 n 428 17 428 18 212 1 , 428 18 428 19 18446744073709551615 15 hdr_ccmp_offset 428 20 428 35 213 1 , 428 35 428 36 18446744073709551615 6 blocks 428 37 428 43 214 1 , 428 43 428 44 18446744073709551615 6 is_qos 428 45 428 51 215 1 ; 428 51 428 52 18446744073709551615 3 int 429 3 429 6 18446744073709551615 8 data_len 429 7 429 15 216 1 , 429 15 429 16 18446744073709551615 4 last 429 17 429 21 217 1 , 429 21 429 22 18446744073709551615 6 offset 429 23 429 29 218 1 ; 429 29 429 30 18446744073709551615 6 u_char 430 3 430 9 1 12 ccmp_aes_ctr 430 10 430 22 219 1 [ 430 22 430 23 18446744073709551615 2 16 430 23 430 25 18446744073709551615 1 ] 430 25 430 26 18446744073709551615 1 , 430 26 430 27 18446744073709551615 1 B 430 28 430 29 220 1 [ 430 29 430 30 18446744073709551615 2 16 430 30 430 32 18446744073709551615 1 ] 430 32 430 33 18446744073709551615 1 , 430 33 430 34 18446744073709551615 3 MIC 430 35 430 38 221 1 [ 430 38 430 39 18446744073709551615 2 16 430 39 430 41 18446744073709551615 1 ] 430 41 430 42 18446744073709551615 1 ; 430 42 430 43 18446744073709551615 6 u_char 431 3 431 9 1 13 packet_number 431 10 431 23 222 1 [ 431 23 431 24 18446744073709551615 1 6 431 24 431 25 18446744073709551615 1 ] 431 25 431 26 18446744073709551615 1 ; 431 26 431 27 18446744073709551615 5 is_a4 433 3 433 8 210 1 = 433 9 433 10 18446744073709551615 1 ( 433 11 433 12 18446744073709551615 10 hdr_802_11 433 12 433 22 209 2 -> 433 22 433 24 18446744073709551615 13 frame_control 433 24 433 37 9 1 [ 433 37 433 38 18446744073709551615 1 1 433 38 433 39 18446744073709551615 1 ] 433 39 433 40 18446744073709551615 1 & 433 41 433 42 18446744073709551615 1 3 433 43 433 44 18446744073709551615 1 ) 433 44 433 45 18446744073709551615 2 == 433 46 433 48 18446744073709551615 1 3 433 49 433 50 18446744073709551615 1 ; 433 50 433 51 18446744073709551615 6 is_qos 434 3 434 9 215 1 = 434 10 434 11 18446744073709551615 1 ( 434 12 434 13 18446744073709551615 10 hdr_802_11 434 13 434 23 209 2 -> 434 23 434 25 18446744073709551615 13 frame_control 434 25 434 38 9 1 [ 434 38 434 39 18446744073709551615 1 0 434 39 434 40 18446744073709551615 1 ] 434 40 434 41 18446744073709551615 1 & 434 42 434 43 18446744073709551615 4 0x8C 434 44 434 48 18446744073709551615 1 ) 434 48 434 49 18446744073709551615 2 == 434 50 434 52 18446744073709551615 4 0x88 434 53 434 57 18446744073709551615 1 ; 434 57 434 58 18446744073709551615 15 hdr_ccmp_offset 435 3 435 18 213 1 = 435 19 435 20 18446744073709551615 2 24 435 21 435 23 18446744073709551615 1 + 435 24 435 25 18446744073709551615 1 6 435 26 435 27 18446744073709551615 1 * 435 28 435 29 18446744073709551615 5 is_a4 435 30 435 35 210 1 ; 435 35 435 36 18446744073709551615 15 hdr_ccmp_offset 436 3 436 18 213 2 += 436 19 436 21 18446744073709551615 1 2 436 22 436 23 18446744073709551615 1 * 436 24 436 25 18446744073709551615 6 is_qos 436 26 436 32 215 1 ; 436 32 436 33 18446744073709551615 8 data_len 438 3 438 11 216 1 = 438 12 438 13 18446744073709551615 6 header 438 14 438 20 206 2 -> 438 20 438 22 18446744073709551615 6 caplen 438 22 438 28 223 1 - 438 29 438 30 18446744073709551615 16 PRISM_HEADER_LEN 438 31 438 47 18446744073709551615 1 - 438 48 438 49 18446744073709551615 15 hdr_ccmp_offset 438 50 438 65 213 1 - 438 66 438 67 18446744073709551615 1 8 438 68 438 69 18446744073709551615 1 - 438 70 438 71 18446744073709551615 1 8 438 72 438 73 18446744073709551615 1 - 438 74 438 75 18446744073709551615 1 4 438 76 438 77 18446744073709551615 1 ; 438 77 438 78 18446744073709551615 13 packet_number 440 3 440 16 222 1 [ 440 16 440 17 18446744073709551615 1 0 440 17 440 18 18446744073709551615 1 ] 440 18 440 19 18446744073709551615 1 = 440 20 440 21 18446744073709551615 1 * 440 22 440 23 18446744073709551615 1 ( 440 23 440 24 18446744073709551615 6 buffer 440 24 440 30 207 1 + 440 31 440 32 18446744073709551615 16 PRISM_HEADER_LEN 440 33 440 49 18446744073709551615 1 + 440 50 440 51 18446744073709551615 15 hdr_ccmp_offset 440 52 440 67 213 1 + 440 68 440 69 18446744073709551615 1 7 440 70 440 71 18446744073709551615 1 ) 440 71 440 72 18446744073709551615 1 ; 440 72 440 73 18446744073709551615 13 packet_number 441 3 441 16 222 1 [ 441 16 441 17 18446744073709551615 1 1 441 17 441 18 18446744073709551615 1 ] 441 18 441 19 18446744073709551615 1 = 441 20 441 21 18446744073709551615 1 * 441 22 441 23 18446744073709551615 1 ( 441 23 441 24 18446744073709551615 6 buffer 441 24 441 30 207 1 + 441 31 441 32 18446744073709551615 16 PRISM_HEADER_LEN 441 33 441 49 18446744073709551615 1 + 441 50 441 51 18446744073709551615 15 hdr_ccmp_offset 441 52 441 67 213 1 + 441 68 441 69 18446744073709551615 1 6 441 70 441 71 18446744073709551615 1 ) 441 71 441 72 18446744073709551615 1 ; 441 72 441 73 18446744073709551615 13 packet_number 442 3 442 16 222 1 [ 442 16 442 17 18446744073709551615 1 2 442 17 442 18 18446744073709551615 1 ] 442 18 442 19 18446744073709551615 1 = 442 20 442 21 18446744073709551615 1 * 442 22 442 23 18446744073709551615 1 ( 442 23 442 24 18446744073709551615 6 buffer 442 24 442 30 207 1 + 442 31 442 32 18446744073709551615 16 PRISM_HEADER_LEN 442 33 442 49 18446744073709551615 1 + 442 50 442 51 18446744073709551615 15 hdr_ccmp_offset 442 52 442 67 213 1 + 442 68 442 69 18446744073709551615 1 5 442 70 442 71 18446744073709551615 1 ) 442 71 442 72 18446744073709551615 1 ; 442 72 442 73 18446744073709551615 13 packet_number 443 3 443 16 222 1 [ 443 16 443 17 18446744073709551615 1 3 443 17 443 18 18446744073709551615 1 ] 443 18 443 19 18446744073709551615 1 = 443 20 443 21 18446744073709551615 1 * 443 22 443 23 18446744073709551615 1 ( 443 23 443 24 18446744073709551615 6 buffer 443 24 443 30 207 1 + 443 31 443 32 18446744073709551615 16 PRISM_HEADER_LEN 443 33 443 49 18446744073709551615 1 + 443 50 443 51 18446744073709551615 15 hdr_ccmp_offset 443 52 443 67 213 1 + 443 68 443 69 18446744073709551615 1 4 443 70 443 71 18446744073709551615 1 ) 443 71 443 72 18446744073709551615 1 ; 443 72 443 73 18446744073709551615 13 packet_number 444 3 444 16 222 1 [ 444 16 444 17 18446744073709551615 1 4 444 17 444 18 18446744073709551615 1 ] 444 18 444 19 18446744073709551615 1 = 444 20 444 21 18446744073709551615 1 * 444 22 444 23 18446744073709551615 1 ( 444 23 444 24 18446744073709551615 6 buffer 444 24 444 30 207 1 + 444 31 444 32 18446744073709551615 16 PRISM_HEADER_LEN 444 33 444 49 18446744073709551615 1 + 444 50 444 51 18446744073709551615 15 hdr_ccmp_offset 444 52 444 67 213 1 + 444 68 444 69 18446744073709551615 1 1 444 70 444 71 18446744073709551615 1 ) 444 71 444 72 18446744073709551615 1 ; 444 72 444 73 18446744073709551615 13 packet_number 445 3 445 16 222 1 [ 445 16 445 17 18446744073709551615 1 5 445 17 445 18 18446744073709551615 1 ] 445 18 445 19 18446744073709551615 1 = 445 20 445 21 18446744073709551615 1 * 445 22 445 23 18446744073709551615 1 ( 445 23 445 24 18446744073709551615 6 buffer 445 24 445 30 207 1 + 445 31 445 32 18446744073709551615 16 PRISM_HEADER_LEN 445 33 445 49 18446744073709551615 1 + 445 50 445 51 18446744073709551615 15 hdr_ccmp_offset 445 52 445 67 213 1 ) 445 67 445 68 18446744073709551615 1 ; 445 68 445 69 18446744073709551615 57 //ccmp_aes_ctr [0x59|priority|src_addr|packet_number|ctr] 447 3 447 60 18446744073709551615 12 ccmp_aes_ctr 448 3 448 15 219 1 [ 448 15 448 16 18446744073709551615 1 0 448 16 448 17 18446744073709551615 1 ] 448 17 448 18 18446744073709551615 1 = 448 19 448 20 18446744073709551615 4 0x59 448 21 448 25 18446744073709551615 1 ; 448 25 448 26 18446744073709551615 12 ccmp_aes_ctr 449 3 449 15 219 1 [ 449 15 449 16 18446744073709551615 1 1 449 16 449 17 18446744073709551615 1 ] 449 17 449 18 18446744073709551615 1 = 449 19 449 20 18446744073709551615 1 0 449 21 449 22 18446744073709551615 1 ; 449 22 449 23 18446744073709551615 6 memcpy 450 3 450 9 139 1 ( 450 9 450 10 139 1 & 450 10 450 11 18446744073709551615 12 ccmp_aes_ctr 450 11 450 23 219 1 [ 450 23 450 24 18446744073709551615 1 2 450 24 450 25 18446744073709551615 1 ] 450 25 450 26 18446744073709551615 1 , 450 26 450 27 139 10 hdr_802_11 450 28 450 38 209 2 -> 450 38 450 40 18446744073709551615 5 addr2 450 40 450 45 12 1 , 450 45 450 46 139 12 MAC_ADDR_LEN 450 47 450 59 139 1 ) 450 59 450 60 139 1 ; 450 60 450 61 18446744073709551615 6 memcpy 451 3 451 9 139 1 ( 451 9 451 10 139 1 & 451 10 451 11 18446744073709551615 12 ccmp_aes_ctr 451 11 451 23 219 1 [ 451 23 451 24 18446744073709551615 1 2 451 24 451 25 18446744073709551615 1 + 451 26 451 27 18446744073709551615 12 MAC_ADDR_LEN 451 28 451 40 18446744073709551615 1 ] 451 40 451 41 18446744073709551615 1 , 451 41 451 42 139 13 packet_number 451 43 451 56 222 1 , 451 56 451 57 139 1 6 451 58 451 59 18446744073709551615 1 ) 451 59 451 60 139 1 ; 451 60 451 61 18446744073709551615 12 ccmp_aes_ctr 452 3 452 15 219 1 [ 452 15 452 16 18446744073709551615 2 14 452 16 452 18 18446744073709551615 1 ] 452 18 452 19 18446744073709551615 1 = 452 20 452 21 18446744073709551615 1 ( 452 22 452 23 18446744073709551615 8 data_len 452 23 452 31 216 2 >> 452 32 452 34 18446744073709551615 1 8 452 35 452 36 18446744073709551615 1 ) 452 36 452 37 18446744073709551615 1 & 452 38 452 39 18446744073709551615 4 0xFF 452 40 452 44 18446744073709551615 1 ; 452 44 452 45 18446744073709551615 12 ccmp_aes_ctr 453 3 453 15 219 1 [ 453 15 453 16 18446744073709551615 2 15 453 16 453 18 18446744073709551615 1 ] 453 18 453 19 18446744073709551615 1 = 453 20 453 21 18446744073709551615 1 ( 453 22 453 23 18446744073709551615 8 data_len 453 23 453 31 216 1 & 453 32 453 33 18446744073709551615 4 0xFF 453 34 453 38 18446744073709551615 1 ) 453 38 453 39 18446744073709551615 1 ; 453 39 453 40 18446744073709551615 6 u_char 455 3 455 9 1 3 AAD 455 10 455 13 224 1 [ 455 13 455 14 18446744073709551615 2 32 455 14 455 16 18446744073709551615 1 ] 455 16 455 17 18446744073709551615 1 = 455 18 455 19 18446744073709551615 1 { 455 20 455 21 18446744073709551615 1 0 455 21 455 22 18446744073709551615 1 } 455 22 455 23 18446744073709551615 1 ; 455 23 455 24 18446744073709551615 3 AAD 456 3 456 6 224 1 [ 456 6 456 7 18446744073709551615 1 2 456 7 456 8 18446744073709551615 1 ] 456 8 456 9 18446744073709551615 1 = 456 10 456 11 18446744073709551615 10 hdr_802_11 456 12 456 22 209 2 -> 456 22 456 24 18446744073709551615 13 frame_control 456 24 456 37 9 1 [ 456 37 456 38 18446744073709551615 1 0 456 38 456 39 18446744073709551615 1 ] 456 39 456 40 18446744073709551615 1 & 456 41 456 42 18446744073709551615 4 0x8F 456 43 456 47 18446744073709551615 1 ; 456 47 456 48 18446744073709551615 3 AAD 457 3 457 6 224 1 [ 457 6 457 7 18446744073709551615 1 3 457 7 457 8 18446744073709551615 1 ] 457 8 457 9 18446744073709551615 1 = 457 10 457 11 18446744073709551615 10 hdr_802_11 457 12 457 22 209 2 -> 457 22 457 24 18446744073709551615 13 frame_control 457 24 457 37 9 1 [ 457 37 457 38 18446744073709551615 1 1 457 38 457 39 18446744073709551615 1 ] 457 39 457 40 18446744073709551615 1 & 457 41 457 42 18446744073709551615 4 0xC7 457 43 457 47 18446744073709551615 1 ; 457 47 457 48 18446744073709551615 6 memcpy 458 3 458 9 139 1 ( 458 9 458 10 139 3 AAD 458 10 458 13 224 1 + 458 14 458 15 18446744073709551615 1 4 458 16 458 17 18446744073709551615 1 , 458 17 458 18 139 1 & 458 19 458 20 18446744073709551615 1 ( 458 20 458 21 18446744073709551615 10 hdr_802_11 458 21 458 31 209 2 -> 458 31 458 33 18446744073709551615 5 addr1 458 33 458 38 11 1 ) 458 38 458 39 18446744073709551615 1 , 458 39 458 40 139 1 3 458 41 458 42 18446744073709551615 1 * 458 43 458 44 18446744073709551615 1 6 458 45 458 46 18446744073709551615 1 ) 458 46 458 47 139 1 ; 458 47 458 48 18446744073709551615 3 AAD 459 3 459 6 224 1 [ 459 6 459 7 18446744073709551615 2 22 459 7 459 9 18446744073709551615 1 ] 459 9 459 10 18446744073709551615 1 = 459 11 459 12 18446744073709551615 10 hdr_802_11 459 13 459 23 209 2 -> 459 23 459 25 18446744073709551615 16 sequence_control 459 25 459 41 14 1 [ 459 41 459 42 18446744073709551615 1 0 459 42 459 43 18446744073709551615 1 ] 459 43 459 44 18446744073709551615 1 & 459 45 459 46 18446744073709551615 4 0x0F 459 47 459 51 18446744073709551615 1 ; 459 51 459 52 18446744073709551615 2 if 461 3 461 5 18446744073709551615 1 ( 461 5 461 6 18446744073709551615 6 is_qos 461 6 461 12 215 1 ) 461 12 461 13 18446744073709551615 1 { 461 14 461 15 18446744073709551615 6 memcpy 462 5 462 11 139 1 ( 462 11 462 12 139 1 & 462 12 462 13 18446744073709551615 3 AAD 462 13 462 16 224 1 [ 462 16 462 17 18446744073709551615 2 24 462 17 462 19 18446744073709551615 1 ] 462 19 462 20 18446744073709551615 1 , 462 20 462 21 139 10 hdr_802_11 462 22 462 32 209 2 -> 462 32 462 34 18446744073709551615 11 qos_control 462 34 462 45 15 1 , 462 45 462 46 139 1 2 462 47 462 48 18446744073709551615 1 ) 462 48 462 49 139 1 ; 462 49 462 50 18446744073709551615 12 ccmp_aes_ctr 463 5 463 17 219 1 [ 463 17 463 18 18446744073709551615 1 1 463 18 463 19 18446744073709551615 1 ] 463 19 463 20 18446744073709551615 1 = 463 21 463 22 18446744073709551615 3 AAD 463 23 463 26 224 1 [ 463 26 463 27 18446744073709551615 2 24 463 27 463 29 18446744073709551615 1 ] 463 29 463 30 18446744073709551615 1 ; 463 30 463 31 18446744073709551615 32 //  B0[     1] = CCM Nonce flags 463 32 463 64 18446744073709551615 3 AAD 464 5 464 8 224 1 [ 464 8 464 9 18446744073709551615 1 1 464 9 464 10 18446744073709551615 1 ] 464 10 464 11 18446744073709551615 1 = 464 12 464 13 18446744073709551615 2 22 464 14 464 16 18446744073709551615 1 + 464 17 464 18 18446744073709551615 1 2 464 19 464 20 18446744073709551615 1 ; 464 20 464 21 18446744073709551615 21 // AAD[ 0.. 1] = l(a) 464 32 464 53 18446744073709551615 1 } 465 3 465 4 18446744073709551615 4 else 466 3 466 7 18446744073709551615 1 { 466 8 466 9 18446744073709551615 6 memset 467 5 467 11 225 1 ( 467 11 467 12 225 1 & 467 12 467 13 18446744073709551615 3 AAD 467 13 467 16 224 1 [ 467 16 467 17 18446744073709551615 2 24 467 17 467 19 18446744073709551615 1 ] 467 19 467 20 18446744073709551615 1 , 467 20 467 21 225 1 0 467 22 467 23 18446744073709551615 1 , 467 23 467 24 225 1 2 467 25 467 26 18446744073709551615 1 ) 467 26 467 27 225 1 ; 467 27 467 28 18446744073709551615 19 // AAD[24..25] = QC 467 29 467 48 18446744073709551615 12 ccmp_aes_ctr 468 5 468 17 219 1 [ 468 17 468 18 18446744073709551615 1 1 468 18 468 19 18446744073709551615 1 ] 468 19 468 20 18446744073709551615 1 = 468 21 468 22 18446744073709551615 1 0 468 23 468 24 18446744073709551615 1 ; 468 24 468 25 18446744073709551615 32 //  B0[     1] = CCM Nonce flags 468 29 468 61 18446744073709551615 3 AAD 469 5 469 8 224 1 [ 469 8 469 9 18446744073709551615 1 1 469 9 469 10 18446744073709551615 1 ] 469 10 469 11 18446744073709551615 1 = 469 12 469 13 18446744073709551615 2 22 469 14 469 16 18446744073709551615 1 + 469 17 469 18 18446744073709551615 1 2 469 19 469 20 18446744073709551615 1 ; 469 20 469 21 18446744073709551615 21 // AAD[ 0.. 1] = l(a) 469 29 469 50 18446744073709551615 1 } 470 3 470 4 18446744073709551615 7 AES_KEY 472 3 472 10 226 2 TK 472 11 472 13 227 1 ; 472 13 472 14 18446744073709551615 19 AES_set_encrypt_key 473 3 473 22 228 1 ( 473 22 473 23 228 10 eapol_keys 473 23 473 33 208 2 -> 473 33 473 35 18446744073709551615 3 PTK 473 35 473 38 67 1 . 473 38 473 39 18446744073709551615 2 tk 473 39 473 41 60 1 , 473 41 473 42 228 3 128 473 43 473 46 18446744073709551615 1 , 473 46 473 47 228 1 & 473 48 473 49 18446744073709551615 2 TK 473 49 473 51 227 1 ) 473 51 473 52 228 1 ; 473 52 473 53 18446744073709551615 11 AES_encrypt 474 3 474 14 229 1 ( 474 14 474 15 229 12 ccmp_aes_ctr 474 15 474 27 219 1 , 474 27 474 28 229 3 MIC 474 29 474 32 221 1 , 474 32 474 33 229 1 & 474 34 474 35 18446744073709551615 2 TK 474 35 474 37 227 1 ) 474 37 474 38 229 1 ; 474 38 474 39 18446744073709551615 3 XOR 475 3 475 6 85 1 ( 475 6 475 7 85 3 MIC 475 7 475 10 221 1 , 475 10 475 11 85 3 AAD 475 12 475 15 224 1 , 475 15 475 16 85 2 16 475 17 475 19 18446744073709551615 1 ) 475 19 475 20 85 1 ; 475 20 475 21 18446744073709551615 11 AES_encrypt 476 3 476 14 229 1 ( 476 14 476 15 229 3 MIC 476 15 476 18 221 1 , 476 18 476 19 229 3 MIC 476 20 476 23 221 1 , 476 23 476 24 229 1 & 476 25 476 26 18446744073709551615 2 TK 476 26 476 28 227 1 ) 476 28 476 29 229 1 ; 476 29 476 30 18446744073709551615 3 XOR 477 3 477 6 85 1 ( 477 6 477 7 85 3 MIC 477 7 477 10 221 1 , 477 10 477 11 85 3 AAD 477 12 477 15 224 1 + 477 16 477 17 18446744073709551615 2 16 477 18 477 20 18446744073709551615 1 , 477 20 477 21 85 2 16 477 22 477 24 18446744073709551615 1 ) 477 24 477 25 85 1 ; 477 25 477 26 18446744073709551615 11 AES_encrypt 478 3 478 14 229 1 ( 478 14 478 15 229 3 MIC 478 15 478 18 221 1 , 478 18 478 19 229 3 MIC 478 20 478 23 221 1 , 478 23 478 24 229 1 & 478 25 478 26 18446744073709551615 2 TK 478 26 478 28 227 1 ) 478 28 478 29 229 1 ; 478 29 478 30 18446744073709551615 12 ccmp_aes_ctr 480 3 480 15 219 1 [ 480 15 480 16 18446744073709551615 1 0 480 16 480 17 18446744073709551615 1 ] 480 17 480 18 18446744073709551615 2 &= 480 19 480 21 18446744073709551615 4 0x07 480 22 480 26 18446744073709551615 1 ; 480 26 480 27 18446744073709551615 12 ccmp_aes_ctr 481 3 481 15 219 1 [ 481 15 481 16 18446744073709551615 2 14 481 16 481 18 18446744073709551615 1 ] 481 18 481 19 18446744073709551615 1 = 481 20 481 21 18446744073709551615 12 ccmp_aes_ctr 481 22 481 34 219 1 [ 481 34 481 35 18446744073709551615 2 15 481 35 481 37 18446744073709551615 1 ] 481 37 481 38 18446744073709551615 1 = 481 39 481 40 18446744073709551615 1 0 481 41 481 42 18446744073709551615 1 ; 481 42 481 43 18446744073709551615 11 AES_encrypt 482 3 482 14 229 1 ( 482 14 482 15 229 12 ccmp_aes_ctr 482 15 482 27 219 1 , 482 27 482 28 229 1 B 482 29 482 30 220 1 , 482 30 482 31 229 1 & 482 32 482 33 18446744073709551615 2 TK 482 33 482 35 227 1 ) 482 35 482 36 229 1 ; 482 36 482 37 18446744073709551615 3 XOR 483 3 483 6 85 1 ( 483 6 483 7 85 6 buffer 483 7 483 13 207 1 + 483 14 483 15 18446744073709551615 6 header 483 16 483 22 206 2 -> 483 22 483 24 18446744073709551615 6 caplen 483 24 483 30 223 1 - 483 31 483 32 18446744073709551615 1 8 483 33 483 34 18446744073709551615 1 - 483 35 483 36 18446744073709551615 1 4 483 37 483 38 18446744073709551615 1 , 483 38 483 39 85 1 B 483 40 483 41 220 1 , 483 41 483 42 85 1 8 483 43 483 44 18446744073709551615 1 ) 483 44 483 45 85 1 ; 483 45 483 46 18446744073709551615 6 blocks 485 3 485 9 214 1 = 485 10 485 11 18446744073709551615 1 ( 485 12 485 13 18446744073709551615 8 data_len 485 13 485 21 216 1 + 485 22 485 23 18446744073709551615 2 16 485 24 485 26 18446744073709551615 1 - 485 27 485 28 18446744073709551615 1 1 485 29 485 30 18446744073709551615 1 ) 485 30 485 31 18446744073709551615 1 / 485 32 485 33 18446744073709551615 2 16 485 34 485 36 18446744073709551615 1 ; 485 36 485 37 18446744073709551615 4 last 486 3 486 7 217 1 = 486 8 486 9 18446744073709551615 8 data_len 486 10 486 18 216 1 % 486 19 486 20 18446744073709551615 2 16 486 21 486 23 18446744073709551615 1 ; 486 23 486 24 18446744073709551615 6 offset 487 3 487 9 218 1 = 487 10 487 11 18446744073709551615 15 hdr_ccmp_offset 487 12 487 27 213 1 + 487 28 487 29 18446744073709551615 1 8 487 30 487 31 18446744073709551615 1 ; 487 31 487 32 18446744073709551615 3 for 489 3 489 6 18446744073709551615 1 ( 489 6 489 7 18446744073709551615 1 i 489 7 489 8 211 1 = 489 9 489 10 18446744073709551615 1 1 489 11 489 12 18446744073709551615 1 ; 489 12 489 13 18446744073709551615 1 i 489 14 489 15 211 2 <= 489 16 489 18 18446744073709551615 6 blocks 489 19 489 25 214 1 ; 489 25 489 26 18446744073709551615 1 i 489 27 489 28 211 2 ++ 489 28 489 30 18446744073709551615 1 ) 489 30 489 31 18446744073709551615 1 { 489 32 489 33 18446744073709551615 1 n 490 5 490 6 212 1 = 490 7 490 8 18446744073709551615 1 ( 490 9 490 10 18446744073709551615 4 last 490 10 490 14 217 1 > 490 15 490 16 18446744073709551615 1 0 490 17 490 18 18446744073709551615 2 && 490 19 490 21 18446744073709551615 1 i 490 22 490 23 211 2 == 490 24 490 26 18446744073709551615 6 blocks 490 27 490 33 214 1 ) 490 33 490 34 18446744073709551615 1 ? 490 35 490 36 18446744073709551615 4 last 490 37 490 41 217 1 : 490 42 490 43 18446744073709551615 2 16 490 44 490 46 18446744073709551615 1 ; 490 46 490 47 18446744073709551615 12 ccmp_aes_ctr 492 5 492 17 219 1 [ 492 17 492 18 18446744073709551615 2 14 492 18 492 20 18446744073709551615 1 ] 492 20 492 21 18446744073709551615 1 = 492 22 492 23 18446744073709551615 1 ( 492 24 492 25 18446744073709551615 1 i 492 25 492 26 211 2 >> 492 27 492 29 18446744073709551615 1 8 492 30 492 31 18446744073709551615 1 ) 492 31 492 32 18446744073709551615 1 & 492 33 492 34 18446744073709551615 4 0xFF 492 35 492 39 18446744073709551615 1 ; 492 39 492 40 18446744073709551615 12 ccmp_aes_ctr 493 5 493 17 219 1 [ 493 17 493 18 18446744073709551615 2 15 493 18 493 20 18446744073709551615 1 ] 493 20 493 21 18446744073709551615 1 = 493 22 493 23 18446744073709551615 1 i 493 24 493 25 211 1 & 493 26 493 27 18446744073709551615 4 0xFF 493 28 493 32 18446744073709551615 1 ; 493 32 493 33 18446744073709551615 11 AES_encrypt 495 5 495 16 229 1 ( 495 16 495 17 229 12 ccmp_aes_ctr 495 17 495 29 219 1 , 495 29 495 30 229 1 B 495 31 495 32 220 1 , 495 32 495 33 229 1 & 495 34 495 35 18446744073709551615 2 TK 495 35 495 37 227 1 ) 495 37 495 38 229 1 ; 495 38 495 39 18446744073709551615 21 // S_i := E( K, A_i ) 495 40 495 61 18446744073709551615 3 XOR 496 5 496 8 85 1 ( 496 8 496 9 85 6 buffer 496 9 496 15 207 1 + 496 16 496 17 18446744073709551615 16 PRISM_HEADER_LEN 496 18 496 34 18446744073709551615 1 + 496 35 496 36 18446744073709551615 6 offset 496 37 496 43 218 1 , 496 43 496 44 85 1 B 496 45 496 46 220 1 , 496 46 496 47 85 1 n 496 48 496 49 212 1 ) 496 49 496 50 85 1 ; 496 50 496 51 18446744073709551615 3 XOR 497 5 497 8 85 1 ( 497 8 497 9 85 3 MIC 497 9 497 12 221 1 , 497 12 497 13 85 6 buffer 497 14 497 20 207 1 + 497 21 497 22 18446744073709551615 16 PRISM_HEADER_LEN 497 23 497 39 18446744073709551615 1 + 497 40 497 41 18446744073709551615 6 offset 497 42 497 48 218 1 , 497 48 497 49 85 1 n 497 50 497 51 212 1 ) 497 51 497 52 85 1 ; 497 52 497 53 18446744073709551615 11 AES_encrypt 498 5 498 16 229 1 ( 498 16 498 17 229 3 MIC 498 17 498 20 221 1 , 498 20 498 21 229 3 MIC 498 22 498 25 221 1 , 498 25 498 26 229 1 & 498 27 498 28 18446744073709551615 2 TK 498 28 498 30 227 1 ) 498 30 498 31 229 1 ; 498 31 498 32 18446744073709551615 6 offset 500 5 500 11 218 2 += 500 12 500 14 18446744073709551615 1 n 500 15 500 16 212 1 ; 500 16 500 17 18446744073709551615 1 } 501 3 501 4 18446744073709551615 6 return 503 3 503 9 18446744073709551615 6 memcmp 503 10 503 16 158 1 ( 503 16 503 17 158 6 buffer 503 17 503 23 207 1 + 503 24 503 25 18446744073709551615 16 PRISM_HEADER_LEN 503 26 503 42 18446744073709551615 1 + 503 43 503 44 18446744073709551615 6 offset 503 45 503 51 218 1 , 503 51 503 52 158 3 MIC 503 53 503 56 221 1 , 503 56 503 57 158 1 8 503 58 503 59 18446744073709551615 1 ) 503 59 503 60 158 2 == 503 61 503 63 18446744073709551615 1 0 503 64 503 65 18446744073709551615 1 ; 503 65 503 66 18446744073709551615 1 } 504 1 504 2 18446744073709551615 6 static 506 1 506 7 18446744073709551615 6 inline 506 8 506 14 18446744073709551615 4 void 506 15 506 19 18446744073709551615 3 XOR 506 20 506 23 85 1 ( 506 23 506 24 85 8 unsigned 506 24 506 32 18446744073709551615 4 char 506 33 506 37 18446744073709551615 1 * 506 38 506 39 18446744073709551615 3 dst 506 39 506 42 230 1 , 506 42 506 43 85 8 unsigned 506 44 506 52 18446744073709551615 4 char 506 53 506 57 18446744073709551615 1 * 506 58 506 59 18446744073709551615 3 src 506 59 506 62 231 1 , 506 62 506 63 85 3 int 506 64 506 67 18446744073709551615 3 len 506 68 506 71 232 1 ) 506 71 506 72 85 1 { 506 73 506 74 18446744073709551615 3 int 507 3 507 6 18446744073709551615 1 i 507 7 507 8 233 1 ; 507 8 507 9 18446744073709551615 3 for 508 3 508 6 18446744073709551615 1 ( 508 6 508 7 18446744073709551615 1 i 508 7 508 8 233 1 = 508 9 508 10 18446744073709551615 1 0 508 11 508 12 18446744073709551615 1 ; 508 12 508 13 18446744073709551615 1 i 508 14 508 15 233 1 < 508 16 508 17 18446744073709551615 3 len 508 18 508 21 232 1 ; 508 21 508 22 18446744073709551615 1 i 508 23 508 24 233 2 ++ 508 24 508 26 18446744073709551615 1 ) 508 26 508 27 18446744073709551615 3 dst 509 5 509 8 230 1 [ 509 8 509 9 18446744073709551615 1 i 509 9 509 10 233 1 ] 509 10 509 11 18446744073709551615 2 ^= 509 12 509 14 18446744073709551615 3 src 509 15 509 18 231 1 [ 509 18 509 19 18446744073709551615 1 i 509 19 509 20 233 1 ] 509 20 509 21 18446744073709551615 1 ; 509 21 509 22 18446744073709551615 1 } 510 1 510 2 18446744073709551615 0 0 234 0 0 0 9 0 0 1 3 0 1 A 20 1 3 0 6 u_char 9 1 3 0 8 NULL_MIC 7 1 3 0 20 WAITING_EAPOL_KEY_2: 7 1 3 0 20 WAITING_EAPOL_KEY_3: 7 1 3 0 20 WAITING_EAPOL_KEY_4: 7 1 3 0 8 SUCCESS: 20 1 3 0 12 eapol_status 2 1 3 0 12 sniff_802_11 6 1 3 0 26 frame_control:sniff_802_11 6 1 3 0 24 duration_id:sniff_802_11 6 1 3 0 18 addr1:sniff_802_11 6 1 3 0 18 addr2:sniff_802_11 6 1 3 0 18 addr3:sniff_802_11 6 1 3 0 29 sequence_control:sniff_802_11 6 1 3 0 24 qos_control:sniff_802_11 2 1 3 0 19 sniff_802_11_beacon 6 1 3 0 33 frame_control:sniff_802_11_beacon 6 1 3 0 31 duration_id:sniff_802_11_beacon 6 1 3 0 25 addr1:sniff_802_11_beacon 6 1 3 0 25 addr2:sniff_802_11_beacon 6 1 3 0 25 addr3:sniff_802_11_beacon 6 1 3 0 36 sequence_control:sniff_802_11_beacon 2 1 3 0 9 sniff_LLC 6 1 3 0 14 dsap:sniff_LLC 6 1 3 0 14 ssap:sniff_LLC 6 1 3 0 23 control_field:sniff_LLC 2 1 3 0 10 sniff_SNAP 6 1 3 0 19 org_code:sniff_SNAP 6 1 3 0 15 type:sniff_SNAP 2 1 3 0 17 sniff_802_1x_auth 6 1 3 0 25 version:sniff_802_1x_auth 6 1 3 0 22 type:sniff_802_1x_auth 6 1 3 0 24 length:sniff_802_1x_auth 6 1 3 0 37 key_descriptor_type:sniff_802_1x_auth 6 1 3 0 33 key_information:sniff_802_1x_auth 6 1 3 0 28 key_length:sniff_802_1x_auth 6 1 3 0 32 replay_counter:sniff_802_1x_auth 6 1 3 0 31 wpa_key_nonce:sniff_802_1x_auth 6 1 3 0 28 wpa_key_IV:sniff_802_1x_auth 6 1 3 0 29 wpa_key_RSC:sniff_802_1x_auth 6 1 3 0 28 wpa_key_ID:sniff_802_1x_auth 6 1 3 0 29 wpa_key_MIC:sniff_802_1x_auth 6 1 3 0 37 wpa_key_data_length:sniff_802_1x_auth 2 1 3 0 5 iphdr 6 1 3 0 10 ip_v:iphdr 6 1 3 0 11 ip_hl:iphdr 6 1 3 0 12 ip_dss:iphdr 6 1 3 0 21 ip_total_length:iphdr 6 1 3 0 8 id:iphdr 6 1 3 0 11 flags:iphdr 6 1 3 0 21 fragment_offset:iphdr 6 1 3 0 9 ttl:iphdr 6 1 3 0 14 protocol:iphdr 6 1 3 0 18 hdr_checksum:iphdr 6 1 3 0 9 src:iphdr 6 1 3 0 9 dst:iphdr 2 1 3 0 3 ptk 6 1 3 0 7 kck:ptk 6 1 3 0 7 kek:ptk 6 1 3 0 6 tk:ptk 6 1 3 0 7 txk:ptk 6 1 3 0 7 trk:ptk 2 1 3 0 10 eapol_info 6 1 3 0 26 sta_mac_address:eapol_info 6 1 3 0 17 ANonce:eapol_info 6 1 3 0 17 SNonce:eapol_info 6 1 3 0 14 PTK:eapol_info 6 1 3 0 17 status:eapol_info 6 1 3 0 22 last_replay:eapol_info 9 1 3 0 14 ap_mac_address 9 1 3 0 3 psk 9 1 3 0 4 ssid 20 1 3 0 5 map_t 9 1 3 0 3 map 9 1 3 0 4 PTK0 8 1 3 0 14 process_beacon 2 1 3 0 11 pcap_pkthdr 8 1 3 0 13 process_eapol 8 1 3 0 14 process_packet 8 1 3 0 14 packet_decrypt 8 1 3 0 12 mac_toString 8 1 3 0 6 PRF512 20 1 3 0 6 size_t 8 1 3 0 15 hexstr_to_bytes 8 1 3 0 3 XOR 10 1 3 0 57 118:62:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 4 main 10 1 3 0 57 120:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 120:26:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_new 9 1 3 0 56 123:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 125:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 126:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 127:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 128:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 129:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 2 1 3 0 11 bpf_program 9 1 3 0 57 130:22:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 6 pcap_t 9 1 3 0 57 131:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 132:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 133:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 134:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 20 fastpbkdf2_hmac_sha1 8 1 3 0 6 strlen 9 1 3 0 57 139:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 printf 9 1 3 0 57 147:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 148:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 149:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 150:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 151:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 155:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 156:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 malloc 8 1 3 0 4 HMAC 8 1 3 0 8 EVP_sha1 9 1 3 0 57 158:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 11 bpf_u_int32 9 1 3 0 57 163:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 164:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 14 pcap_lookupnet 8 1 3 0 7 fprintf 9 1 3 0 56 172:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 17 pcap_open_offline 8 1 3 0 12 pcap_compile 8 1 3 0 11 pcap_geterr 8 1 3 0 14 pcap_setfilter 8 1 3 0 12 pcap_next_ex 8 1 3 0 8 asprintf 9 1 3 0 56 206:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 13 pcap_freecode 8 1 3 0 10 pcap_close 10 1 3 0 57 222:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 222:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 223:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 225:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 226:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memcpy 8 1 3 0 6 strcmp 10 1 3 0 57 236:48:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 236:70:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 237:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 239:35:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 243:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 243:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 244:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 246:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 247:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 248:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 249:22:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 251:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 253:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_get 9 1 3 0 57 266:35:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 269:38:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 271:20:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memcmp 9 1 3 0 57 273:35:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 290:31:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 293:34:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 295:16:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 297:43:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 299:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 302:32:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_put 9 1 3 0 57 309:26:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 7 u_short 9 1 3 0 57 310:21:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 14 hashmap_remove 9 1 3 0 57 313:34:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 320:27:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 321:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 322:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 333:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 334:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 335:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 345:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 346:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 347:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 364:28:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 365:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 8 snprintf 10 1 3 0 57 373:24:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 373:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 373:47:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 373:61:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 373:78:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 373:96:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 58 373:112:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 374:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 375:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 376:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 377:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 378:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 401:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 402:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 5 u_int 9 1 3 0 56 403:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 414:33:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 415:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 418:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 419:18:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 420:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 420:21:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 425:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 425:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 425:98:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 426:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 428:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 428:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 428:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 428:20:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 428:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 428:45:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 429:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 429:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 429:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 430:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 430:28:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 430:35:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 431:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 6 1 3 0 18 caplen:pcap_pkthdr 9 1 3 0 57 455:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memset 20 1 3 0 7 AES_KEY 9 1 3 0 57 472:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 19 AES_set_encrypt_key 8 1 3 0 11 AES_encrypt 10 1 3 0 57 506:39:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 506:59:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 506:68:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 507:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 0 0 3 0 0 0 56 /home/florenzi/Documenti/juci_ws/wpa_decode/fastpbkdf2.h 1509296147 53 /home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 1262964973 50 /home/florenzi/Documenti/juci_ws/wpa_decode/main.c 1517395751