22 serialization::archive 15 0 0 0 0 43 /home/florenzi/Documenti/juci_ws/wpa_decode 49 /home/florenzi/Documenti/juci_ws/wpa_decode/build 0 0 4085 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 14 "fastpbkdf2.h" 1 10 1 24 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 11 "hashmap.h" 2 10 2 21 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 7 openssl 3 11 3 18 18446744073709551615 1 / 3 18 3 19 18446744073709551615 3 aes 3 19 3 22 18446744073709551615 1 . 3 22 3 23 18446744073709551615 1 h 3 23 3 24 18446744073709551615 1 > 3 24 3 25 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 7 openssl 4 11 4 18 18446744073709551615 1 / 4 18 4 19 18446744073709551615 4 hmac 4 19 4 23 18446744073709551615 1 . 4 23 4 24 18446744073709551615 1 h 4 24 4 25 18446744073709551615 1 > 4 25 4 26 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 7 openssl 5 11 5 18 18446744073709551615 1 / 5 18 5 19 18446744073709551615 3 sha 5 19 5 22 18446744073709551615 1 . 5 22 5 23 18446744073709551615 1 h 5 23 5 24 18446744073709551615 1 > 5 24 5 25 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 1 < 6 10 6 11 18446744073709551615 4 pcap 6 11 6 15 18446744073709551615 1 . 6 15 6 16 18446744073709551615 1 h 6 16 6 17 18446744073709551615 1 > 6 17 6 18 18446744073709551615 1 # 7 1 7 2 18446744073709551615 7 include 7 2 7 9 18446744073709551615 1 < 7 10 7 11 18446744073709551615 5 stdio 7 11 7 16 18446744073709551615 1 . 7 16 7 17 18446744073709551615 1 h 7 17 7 18 18446744073709551615 1 > 7 18 7 19 18446744073709551615 1 # 8 1 8 2 18446744073709551615 7 include 8 2 8 9 18446744073709551615 1 < 8 10 8 11 18446744073709551615 6 stdlib 8 11 8 17 18446744073709551615 1 . 8 17 8 18 18446744073709551615 1 h 8 18 8 19 18446744073709551615 1 > 8 19 8 20 18446744073709551615 1 # 11 1 11 2 18446744073709551615 6 define 11 2 11 8 18446744073709551615 16 PRISM_HEADER_LEN 11 9 11 25 18446744073709551615 3 144 11 26 11 29 18446744073709551615 1 # 12 1 12 2 18446744073709551615 6 define 12 2 12 8 18446744073709551615 11 SSID_OFFSET 12 9 12 20 18446744073709551615 2 12 12 21 12 23 18446744073709551615 1 # 13 1 13 2 18446744073709551615 6 define 13 2 13 8 18446744073709551615 13 SIZE_ETHERNET 13 9 13 22 18446744073709551615 2 14 13 23 13 25 18446744073709551615 1 # 14 1 14 2 18446744073709551615 6 define 14 2 14 8 18446744073709551615 12 MAC_ADDR_LEN 14 9 14 21 18446744073709551615 1 6 14 22 14 23 18446744073709551615 1 # 15 1 15 2 18446744073709551615 6 define 15 2 15 8 18446744073709551615 7 LLC_LEN 15 9 15 16 18446744073709551615 1 8 15 17 15 18 18446744073709551615 1 # 16 1 16 2 18446744073709551615 6 define 16 2 16 8 18446744073709551615 16 TAKE_N_BITS_FROM 16 9 16 25 18446744073709551615 1 ( 16 25 16 26 18446744073709551615 1 b 16 26 16 27 18446744073709551615 1 , 16 27 16 28 18446744073709551615 1 p 16 29 16 30 18446744073709551615 1 , 16 30 16 31 18446744073709551615 1 n 16 32 16 33 18446744073709551615 1 ) 16 33 16 34 18446744073709551615 1 ( 16 35 16 36 18446744073709551615 1 ( 16 36 16 37 18446744073709551615 1 b 16 37 16 38 18446744073709551615 1 ) 16 38 16 39 18446744073709551615 2 >> 16 40 16 42 18446744073709551615 1 ( 16 43 16 44 18446744073709551615 1 p 16 44 16 45 18446744073709551615 1 ) 16 45 16 46 18446744073709551615 1 ) 16 46 16 47 18446744073709551615 1 & 16 48 16 49 18446744073709551615 1 ( 16 50 16 51 18446744073709551615 1 ( 16 51 16 52 18446744073709551615 1 1 16 52 16 53 18446744073709551615 2 << 16 54 16 56 18446744073709551615 1 ( 16 57 16 58 18446744073709551615 1 n 16 58 16 59 18446744073709551615 1 ) 16 59 16 60 18446744073709551615 1 ) 16 60 16 61 18446744073709551615 1 - 16 62 16 63 18446744073709551615 1 1 16 64 16 65 18446744073709551615 1 ) 16 65 16 66 18446744073709551615 1 # 17 1 17 2 18446744073709551615 6 define 17 2 17 8 18446744073709551615 13 IS_BIG_ENDIAN 17 9 17 22 18446744073709551615 1 ( 17 23 17 24 18446744073709551615 1 ! 17 24 17 25 18446744073709551615 1 * 17 25 17 26 18446744073709551615 1 ( 17 26 17 27 18446744073709551615 8 unsigned 17 27 17 35 18446744073709551615 4 char 17 36 17 40 18446744073709551615 1 * 17 41 17 42 18446744073709551615 1 ) 17 42 17 43 18446744073709551615 1 & 17 43 17 44 18446744073709551615 1 ( 17 44 17 45 18446744073709551615 8 uint16_t 17 45 17 53 18446744073709551615 1 ) 17 53 17 54 18446744073709551615 1 { 17 54 17 55 18446744073709551615 1 1 17 55 17 56 18446744073709551615 1 } 17 56 17 57 18446744073709551615 1 ) 17 57 17 58 18446744073709551615 3 int 19 1 19 4 18446744073709551615 11 SHA1_LENGTH 19 5 19 16 0 1 = 19 17 19 18 18446744073709551615 2 16 19 19 19 21 18446744073709551615 1 ; 19 21 19 22 18446744073709551615 5 const 20 1 20 6 18446744073709551615 4 char 20 7 20 11 18446744073709551615 1 A 20 12 20 13 1 1 [ 20 13 20 14 18446744073709551615 1 ] 20 14 20 15 18446744073709551615 1 = 20 16 20 17 18446744073709551615 24 "Pairwise key expansion" 20 18 20 42 18446744073709551615 1 ; 20 42 20 43 18446744073709551615 5 const 21 1 21 6 18446744073709551615 6 u_char 21 7 21 13 2 8 NULL_MIC 21 14 21 22 3 1 [ 21 22 21 23 18446744073709551615 2 16 21 23 21 25 18446744073709551615 1 ] 21 25 21 26 18446744073709551615 1 = 21 27 21 28 18446744073709551615 1 { 21 29 21 30 18446744073709551615 1 0 21 30 21 31 18446744073709551615 1 } 21 31 21 32 18446744073709551615 1 ; 21 32 21 33 18446744073709551615 7 typedef 23 1 23 8 18446744073709551615 4 enum 23 9 23 13 18446744073709551615 1 { 23 14 23 15 18446744073709551615 19 WAITING_EAPOL_KEY_2 23 16 23 35 4 1 , 23 35 23 36 18446744073709551615 19 WAITING_EAPOL_KEY_3 24 16 24 35 5 1 , 24 35 24 36 18446744073709551615 19 WAITING_EAPOL_KEY_4 25 16 25 35 6 1 , 25 35 25 36 18446744073709551615 7 SUCCESS 26 16 26 23 7 1 } 26 24 26 25 18446744073709551615 12 eapol_status 26 26 26 38 8 1 ; 26 38 26 39 18446744073709551615 23 /* 802.11 MAC header */ 28 1 28 24 18446744073709551615 6 struct 29 1 29 7 18446744073709551615 12 sniff_802_11 29 8 29 20 9 1 { 29 21 29 22 18446744073709551615 6 u_char 30 3 30 9 2 13 frame_control 30 10 30 23 10 1 [ 30 23 30 24 18446744073709551615 1 2 30 24 30 25 18446744073709551615 1 ] 30 25 30 26 18446744073709551615 1 ; 30 26 30 27 18446744073709551615 6 u_char 31 3 31 9 2 11 duration_id 31 10 31 21 11 1 [ 31 21 31 22 18446744073709551615 1 2 31 22 31 23 18446744073709551615 1 ] 31 23 31 24 18446744073709551615 1 ; 31 24 31 25 18446744073709551615 6 u_char 32 3 32 9 2 5 addr1 32 10 32 15 12 1 [ 32 15 32 16 18446744073709551615 12 MAC_ADDR_LEN 32 16 32 28 12 1 ] 32 28 32 29 18446744073709551615 1 ; 32 29 32 30 18446744073709551615 6 u_char 33 3 33 9 2 5 addr2 33 10 33 15 13 1 [ 33 15 33 16 18446744073709551615 12 MAC_ADDR_LEN 33 16 33 28 13 1 ] 33 28 33 29 18446744073709551615 1 ; 33 29 33 30 18446744073709551615 6 u_char 34 3 34 9 2 5 addr3 34 10 34 15 14 1 [ 34 15 34 16 18446744073709551615 12 MAC_ADDR_LEN 34 16 34 28 14 1 ] 34 28 34 29 18446744073709551615 1 ; 34 29 34 30 18446744073709551615 6 u_char 35 3 35 9 2 16 sequence_control 35 10 35 26 15 1 [ 35 26 35 27 18446744073709551615 1 2 35 27 35 28 18446744073709551615 1 ] 35 28 35 29 18446744073709551615 1 ; 35 29 35 30 18446744073709551615 6 u_char 36 3 36 9 2 11 qos_control 36 10 36 21 16 1 [ 36 21 36 22 18446744073709551615 1 2 36 22 36 23 18446744073709551615 1 ] 36 23 36 24 18446744073709551615 1 ; 36 24 36 25 18446744073709551615 1 } 37 1 37 2 18446744073709551615 1 ; 37 2 37 3 18446744073709551615 38 /* 802.11 MAC header of beacon msgs */ 39 1 39 39 18446744073709551615 6 struct 40 1 40 7 18446744073709551615 19 sniff_802_11_beacon 40 8 40 27 17 1 { 40 28 40 29 18446744073709551615 6 u_char 41 3 41 9 2 13 frame_control 41 10 41 23 18 1 [ 41 23 41 24 18446744073709551615 1 2 41 24 41 25 18446744073709551615 1 ] 41 25 41 26 18446744073709551615 1 ; 41 26 41 27 18446744073709551615 6 u_char 42 3 42 9 2 11 duration_id 42 10 42 21 19 1 [ 42 21 42 22 18446744073709551615 1 2 42 22 42 23 18446744073709551615 1 ] 42 23 42 24 18446744073709551615 1 ; 42 24 42 25 18446744073709551615 6 u_char 43 3 43 9 2 5 addr1 43 10 43 15 20 1 [ 43 15 43 16 18446744073709551615 12 MAC_ADDR_LEN 43 16 43 28 20 1 ] 43 28 43 29 18446744073709551615 1 ; 43 29 43 30 18446744073709551615 6 u_char 44 3 44 9 2 5 addr2 44 10 44 15 21 1 [ 44 15 44 16 18446744073709551615 12 MAC_ADDR_LEN 44 16 44 28 21 1 ] 44 28 44 29 18446744073709551615 1 ; 44 29 44 30 18446744073709551615 6 u_char 45 3 45 9 2 5 addr3 45 10 45 15 22 1 [ 45 15 45 16 18446744073709551615 12 MAC_ADDR_LEN 45 16 45 28 22 1 ] 45 28 45 29 18446744073709551615 1 ; 45 29 45 30 18446744073709551615 6 u_char 46 3 46 9 2 16 sequence_control 46 10 46 26 23 1 [ 46 26 46 27 18446744073709551615 1 2 46 27 46 28 18446744073709551615 1 ] 46 28 46 29 18446744073709551615 1 ; 46 29 46 30 18446744073709551615 1 } 47 1 47 2 18446744073709551615 1 ; 47 2 47 3 18446744073709551615 16 /* LLC header */ 49 1 49 17 18446744073709551615 6 struct 50 1 50 7 18446744073709551615 9 sniff_LLC 50 8 50 17 24 1 { 50 18 50 19 18446744073709551615 6 u_char 51 3 51 9 2 4 dsap 51 10 51 14 25 1 ; 51 14 51 15 18446744073709551615 6 u_char 52 3 52 9 2 4 ssap 52 10 52 14 26 1 ; 52 14 52 15 18446744073709551615 6 u_char 53 3 53 9 2 13 control_field 53 10 53 23 27 1 ; 53 23 53 24 18446744073709551615 1 } 54 1 54 2 18446744073709551615 1 ; 54 2 54 3 18446744073709551615 17 /* SNAP header */ 56 1 56 18 18446744073709551615 6 struct 57 1 57 7 18446744073709551615 10 sniff_SNAP 57 8 57 18 28 1 { 57 19 57 20 18446744073709551615 6 u_char 58 3 58 9 2 8 org_code 58 10 58 18 29 1 [ 58 18 58 19 18446744073709551615 1 3 58 19 58 20 18446744073709551615 1 ] 58 20 58 21 18446744073709551615 1 ; 58 21 58 22 18446744073709551615 6 u_char 59 3 59 9 2 4 type 59 10 59 14 30 1 [ 59 14 59 15 18446744073709551615 1 2 59 15 59 16 18446744073709551615 1 ] 59 16 59 17 18446744073709551615 1 ; 59 17 59 18 18446744073709551615 1 } 60 1 60 2 18446744073709551615 1 ; 60 2 60 3 18446744073709551615 34 /* 802.1x authentication header */ 62 1 62 35 18446744073709551615 6 struct 63 1 63 7 18446744073709551615 17 sniff_802_1x_auth 63 8 63 25 31 1 { 63 26 63 27 18446744073709551615 6 u_char 64 3 64 9 2 7 version 64 10 64 17 32 1 ; 64 17 64 18 18446744073709551615 6 u_char 65 3 65 9 2 4 type 65 10 65 14 33 1 ; 65 14 65 15 18446744073709551615 6 u_char 66 3 66 9 2 6 length 66 10 66 16 34 1 [ 66 16 66 17 18446744073709551615 1 2 66 17 66 18 18446744073709551615 1 ] 66 18 66 19 18446744073709551615 1 ; 66 19 66 20 18446744073709551615 6 u_char 67 3 67 9 2 19 key_descriptor_type 67 10 67 29 35 1 ; 67 29 67 30 18446744073709551615 6 u_char 68 3 68 9 2 15 key_information 68 10 68 25 36 1 [ 68 25 68 26 18446744073709551615 1 2 68 26 68 27 18446744073709551615 1 ] 68 27 68 28 18446744073709551615 1 ; 68 28 68 29 18446744073709551615 6 u_char 69 3 69 9 2 10 key_length 69 10 69 20 37 1 [ 69 20 69 21 18446744073709551615 1 2 69 21 69 22 18446744073709551615 1 ] 69 22 69 23 18446744073709551615 1 ; 69 23 69 24 18446744073709551615 6 u_char 70 3 70 9 2 14 replay_counter 70 10 70 24 38 1 [ 70 24 70 25 18446744073709551615 1 8 70 25 70 26 18446744073709551615 1 ] 70 26 70 27 18446744073709551615 1 ; 70 27 70 28 18446744073709551615 6 u_char 71 3 71 9 2 13 wpa_key_nonce 71 10 71 23 39 1 [ 71 23 71 24 18446744073709551615 2 32 71 24 71 26 18446744073709551615 1 ] 71 26 71 27 18446744073709551615 1 ; 71 27 71 28 18446744073709551615 6 u_char 72 3 72 9 2 10 wpa_key_IV 72 10 72 20 40 1 [ 72 20 72 21 18446744073709551615 2 16 72 21 72 23 18446744073709551615 1 ] 72 23 72 24 18446744073709551615 1 ; 72 24 72 25 18446744073709551615 6 u_char 73 3 73 9 2 11 wpa_key_RSC 73 10 73 21 41 1 [ 73 21 73 22 18446744073709551615 1 8 73 22 73 23 18446744073709551615 1 ] 73 23 73 24 18446744073709551615 1 ; 73 24 73 25 18446744073709551615 6 u_char 74 3 74 9 2 10 wpa_key_ID 74 10 74 20 42 1 [ 74 20 74 21 18446744073709551615 1 8 74 21 74 22 18446744073709551615 1 ] 74 22 74 23 18446744073709551615 1 ; 74 23 74 24 18446744073709551615 6 u_char 75 3 75 9 2 11 wpa_key_MIC 75 10 75 21 43 1 [ 75 21 75 22 18446744073709551615 2 16 75 22 75 24 18446744073709551615 1 ] 75 24 75 25 18446744073709551615 1 ; 75 25 75 26 18446744073709551615 6 u_char 76 3 76 9 2 19 wpa_key_data_length 76 10 76 29 44 1 [ 76 29 76 30 18446744073709551615 1 2 76 30 76 31 18446744073709551615 1 ] 76 31 76 32 18446744073709551615 1 ; 76 32 76 33 18446744073709551615 1 } 77 1 77 2 18446744073709551615 1 ; 77 2 77 3 18446744073709551615 15 /* IP header */ 79 1 79 16 18446744073709551615 6 struct 80 1 80 7 18446744073709551615 8 sniff_IP 80 8 80 16 45 1 { 80 17 80 18 18446744073709551615 6 u_char 81 3 81 9 2 5 ip_hl 81 10 81 15 46 1 : 81 16 81 17 18446744073709551615 1 4 81 18 81 19 18446744073709551615 1 , 81 19 81 20 18446744073709551615 4 ip_v 81 21 81 25 47 1 : 81 26 81 27 18446744073709551615 1 4 81 28 81 29 18446744073709551615 1 ; 81 29 81 30 18446744073709551615 6 u_char 82 3 82 9 2 6 ip_dss 82 10 82 16 48 1 ; 82 16 82 17 18446744073709551615 6 u_char 83 3 83 9 2 15 ip_total_length 83 10 83 25 49 1 [ 83 25 83 26 18446744073709551615 1 2 83 26 83 27 18446744073709551615 1 ] 83 27 83 28 18446744073709551615 1 ; 83 28 83 29 18446744073709551615 6 u_char 84 3 84 9 2 2 id 84 10 84 12 50 1 [ 84 12 84 13 18446744073709551615 1 2 84 13 84 14 18446744073709551615 1 ] 84 14 84 15 18446744073709551615 1 ; 84 15 84 16 18446744073709551615 6 u_char 85 3 85 9 2 5 flags 85 10 85 15 51 1 ; 85 15 85 16 18446744073709551615 6 u_char 86 3 86 9 2 15 fragment_offset 86 10 86 25 52 1 ; 86 25 86 26 18446744073709551615 6 u_char 87 3 87 9 2 3 ttl 87 10 87 13 53 1 ; 87 13 87 14 18446744073709551615 6 u_char 88 3 88 9 2 8 protocol 88 10 88 18 54 1 ; 88 18 88 19 18446744073709551615 6 u_char 89 3 89 9 2 12 hdr_checksum 89 10 89 22 55 1 [ 89 22 89 23 18446744073709551615 1 2 89 23 89 24 18446744073709551615 1 ] 89 24 89 25 18446744073709551615 1 ; 89 25 89 26 18446744073709551615 6 u_char 90 3 90 9 2 3 src 90 10 90 13 56 1 [ 90 13 90 14 18446744073709551615 1 4 90 14 90 15 18446744073709551615 1 ] 90 15 90 16 18446744073709551615 1 ; 90 16 90 17 18446744073709551615 6 u_char 91 3 91 9 2 3 dst 91 10 91 13 57 1 [ 91 13 91 14 18446744073709551615 1 4 91 14 91 15 18446744073709551615 1 ] 91 15 91 16 18446744073709551615 1 ; 91 16 91 17 18446744073709551615 1 } 92 1 92 2 18446744073709551615 1 ; 92 2 92 3 18446744073709551615 16 /* TCP header */ 94 1 94 17 18446744073709551615 6 struct 95 1 95 7 18446744073709551615 9 sniff_TCP 95 8 95 17 58 1 { 95 18 95 19 18446744073709551615 6 u_char 96 3 96 9 2 8 src_port 96 10 96 18 59 1 [ 96 18 96 19 18446744073709551615 1 2 96 19 96 20 18446744073709551615 1 ] 96 20 96 21 18446744073709551615 1 ; 96 21 96 22 18446744073709551615 6 u_char 97 3 97 9 2 8 dst_port 97 10 97 18 60 1 [ 97 18 97 19 18446744073709551615 1 2 97 19 97 20 18446744073709551615 1 ] 97 20 97 21 18446744073709551615 1 ; 97 21 97 22 18446744073709551615 6 u_char 98 3 98 9 2 10 sqn_number 98 10 98 20 61 1 [ 98 20 98 21 18446744073709551615 1 4 98 21 98 22 18446744073709551615 1 ] 98 22 98 23 18446744073709551615 1 ; 98 23 98 24 18446744073709551615 6 u_char 99 3 99 9 2 10 ack_number 99 10 99 20 62 1 [ 99 20 99 21 18446744073709551615 1 4 99 21 99 22 18446744073709551615 1 ] 99 22 99 23 18446744073709551615 1 ; 99 23 99 24 18446744073709551615 6 u_char 100 3 100 9 2 7 hdr_len 100 10 100 17 63 1 : 100 18 100 19 18446744073709551615 1 4 100 20 100 21 18446744073709551615 1 , 100 21 100 22 18446744073709551615 9 reserved1 100 23 100 32 64 1 : 100 33 100 34 18446744073709551615 1 4 100 35 100 36 18446744073709551615 1 ; 100 36 100 37 18446744073709551615 6 u_char 101 3 101 9 2 9 reserved2 101 10 101 19 65 1 : 101 20 101 21 18446744073709551615 1 2 101 22 101 23 18446744073709551615 1 , 101 23 101 24 18446744073709551615 3 urg 101 25 101 28 66 1 : 101 29 101 30 18446744073709551615 1 1 101 31 101 32 18446744073709551615 1 , 101 32 101 33 18446744073709551615 3 ack 101 34 101 37 67 1 : 101 38 101 39 18446744073709551615 1 1 101 40 101 41 18446744073709551615 1 , 101 41 101 42 18446744073709551615 3 psh 101 43 101 46 68 1 : 101 47 101 48 18446744073709551615 1 1 101 49 101 50 18446744073709551615 1 , 101 50 101 51 18446744073709551615 3 rst 101 52 101 55 69 1 : 101 56 101 57 18446744073709551615 1 1 101 58 101 59 18446744073709551615 1 , 101 59 101 60 18446744073709551615 3 syn 101 61 101 64 70 1 : 101 65 101 66 18446744073709551615 1 1 101 67 101 68 18446744073709551615 1 , 101 68 101 69 18446744073709551615 3 fin 101 70 101 73 71 1 : 101 74 101 75 18446744073709551615 1 1 101 76 101 77 18446744073709551615 1 ; 101 77 101 78 18446744073709551615 6 u_char 102 3 102 9 2 11 window_size 102 10 102 21 72 1 [ 102 21 102 22 18446744073709551615 1 2 102 22 102 23 18446744073709551615 1 ] 102 23 102 24 18446744073709551615 1 ; 102 24 102 25 18446744073709551615 6 u_char 103 3 103 9 2 12 tcp_checksum 103 10 103 22 73 1 [ 103 22 103 23 18446744073709551615 1 2 103 23 103 24 18446744073709551615 1 ] 103 24 103 25 18446744073709551615 1 ; 103 25 103 26 18446744073709551615 6 u_char 104 3 104 9 2 14 urgent_pointer 104 10 104 24 74 1 [ 104 24 104 25 18446744073709551615 1 2 104 25 104 26 18446744073709551615 1 ] 104 26 104 27 18446744073709551615 1 ; 104 27 104 28 18446744073709551615 1 } 105 1 105 2 18446744073709551615 1 ; 105 2 105 3 18446744073709551615 27 /* Pairwise Temporal Key */ 107 1 107 28 18446744073709551615 6 struct 108 1 108 7 18446744073709551615 3 ptk 108 8 108 11 75 1 { 108 12 108 13 18446744073709551615 6 u_char 109 3 109 9 2 3 kck 109 10 109 13 76 1 [ 109 13 109 14 18446744073709551615 2 16 109 14 109 16 18446744073709551615 1 ] 109 16 109 17 18446744073709551615 1 ; 109 17 109 18 18446744073709551615 6 u_char 110 3 110 9 2 3 kek 110 10 110 13 77 1 [ 110 13 110 14 18446744073709551615 2 16 110 14 110 16 18446744073709551615 1 ] 110 16 110 17 18446744073709551615 1 ; 110 17 110 18 18446744073709551615 6 u_char 111 3 111 9 2 2 tk 111 10 111 12 78 1 [ 111 12 111 13 18446744073709551615 2 16 111 13 111 15 18446744073709551615 1 ] 111 15 111 16 18446744073709551615 1 ; 111 16 111 17 18446744073709551615 6 u_char 112 3 112 9 2 3 txk 112 10 112 13 79 1 [ 112 13 112 14 18446744073709551615 1 8 112 14 112 15 18446744073709551615 1 ] 112 15 112 16 18446744073709551615 1 ; 112 16 112 17 18446744073709551615 6 u_char 113 3 113 9 2 3 trk 113 10 113 13 80 1 [ 113 13 113 14 18446744073709551615 1 8 113 14 113 15 18446744073709551615 1 ] 113 15 113 16 18446744073709551615 1 ; 113 16 113 17 18446744073709551615 1 } 114 1 114 2 18446744073709551615 1 ; 114 2 114 3 18446744073709551615 36 /* Informations about 4whs status */ 116 1 116 37 18446744073709551615 6 struct 117 1 117 7 18446744073709551615 10 eapol_info 117 8 117 18 81 1 { 117 19 117 20 18446744073709551615 6 u_char 118 3 118 9 2 15 sta_mac_address 118 10 118 25 82 1 [ 118 25 118 26 18446744073709551615 12 MAC_ADDR_LEN 118 26 118 38 82 1 ] 118 38 118 39 18446744073709551615 1 ; 118 39 118 40 18446744073709551615 6 u_char 119 3 119 9 2 6 ANonce 119 10 119 16 83 1 [ 119 16 119 17 18446744073709551615 2 32 119 17 119 19 18446744073709551615 1 ] 119 19 119 20 18446744073709551615 1 ; 119 20 119 21 18446744073709551615 6 u_char 120 3 120 9 2 6 SNonce 120 10 120 16 84 1 [ 120 16 120 17 18446744073709551615 2 32 120 17 120 19 18446744073709551615 1 ] 120 19 120 20 18446744073709551615 1 ; 120 20 120 21 18446744073709551615 6 struct 121 3 121 9 18446744073709551615 3 ptk 121 10 121 13 75 3 PTK 121 14 121 17 85 1 ; 121 17 121 18 18446744073709551615 12 eapol_status 122 3 122 15 8 6 status 122 16 122 22 86 1 ; 122 22 122 23 18446744073709551615 6 u_char 123 3 123 9 2 11 last_replay 123 10 123 21 87 1 [ 123 21 123 22 18446744073709551615 1 8 123 22 123 23 18446744073709551615 1 ] 123 23 123 24 18446744073709551615 1 ; 123 24 123 25 18446744073709551615 1 } 124 1 124 2 18446744073709551615 1 ; 124 2 124 3 18446744073709551615 6 u_char 126 1 126 7 2 14 ap_mac_address 126 8 126 22 88 1 [ 126 22 126 23 18446744073709551615 1 6 126 23 126 24 18446744073709551615 1 ] 126 24 126 25 18446744073709551615 1 ; 126 25 126 26 18446744073709551615 6 u_char 127 1 127 7 2 3 psk 127 8 127 11 89 1 [ 127 11 127 12 18446744073709551615 2 32 127 12 127 14 18446744073709551615 1 ] 127 14 127 15 18446744073709551615 1 ; 127 15 127 16 18446744073709551615 6 u_char 128 1 128 7 2 1 * 128 8 128 9 18446744073709551615 4 ssid 128 9 128 13 90 1 ; 128 13 128 14 18446744073709551615 5 map_t 129 1 129 6 91 1 * 129 7 129 8 18446744073709551615 3 map 129 8 129 11 92 1 ; 129 11 129 12 18446744073709551615 6 struct 130 1 130 7 18446744073709551615 3 ptk 130 8 130 11 75 1 * 130 12 130 13 18446744073709551615 4 PTK0 130 13 130 17 93 1 ; 130 17 130 18 18446744073709551615 4 FILE 131 1 131 5 94 1 * 131 6 131 7 18446744073709551615 2 fd 131 7 131 9 95 1 ; 131 9 131 10 18446744073709551615 13 pcap_dumper_t 132 1 132 14 96 1 * 132 15 132 16 18446744073709551615 8 dumpfile 132 16 132 24 97 1 ; 132 24 132 25 18446744073709551615 4 long 133 1 133 5 18446744073709551615 22 decrypted_packet_count 133 6 133 28 98 1 , 133 28 133 29 18446744073709551615 22 encrypted_packet_count 133 30 133 52 99 1 ; 133 52 133 53 18446744073709551615 6 u_char 136 1 136 7 2 14 process_beacon 136 8 136 22 100 1 ( 136 22 136 23 100 5 const 136 23 136 28 18446744073709551615 6 struct 136 29 136 35 18446744073709551615 11 pcap_pkthdr 136 36 136 47 101 1 * 136 48 136 49 18446744073709551615 1 , 136 49 136 50 100 5 const 136 51 136 56 18446744073709551615 6 u_char 136 57 136 63 2 1 * 136 64 136 65 18446744073709551615 1 ) 136 65 136 66 100 1 ; 136 66 136 67 18446744073709551615 6 u_char 137 1 137 7 2 14 process_packet 137 8 137 22 102 1 ( 137 22 137 23 102 5 const 137 23 137 28 18446744073709551615 6 struct 137 29 137 35 18446744073709551615 11 pcap_pkthdr 137 36 137 47 101 1 * 137 48 137 49 18446744073709551615 1 , 137 49 137 50 102 5 const 137 51 137 56 18446744073709551615 6 u_char 137 57 137 63 2 1 * 137 64 137 65 18446744073709551615 1 ) 137 65 137 66 102 1 ; 137 66 137 67 18446744073709551615 6 u_char 138 1 138 7 2 14 packet_decrypt 138 8 138 22 103 1 ( 138 22 138 23 103 5 const 138 23 138 28 18446744073709551615 6 struct 138 29 138 35 18446744073709551615 11 pcap_pkthdr 138 36 138 47 101 1 * 138 48 138 49 18446744073709551615 1 , 138 49 138 50 103 5 const 138 51 138 56 18446744073709551615 6 u_char 138 57 138 63 2 1 * 138 64 138 65 18446744073709551615 1 , 138 65 138 66 103 6 struct 138 67 138 73 18446744073709551615 10 eapol_info 138 74 138 84 81 1 * 138 85 138 86 18446744073709551615 1 ) 138 86 138 87 103 1 ; 138 87 138 88 18446744073709551615 4 char 139 1 139 5 18446744073709551615 1 * 139 6 139 7 104 12 mac_toString 139 7 139 19 104 1 ( 139 19 139 20 104 6 u_char 139 20 139 26 2 1 * 139 27 139 28 18446744073709551615 1 ) 139 28 139 29 104 1 ; 139 29 139 30 18446744073709551615 6 u_char 140 1 140 7 2 1 * 140 8 140 9 105 6 PRF512 140 9 140 15 105 1 ( 140 15 140 16 105 6 u_char 140 16 140 22 2 1 * 140 23 140 24 18446744073709551615 1 , 140 24 140 25 105 6 u_char 140 26 140 32 2 1 * 140 33 140 34 18446744073709551615 1 , 140 34 140 35 105 6 size_t 140 36 140 42 106 1 , 140 42 140 43 105 6 u_char 140 44 140 50 2 1 * 140 51 140 52 18446744073709551615 1 , 140 52 140 53 105 6 u_char 140 54 140 60 2 1 * 140 61 140 62 18446744073709551615 1 , 140 62 140 63 105 6 u_char 140 64 140 70 2 1 * 140 71 140 72 18446744073709551615 1 , 140 72 140 73 105 6 u_char 140 74 140 80 2 1 * 140 81 140 82 18446744073709551615 1 ) 140 82 140 83 105 1 ; 140 83 140 84 18446744073709551615 6 u_char 141 1 141 7 2 1 * 141 8 141 9 107 15 hexstr_to_bytes 141 9 141 24 107 1 ( 141 24 141 25 107 6 u_char 141 25 141 31 2 1 * 141 32 141 33 18446744073709551615 1 ) 141 33 141 34 107 1 ; 141 34 141 35 18446744073709551615 6 static 142 1 142 7 18446744073709551615 6 inline 142 8 142 14 18446744073709551615 4 void 142 15 142 19 18446744073709551615 3 XOR 142 20 142 23 108 1 ( 142 23 142 24 108 8 unsigned 142 24 142 32 18446744073709551615 4 char 142 33 142 37 18446744073709551615 1 * 142 38 142 39 18446744073709551615 1 , 142 39 142 40 108 8 unsigned 142 41 142 49 18446744073709551615 4 char 142 50 142 54 18446744073709551615 1 * 142 55 142 56 18446744073709551615 1 , 142 56 142 57 108 3 int 142 58 142 61 18446744073709551615 3 len 142 62 142 65 109 1 ) 142 65 142 66 108 1 ; 142 66 142 67 18446744073709551615 4 void 143 1 143 5 18446744073709551615 14 dump_decrypted 143 6 143 20 110 1 ( 143 20 143 21 110 6 u_char 143 21 143 27 2 1 * 143 28 143 29 18446744073709551615 1 , 143 29 143 30 110 5 const 143 31 143 36 18446744073709551615 6 struct 143 37 143 43 18446744073709551615 11 pcap_pkthdr 143 44 143 55 101 1 * 143 56 143 57 18446744073709551615 1 , 143 57 143 58 110 5 const 143 59 143 64 18446744073709551615 6 u_char 143 65 143 71 2 1 * 143 72 143 73 18446744073709551615 1 ) 143 73 143 74 110 1 ; 143 74 143 75 18446744073709551615 3 int 145 1 145 4 18446744073709551615 4 main 145 5 145 9 111 1 ( 145 9 145 10 111 3 int 145 10 145 13 18446744073709551615 4 argc 145 14 145 18 112 1 , 145 18 145 19 111 4 char 145 20 145 24 18446744073709551615 1 * 145 25 145 26 18446744073709551615 4 argv 145 26 145 30 113 1 [ 145 30 145 31 18446744073709551615 1 ] 145 31 145 32 18446744073709551615 1 ) 145 32 145 33 111 1 { 145 34 145 35 18446744073709551615 3 map 147 3 147 6 92 1 = 147 7 147 8 18446744073709551615 11 hashmap_new 147 9 147 20 114 1 ( 147 20 147 21 114 1 ) 147 21 147 22 114 1 ; 147 22 147 23 18446744073709551615 65 // map will contain eapol_info struct, indexed by STA mac address 147 26 147 91 18446744073709551615 4 ssid 148 3 148 7 90 1 = 148 8 148 9 18446744073709551615 4 argv 148 10 148 14 113 1 [ 148 14 148 15 18446744073709551615 1 3 148 15 148 16 18446744073709551615 1 ] 148 16 148 17 18446744073709551615 1 ; 148 17 148 18 18446744073709551615 12 // WLAN SSID 148 26 148 38 18446744073709551615 6 u_char 149 3 149 9 2 1 * 149 10 149 11 18446744073709551615 3 pwd 149 11 149 14 115 1 = 149 15 149 16 18446744073709551615 4 argv 149 17 149 21 113 1 [ 149 21 149 22 18446744073709551615 1 4 149 22 149 23 18446744073709551615 1 ] 149 23 149 24 18446744073709551615 1 ; 149 24 149 25 18446744073709551615 16 // WLAN password 149 26 149 42 18446744073709551615 4 char 150 3 150 7 18446744073709551615 6 errbuf 150 8 150 14 116 1 [ 150 14 150 15 18446744073709551615 16 PCAP_ERRBUF_SIZE 150 15 150 31 116 1 ] 150 31 150 32 18446744073709551615 1 ; 150 32 150 33 18446744073709551615 4 char 151 3 151 7 18446744073709551615 13 filter_beacon 151 8 151 21 117 1 [ 151 21 151 22 18446744073709551615 1 ] 151 22 151 23 18446744073709551615 1 = 151 24 151 25 18446744073709551615 30 "wlan type mgt subtype beacon" 151 26 151 56 18446744073709551615 1 ; 151 56 151 57 18446744073709551615 31 // capture only beacon messages 151 72 151 103 18446744073709551615 4 char 152 3 152 7 18446744073709551615 25 filter_eapol_on_ssid_mask 152 8 152 33 118 1 [ 152 33 152 34 18446744073709551615 1 ] 152 34 152 35 18446744073709551615 1 = 152 36 152 37 18446744073709551615 32 "wlan addr1 %s or wlan addr2 %s" 152 38 152 70 18446744073709551615 1 ; 152 70 152 71 18446744073709551615 63 // once found the address of AP, capture only packet from/to AP 152 72 152 135 18446744073709551615 4 char 153 3 153 7 18446744073709551615 1 * 153 8 153 9 18446744073709551615 20 filter_eapol_on_ssid 153 9 153 29 119 1 ; 153 29 153 30 18446744073709551615 6 struct 154 3 154 9 18446744073709551615 11 bpf_program 154 10 154 21 120 2 fp 154 22 154 24 121 1 ; 154 24 154 25 18446744073709551615 6 pcap_t 155 3 155 9 122 1 * 155 10 155 11 18446744073709551615 6 handle 155 11 155 17 123 1 ; 155 17 155 18 18446744073709551615 6 struct 156 3 156 9 18446744073709551615 11 pcap_pkthdr 156 10 156 21 101 1 * 156 22 156 23 18446744073709551615 6 header 156 23 156 29 124 1 ; 156 29 156 30 18446744073709551615 5 const 157 3 157 8 18446744073709551615 6 u_char 157 9 157 15 2 1 * 157 16 157 17 18446744073709551615 6 packet 157 17 157 23 125 1 ; 157 23 157 24 18446744073709551615 4 char 158 3 158 7 18446744073709551615 18 ap_mac_address_str 158 8 158 26 126 1 [ 158 26 158 27 18446744073709551615 1 2 158 27 158 28 18446744073709551615 1 * 158 29 158 30 18446744073709551615 12 MAC_ADDR_LEN 158 31 158 43 18446744073709551615 1 ] 158 43 158 44 18446744073709551615 1 ; 158 44 158 45 18446744073709551615 60 // String representation of MAC address as xx:xx:xx:xx:xx:xx 158 46 158 106 18446744073709551615 18 ap_mac_address_str 159 3 159 21 126 1 [ 159 21 159 22 18446744073709551615 1 2 159 22 159 23 18446744073709551615 1 * 159 24 159 25 18446744073709551615 12 MAC_ADDR_LEN 159 26 159 38 18446744073709551615 1 - 159 39 159 40 18446744073709551615 1 1 159 41 159 42 18446744073709551615 1 ] 159 42 159 43 18446744073709551615 1 = 159 44 159 45 18446744073709551615 4 '\0' 159 46 159 50 18446744073709551615 1 ; 159 50 159 51 18446744073709551615 4 long 160 3 160 7 18446744073709551615 12 packet_count 160 8 160 20 127 1 = 160 21 160 22 18446744073709551615 1 0 160 23 160 24 18446744073709551615 1 ; 160 24 160 25 18446744073709551615 20 fastpbkdf2_hmac_sha1 162 3 162 23 128 1 ( 162 23 162 24 128 3 pwd 162 24 162 27 115 1 , 162 27 162 28 128 6 strlen 162 29 162 35 129 1 ( 162 35 162 36 129 3 pwd 162 36 162 39 115 1 ) 162 39 162 40 129 1 , 162 40 162 41 128 4 ssid 162 42 162 46 90 1 , 162 46 162 47 128 6 strlen 162 48 162 54 129 1 ( 162 54 162 55 129 4 ssid 162 55 162 59 90 1 ) 162 59 162 60 129 1 , 162 60 162 61 128 4 4096 162 62 162 66 18446744073709551615 1 , 162 66 162 67 128 3 psk 162 68 162 71 89 1 , 162 71 162 72 128 2 32 162 73 162 75 18446744073709551615 1 ) 162 75 162 76 128 1 ; 162 76 162 77 18446744073709551615 47 // compute PSK from PWD, in WPA2-PSK PSK == PMS 162 78 162 125 18446744073709551615 6 printf 163 3 163 9 130 1 ( 163 9 163 10 130 10 "PMK is: " 163 10 163 20 18446744073709551615 1 ) 163 20 163 21 130 1 ; 163 21 163 22 18446744073709551615 3 for 164 3 164 6 18446744073709551615 1 ( 164 6 164 7 18446744073709551615 3 int 164 7 164 10 18446744073709551615 1 i 164 11 164 12 131 1 = 164 13 164 14 18446744073709551615 1 0 164 15 164 16 18446744073709551615 1 ; 164 16 164 17 18446744073709551615 1 i 164 18 164 19 131 1 < 164 20 164 21 18446744073709551615 2 32 164 22 164 24 18446744073709551615 1 ; 164 24 164 25 18446744073709551615 1 i 164 26 164 27 131 2 ++ 164 27 164 29 18446744073709551615 1 ) 164 29 164 30 18446744073709551615 1 { 164 30 164 31 18446744073709551615 6 printf 165 5 165 11 130 1 ( 165 11 165 12 130 6 "%02x" 165 12 165 18 18446744073709551615 1 , 165 18 165 19 130 3 psk 165 20 165 23 89 1 [ 165 23 165 24 18446744073709551615 1 i 165 24 165 25 131 1 ] 165 25 165 26 18446744073709551615 1 ) 165 26 165 27 130 1 ; 165 27 165 28 18446744073709551615 1 } 166 3 166 4 18446744073709551615 6 printf 167 3 167 9 130 1 ( 167 9 167 10 130 6 "\n\n" 167 10 167 16 18446744073709551615 1 ) 167 16 167 17 130 1 ; 167 17 167 18 18446744073709551615 61 // open the file of the capture and an handle for its content 168 3 168 64 18446744073709551615 6 handle 169 3 169 9 123 1 = 169 10 169 11 18446744073709551615 17 pcap_open_offline 169 12 169 29 132 1 ( 169 29 169 30 132 4 argv 169 30 169 34 113 1 [ 169 34 169 35 18446744073709551615 1 1 169 35 169 36 18446744073709551615 1 ] 169 36 169 37 18446744073709551615 1 , 169 37 169 38 132 6 errbuf 169 39 169 45 116 1 ) 169 45 169 46 132 1 ; 169 46 169 47 18446744073709551615 2 if 170 3 170 5 18446744073709551615 1 ( 170 5 170 6 18446744073709551615 6 handle 170 6 170 12 123 2 == 170 13 170 15 18446744073709551615 4 NULL 170 16 170 20 18446744073709551615 1 ) 170 20 170 21 18446744073709551615 1 { 170 22 170 23 18446744073709551615 7 fprintf 171 5 171 12 133 1 ( 171 12 171 13 133 6 stderr 171 13 171 19 133 1 , 171 19 171 20 133 29 "Couldn't open file %s: %s\n" 171 21 171 50 18446744073709551615 1 , 171 50 171 51 133 4 argv 171 52 171 56 113 1 [ 171 56 171 57 18446744073709551615 1 1 171 57 171 58 18446744073709551615 1 ] 171 58 171 59 18446744073709551615 1 , 171 59 171 60 133 6 errbuf 171 61 171 67 116 1 ) 171 67 171 68 133 1 ; 171 68 171 69 18446744073709551615 6 return 172 5 172 11 18446744073709551615 1 ( 172 12 172 13 18446744073709551615 1 2 172 13 172 14 18446744073709551615 1 ) 172 14 172 15 18446744073709551615 1 ; 172 15 172 16 18446744073709551615 1 } 173 3 173 4 18446744073709551615 17 // open a file in 175 3 175 20 18446744073709551615 2 if 176 3 176 5 18446744073709551615 1 ( 176 5 176 6 18446744073709551615 1 ( 176 6 176 7 18446744073709551615 2 fd 176 7 176 9 95 1 = 176 10 176 11 18446744073709551615 5 fopen 176 12 176 17 134 1 ( 176 17 176 18 134 4 argv 176 18 176 22 113 1 [ 176 22 176 23 18446744073709551615 1 2 176 23 176 24 18446744073709551615 1 ] 176 24 176 25 18446744073709551615 1 , 176 25 176 26 134 3 "w" 176 27 176 30 18446744073709551615 1 ) 176 30 176 31 134 1 ) 176 31 176 32 18446744073709551615 2 != 176 33 176 35 18446744073709551615 4 NULL 176 36 176 40 18446744073709551615 1 ) 176 40 176 41 18446744073709551615 1 { 176 42 176 43 18446744073709551615 8 dumpfile 177 5 177 13 97 1 = 177 14 177 15 18446744073709551615 15 pcap_dump_fopen 177 16 177 31 135 1 ( 177 31 177 32 135 6 handle 177 32 177 38 123 1 , 177 38 177 39 135 2 fd 177 40 177 42 95 1 ) 177 42 177 43 135 1 ; 177 43 177 44 18446744073709551615 1 } 178 3 178 4 18446744073709551615 4 else 179 3 179 7 18446744073709551615 1 { 179 8 179 9 18446744073709551615 7 fprintf 180 5 180 12 133 1 ( 180 12 180 13 133 6 stderr 180 13 180 19 133 1 , 180 19 180 20 133 47 "Couldn't open destination file. Exit program." 180 21 180 68 18446744073709551615 1 ) 180 68 180 69 133 1 ; 180 69 180 70 18446744073709551615 6 return 181 5 181 11 18446744073709551615 1 - 181 12 181 13 18446744073709551615 1 1 181 13 181 14 18446744073709551615 1 ; 181 14 181 15 18446744073709551615 1 } 182 3 182 4 18446744073709551615 2 if 184 3 184 5 18446744073709551615 1 ( 184 5 184 6 18446744073709551615 12 pcap_compile 184 6 184 18 136 1 ( 184 18 184 19 136 6 handle 184 19 184 25 123 1 , 184 25 184 26 136 1 & 184 27 184 28 18446744073709551615 2 fp 184 28 184 30 121 1 , 184 30 184 31 136 13 filter_beacon 184 32 184 45 117 1 , 184 45 184 46 136 1 0 184 47 184 48 18446744073709551615 1 , 184 48 184 49 136 1 0 184 50 184 51 18446744073709551615 1 ) 184 51 184 52 136 2 == 184 53 184 55 18446744073709551615 1 - 184 56 184 57 18446744073709551615 1 1 184 57 184 58 18446744073709551615 1 ) 184 58 184 59 18446744073709551615 1 { 184 60 184 61 18446744073709551615 7 fprintf 185 5 185 12 133 1 ( 185 12 185 13 133 6 stderr 185 13 185 19 133 1 , 185 19 185 20 133 32 "Couldn't parse filter %s: %s\n" 185 21 185 53 18446744073709551615 1 , 185 53 185 54 133 13 filter_beacon 185 55 185 68 117 1 , 185 68 185 69 133 11 pcap_geterr 185 70 185 81 137 1 ( 185 81 185 82 137 6 handle 185 82 185 88 123 1 ) 185 88 185 89 137 1 ) 185 89 185 90 133 1 ; 185 90 185 91 18446744073709551615 6 return 186 5 186 11 18446744073709551615 1 ( 186 12 186 13 18446744073709551615 1 2 186 13 186 14 18446744073709551615 1 ) 186 14 186 15 18446744073709551615 1 ; 186 15 186 16 18446744073709551615 1 } 187 3 187 4 18446744073709551615 2 if 189 3 189 5 18446744073709551615 1 ( 189 5 189 6 18446744073709551615 14 pcap_setfilter 189 6 189 20 138 1 ( 189 20 189 21 138 6 handle 189 21 189 27 123 1 , 189 27 189 28 138 1 & 189 29 189 30 18446744073709551615 2 fp 189 30 189 32 121 1 ) 189 32 189 33 138 2 == 189 34 189 36 18446744073709551615 1 - 189 37 189 38 18446744073709551615 1 1 189 38 189 39 18446744073709551615 1 ) 189 39 189 40 18446744073709551615 1 { 189 41 189 42 18446744073709551615 7 fprintf 190 5 190 12 133 1 ( 190 12 190 13 133 6 stderr 190 13 190 19 133 1 , 190 19 190 20 133 34 "Couldn't install filter %s: %s\n" 190 21 190 55 18446744073709551615 1 , 190 55 190 56 133 13 filter_beacon 190 57 190 70 117 1 , 190 70 190 71 133 11 pcap_geterr 190 72 190 83 137 1 ( 190 83 190 84 137 6 handle 190 84 190 90 123 1 ) 190 90 190 91 137 1 ) 190 91 190 92 133 1 ; 190 92 190 93 18446744073709551615 6 return 191 5 191 11 18446744073709551615 1 ( 191 12 191 13 18446744073709551615 1 2 191 13 191 14 18446744073709551615 1 ) 191 14 191 15 18446744073709551615 1 ; 191 15 191 16 18446744073709551615 1 } 192 3 192 4 18446744073709551615 121 // read the traffic file packet by packet looking for a beacon file of the AP broadcasting the SSID specified by the user 194 3 194 124 18446744073709551615 71 // stop when reach EOF or find the beacon (and thus the AP MAC address) 195 3 195 74 18446744073709551615 3 int 196 3 196 6 18446744073709551615 8 next_ret 196 7 196 15 139 1 = 196 16 196 17 18446744073709551615 1 0 196 18 196 19 18446744073709551615 1 ; 196 19 196 20 18446744073709551615 5 while 197 3 197 8 18446744073709551615 1 ( 197 8 197 9 18446744073709551615 1 ( 197 9 197 10 18446744073709551615 8 next_ret 197 10 197 18 139 1 = 197 19 197 20 18446744073709551615 12 pcap_next_ex 197 21 197 33 140 1 ( 197 33 197 34 140 6 handle 197 34 197 40 123 1 , 197 40 197 41 140 1 & 197 42 197 43 18446744073709551615 6 header 197 43 197 49 124 1 , 197 49 197 50 140 1 & 197 51 197 52 18446744073709551615 6 packet 197 52 197 58 125 1 ) 197 58 197 59 140 1 ) 197 59 197 60 18446744073709551615 2 >= 197 61 197 63 18446744073709551615 1 0 197 64 197 65 18446744073709551615 2 && 197 66 197 68 18446744073709551615 1 ! 197 69 197 70 18446744073709551615 14 process_beacon 197 70 197 84 100 1 ( 197 84 197 85 100 6 header 197 85 197 91 124 1 , 197 91 197 92 100 6 packet 197 93 197 99 125 1 ) 197 99 197 100 100 1 ) 197 100 197 101 18446744073709551615 1 ; 198 5 198 6 18446744073709551615 2 if 199 3 199 5 18446744073709551615 1 ( 199 5 199 6 18446744073709551615 8 next_ret 199 6 199 14 139 2 == 199 15 199 17 18446744073709551615 1 - 199 18 199 19 18446744073709551615 1 2 199 19 199 20 18446744073709551615 1 ) 199 20 199 21 18446744073709551615 1 { 199 22 199 23 18446744073709551615 7 fprintf 200 5 200 12 133 1 ( 200 12 200 13 133 6 stderr 200 13 200 19 133 1 , 200 19 200 20 133 65 "Couldn't find the requested SSID. Reached end of capture file\n" 200 21 200 86 18446744073709551615 1 ) 200 86 200 87 133 1 ; 200 87 200 88 18446744073709551615 6 return 201 5 201 11 18446744073709551615 1 ( 201 12 201 13 18446744073709551615 1 3 201 13 201 14 18446744073709551615 1 ) 201 14 201 15 18446744073709551615 1 ; 201 15 201 16 18446744073709551615 1 } 202 3 202 4 18446744073709551615 4 else 203 3 203 7 18446744073709551615 2 if 203 8 203 10 18446744073709551615 1 ( 203 10 203 11 18446744073709551615 8 next_ret 203 11 203 19 139 2 == 203 20 203 22 18446744073709551615 1 - 203 23 203 24 18446744073709551615 1 1 203 24 203 25 18446744073709551615 1 ) 203 25 203 26 18446744073709551615 1 { 203 27 203 28 18446744073709551615 7 fprintf 204 5 204 12 133 1 ( 204 12 204 13 133 6 stderr 204 13 204 19 133 1 , 204 19 204 20 133 24 "Couldn't read %s: %s\n" 204 21 204 45 18446744073709551615 1 , 204 45 204 46 133 4 argv 204 47 204 51 113 1 [ 204 51 204 52 18446744073709551615 1 1 204 52 204 53 18446744073709551615 1 ] 204 53 204 54 18446744073709551615 1 , 204 54 204 55 133 11 pcap_geterr 204 56 204 67 137 1 ( 204 67 204 68 137 6 handle 204 68 204 74 123 1 ) 204 74 204 75 137 1 ) 204 75 204 76 133 1 ; 204 76 204 77 18446744073709551615 6 return 205 5 205 11 18446744073709551615 1 ( 205 12 205 13 18446744073709551615 1 2 205 13 205 14 18446744073709551615 1 ) 205 14 205 15 18446744073709551615 1 ; 205 15 205 16 18446744073709551615 1 } 206 3 206 4 18446744073709551615 64 // build the filter used for capturing traffic on specified WLAN 208 3 208 67 18446744073709551615 8 asprintf 209 3 209 11 141 1 ( 209 11 209 12 141 1 & 209 12 209 13 18446744073709551615 20 filter_eapol_on_ssid 209 13 209 33 119 1 , 209 33 209 34 141 25 filter_eapol_on_ssid_mask 209 35 209 60 118 1 , 209 60 209 61 141 12 mac_toString 209 62 209 74 104 1 ( 209 74 209 75 104 14 ap_mac_address 209 75 209 89 88 1 ) 209 89 209 90 104 1 , 209 90 209 91 141 12 mac_toString 209 92 209 104 104 1 ( 209 104 209 105 104 14 ap_mac_address 209 105 209 119 88 1 ) 209 119 209 120 104 1 ) 209 120 209 121 141 1 ; 209 121 209 122 18446744073709551615 2 if 210 3 210 5 18446744073709551615 1 ( 210 5 210 6 18446744073709551615 12 pcap_compile 210 6 210 18 136 1 ( 210 18 210 19 136 6 handle 210 19 210 25 123 1 , 210 25 210 26 136 1 & 210 27 210 28 18446744073709551615 2 fp 210 28 210 30 121 1 , 210 30 210 31 136 20 filter_eapol_on_ssid 210 32 210 52 119 1 , 210 52 210 53 136 1 0 210 54 210 55 18446744073709551615 1 , 210 55 210 56 136 1 0 210 57 210 58 18446744073709551615 1 ) 210 58 210 59 136 2 == 210 60 210 62 18446744073709551615 1 - 210 63 210 64 18446744073709551615 1 1 210 64 210 65 18446744073709551615 1 ) 210 65 210 66 18446744073709551615 1 { 210 67 210 68 18446744073709551615 7 fprintf 211 5 211 12 133 1 ( 211 12 211 13 133 6 stderr 211 13 211 19 133 1 , 211 19 211 20 133 32 "Couldn't parse filter %s: %s\n" 211 21 211 53 18446744073709551615 1 , 211 53 211 54 133 20 filter_eapol_on_ssid 211 55 211 75 119 1 , 211 75 211 76 133 11 pcap_geterr 211 77 211 88 137 1 ( 211 88 211 89 137 6 handle 211 89 211 95 123 1 ) 211 95 211 96 137 1 ) 211 96 211 97 133 1 ; 211 97 211 98 18446744073709551615 6 return 212 5 212 11 18446744073709551615 1 ( 212 12 212 13 18446744073709551615 1 2 212 13 212 14 18446744073709551615 1 ) 212 14 212 15 18446744073709551615 1 ; 212 15 212 16 18446744073709551615 1 } 213 3 213 4 18446744073709551615 2 if 214 3 214 5 18446744073709551615 1 ( 214 5 214 6 18446744073709551615 14 pcap_setfilter 214 6 214 20 138 1 ( 214 20 214 21 138 6 handle 214 21 214 27 123 1 , 214 27 214 28 138 1 & 214 29 214 30 18446744073709551615 2 fp 214 30 214 32 121 1 ) 214 32 214 33 138 2 == 214 34 214 36 18446744073709551615 1 - 214 37 214 38 18446744073709551615 1 1 214 38 214 39 18446744073709551615 1 ) 214 39 214 40 18446744073709551615 1 { 214 41 214 42 18446744073709551615 7 fprintf 215 5 215 12 133 1 ( 215 12 215 13 133 6 stderr 215 13 215 19 133 1 , 215 19 215 20 133 34 "Couldn't install filter %s: %s\n" 215 21 215 55 18446744073709551615 1 , 215 55 215 56 133 20 filter_eapol_on_ssid 215 57 215 77 119 1 , 215 77 215 78 133 11 pcap_geterr 215 79 215 90 137 1 ( 215 90 215 91 137 6 handle 215 91 215 97 123 1 ) 215 97 215 98 137 1 ) 215 98 215 99 133 1 ; 215 99 215 100 18446744073709551615 6 return 216 5 216 11 18446744073709551615 1 ( 216 12 216 13 18446744073709551615 1 2 216 13 216 14 18446744073709551615 1 ) 216 14 216 15 18446744073709551615 1 ; 216 15 216 16 18446744073709551615 1 } 217 3 217 4 18446744073709551615 31 // start processing each packet 219 3 219 34 18446744073709551615 5 while 220 3 220 8 18446744073709551615 1 ( 220 8 220 9 18446744073709551615 1 ( 220 9 220 10 18446744073709551615 8 next_ret 220 10 220 18 139 1 = 220 19 220 20 18446744073709551615 12 pcap_next_ex 220 21 220 33 140 1 ( 220 33 220 34 140 6 handle 220 34 220 40 123 1 , 220 40 220 41 140 1 & 220 42 220 43 18446744073709551615 6 header 220 43 220 49 124 1 , 220 49 220 50 140 1 & 220 51 220 52 18446744073709551615 6 packet 220 52 220 58 125 1 ) 220 58 220 59 140 1 ) 220 59 220 60 18446744073709551615 2 >= 220 61 220 63 18446744073709551615 1 0 220 64 220 65 18446744073709551615 1 ) 220 65 220 66 18446744073709551615 1 { 220 67 220 68 18446744073709551615 14 process_packet 221 5 221 19 102 1 ( 221 19 221 20 102 6 header 221 20 221 26 124 1 , 221 26 221 27 102 6 packet 221 28 221 34 125 1 ) 221 34 221 35 102 1 ; 221 35 221 36 18446744073709551615 12 packet_count 222 5 222 17 127 2 ++ 222 17 222 19 18446744073709551615 1 ; 222 19 222 20 18446744073709551615 1 } 223 3 223 4 18446744073709551615 2 if 224 3 224 5 18446744073709551615 1 ( 224 5 224 6 18446744073709551615 8 next_ret 224 6 224 14 139 2 == 224 15 224 17 18446744073709551615 1 - 224 18 224 19 18446744073709551615 1 1 224 19 224 20 18446744073709551615 1 ) 224 20 224 21 18446744073709551615 1 { 224 22 224 23 18446744073709551615 7 fprintf 225 5 225 12 133 1 ( 225 12 225 13 133 6 stderr 225 13 225 19 133 1 , 225 19 225 20 133 24 "Couldn't read %s: %s\n" 225 21 225 45 18446744073709551615 1 , 225 45 225 46 133 4 argv 225 47 225 51 113 1 [ 225 51 225 52 18446744073709551615 1 1 225 52 225 53 18446744073709551615 1 ] 225 53 225 54 18446744073709551615 1 , 225 54 225 55 133 11 pcap_geterr 225 56 225 67 137 1 ( 225 67 225 68 137 6 handle 225 68 225 74 123 1 ) 225 74 225 75 137 1 ) 225 75 225 76 133 1 ; 225 76 225 77 18446744073709551615 6 return 226 5 226 11 18446744073709551615 1 ( 226 12 226 13 18446744073709551615 1 2 226 13 226 14 18446744073709551615 1 ) 226 14 226 15 18446744073709551615 1 ; 226 15 226 16 18446744073709551615 1 } 227 3 227 4 18446744073709551615 6 printf 229 3 229 9 130 1 ( 229 9 229 10 130 70 "\ndecrypted %ld/%ld encrypted packets out of %ld on the network %s\n" 229 10 229 80 18446744073709551615 1 , 229 80 229 81 130 22 decrypted_packet_count 229 82 229 104 98 1 , 229 104 229 105 130 22 encrypted_packet_count 229 106 229 128 99 1 , 229 128 229 129 130 12 packet_count 229 130 229 142 127 1 , 229 142 229 143 130 4 ssid 229 144 229 148 90 1 ) 229 148 229 149 130 1 ; 229 149 229 150 18446744073709551615 6 fclose 231 3 231 9 142 1 ( 231 9 231 10 142 2 fd 231 10 231 12 95 1 ) 231 12 231 13 142 1 ; 231 13 231 14 18446744073709551615 13 pcap_freecode 232 3 232 16 143 1 ( 232 16 232 17 143 1 & 232 17 232 18 18446744073709551615 2 fp 232 18 232 20 121 1 ) 232 20 232 21 143 1 ; 232 21 232 22 18446744073709551615 10 pcap_close 233 3 233 13 144 1 ( 233 13 233 14 144 6 handle 233 14 233 20 123 1 ) 233 20 233 21 144 1 ; 233 21 233 22 18446744073709551615 6 return 234 3 234 9 18446744073709551615 1 ( 234 10 234 11 18446744073709551615 1 0 234 11 234 12 18446744073709551615 1 ) 234 12 234 13 18446744073709551615 1 ; 234 13 234 14 18446744073709551615 1 } 235 1 235 2 18446744073709551615 6 u_char 237 1 237 7 2 14 process_beacon 237 8 237 22 100 1 ( 237 22 237 23 100 5 const 237 23 237 28 18446744073709551615 6 struct 237 29 237 35 18446744073709551615 11 pcap_pkthdr 237 36 237 47 101 1 * 237 48 237 49 18446744073709551615 6 header 237 49 237 55 145 1 , 237 55 237 56 100 5 const 237 57 237 62 18446744073709551615 6 u_char 237 63 237 69 2 1 * 237 70 237 71 18446744073709551615 6 buffer 237 71 237 77 146 1 ) 237 77 237 78 100 1 { 237 79 237 80 18446744073709551615 5 const 238 3 238 8 18446744073709551615 6 struct 238 9 238 15 18446744073709551615 19 sniff_802_11_beacon 238 16 238 35 17 1 * 238 36 238 37 18446744073709551615 10 hdr_802_11 238 37 238 47 147 1 ; 238 47 238 48 18446744073709551615 10 hdr_802_11 239 3 239 13 147 1 = 239 14 239 15 18446744073709551615 1 ( 239 16 239 17 18446744073709551615 6 struct 239 17 239 23 18446744073709551615 19 sniff_802_11_beacon 239 24 239 43 17 1 * 239 44 239 45 18446744073709551615 1 ) 239 45 239 46 18446744073709551615 1 ( 239 46 239 47 18446744073709551615 6 buffer 239 47 239 53 146 1 + 239 54 239 55 18446744073709551615 16 PRISM_HEADER_LEN 239 56 239 72 18446744073709551615 1 ) 239 72 239 73 18446744073709551615 1 ; 239 73 239 74 18446744073709551615 3 int 240 3 240 6 18446744073709551615 11 ssid_length 240 7 240 18 148 1 = 240 19 240 20 18446744073709551615 1 ( 240 21 240 22 18446744073709551615 3 int 240 22 240 25 18446744073709551615 1 ) 240 25 240 26 18446744073709551615 1 ( 240 26 240 27 18446744073709551615 6 buffer 240 27 240 33 146 1 + 240 34 240 35 18446744073709551615 16 PRISM_HEADER_LEN 240 36 240 52 18446744073709551615 1 + 240 53 240 54 18446744073709551615 6 sizeof 240 55 240 61 18446744073709551615 1 ( 240 61 240 62 18446744073709551615 6 struct 240 62 240 68 18446744073709551615 19 sniff_802_11_beacon 240 69 240 88 17 1 ) 240 88 240 89 18446744073709551615 1 + 240 90 240 91 18446744073709551615 2 13 240 92 240 94 18446744073709551615 1 ) 240 94 240 95 18446744073709551615 1 [ 240 95 240 96 18446744073709551615 1 0 240 96 240 97 18446744073709551615 1 ] 240 97 240 98 18446744073709551615 1 ; 240 98 240 99 18446744073709551615 6 u_char 241 3 241 9 2 11 beacon_ssid 241 10 241 21 149 1 [ 241 21 241 22 18446744073709551615 11 ssid_length 241 22 241 33 148 1 + 241 34 241 35 18446744073709551615 1 1 241 36 241 37 18446744073709551615 1 ] 241 37 241 38 18446744073709551615 1 ; 241 38 241 39 18446744073709551615 6 memcpy 242 3 242 9 150 1 ( 242 9 242 10 150 11 beacon_ssid 242 10 242 21 149 1 , 242 21 242 22 150 1 ( 242 23 242 24 18446744073709551615 6 buffer 242 24 242 30 146 1 + 242 31 242 32 18446744073709551615 16 PRISM_HEADER_LEN 242 33 242 49 18446744073709551615 1 + 242 50 242 51 18446744073709551615 6 sizeof 242 52 242 58 18446744073709551615 1 ( 242 58 242 59 18446744073709551615 6 struct 242 59 242 65 18446744073709551615 19 sniff_802_11_beacon 242 66 242 85 17 1 ) 242 85 242 86 18446744073709551615 1 + 242 87 242 88 18446744073709551615 2 14 242 89 242 91 18446744073709551615 1 ) 242 91 242 92 18446744073709551615 1 , 242 92 242 93 150 11 ssid_length 242 94 242 105 148 1 ) 242 105 242 106 150 1 ; 242 106 242 107 18446744073709551615 11 beacon_ssid 243 3 243 14 149 1 [ 243 14 243 15 18446744073709551615 11 ssid_length 243 15 243 26 148 1 ] 243 26 243 27 18446744073709551615 1 = 243 28 243 29 18446744073709551615 4 '\0' 243 30 243 34 18446744073709551615 1 ; 243 34 243 35 18446744073709551615 2 if 244 3 244 5 18446744073709551615 1 ( 244 5 244 6 18446744073709551615 6 strcmp 244 6 244 12 151 1 ( 244 12 244 13 151 11 beacon_ssid 244 13 244 24 149 1 , 244 24 244 25 151 4 ssid 244 26 244 30 90 1 ) 244 30 244 31 151 2 == 244 32 244 34 18446744073709551615 1 0 244 35 244 36 18446744073709551615 1 ) 244 36 244 37 18446744073709551615 1 { 244 38 244 39 18446744073709551615 6 memcpy 245 5 245 11 150 1 ( 245 11 245 12 150 14 ap_mac_address 245 12 245 26 88 1 , 245 26 245 27 150 10 hdr_802_11 245 28 245 38 147 2 -> 245 38 245 40 18446744073709551615 5 addr2 245 40 245 45 21 1 , 245 45 245 46 150 12 MAC_ADDR_LEN 245 47 245 59 150 1 ) 245 59 245 60 150 1 ; 245 60 245 61 18446744073709551615 6 return 246 5 246 11 18446744073709551615 1 ( 246 12 246 13 18446744073709551615 1 1 246 13 246 14 18446744073709551615 1 ) 246 14 246 15 18446744073709551615 1 ; 246 15 246 16 18446744073709551615 1 } 247 3 247 4 18446744073709551615 6 return 248 3 248 9 18446744073709551615 1 ( 248 10 248 11 18446744073709551615 1 0 248 11 248 12 18446744073709551615 1 ) 248 12 248 13 18446744073709551615 1 ; 248 13 248 14 18446744073709551615 1 } 249 1 249 2 18446744073709551615 6 u_char 251 1 251 7 2 14 process_packet 251 8 251 22 102 1 ( 251 22 251 23 102 5 const 251 23 251 28 18446744073709551615 6 struct 251 29 251 35 18446744073709551615 11 pcap_pkthdr 251 36 251 47 101 1 * 251 48 251 49 18446744073709551615 6 header 251 49 251 55 152 1 , 251 55 251 56 102 5 const 251 57 251 62 18446744073709551615 6 u_char 251 63 251 69 2 1 * 251 70 251 71 18446744073709551615 6 buffer 251 71 251 77 153 1 ) 251 77 251 78 102 1 { 251 79 251 80 18446744073709551615 5 const 252 3 252 8 18446744073709551615 6 struct 252 9 252 15 18446744073709551615 12 sniff_802_11 252 16 252 28 9 1 * 252 29 252 30 18446744073709551615 10 hdr_802_11 252 30 252 40 154 1 ; 252 40 252 41 18446744073709551615 10 hdr_802_11 253 3 253 13 154 1 = 253 14 253 15 18446744073709551615 1 ( 253 16 253 17 18446744073709551615 6 struct 253 17 253 23 18446744073709551615 12 sniff_802_11 253 24 253 36 9 1 * 253 37 253 38 18446744073709551615 1 ) 253 38 253 39 18446744073709551615 1 ( 253 39 253 40 18446744073709551615 6 buffer 253 40 253 46 153 1 + 253 47 253 48 18446744073709551615 16 PRISM_HEADER_LEN 253 49 253 65 18446744073709551615 1 ) 253 65 253 66 18446744073709551615 1 ; 253 66 253 67 18446744073709551615 3 int 254 3 254 6 18446744073709551615 8 qos_type 254 7 254 15 155 1 = 254 16 254 17 18446744073709551615 16 TAKE_N_BITS_FROM 254 18 254 34 155 1 ( 254 34 254 35 18446744073709551615 10 hdr_802_11 254 35 254 45 18446744073709551615 2 -> 254 45 254 47 18446744073709551615 13 frame_control 254 47 254 60 18446744073709551615 1 [ 254 60 254 61 18446744073709551615 1 0 254 61 254 62 18446744073709551615 1 ] 254 62 254 63 18446744073709551615 1 , 254 63 254 64 18446744073709551615 1 2 254 65 254 66 18446744073709551615 1 , 254 66 254 67 18446744073709551615 1 2 254 68 254 69 18446744073709551615 1 ) 254 69 254 70 18446744073709551615 1 ; 254 70 254 71 18446744073709551615 3 int 255 3 255 6 18446744073709551615 16 packet_direction 255 7 255 23 156 1 = 255 24 255 25 18446744073709551615 16 TAKE_N_BITS_FROM 255 26 255 42 156 1 ( 255 42 255 43 18446744073709551615 10 hdr_802_11 255 43 255 53 18446744073709551615 2 -> 255 53 255 55 18446744073709551615 13 frame_control 255 55 255 68 18446744073709551615 1 [ 255 68 255 69 18446744073709551615 1 1 255 69 255 70 18446744073709551615 1 ] 255 70 255 71 18446744073709551615 1 , 255 71 255 72 18446744073709551615 1 0 255 73 255 74 18446744073709551615 1 , 255 74 255 75 18446744073709551615 1 2 255 76 255 77 18446744073709551615 1 ) 255 77 255 78 18446744073709551615 1 ; 255 78 255 79 18446744073709551615 3 int 256 3 256 6 18446744073709551615 14 data_protected 256 7 256 21 157 1 = 256 22 256 23 18446744073709551615 16 TAKE_N_BITS_FROM 256 24 256 40 157 1 ( 256 40 256 41 18446744073709551615 10 hdr_802_11 256 41 256 51 18446744073709551615 2 -> 256 51 256 53 18446744073709551615 13 frame_control 256 53 256 66 18446744073709551615 1 [ 256 66 256 67 18446744073709551615 1 1 256 67 256 68 18446744073709551615 1 ] 256 68 256 69 18446744073709551615 1 , 256 69 256 70 18446744073709551615 1 6 256 71 256 72 18446744073709551615 1 , 256 72 256 73 18446744073709551615 1 1 256 74 256 75 18446744073709551615 1 ) 256 75 256 76 18446744073709551615 1 ; 256 76 256 77 18446744073709551615 6 struct 257 3 257 9 18446744073709551615 10 eapol_info 257 10 257 20 81 1 * 257 21 257 22 18446744073709551615 17 packet_eapol_info 257 22 257 39 158 1 = 257 40 257 41 18446744073709551615 4 NULL 257 42 257 46 158 1 ; 257 46 257 47 18446744073709551615 6 u_char 259 3 259 9 2 1 * 259 10 259 11 18446744073709551615 15 sta_mac_address 259 11 259 26 159 1 ; 259 26 259 27 18446744073709551615 2 if 261 3 261 5 18446744073709551615 1 ( 261 5 261 6 18446744073709551615 16 packet_direction 261 6 261 22 156 2 == 261 23 261 25 18446744073709551615 1 2 261 26 261 27 18446744073709551615 1 ) 261 27 261 28 18446744073709551615 1 { 261 29 261 30 18446744073709551615 10 // from DS 261 31 261 41 18446744073709551615 15 sta_mac_address 262 5 262 20 159 1 = 262 21 262 22 18446744073709551615 10 hdr_802_11 262 23 262 33 154 2 -> 262 33 262 35 18446744073709551615 5 addr1 262 35 262 40 12 1 ; 262 40 262 41 18446744073709551615 1 } 263 3 263 4 18446744073709551615 4 else 264 3 264 7 18446744073709551615 2 if 264 8 264 10 18446744073709551615 1 ( 264 10 264 11 18446744073709551615 16 packet_direction 264 11 264 27 156 2 == 264 28 264 30 18446744073709551615 1 1 264 31 264 32 18446744073709551615 1 ) 264 32 264 33 18446744073709551615 1 { 264 34 264 35 18446744073709551615 8 // to DS 264 36 264 44 18446744073709551615 15 sta_mac_address 265 5 265 20 159 1 = 265 21 265 22 18446744073709551615 10 hdr_802_11 265 23 265 33 154 2 -> 265 33 265 35 18446744073709551615 5 addr2 265 35 265 40 13 1 ; 265 40 265 41 18446744073709551615 1 } 266 3 266 4 18446744073709551615 2 if 267 3 267 5 18446744073709551615 1 ( 267 5 267 6 18446744073709551615 8 qos_type 267 6 267 14 155 2 == 267 15 267 17 18446744073709551615 1 2 267 18 267 19 18446744073709551615 1 ) 267 19 267 20 18446744073709551615 1 { 267 21 267 22 18446744073709551615 2 if 268 5 268 7 18446744073709551615 1 ( 268 7 268 8 18446744073709551615 14 data_protected 268 8 268 22 157 1 ) 268 22 268 23 18446744073709551615 1 { 268 24 268 25 18446744073709551615 22 encrypted_packet_count 269 7 269 29 99 2 ++ 269 29 269 31 18446744073709551615 1 ; 269 31 269 32 18446744073709551615 96 // if we already stored a successful EAPOL handshake for that STA and we were able to decrypt it 270 7 270 103 18446744073709551615 2 if 271 7 271 9 18446744073709551615 1 ( 271 9 271 10 18446744073709551615 11 hashmap_get 271 10 271 21 160 1 ( 271 21 271 22 160 3 map 271 22 271 25 92 1 , 271 25 271 26 160 12 mac_toString 271 27 271 39 104 1 ( 271 39 271 40 104 15 sta_mac_address 271 40 271 55 159 1 ) 271 55 271 56 104 1 , 271 56 271 57 160 1 ( 271 58 271 59 18446744073709551615 4 void 271 59 271 63 18446744073709551615 1 * 271 64 271 65 18446744073709551615 1 * 271 65 271 66 18446744073709551615 1 ) 271 66 271 67 18446744073709551615 1 & 271 67 271 68 18446744073709551615 17 packet_eapol_info 271 68 271 85 158 1 ) 271 85 271 86 160 2 == 271 87 271 89 18446744073709551615 6 MAP_OK 271 90 271 96 18446744073709551615 1 ) 271 96 271 97 18446744073709551615 1 { 271 98 271 99 18446744073709551615 2 if 272 9 272 11 18446744073709551615 1 ( 272 11 272 12 18446744073709551615 17 packet_eapol_info 272 12 272 29 158 2 -> 272 29 272 31 18446744073709551615 6 status 272 31 272 37 86 2 == 272 38 272 40 18446744073709551615 7 SUCCESS 272 41 272 48 7 2 && 272 49 272 51 18446744073709551615 14 packet_decrypt 272 52 272 66 103 1 ( 272 66 272 67 103 6 header 272 67 272 73 152 1 , 272 73 272 74 103 6 buffer 272 75 272 81 153 1 , 272 81 272 82 103 17 packet_eapol_info 272 83 272 100 158 1 ) 272 100 272 101 103 1 ) 272 101 272 102 18446744073709551615 1 { 272 103 272 104 18446744073709551615 38 // dump the decrypted packet in a file 273 11 273 49 18446744073709551615 6 u_char 274 11 274 17 2 11 new_segment 274 18 274 29 161 1 = 274 30 274 31 18446744073709551615 10 hdr_802_11 274 32 274 42 154 2 -> 274 42 274 44 18446744073709551615 13 frame_control 274 44 274 57 10 1 [ 274 57 274 58 18446744073709551615 1 1 274 58 274 59 18446744073709551615 1 ] 274 59 274 60 18446744073709551615 1 ; 274 60 274 61 18446744073709551615 11 new_segment 275 11 275 22 161 2 &= 275 23 275 25 18446744073709551615 1 ~ 275 26 275 27 18446744073709551615 1 ( 275 27 275 28 18446744073709551615 3 1UL 275 28 275 31 18446744073709551615 2 << 275 32 275 34 18446744073709551615 1 6 275 35 275 36 18446744073709551615 1 ) 275 36 275 37 18446744073709551615 1 ; 275 37 275 38 18446744073709551615 6 memcpy 276 11 276 17 150 1 ( 276 17 276 18 150 1 & 276 18 276 19 18446744073709551615 10 hdr_802_11 276 19 276 29 154 2 -> 276 29 276 31 18446744073709551615 13 frame_control 276 31 276 44 10 1 [ 276 44 276 45 18446744073709551615 1 1 276 45 276 46 18446744073709551615 1 ] 276 46 276 47 18446744073709551615 1 , 276 47 276 48 150 1 & 276 49 276 50 18446744073709551615 11 new_segment 276 50 276 61 161 1 , 276 61 276 62 150 3 1UL 276 63 276 66 18446744073709551615 1 ) 276 66 276 67 150 1 ; 276 67 276 68 18446744073709551615 14 dump_decrypted 277 11 277 25 110 1 ( 277 25 277 26 110 1 ( 277 26 277 27 18446744073709551615 6 u_char 277 27 277 33 2 1 * 277 34 277 35 18446744073709551615 1 ) 277 35 277 36 18446744073709551615 8 dumpfile 277 36 277 44 97 1 , 277 44 277 45 110 6 header 277 46 277 52 152 1 , 277 52 277 53 110 6 buffer 277 54 277 60 153 1 ) 277 60 277 61 110 1 ; 277 61 277 62 18446744073709551615 22 decrypted_packet_count 278 11 278 33 98 2 ++ 278 33 278 35 18446744073709551615 1 ; 278 35 278 36 18446744073709551615 49 // print some useful info if the packet is TCP/IP 279 11 279 60 18446744073709551615 35 // const struct sniff_LLC *hdr_llc; 280 11 280 46 18446744073709551615 95 // hdr_llc = (struct sniff_LLC *)(buffer + PRISM_HEADER_LEN + sizeof(struct sniff_802_11) + 8); 281 11 281 106 18446744073709551615 30 // if(hdr_llc->dsap == 0xaa) { 282 11 282 41 18446744073709551615 39 //   const struct sniff_SNAP *hdr_snap; 283 11 283 50 18446744073709551615 126 //   hdr_snap = (struct sniff_SNAP *)(buffer + PRISM_HEADER_LEN + sizeof(struct sniff_802_11) + 8 + sizeof(struct sniff_LLC)); 284 11 284 137 18446744073709551615 40 //   u_char ether_IPv4[] = {0x08, 0x00}; 285 11 285 51 18446744073709551615 53 //   if(memcmp(hdr_snap->type, ether_IPv4, 2) == 0) { 286 11 286 64 18446744073709551615 37 //     const struct sniff_IP *hdr_ip; 287 11 287 48 18446744073709551615 152 //     hdr_ip = (struct sniff_IP *)(buffer + PRISM_HEADER_LEN + sizeof(struct sniff_802_11) + 8 + sizeof(struct sniff_LLC) + sizeof(struct sniff_SNAP)); 288 11 288 163 18446744073709551615 37 //     if(hdr_ip->protocol == 0x06) { 289 11 289 48 18446744073709551615 41 //       const struct sniff_TCP *hdr_tcp; 290 11 290 52 18446744073709551615 188 //       hdr_tcp = (struct sniff_TCP *)(buffer + PRISM_HEADER_LEN + sizeof(struct sniff_802_11) + 8 + sizeof(struct sniff_LLC) + sizeof(struct sniff_SNAP) + ((int)hdr_ip->ip_hl) * 32 / 8); 291 11 291 199 18446744073709551615 8 //     } 292 11 292 19 18446744073709551615 6 //   } 293 11 293 17 18446744073709551615 4 // } 294 11 294 15 18446744073709551615 1 } 295 9 295 10 18446744073709551615 4 else 296 9 296 13 18446744073709551615 1 { 296 14 296 15 18446744073709551615 10 // Discard 297 11 297 21 18446744073709551615 1 } 298 9 298 10 18446744073709551615 1 } 299 7 299 8 18446744073709551615 4 else 300 7 300 11 18446744073709551615 1 { 300 12 300 13 18446744073709551615 10 // Discard 301 9 301 19 18446744073709551615 1 } 302 7 302 8 18446744073709551615 1 } 303 5 303 6 18446744073709551615 4 else 304 5 304 9 18446744073709551615 1 { 304 10 304 11 18446744073709551615 22 // data is unprotected 305 7 305 29 18446744073709551615 5 const 306 7 306 12 18446744073709551615 6 struct 306 13 306 19 18446744073709551615 9 sniff_LLC 306 20 306 29 24 1 * 306 30 306 31 18446744073709551615 7 hdr_llc 306 31 306 38 162 1 ; 306 38 306 39 18446744073709551615 7 hdr_llc 307 7 307 14 162 1 = 307 15 307 16 18446744073709551615 1 ( 307 17 307 18 18446744073709551615 6 struct 307 18 307 24 18446744073709551615 9 sniff_LLC 307 25 307 34 24 1 * 307 35 307 36 18446744073709551615 1 ) 307 36 307 37 18446744073709551615 1 ( 307 37 307 38 18446744073709551615 6 buffer 307 38 307 44 153 1 + 307 45 307 46 18446744073709551615 16 PRISM_HEADER_LEN 307 47 307 63 18446744073709551615 1 + 307 64 307 65 18446744073709551615 6 sizeof 307 66 307 72 18446744073709551615 1 ( 307 72 307 73 18446744073709551615 6 struct 307 73 307 79 18446744073709551615 12 sniff_802_11 307 80 307 92 9 1 ) 307 92 307 93 18446744073709551615 1 ) 307 93 307 94 18446744073709551615 1 ; 307 94 307 95 18446744073709551615 2 if 308 7 308 9 18446744073709551615 1 ( 308 9 308 10 18446744073709551615 7 hdr_llc 308 10 308 17 162 2 -> 308 17 308 19 18446744073709551615 4 dsap 308 19 308 23 25 2 == 308 24 308 26 18446744073709551615 4 0xaa 308 27 308 31 18446744073709551615 1 ) 308 31 308 32 18446744073709551615 1 { 308 33 308 34 18446744073709551615 5 const 309 9 309 14 18446744073709551615 6 struct 309 15 309 21 18446744073709551615 10 sniff_SNAP 309 22 309 32 28 1 * 309 33 309 34 18446744073709551615 8 hdr_snap 309 34 309 42 163 1 ; 309 42 309 43 18446744073709551615 8 hdr_snap 310 9 310 17 163 1 = 310 18 310 19 18446744073709551615 1 ( 310 20 310 21 18446744073709551615 6 struct 310 21 310 27 18446744073709551615 10 sniff_SNAP 310 28 310 38 28 1 * 310 39 310 40 18446744073709551615 1 ) 310 40 310 41 18446744073709551615 1 ( 310 41 310 42 18446744073709551615 6 buffer 310 42 310 48 153 1 + 310 49 310 50 18446744073709551615 16 PRISM_HEADER_LEN 310 51 310 67 18446744073709551615 1 + 310 68 310 69 18446744073709551615 6 sizeof 310 70 310 76 18446744073709551615 1 ( 310 76 310 77 18446744073709551615 6 struct 310 77 310 83 18446744073709551615 12 sniff_802_11 310 84 310 96 9 1 ) 310 96 310 97 18446744073709551615 1 + 310 98 310 99 18446744073709551615 6 sizeof 310 100 310 106 18446744073709551615 1 ( 310 106 310 107 18446744073709551615 6 struct 310 107 310 113 18446744073709551615 9 sniff_LLC 310 114 310 123 24 1 ) 310 123 310 124 18446744073709551615 1 ) 310 124 310 125 18446744073709551615 1 ; 310 125 310 126 18446744073709551615 6 u_char 311 9 311 15 2 11 ether_eapol 311 16 311 27 164 1 [ 311 27 311 28 18446744073709551615 1 ] 311 28 311 29 18446744073709551615 1 = 311 30 311 31 18446744073709551615 1 { 311 32 311 33 18446744073709551615 4 0x88 311 33 311 37 18446744073709551615 1 , 311 37 311 38 18446744073709551615 4 0x8e 311 39 311 43 18446744073709551615 1 } 311 43 311 44 18446744073709551615 1 ; 311 44 311 45 18446744073709551615 84 // if the packet is an EAPOL protocol message we are listening to an 4 way handshake 312 9 312 93 18446744073709551615 2 if 313 9 313 11 18446744073709551615 1 ( 313 11 313 12 18446744073709551615 6 memcmp 313 12 313 18 165 1 ( 313 18 313 19 165 8 hdr_snap 313 19 313 27 163 2 -> 313 27 313 29 18446744073709551615 4 type 313 29 313 33 30 1 , 313 33 313 34 165 11 ether_eapol 313 35 313 46 164 1 , 313 46 313 47 165 1 2 313 48 313 49 18446744073709551615 1 ) 313 49 313 50 165 2 == 313 51 313 53 18446744073709551615 1 0 313 54 313 55 18446744073709551615 1 ) 313 55 313 56 18446744073709551615 1 { 313 57 313 58 18446744073709551615 5 const 314 11 314 16 18446744073709551615 6 struct 314 17 314 23 18446744073709551615 17 sniff_802_1x_auth 314 24 314 41 31 1 * 314 42 314 43 18446744073709551615 10 hdr_802_1x 314 43 314 53 166 1 ; 314 53 314 54 18446744073709551615 10 hdr_802_1x 315 11 315 21 166 1 = 315 22 315 23 18446744073709551615 1 ( 315 24 315 25 18446744073709551615 6 struct 315 25 315 31 18446744073709551615 17 sniff_802_1x_auth 315 32 315 49 31 1 * 315 50 315 51 18446744073709551615 1 ) 315 51 315 52 18446744073709551615 1 ( 315 52 315 53 18446744073709551615 6 buffer 315 53 315 59 153 1 + 315 60 315 61 18446744073709551615 16 PRISM_HEADER_LEN 315 62 315 78 18446744073709551615 1 + 315 79 315 80 18446744073709551615 6 sizeof 315 81 315 87 18446744073709551615 1 ( 315 87 315 88 18446744073709551615 6 struct 315 88 315 94 18446744073709551615 12 sniff_802_11 315 95 315 107 9 1 ) 315 107 315 108 18446744073709551615 1 + 315 109 315 110 18446744073709551615 6 sizeof 315 111 315 117 18446744073709551615 1 ( 315 117 315 118 18446744073709551615 6 struct 315 118 315 124 18446744073709551615 9 sniff_LLC 315 125 315 134 24 1 ) 315 134 315 135 18446744073709551615 1 + 315 136 315 137 18446744073709551615 6 sizeof 315 138 315 144 18446744073709551615 1 ( 315 144 315 145 18446744073709551615 6 struct 315 145 315 151 18446744073709551615 10 sniff_SNAP 315 152 315 162 28 1 ) 315 162 315 163 18446744073709551615 1 ) 315 163 315 164 18446744073709551615 1 ; 315 164 315 165 18446744073709551615 3 int 316 11 316 14 18446744073709551615 20 get_from_hashmap_res 316 15 316 35 167 1 = 316 36 316 37 18446744073709551615 11 hashmap_get 316 38 316 49 160 1 ( 316 49 316 50 160 3 map 316 50 316 53 92 1 , 316 53 316 54 160 12 mac_toString 316 55 316 67 104 1 ( 316 67 316 68 104 15 sta_mac_address 316 68 316 83 159 1 ) 316 83 316 84 104 1 , 316 84 316 85 160 1 ( 316 86 316 87 18446744073709551615 4 void 316 87 316 91 18446744073709551615 1 * 316 92 316 93 18446744073709551615 1 * 316 93 316 94 18446744073709551615 1 ) 316 94 316 95 18446744073709551615 1 & 316 95 316 96 18446744073709551615 17 packet_eapol_info 316 96 316 113 158 1 ) 316 113 316 114 160 1 ; 316 114 316 115 18446744073709551615 158 // if we don't have info about WPA handshake for that STA and this message is the first one of the handshake, we start listening for the handshake to complete 317 11 317 169 18446744073709551615 2 if 318 11 318 13 18446744073709551615 1 ( 318 13 318 14 18446744073709551615 20 get_from_hashmap_res 318 14 318 34 167 2 == 318 35 318 37 18446744073709551615 11 MAP_MISSING 318 38 318 49 18446744073709551615 2 && 318 50 318 52 18446744073709551615 16 packet_direction 318 53 318 69 156 2 == 318 70 318 72 18446744073709551615 1 2 318 73 318 74 18446744073709551615 2 && 318 75 318 77 18446744073709551615 1 ( 318 78 318 79 18446744073709551615 16 TAKE_N_BITS_FROM 318 79 318 95 18446744073709551615 1 ( 318 95 318 96 18446744073709551615 10 hdr_802_1x 318 96 318 106 18446744073709551615 2 -> 318 106 318 108 18446744073709551615 15 key_information 318 108 318 123 18446744073709551615 1 [ 318 123 318 124 18446744073709551615 1 0 318 124 318 125 18446744073709551615 1 ] 318 125 318 126 18446744073709551615 1 , 318 126 318 127 18446744073709551615 1 0 318 128 318 129 18446744073709551615 1 , 318 129 318 130 18446744073709551615 1 1 318 131 318 132 18446744073709551615 1 ) 318 132 318 133 18446744073709551615 1 ) 318 133 318 134 18446744073709551615 2 == 318 135 318 137 18446744073709551615 1 0 318 138 318 139 18446744073709551615 1 ) 318 139 318 140 18446744073709551615 1 { 318 141 318 142 18446744073709551615 6 struct 319 13 319 19 18446744073709551615 10 eapol_info 319 20 319 30 81 1 * 319 31 319 32 18446744073709551615 21 new_packet_eapol_info 319 32 319 53 168 1 = 319 54 319 55 18446744073709551615 6 malloc 319 56 319 62 169 1 ( 319 62 319 63 169 6 sizeof 319 63 319 69 18446744073709551615 1 ( 319 69 319 70 18446744073709551615 6 struct 319 70 319 76 18446744073709551615 10 eapol_info 319 77 319 87 81 1 ) 319 87 319 88 18446744073709551615 1 ) 319 88 319 89 169 1 ; 319 89 319 90 18446744073709551615 11 hashmap_put 320 13 320 24 170 1 ( 320 24 320 25 170 3 map 320 25 320 28 92 1 , 320 28 320 29 170 12 mac_toString 320 30 320 42 104 1 ( 320 42 320 43 104 15 sta_mac_address 320 43 320 58 159 1 ) 320 58 320 59 104 1 , 320 59 320 60 170 21 new_packet_eapol_info 320 61 320 82 168 1 ) 320 82 320 83 170 1 ; 320 83 320 84 18446744073709551615 6 memcpy 321 13 321 19 150 1 ( 321 19 321 20 150 21 new_packet_eapol_info 321 20 321 41 168 2 -> 321 41 321 43 18446744073709551615 6 ANonce 321 43 321 49 83 1 , 321 49 321 50 150 10 hdr_802_1x 321 51 321 61 166 2 -> 321 61 321 63 18446744073709551615 13 wpa_key_nonce 321 63 321 76 39 1 , 321 76 321 77 150 2 32 321 78 321 80 18446744073709551615 1 ) 321 80 321 81 150 1 ; 321 81 321 82 18446744073709551615 6 memcpy 322 13 322 19 150 1 ( 322 19 322 20 150 21 new_packet_eapol_info 322 20 322 41 168 2 -> 322 41 322 43 18446744073709551615 11 last_replay 322 43 322 54 87 1 , 322 54 322 55 150 10 hdr_802_1x 322 56 322 66 166 2 -> 322 66 322 68 18446744073709551615 14 replay_counter 322 68 322 82 38 1 , 322 82 322 83 150 1 8 322 84 322 85 18446744073709551615 1 ) 322 85 322 86 150 1 ; 322 86 322 87 18446744073709551615 21 new_packet_eapol_info 323 13 323 34 168 2 -> 323 34 323 36 18446744073709551615 6 status 323 36 323 42 86 1 = 323 43 323 44 18446744073709551615 19 WAITING_EAPOL_KEY_2 323 45 323 64 4 1 ; 323 64 323 65 18446744073709551615 1 } 324 11 324 12 18446744073709551615 4 else 325 11 325 15 18446744073709551615 2 if 325 16 325 18 18446744073709551615 1 ( 325 18 325 19 18446744073709551615 20 get_from_hashmap_res 325 19 325 39 167 2 == 325 40 325 42 18446744073709551615 6 MAP_OK 325 43 325 49 18446744073709551615 1 ) 325 49 325 50 18446744073709551615 1 { 325 51 325 52 18446744073709551615 46 // if we're already listening for an handshake 325 53 325 99 18446744073709551615 12 eapol_status 326 13 326 25 8 14 current_status 326 26 326 40 171 1 = 326 41 326 42 18446744073709551615 17 packet_eapol_info 326 43 326 60 158 2 -> 326 60 326 62 18446744073709551615 6 status 326 62 326 68 86 1 ; 326 68 326 69 18446744073709551615 7 u_short 327 13 327 20 172 11 data_length 327 21 327 32 173 1 = 327 33 327 34 18446744073709551615 1 ( 327 35 327 36 18446744073709551615 1 ( 327 36 327 37 18446744073709551615 10 hdr_802_1x 327 37 327 47 166 2 -> 327 47 327 49 18446744073709551615 19 wpa_key_data_length 327 49 327 68 44 1 [ 327 68 327 69 18446744073709551615 1 0 327 69 327 70 18446744073709551615 1 ] 327 70 327 71 18446744073709551615 2 << 327 72 327 74 18446744073709551615 1 8 327 75 327 76 18446744073709551615 1 ) 327 76 327 77 18446744073709551615 1 + 327 78 327 79 18446744073709551615 1 ( 327 80 327 81 18446744073709551615 10 hdr_802_1x 327 81 327 91 166 2 -> 327 91 327 93 18446744073709551615 19 wpa_key_data_length 327 93 327 112 44 1 [ 327 112 327 113 18446744073709551615 1 1 327 113 327 114 18446744073709551615 1 ] 327 114 327 115 18446744073709551615 1 ) 327 115 327 116 18446744073709551615 1 ) 327 116 327 117 18446744073709551615 1 ; 327 117 327 118 18446744073709551615 2 if 328 13 328 15 18446744073709551615 1 ( 328 15 328 16 18446744073709551615 16 packet_direction 328 16 328 32 156 2 == 328 33 328 35 18446744073709551615 1 2 328 36 328 37 18446744073709551615 2 && 328 38 328 40 18446744073709551615 1 ( 328 41 328 42 18446744073709551615 16 TAKE_N_BITS_FROM 328 42 328 58 18446744073709551615 1 ( 328 58 328 59 18446744073709551615 10 hdr_802_1x 328 59 328 69 18446744073709551615 2 -> 328 69 328 71 18446744073709551615 15 key_information 328 71 328 86 18446744073709551615 1 [ 328 86 328 87 18446744073709551615 1 0 328 87 328 88 18446744073709551615 1 ] 328 88 328 89 18446744073709551615 1 , 328 89 328 90 18446744073709551615 1 0 328 91 328 92 18446744073709551615 1 , 328 92 328 93 18446744073709551615 1 1 328 94 328 95 18446744073709551615 1 ) 328 95 328 96 18446744073709551615 1 ) 328 96 328 97 18446744073709551615 2 == 328 98 328 100 18446744073709551615 1 0 328 101 328 102 18446744073709551615 1 ) 328 102 328 103 18446744073709551615 1 { 328 104 328 105 18446744073709551615 42 // the AP is demanding for a new handshake 328 106 328 148 18446744073709551615 76 // we remove previous informations and start listening for the new handshake 329 15 329 91 18446744073709551615 14 hashmap_remove 330 15 330 29 174 1 ( 330 29 330 30 174 3 map 330 30 330 33 92 1 , 330 33 330 34 174 12 mac_toString 330 35 330 47 104 1 ( 330 47 330 48 104 15 sta_mac_address 330 48 330 63 159 1 ) 330 63 330 64 104 1 ) 330 64 330 65 174 1 ; 330 65 330 66 18446744073709551615 6 struct 331 15 331 21 18446744073709551615 10 eapol_info 331 22 331 32 81 1 * 331 33 331 34 18446744073709551615 21 new_packet_eapol_info 331 34 331 55 175 1 = 331 56 331 57 18446744073709551615 6 malloc 331 58 331 64 169 1 ( 331 64 331 65 169 6 sizeof 331 65 331 71 18446744073709551615 1 ( 331 71 331 72 18446744073709551615 6 struct 331 72 331 78 18446744073709551615 10 eapol_info 331 79 331 89 81 1 ) 331 89 331 90 18446744073709551615 1 ) 331 90 331 91 169 1 ; 331 91 331 92 18446744073709551615 11 hashmap_put 332 15 332 26 170 1 ( 332 26 332 27 170 3 map 332 27 332 30 92 1 , 332 30 332 31 170 12 mac_toString 332 32 332 44 104 1 ( 332 44 332 45 104 15 sta_mac_address 332 45 332 60 159 1 ) 332 60 332 61 104 1 , 332 61 332 62 170 21 new_packet_eapol_info 332 63 332 84 175 1 ) 332 84 332 85 170 1 ; 332 85 332 86 18446744073709551615 6 memcpy 333 15 333 21 150 1 ( 333 21 333 22 150 21 new_packet_eapol_info 333 22 333 43 175 2 -> 333 43 333 45 18446744073709551615 6 ANonce 333 45 333 51 83 1 , 333 51 333 52 150 10 hdr_802_1x 333 53 333 63 166 2 -> 333 63 333 65 18446744073709551615 13 wpa_key_nonce 333 65 333 78 39 1 , 333 78 333 79 150 2 32 333 80 333 82 18446744073709551615 1 ) 333 82 333 83 150 1 ; 333 83 333 84 18446744073709551615 6 memcpy 334 15 334 21 150 1 ( 334 21 334 22 150 21 new_packet_eapol_info 334 22 334 43 175 2 -> 334 43 334 45 18446744073709551615 11 last_replay 334 45 334 56 87 1 , 334 56 334 57 150 10 hdr_802_1x 334 58 334 68 166 2 -> 334 68 334 70 18446744073709551615 14 replay_counter 334 70 334 84 38 1 , 334 84 334 85 150 1 8 334 86 334 87 18446744073709551615 1 ) 334 87 334 88 150 1 ; 334 88 334 89 18446744073709551615 21 new_packet_eapol_info 335 15 335 36 175 2 -> 335 36 335 38 18446744073709551615 6 status 335 38 335 44 86 1 = 335 45 335 46 18446744073709551615 19 WAITING_EAPOL_KEY_2 335 47 335 66 4 1 ; 335 66 335 67 18446744073709551615 1 } 336 13 336 14 18446744073709551615 74 // is the message is the second one of the 4WHS and we were waiting for it 337 13 337 87 18446744073709551615 2 if 338 13 338 15 18446744073709551615 1 ( 338 15 338 16 18446744073709551615 14 current_status 338 16 338 30 171 2 == 338 31 338 33 18446744073709551615 19 WAITING_EAPOL_KEY_2 338 34 338 53 4 2 && 338 54 338 56 18446744073709551615 16 packet_direction 338 57 338 73 156 2 == 338 74 338 76 18446744073709551615 1 1 338 77 338 78 18446744073709551615 2 && 338 79 338 81 18446744073709551615 16 TAKE_N_BITS_FROM 338 82 338 98 18446744073709551615 1 ( 338 98 338 99 18446744073709551615 10 hdr_802_1x 338 99 338 109 18446744073709551615 2 -> 338 109 338 111 18446744073709551615 15 key_information 338 111 338 126 18446744073709551615 1 [ 338 126 338 127 18446744073709551615 1 0 338 127 338 128 18446744073709551615 1 ] 338 128 338 129 18446744073709551615 1 , 338 129 338 130 18446744073709551615 1 0 338 131 338 132 18446744073709551615 1 , 338 132 338 133 18446744073709551615 1 1 338 134 338 135 18446744073709551615 1 ) 338 135 338 136 18446744073709551615 2 && 338 137 338 139 18446744073709551615 1 ( 338 140 338 141 18446744073709551615 16 TAKE_N_BITS_FROM 338 141 338 157 18446744073709551615 1 ( 338 157 338 158 18446744073709551615 10 hdr_802_1x 338 158 338 168 18446744073709551615 2 -> 338 168 338 170 18446744073709551615 15 key_information 338 170 338 185 18446744073709551615 1 [ 338 185 338 186 18446744073709551615 1 1 338 186 338 187 18446744073709551615 1 ] 338 187 338 188 18446744073709551615 1 , 338 188 338 189 18446744073709551615 1 6 338 190 338 191 18446744073709551615 1 , 338 191 338 192 18446744073709551615 1 1 338 193 338 194 18446744073709551615 1 ) 338 194 338 195 18446744073709551615 1 ) 338 195 338 196 18446744073709551615 2 == 338 197 338 199 18446744073709551615 1 0 338 200 338 201 18446744073709551615 2 && 338 202 338 204 18446744073709551615 1 ( 338 205 338 206 18446744073709551615 16 TAKE_N_BITS_FROM 338 206 338 222 18446744073709551615 1 ( 338 222 338 223 18446744073709551615 10 hdr_802_1x 338 223 338 233 18446744073709551615 2 -> 338 233 338 235 18446744073709551615 15 key_information 338 235 338 250 18446744073709551615 1 [ 338 250 338 251 18446744073709551615 1 1 338 251 338 252 18446744073709551615 1 ] 338 252 338 253 18446744073709551615 1 , 338 253 338 254 18446744073709551615 1 7 338 255 338 256 18446744073709551615 1 , 338 256 338 257 18446744073709551615 1 1 338 258 338 259 18446744073709551615 1 ) 338 259 338 260 18446744073709551615 1 ) 338 260 338 261 18446744073709551615 2 == 338 262 338 264 18446744073709551615 1 0 338 265 338 266 18446744073709551615 2 && 338 267 338 269 18446744073709551615 11 data_length 338 270 338 281 173 1 > 338 282 338 283 18446744073709551615 1 0 338 284 338 285 18446744073709551615 2 && 338 286 338 288 18446744073709551615 6 memcmp 338 289 338 295 165 1 ( 338 295 338 296 165 17 packet_eapol_info 338 296 338 313 158 2 -> 338 313 338 315 18446744073709551615 11 last_replay 338 315 338 326 87 1 , 338 326 338 327 165 10 hdr_802_1x 338 328 338 338 166 2 -> 338 338 338 340 18446744073709551615 14 replay_counter 338 340 338 354 38 1 , 338 354 338 355 165 1 8 338 356 338 357 18446744073709551615 1 ) 338 357 338 358 165 2 == 338 359 338 361 18446744073709551615 1 0 338 362 338 363 18446744073709551615 1 ) 338 363 338 364 18446744073709551615 1 { 338 365 338 366 18446744073709551615 8 // msg 2 338 367 338 375 18446744073709551615 58 // we have all the infos needed for the computation of PTK 339 15 339 73 18446744073709551615 6 struct 340 15 340 21 18446744073709551615 3 ptk 340 22 340 25 75 1 * 340 26 340 27 18446744073709551615 3 PTK 340 27 340 30 176 1 = 340 31 340 32 18446744073709551615 1 ( 340 33 340 34 18446744073709551615 6 struct 340 34 340 40 18446744073709551615 3 ptk 340 41 340 44 75 1 * 340 45 340 46 18446744073709551615 1 ) 340 46 340 47 18446744073709551615 6 PRF512 340 47 340 53 105 1 ( 340 53 340 54 105 3 psk 340 54 340 57 89 1 , 340 57 340 58 105 1 A 340 59 340 60 1 1 , 340 60 340 61 105 6 strlen 340 62 340 68 129 1 ( 340 68 340 69 129 1 A 340 69 340 70 1 1 ) 340 70 340 71 129 1 , 340 71 340 72 105 14 ap_mac_address 340 73 340 87 88 1 , 340 87 340 88 105 15 sta_mac_address 340 89 340 104 159 1 , 340 104 340 105 105 17 packet_eapol_info 340 106 340 123 158 2 -> 340 123 340 125 18446744073709551615 6 ANonce 340 125 340 131 83 1 , 340 131 340 132 105 10 hdr_802_1x 340 133 340 143 166 2 -> 340 143 340 145 18446744073709551615 13 wpa_key_nonce 340 145 340 158 39 1 ) 340 158 340 159 105 1 ; 340 159 340 160 18446744073709551615 6 u_char 341 15 341 21 2 1 * 341 22 341 23 18446744073709551615 8 real_MIC 341 23 341 31 177 1 = 341 32 341 33 18446744073709551615 6 malloc 341 34 341 40 169 1 ( 341 40 341 41 169 2 16 341 41 341 43 18446744073709551615 1 ) 341 43 341 44 169 1 ; 341 44 341 45 18446744073709551615 6 u_char 342 15 342 21 2 1 * 342 22 342 23 18446744073709551615 14 calculated_MIC 342 23 342 37 178 1 = 342 38 342 39 18446744073709551615 6 malloc 342 40 342 46 169 1 ( 342 46 342 47 169 2 16 342 47 342 49 18446744073709551615 1 ) 342 49 342 50 169 1 ; 342 50 342 51 18446744073709551615 6 memcpy 343 15 343 21 150 1 ( 343 21 343 22 150 8 real_MIC 343 22 343 30 177 1 , 343 30 343 31 150 10 hdr_802_1x 343 32 343 42 166 2 -> 343 42 343 44 18446744073709551615 11 wpa_key_MIC 343 44 343 55 43 1 , 343 55 343 56 150 2 16 343 57 343 59 18446744073709551615 1 ) 343 59 343 60 150 1 ; 343 60 343 61 18446744073709551615 6 memcpy 344 15 344 21 150 1 ( 344 21 344 22 150 10 hdr_802_1x 344 22 344 32 166 2 -> 344 32 344 34 18446744073709551615 11 wpa_key_MIC 344 34 344 45 43 1 , 344 45 344 46 150 8 NULL_MIC 344 47 344 55 3 1 , 344 55 344 56 150 2 16 344 57 344 59 18446744073709551615 1 ) 344 59 344 60 150 1 ; 344 60 344 61 18446744073709551615 4 HMAC 345 15 345 19 179 1 ( 345 19 345 20 179 8 EVP_sha1 345 20 345 28 180 1 ( 345 28 345 29 180 1 ) 345 29 345 30 180 1 , 345 30 345 31 179 3 PTK 345 32 345 35 176 2 -> 345 35 345 37 18446744073709551615 3 kck 345 37 345 40 76 1 , 345 40 345 41 179 2 16 345 42 345 44 18446744073709551615 1 , 345 44 345 45 179 10 hdr_802_1x 345 46 345 56 166 1 , 345 56 345 57 179 2 99 345 58 345 60 18446744073709551615 1 + 345 61 345 62 18446744073709551615 11 data_length 345 63 345 74 173 1 , 345 74 345 75 179 14 calculated_MIC 345 76 345 90 178 1 , 345 90 345 91 179 1 & 345 92 345 93 18446744073709551615 11 SHA1_LENGTH 345 93 345 104 0 1 ) 345 104 345 105 179 1 ; 345 105 345 106 18446744073709551615 107 // if the original MIC in the packet is equal to the one we calculate using the derived PTK, then PTK is OK 346 15 346 122 18446744073709551615 2 if 347 15 347 17 18446744073709551615 1 ( 347 17 347 18 18446744073709551615 6 memcmp 347 18 347 24 165 1 ( 347 24 347 25 165 8 real_MIC 347 25 347 33 177 1 , 347 33 347 34 165 14 calculated_MIC 347 35 347 49 178 1 , 347 49 347 50 165 2 16 347 51 347 53 18446744073709551615 1 ) 347 53 347 54 165 2 == 347 55 347 57 18446744073709551615 1 0 347 58 347 59 18446744073709551615 1 ) 347 59 347 60 18446744073709551615 1 { 347 61 347 62 18446744073709551615 6 memcpy 348 17 348 23 150 1 ( 348 23 348 24 150 17 packet_eapol_info 348 24 348 41 158 2 -> 348 41 348 43 18446744073709551615 6 SNonce 348 43 348 49 84 1 , 348 49 348 50 150 10 hdr_802_1x 348 51 348 61 166 2 -> 348 61 348 63 18446744073709551615 13 wpa_key_nonce 348 63 348 76 39 1 , 348 76 348 77 150 2 32 348 78 348 80 18446744073709551615 1 ) 348 80 348 81 150 1 ; 348 81 348 82 18446744073709551615 6 memcpy 349 17 349 23 150 1 ( 349 23 349 24 150 1 & 349 24 349 25 18446744073709551615 17 packet_eapol_info 349 25 349 42 158 2 -> 349 42 349 44 18446744073709551615 3 PTK 349 44 349 47 85 1 , 349 47 349 48 150 3 PTK 349 49 349 52 176 1 , 349 52 349 53 150 6 sizeof 349 54 349 60 18446744073709551615 1 ( 349 60 349 61 18446744073709551615 6 struct 349 61 349 67 18446744073709551615 3 ptk 349 68 349 71 75 1 ) 349 71 349 72 18446744073709551615 1 ) 349 72 349 73 150 1 ; 349 73 349 74 18446744073709551615 17 packet_eapol_info 350 17 350 34 158 2 -> 350 34 350 36 18446744073709551615 6 status 350 36 350 42 86 1 = 350 43 350 44 18446744073709551615 19 WAITING_EAPOL_KEY_3 350 45 350 64 5 1 ; 350 64 350 65 18446744073709551615 1 } 351 15 351 16 18446744073709551615 1 } 352 13 352 14 18446744073709551615 4 else 353 13 353 17 18446744073709551615 2 if 353 18 353 20 18446744073709551615 1 ( 353 20 353 21 18446744073709551615 14 current_status 353 21 353 35 171 2 == 353 36 353 38 18446744073709551615 19 WAITING_EAPOL_KEY_3 353 39 353 58 5 2 && 353 59 353 61 18446744073709551615 16 packet_direction 353 62 353 78 156 2 == 353 79 353 81 18446744073709551615 1 2 353 82 353 83 18446744073709551615 2 && 353 84 353 86 18446744073709551615 16 TAKE_N_BITS_FROM 353 87 353 103 18446744073709551615 1 ( 353 103 353 104 18446744073709551615 10 hdr_802_1x 353 104 353 114 18446744073709551615 2 -> 353 114 353 116 18446744073709551615 15 key_information 353 116 353 131 18446744073709551615 1 [ 353 131 353 132 18446744073709551615 1 0 353 132 353 133 18446744073709551615 1 ] 353 133 353 134 18446744073709551615 1 , 353 134 353 135 18446744073709551615 1 0 353 136 353 137 18446744073709551615 1 , 353 137 353 138 18446744073709551615 1 1 353 139 353 140 18446744073709551615 1 ) 353 140 353 141 18446744073709551615 2 && 353 142 353 144 18446744073709551615 1 ( 353 145 353 146 18446744073709551615 16 TAKE_N_BITS_FROM 353 146 353 162 18446744073709551615 1 ( 353 162 353 163 18446744073709551615 10 hdr_802_1x 353 163 353 173 18446744073709551615 2 -> 353 173 353 175 18446744073709551615 15 key_information 353 175 353 190 18446744073709551615 1 [ 353 190 353 191 18446744073709551615 1 1 353 191 353 192 18446744073709551615 1 ] 353 192 353 193 18446744073709551615 1 , 353 193 353 194 18446744073709551615 1 6 353 195 353 196 18446744073709551615 1 , 353 196 353 197 18446744073709551615 1 1 353 198 353 199 18446744073709551615 1 ) 353 199 353 200 18446744073709551615 1 ) 353 200 353 201 18446744073709551615 2 && 353 202 353 204 18446744073709551615 1 ( 353 205 353 206 18446744073709551615 16 TAKE_N_BITS_FROM 353 206 353 222 18446744073709551615 1 ( 353 222 353 223 18446744073709551615 10 hdr_802_1x 353 223 353 233 18446744073709551615 2 -> 353 233 353 235 18446744073709551615 15 key_information 353 235 353 250 18446744073709551615 1 [ 353 250 353 251 18446744073709551615 1 1 353 251 353 252 18446744073709551615 1 ] 353 252 353 253 18446744073709551615 1 , 353 253 353 254 18446744073709551615 1 7 353 255 353 256 18446744073709551615 1 , 353 256 353 257 18446744073709551615 1 1 353 258 353 259 18446744073709551615 1 ) 353 259 353 260 18446744073709551615 1 ) 353 260 353 261 18446744073709551615 1 ) 353 261 353 262 18446744073709551615 1 { 353 263 353 264 18446744073709551615 8 // msg 3 353 265 353 273 18446744073709551615 6 u_char 354 15 354 21 2 1 * 354 22 354 23 18446744073709551615 3 KCK 354 23 354 26 181 1 = 354 27 354 28 18446744073709551615 17 packet_eapol_info 354 29 354 46 158 2 -> 354 46 354 48 18446744073709551615 3 PTK 354 48 354 51 85 1 . 354 51 354 52 18446744073709551615 3 kck 354 52 354 55 76 1 ; 354 55 354 56 18446744073709551615 6 u_char 355 15 355 21 2 1 * 355 22 355 23 18446744073709551615 8 real_MIC 355 23 355 31 182 1 = 355 32 355 33 18446744073709551615 6 malloc 355 34 355 40 169 1 ( 355 40 355 41 169 2 16 355 41 355 43 18446744073709551615 1 ) 355 43 355 44 169 1 ; 355 44 355 45 18446744073709551615 6 u_char 356 15 356 21 2 1 * 356 22 356 23 18446744073709551615 14 calculated_MIC 356 23 356 37 183 1 = 356 38 356 39 18446744073709551615 6 malloc 356 40 356 46 169 1 ( 356 46 356 47 169 2 16 356 47 356 49 18446744073709551615 1 ) 356 49 356 50 169 1 ; 356 50 356 51 18446744073709551615 6 memcpy 357 15 357 21 150 1 ( 357 21 357 22 150 8 real_MIC 357 22 357 30 182 1 , 357 30 357 31 150 10 hdr_802_1x 357 32 357 42 166 2 -> 357 42 357 44 18446744073709551615 11 wpa_key_MIC 357 44 357 55 43 1 , 357 55 357 56 150 2 16 357 57 357 59 18446744073709551615 1 ) 357 59 357 60 150 1 ; 357 60 357 61 18446744073709551615 6 memcpy 358 15 358 21 150 1 ( 358 21 358 22 150 10 hdr_802_1x 358 22 358 32 166 2 -> 358 32 358 34 18446744073709551615 11 wpa_key_MIC 358 34 358 45 43 1 , 358 45 358 46 150 8 NULL_MIC 358 47 358 55 3 1 , 358 55 358 56 150 2 16 358 57 358 59 18446744073709551615 1 ) 358 59 358 60 150 1 ; 358 60 358 61 18446744073709551615 4 HMAC 359 15 359 19 179 1 ( 359 19 359 20 179 8 EVP_sha1 359 20 359 28 180 1 ( 359 28 359 29 180 1 ) 359 29 359 30 180 1 , 359 30 359 31 179 3 KCK 359 32 359 35 181 1 , 359 35 359 36 179 2 16 359 37 359 39 18446744073709551615 1 , 359 39 359 40 179 10 hdr_802_1x 359 41 359 51 166 1 , 359 51 359 52 179 2 99 359 53 359 55 18446744073709551615 1 + 359 56 359 57 18446744073709551615 11 data_length 359 58 359 69 173 1 , 359 69 359 70 179 14 calculated_MIC 359 71 359 85 183 1 , 359 85 359 86 179 1 & 359 87 359 88 18446744073709551615 11 SHA1_LENGTH 359 88 359 99 0 1 ) 359 99 359 100 179 1 ; 359 100 359 101 18446744073709551615 103 // we keep checking for MIC correspondence, and if the packet is legitimate, we save the replay counter 360 15 360 118 18446744073709551615 2 if 361 15 361 17 18446744073709551615 1 ( 361 17 361 18 18446744073709551615 6 memcmp 361 18 361 24 165 1 ( 361 24 361 25 165 8 real_MIC 361 25 361 33 182 1 , 361 33 361 34 165 14 calculated_MIC 361 35 361 49 183 1 , 361 49 361 50 165 2 16 361 51 361 53 18446744073709551615 1 ) 361 53 361 54 165 2 == 361 55 361 57 18446744073709551615 1 0 361 58 361 59 18446744073709551615 1 ) 361 59 361 60 18446744073709551615 1 { 361 61 361 62 18446744073709551615 17 packet_eapol_info 362 17 362 34 158 2 -> 362 34 362 36 18446744073709551615 6 status 362 36 362 42 86 1 = 362 43 362 44 18446744073709551615 19 WAITING_EAPOL_KEY_4 362 45 362 64 6 1 ; 362 64 362 65 18446744073709551615 93 // we save replay counter since msg 2 and 4 look the same except for the replay counter value 363 17 363 110 18446744073709551615 6 memcpy 364 17 364 23 150 1 ( 364 23 364 24 150 17 packet_eapol_info 364 24 364 41 158 2 -> 364 41 364 43 18446744073709551615 11 last_replay 364 43 364 54 87 1 , 364 54 364 55 150 10 hdr_802_1x 364 56 364 66 166 2 -> 364 66 364 68 18446744073709551615 14 replay_counter 364 68 364 82 38 1 , 364 82 364 83 150 1 8 364 84 364 85 18446744073709551615 1 ) 364 85 364 86 150 1 ; 364 86 364 87 18446744073709551615 1 } 365 15 365 16 18446744073709551615 1 } 366 13 366 14 18446744073709551615 4 else 367 13 367 17 18446744073709551615 2 if 367 18 367 20 18446744073709551615 1 ( 367 20 367 21 18446744073709551615 14 current_status 367 21 367 35 171 2 == 367 36 367 38 18446744073709551615 19 WAITING_EAPOL_KEY_4 367 39 367 58 6 2 && 367 59 367 61 18446744073709551615 16 packet_direction 367 62 367 78 156 2 == 367 79 367 81 18446744073709551615 1 1 367 82 367 83 18446744073709551615 2 && 367 84 367 86 18446744073709551615 16 TAKE_N_BITS_FROM 367 87 367 103 18446744073709551615 1 ( 367 103 367 104 18446744073709551615 10 hdr_802_1x 367 104 367 114 18446744073709551615 2 -> 367 114 367 116 18446744073709551615 15 key_information 367 116 367 131 18446744073709551615 1 [ 367 131 367 132 18446744073709551615 1 0 367 132 367 133 18446744073709551615 1 ] 367 133 367 134 18446744073709551615 1 , 367 134 367 135 18446744073709551615 1 0 367 136 367 137 18446744073709551615 1 , 367 137 367 138 18446744073709551615 1 1 367 139 367 140 18446744073709551615 1 ) 367 140 367 141 18446744073709551615 2 && 367 142 367 144 18446744073709551615 1 ( 367 145 367 146 18446744073709551615 16 TAKE_N_BITS_FROM 367 146 367 162 18446744073709551615 1 ( 367 162 367 163 18446744073709551615 10 hdr_802_1x 367 163 367 173 18446744073709551615 2 -> 367 173 367 175 18446744073709551615 15 key_information 367 175 367 190 18446744073709551615 1 [ 367 190 367 191 18446744073709551615 1 1 367 191 367 192 18446744073709551615 1 ] 367 192 367 193 18446744073709551615 1 , 367 193 367 194 18446744073709551615 1 6 367 195 367 196 18446744073709551615 1 , 367 196 367 197 18446744073709551615 1 1 367 198 367 199 18446744073709551615 1 ) 367 199 367 200 18446744073709551615 1 ) 367 200 367 201 18446744073709551615 2 == 367 202 367 204 18446744073709551615 1 0 367 205 367 206 18446744073709551615 2 && 367 207 367 209 18446744073709551615 1 ( 367 210 367 211 18446744073709551615 16 TAKE_N_BITS_FROM 367 211 367 227 18446744073709551615 1 ( 367 227 367 228 18446744073709551615 10 hdr_802_1x 367 228 367 238 18446744073709551615 2 -> 367 238 367 240 18446744073709551615 15 key_information 367 240 367 255 18446744073709551615 1 [ 367 255 367 256 18446744073709551615 1 1 367 256 367 257 18446744073709551615 1 ] 367 257 367 258 18446744073709551615 1 , 367 258 367 259 18446744073709551615 1 7 367 260 367 261 18446744073709551615 1 , 367 261 367 262 18446744073709551615 1 1 367 263 367 264 18446744073709551615 1 ) 367 264 367 265 18446744073709551615 1 ) 367 265 367 266 18446744073709551615 2 == 367 267 367 269 18446744073709551615 1 0 367 270 367 271 18446744073709551615 2 && 367 272 367 274 18446744073709551615 6 memcmp 367 275 367 281 165 1 ( 367 281 367 282 165 17 packet_eapol_info 367 282 367 299 158 2 -> 367 299 367 301 18446744073709551615 11 last_replay 367 301 367 312 87 1 , 367 312 367 313 165 10 hdr_802_1x 367 314 367 324 166 2 -> 367 324 367 326 18446744073709551615 14 replay_counter 367 326 367 340 38 1 , 367 340 367 341 165 1 8 367 342 367 343 18446744073709551615 1 ) 367 343 367 344 165 2 == 367 345 367 347 18446744073709551615 1 0 367 348 367 349 18446744073709551615 1 ) 367 349 367 350 18446744073709551615 1 { 367 351 367 352 18446744073709551615 8 // msg 4 367 353 367 361 18446744073709551615 6 u_char 368 15 368 21 2 1 * 368 22 368 23 18446744073709551615 3 KCK 368 23 368 26 184 1 = 368 27 368 28 18446744073709551615 17 packet_eapol_info 368 29 368 46 158 2 -> 368 46 368 48 18446744073709551615 3 PTK 368 48 368 51 85 1 . 368 51 368 52 18446744073709551615 3 kck 368 52 368 55 76 1 ; 368 55 368 56 18446744073709551615 6 u_char 369 15 369 21 2 1 * 369 22 369 23 18446744073709551615 8 real_MIC 369 23 369 31 185 1 = 369 32 369 33 18446744073709551615 6 malloc 369 34 369 40 169 1 ( 369 40 369 41 169 2 16 369 41 369 43 18446744073709551615 1 ) 369 43 369 44 169 1 ; 369 44 369 45 18446744073709551615 6 u_char 370 15 370 21 2 1 * 370 22 370 23 18446744073709551615 14 calculated_MIC 370 23 370 37 186 1 = 370 38 370 39 18446744073709551615 6 malloc 370 40 370 46 169 1 ( 370 46 370 47 169 2 16 370 47 370 49 18446744073709551615 1 ) 370 49 370 50 169 1 ; 370 50 370 51 18446744073709551615 6 memcpy 371 15 371 21 150 1 ( 371 21 371 22 150 8 real_MIC 371 22 371 30 185 1 , 371 30 371 31 150 10 hdr_802_1x 371 32 371 42 166 2 -> 371 42 371 44 18446744073709551615 11 wpa_key_MIC 371 44 371 55 43 1 , 371 55 371 56 150 2 16 371 57 371 59 18446744073709551615 1 ) 371 59 371 60 150 1 ; 371 60 371 61 18446744073709551615 6 memcpy 372 15 372 21 150 1 ( 372 21 372 22 150 10 hdr_802_1x 372 22 372 32 166 2 -> 372 32 372 34 18446744073709551615 11 wpa_key_MIC 372 34 372 45 43 1 , 372 45 372 46 150 8 NULL_MIC 372 47 372 55 3 1 , 372 55 372 56 150 2 16 372 57 372 59 18446744073709551615 1 ) 372 59 372 60 150 1 ; 372 60 372 61 18446744073709551615 4 HMAC 373 15 373 19 179 1 ( 373 19 373 20 179 8 EVP_sha1 373 20 373 28 180 1 ( 373 28 373 29 180 1 ) 373 29 373 30 180 1 , 373 30 373 31 179 3 KCK 373 32 373 35 184 1 , 373 35 373 36 179 2 16 373 37 373 39 18446744073709551615 1 , 373 39 373 40 179 10 hdr_802_1x 373 41 373 51 166 1 , 373 51 373 52 179 2 99 373 53 373 55 18446744073709551615 1 + 373 56 373 57 18446744073709551615 11 data_length 373 58 373 69 173 1 , 373 69 373 70 179 14 calculated_MIC 373 71 373 85 186 1 , 373 85 373 86 179 1 & 373 87 373 88 18446744073709551615 11 SHA1_LENGTH 373 88 373 99 0 1 ) 373 99 373 100 179 1 ; 373 100 373 101 18446744073709551615 2 if 374 15 374 17 18446744073709551615 1 ( 374 17 374 18 18446744073709551615 6 memcmp 374 18 374 24 165 1 ( 374 24 374 25 165 8 real_MIC 374 25 374 33 185 1 , 374 33 374 34 165 14 calculated_MIC 374 35 374 49 186 1 , 374 49 374 50 165 2 16 374 51 374 53 18446744073709551615 1 ) 374 53 374 54 165 2 == 374 55 374 57 18446744073709551615 1 0 374 58 374 59 18446744073709551615 1 ) 374 59 374 60 18446744073709551615 1 { 374 61 374 62 18446744073709551615 6 printf 375 17 375 23 130 1 ( 375 23 375 24 130 39 "Handshake completed between %s - %s\n" 375 24 375 63 18446744073709551615 1 , 375 63 375 64 130 12 mac_toString 375 65 375 77 104 1 ( 375 77 375 78 104 15 sta_mac_address 375 78 375 93 159 1 ) 375 93 375 94 104 1 , 375 94 375 95 130 12 mac_toString 375 96 375 108 104 1 ( 375 108 375 109 104 14 ap_mac_address 375 109 375 123 88 1 ) 375 123 375 124 104 1 ) 375 124 375 125 130 1 ; 375 125 375 126 18446744073709551615 17 packet_eapol_info 376 17 376 34 158 2 -> 376 34 376 36 18446744073709551615 6 status 376 36 376 42 86 1 = 376 43 376 44 18446744073709551615 7 SUCCESS 376 45 376 52 7 1 ; 376 52 376 53 18446744073709551615 1 } 377 15 377 16 18446744073709551615 1 } 378 13 378 14 18446744073709551615 1 } 379 11 379 12 18446744073709551615 1 } 380 9 380 10 18446744073709551615 1 } 381 7 381 8 18446744073709551615 1 } 382 5 382 6 18446744073709551615 1 } 383 3 383 4 18446744073709551615 6 return 384 3 384 9 18446744073709551615 1 1 384 10 384 11 18446744073709551615 1 ; 384 11 384 12 18446744073709551615 1 } 385 1 385 2 18446744073709551615 4 char 387 1 387 5 18446744073709551615 1 * 387 6 387 7 104 12 mac_toString 387 7 387 19 104 1 ( 387 19 387 20 104 6 u_char 387 20 387 26 2 1 * 387 27 387 28 18446744073709551615 4 addr 387 28 387 32 187 1 ) 387 32 387 33 104 1 { 387 34 387 35 18446744073709551615 4 char 388 3 388 7 18446744073709551615 3 str 388 8 388 11 188 1 [ 388 11 388 12 18446744073709551615 2 18 388 12 388 14 18446744073709551615 1 ] 388 14 388 15 18446744073709551615 1 ; 388 15 388 16 18446744073709551615 4 char 389 3 389 7 18446744073709551615 1 * 389 8 389 9 18446744073709551615 7 res_str 389 9 389 16 189 1 = 389 17 389 18 18446744073709551615 6 malloc 389 19 389 25 169 1 ( 389 25 389 26 169 2 18 389 26 389 28 18446744073709551615 1 ) 389 28 389 29 169 1 ; 389 29 389 30 18446744073709551615 2 if 390 3 390 5 18446744073709551615 1 ( 390 5 390 6 18446744073709551615 4 addr 390 6 390 10 187 2 == 390 11 390 13 18446744073709551615 4 NULL 390 14 390 18 18446744073709551615 1 ) 390 18 390 19 18446744073709551615 6 return 391 5 391 11 18446744073709551615 2 "" 391 12 391 14 18446744073709551615 1 ; 391 14 391 15 18446744073709551615 8 snprintf 392 3 392 11 190 1 ( 392 11 392 12 190 3 str 392 12 392 15 188 1 , 392 15 392 16 190 6 sizeof 392 17 392 23 18446744073709551615 1 ( 392 23 392 24 18446744073709551615 3 str 392 24 392 27 188 1 ) 392 27 392 28 18446744073709551615 1 , 392 28 392 29 190 31 "%02x:%02x:%02x:%02x:%02x:%02x" 392 30 392 61 18446744073709551615 1 , 392 61 392 62 190 4 addr 393 12 393 16 187 1 [ 393 16 393 17 18446744073709551615 1 0 393 17 393 18 18446744073709551615 1 ] 393 18 393 19 18446744073709551615 1 , 393 19 393 20 190 4 addr 393 21 393 25 187 1 [ 393 25 393 26 18446744073709551615 1 1 393 26 393 27 18446744073709551615 1 ] 393 27 393 28 18446744073709551615 1 , 393 28 393 29 190 4 addr 393 30 393 34 187 1 [ 393 34 393 35 18446744073709551615 1 2 393 35 393 36 18446744073709551615 1 ] 393 36 393 37 18446744073709551615 1 , 393 37 393 38 190 4 addr 393 39 393 43 187 1 [ 393 43 393 44 18446744073709551615 1 3 393 44 393 45 18446744073709551615 1 ] 393 45 393 46 18446744073709551615 1 , 393 46 393 47 190 4 addr 393 48 393 52 187 1 [ 393 52 393 53 18446744073709551615 1 4 393 53 393 54 18446744073709551615 1 ] 393 54 393 55 18446744073709551615 1 , 393 55 393 56 190 4 addr 393 57 393 61 187 1 [ 393 61 393 62 18446744073709551615 1 5 393 62 393 63 18446744073709551615 1 ] 393 63 393 64 18446744073709551615 1 ) 393 64 393 65 190 1 ; 393 65 393 66 18446744073709551615 6 memcpy 394 3 394 9 150 1 ( 394 9 394 10 150 7 res_str 394 10 394 17 189 1 , 394 17 394 18 150 3 str 394 19 394 22 188 1 , 394 22 394 23 150 2 18 394 24 394 26 18446744073709551615 1 ) 394 26 394 27 150 1 ; 394 27 394 28 18446744073709551615 6 return 395 3 395 9 18446744073709551615 7 res_str 395 10 395 17 189 1 ; 395 17 395 18 18446744073709551615 1 } 396 1 396 2 18446744073709551615 6 u_char 398 1 398 7 2 1 * 398 8 398 9 105 6 PRF512 398 9 398 15 105 1 ( 398 15 398 16 105 6 u_char 398 16 398 22 2 1 * 398 23 398 24 18446744073709551615 3 PMK 398 24 398 27 191 1 , 398 27 398 28 105 6 u_char 398 29 398 35 2 1 * 398 36 398 37 18446744073709551615 1 A 398 37 398 38 192 1 , 398 38 398 39 105 6 size_t 398 40 398 46 106 4 lenA 398 47 398 51 193 1 , 398 51 398 52 105 6 u_char 398 53 398 59 2 1 * 398 60 398 61 18446744073709551615 7 AP_addr 398 61 398 68 194 1 , 398 68 398 69 105 6 u_char 398 70 398 76 2 1 * 398 77 398 78 18446744073709551615 8 STA_addr 398 78 398 86 195 1 , 398 86 398 87 105 6 u_char 398 88 398 94 2 1 * 398 95 398 96 18446744073709551615 6 ANonce 398 96 398 102 196 1 , 398 102 398 103 105 6 u_char 398 104 398 110 2 1 * 398 111 398 112 18446744073709551615 6 SNonce 398 112 398 118 197 1 ) 398 118 398 119 105 1 { 398 120 398 121 18446744073709551615 6 static 399 3 399 9 18446744073709551615 6 u_char 399 10 399 16 2 3 ptk 399 17 399 20 198 1 [ 399 20 399 21 18446744073709551615 2 64 399 21 399 23 18446744073709551615 1 ] 399 23 399 24 18446744073709551615 1 ; 399 24 399 25 18446744073709551615 6 u_char 400 3 400 9 2 1 B 400 10 400 11 199 1 [ 400 11 400 12 18446744073709551615 2 76 400 12 400 14 18446744073709551615 1 ] 400 14 400 15 18446744073709551615 1 ; 400 15 400 16 18446744073709551615 3 int 401 3 401 6 18446744073709551615 1 i 401 7 401 8 200 1 = 401 9 401 10 18446744073709551615 1 0 401 11 401 12 18446744073709551615 1 ; 401 12 401 13 18446744073709551615 6 u_char 402 3 402 9 2 1 c 402 10 402 11 201 1 = 402 12 402 13 18446744073709551615 4 0x00 402 14 402 18 18446744073709551615 1 ; 402 18 402 19 18446744073709551615 6 u_char 403 3 403 9 2 3 arg 403 10 403 13 202 1 [ 403 13 403 14 18446744073709551615 2 76 403 14 403 16 18446744073709551615 1 + 403 17 403 18 18446744073709551615 4 lenA 403 19 403 23 193 1 + 403 24 403 25 18446744073709551615 1 2 403 26 403 27 18446744073709551615 1 ] 403 27 403 28 18446744073709551615 1 ; 403 28 403 29 18446744073709551615 2 if 405 3 405 5 18446744073709551615 1 ( 405 5 405 6 18446744073709551615 6 strcmp 405 6 405 12 151 1 ( 405 12 405 13 151 7 AP_addr 405 13 405 20 194 1 , 405 20 405 21 151 8 STA_addr 405 22 405 30 195 1 ) 405 30 405 31 151 1 < 405 32 405 33 18446744073709551615 1 0 405 34 405 35 18446744073709551615 1 ) 405 35 405 36 18446744073709551615 1 { 405 37 405 38 18446744073709551615 6 memcpy 406 5 406 11 150 1 ( 406 11 406 12 150 1 B 406 12 406 13 199 1 , 406 13 406 14 150 7 AP_addr 406 15 406 22 194 1 , 406 22 406 23 150 12 MAC_ADDR_LEN 406 24 406 36 150 1 ) 406 36 406 37 150 1 ; 406 37 406 38 18446744073709551615 6 memcpy 407 5 407 11 150 1 ( 407 11 407 12 150 1 B 407 12 407 13 199 1 + 407 14 407 15 18446744073709551615 12 MAC_ADDR_LEN 407 16 407 28 18446744073709551615 1 , 407 28 407 29 150 8 STA_addr 407 30 407 38 195 1 , 407 38 407 39 150 12 MAC_ADDR_LEN 407 40 407 52 150 1 ) 407 52 407 53 150 1 ; 407 53 407 54 18446744073709551615 1 } 408 3 408 4 18446744073709551615 4 else 409 3 409 7 18446744073709551615 1 { 409 8 409 9 18446744073709551615 6 memcpy 410 5 410 11 150 1 ( 410 11 410 12 150 1 B 410 12 410 13 199 1 , 410 13 410 14 150 8 STA_addr 410 15 410 23 195 1 , 410 23 410 24 150 12 MAC_ADDR_LEN 410 25 410 37 150 1 ) 410 37 410 38 150 1 ; 410 38 410 39 18446744073709551615 6 memcpy 411 5 411 11 150 1 ( 411 11 411 12 150 1 B 411 12 411 13 199 1 + 411 14 411 15 18446744073709551615 12 MAC_ADDR_LEN 411 16 411 28 18446744073709551615 1 , 411 28 411 29 150 7 AP_addr 411 30 411 37 194 1 , 411 37 411 38 150 12 MAC_ADDR_LEN 411 39 411 51 150 1 ) 411 51 411 52 150 1 ; 411 52 411 53 18446744073709551615 1 } 412 3 412 4 18446744073709551615 2 if 413 3 413 5 18446744073709551615 1 ( 413 5 413 6 18446744073709551615 6 strcmp 413 6 413 12 151 1 ( 413 12 413 13 151 6 ANonce 413 13 413 19 196 1 , 413 19 413 20 151 6 SNonce 413 21 413 27 197 1 ) 413 27 413 28 151 1 < 413 29 413 30 18446744073709551615 1 0 413 31 413 32 18446744073709551615 1 ) 413 32 413 33 18446744073709551615 1 { 413 34 413 35 18446744073709551615 6 memcpy 414 5 414 11 150 1 ( 414 11 414 12 150 1 B 414 12 414 13 199 1 + 414 14 414 15 18446744073709551615 1 2 414 16 414 17 18446744073709551615 1 * 414 18 414 19 18446744073709551615 12 MAC_ADDR_LEN 414 20 414 32 18446744073709551615 1 , 414 32 414 33 150 6 ANonce 414 34 414 40 196 1 , 414 40 414 41 150 2 32 414 42 414 44 18446744073709551615 1 ) 414 44 414 45 150 1 ; 414 45 414 46 18446744073709551615 6 memcpy 415 5 415 11 150 1 ( 415 11 415 12 150 1 B 415 12 415 13 199 1 + 415 14 415 15 18446744073709551615 1 2 415 16 415 17 18446744073709551615 1 * 415 18 415 19 18446744073709551615 12 MAC_ADDR_LEN 415 20 415 32 18446744073709551615 1 + 415 33 415 34 18446744073709551615 2 32 415 35 415 37 18446744073709551615 1 , 415 37 415 38 150 6 SNonce 415 39 415 45 197 1 , 415 45 415 46 150 2 32 415 47 415 49 18446744073709551615 1 ) 415 49 415 50 150 1 ; 415 50 415 51 18446744073709551615 1 } 416 3 416 4 18446744073709551615 4 else 417 3 417 7 18446744073709551615 1 { 417 8 417 9 18446744073709551615 6 memcpy 418 5 418 11 150 1 ( 418 11 418 12 150 1 B 418 12 418 13 199 1 + 418 14 418 15 18446744073709551615 1 2 418 16 418 17 18446744073709551615 1 * 418 18 418 19 18446744073709551615 12 MAC_ADDR_LEN 418 20 418 32 18446744073709551615 1 , 418 32 418 33 150 6 SNonce 418 34 418 40 197 1 , 418 40 418 41 150 2 32 418 42 418 44 18446744073709551615 1 ) 418 44 418 45 150 1 ; 418 45 418 46 18446744073709551615 6 memcpy 419 5 419 11 150 1 ( 419 11 419 12 150 1 B 419 12 419 13 199 1 + 419 14 419 15 18446744073709551615 1 2 419 16 419 17 18446744073709551615 1 * 419 18 419 19 18446744073709551615 12 MAC_ADDR_LEN 419 20 419 32 18446744073709551615 1 + 419 33 419 34 18446744073709551615 2 32 419 35 419 37 18446744073709551615 1 , 419 37 419 38 150 6 ANonce 419 39 419 45 196 1 , 419 45 419 46 150 2 32 419 47 419 49 18446744073709551615 1 ) 419 49 419 50 150 1 ; 419 50 419 51 18446744073709551615 1 } 420 3 420 4 18446744073709551615 6 memcpy 422 3 422 9 150 1 ( 422 9 422 10 150 3 arg 422 10 422 13 202 1 , 422 13 422 14 150 1 A 422 15 422 16 192 1 , 422 16 422 17 150 4 lenA 422 18 422 22 193 1 ) 422 22 422 23 150 1 ; 422 23 422 24 18446744073709551615 3 arg 423 3 423 6 202 1 [ 423 6 423 7 18446744073709551615 4 lenA 423 7 423 11 193 1 ] 423 11 423 12 18446744073709551615 1 = 423 13 423 14 18446744073709551615 1 c 423 15 423 16 201 1 ; 423 16 423 17 18446744073709551615 6 memcpy 424 3 424 9 150 1 ( 424 9 424 10 150 3 arg 424 10 424 13 202 1 + 424 14 424 15 18446744073709551615 4 lenA 424 16 424 20 193 1 + 424 21 424 22 18446744073709551615 1 1 424 23 424 24 18446744073709551615 1 , 424 24 424 25 150 1 B 424 26 424 27 199 1 , 424 27 424 28 150 2 76 424 29 424 31 18446744073709551615 1 ) 424 31 424 32 150 1 ; 424 32 424 33 18446744073709551615 6 u_char 426 3 426 9 2 13 hmac_sha1_res 426 10 426 23 203 1 [ 426 23 426 24 18446744073709551615 2 20 426 24 426 26 18446744073709551615 1 ] 426 26 426 27 18446744073709551615 1 ; 426 27 426 28 18446744073709551615 6 u_char 427 3 427 9 2 1 R 427 10 427 11 204 1 [ 427 11 427 12 18446744073709551615 1 ( 427 12 427 13 18446744073709551615 1 ( 427 13 427 14 18446744073709551615 3 512 427 14 427 17 18446744073709551615 1 + 427 18 427 19 18446744073709551615 3 159 427 20 427 23 18446744073709551615 1 ) 427 23 427 24 18446744073709551615 1 / 427 25 427 26 18446744073709551615 3 160 427 27 427 30 18446744073709551615 1 ) 427 30 427 31 18446744073709551615 1 * 427 32 427 33 18446744073709551615 2 20 427 34 427 36 18446744073709551615 1 ] 427 36 427 37 18446744073709551615 1 ; 427 37 427 38 18446744073709551615 5 u_int 428 3 428 8 205 10 sha_length 428 9 428 19 206 1 = 428 20 428 21 18446744073709551615 2 20 428 22 428 24 18446744073709551615 1 ; 428 24 428 25 18446744073709551615 5 while 429 3 429 8 18446744073709551615 1 ( 429 8 429 9 18446744073709551615 1 i 429 9 429 10 200 2 <= 429 11 429 13 18446744073709551615 1 ( 429 14 429 15 18446744073709551615 1 ( 429 15 429 16 18446744073709551615 3 512 429 16 429 19 18446744073709551615 1 + 429 20 429 21 18446744073709551615 3 159 429 22 429 25 18446744073709551615 1 ) 429 25 429 26 18446744073709551615 1 / 429 27 429 28 18446744073709551615 3 160 429 29 429 32 18446744073709551615 1 ) 429 32 429 33 18446744073709551615 1 ) 429 33 429 34 18446744073709551615 1 { 429 35 429 36 18446744073709551615 3 arg 430 5 430 8 202 1 [ 430 8 430 9 18446744073709551615 2 76 430 9 430 11 18446744073709551615 1 + 430 12 430 13 18446744073709551615 4 lenA 430 14 430 18 193 1 + 430 19 430 20 18446744073709551615 1 1 430 21 430 22 18446744073709551615 1 ] 430 22 430 23 18446744073709551615 1 = 430 24 430 25 18446744073709551615 4 0x00 430 26 430 30 18446744073709551615 1 + 430 31 430 32 18446744073709551615 1 i 430 33 430 34 200 1 ; 430 34 430 35 18446744073709551615 4 HMAC 431 5 431 9 179 1 ( 431 9 431 10 179 8 EVP_sha1 431 10 431 18 180 1 ( 431 18 431 19 180 1 ) 431 19 431 20 180 1 , 431 20 431 21 179 3 PMK 431 22 431 25 191 1 , 431 25 431 26 179 2 32 431 27 431 29 18446744073709551615 1 , 431 29 431 30 179 3 arg 431 31 431 34 202 1 , 431 34 431 35 179 2 76 431 36 431 38 18446744073709551615 1 + 431 39 431 40 18446744073709551615 4 lenA 431 41 431 45 193 1 + 431 46 431 47 18446744073709551615 1 2 431 48 431 49 18446744073709551615 1 , 431 49 431 50 179 13 hmac_sha1_res 431 51 431 64 203 1 , 431 64 431 65 179 1 & 431 66 431 67 18446744073709551615 10 sha_length 431 67 431 77 206 1 ) 431 77 431 78 179 1 ; 431 78 431 79 18446744073709551615 6 memcpy 432 5 432 11 150 1 ( 432 11 432 12 150 1 R 432 12 432 13 204 1 + 432 14 432 15 18446744073709551615 1 i 432 16 432 17 200 1 * 432 18 432 19 18446744073709551615 2 20 432 20 432 22 18446744073709551615 1 , 432 22 432 23 150 13 hmac_sha1_res 432 24 432 37 203 1 , 432 37 432 38 150 2 20 432 39 432 41 18446744073709551615 1 ) 432 41 432 42 150 1 ; 432 42 432 43 18446744073709551615 1 i 433 5 433 6 200 2 ++ 433 6 433 8 18446744073709551615 1 ; 433 8 433 9 18446744073709551615 1 } 434 3 434 4 18446744073709551615 6 memcpy 435 3 435 9 150 1 ( 435 9 435 10 150 3 ptk 435 10 435 13 198 1 , 435 13 435 14 150 1 R 435 15 435 16 204 1 , 435 16 435 17 150 2 64 435 18 435 20 18446744073709551615 1 ) 435 20 435 21 150 1 ; 435 21 435 22 18446744073709551615 6 return 436 3 436 9 18446744073709551615 3 ptk 436 10 436 13 198 1 ; 436 13 436 14 18446744073709551615 1 } 437 1 437 2 18446744073709551615 6 u_char 439 1 439 7 2 1 * 439 8 439 9 107 15 hexstr_to_bytes 439 9 439 24 107 1 ( 439 24 439 25 107 6 u_char 439 25 439 31 2 1 * 439 32 439 33 18446744073709551615 6 hexstr 439 33 439 39 207 1 ) 439 39 439 40 107 1 { 439 41 439 42 18446744073709551615 6 size_t 440 3 440 9 106 3 len 440 10 440 13 208 1 = 440 14 440 15 18446744073709551615 6 strlen 440 16 440 22 129 1 ( 440 22 440 23 129 6 hexstr 440 23 440 29 207 1 ) 440 29 440 30 129 1 ; 440 30 440 31 18446744073709551615 2 if 441 3 441 5 18446744073709551615 1 ( 441 5 441 6 18446744073709551615 3 len 441 6 441 9 208 1 % 441 10 441 11 18446744073709551615 1 2 441 12 441 13 18446744073709551615 2 != 441 14 441 16 18446744073709551615 1 0 441 17 441 18 18446744073709551615 1 ) 441 18 441 19 18446744073709551615 6 return 442 5 442 11 18446744073709551615 4 NULL 442 12 442 16 18446744073709551615 1 ; 442 16 442 17 18446744073709551615 6 size_t 443 3 443 9 106 9 final_len 443 10 443 19 209 1 = 443 20 443 21 18446744073709551615 3 len 443 22 443 25 208 1 / 443 26 443 27 18446744073709551615 1 2 443 28 443 29 18446744073709551615 1 ; 443 29 443 30 18446744073709551615 8 unsigned 444 3 444 11 18446744073709551615 4 char 444 12 444 16 18446744073709551615 1 * 444 17 444 18 18446744073709551615 4 chrs 444 18 444 22 210 1 = 444 23 444 24 18446744073709551615 1 ( 444 25 444 26 18446744073709551615 8 unsigned 444 26 444 34 18446744073709551615 4 char 444 35 444 39 18446744073709551615 1 * 444 40 444 41 18446744073709551615 1 ) 444 41 444 42 18446744073709551615 6 malloc 444 42 444 48 169 1 ( 444 48 444 49 169 1 ( 444 49 444 50 18446744073709551615 9 final_len 444 50 444 59 209 1 ) 444 59 444 60 18446744073709551615 1 * 444 61 444 62 18446744073709551615 6 sizeof 444 63 444 69 18446744073709551615 1 ( 444 69 444 70 18446744073709551615 1 * 444 70 444 71 18446744073709551615 4 chrs 444 71 444 75 210 1 ) 444 75 444 76 18446744073709551615 1 ) 444 76 444 77 169 1 ; 444 77 444 78 18446744073709551615 3 for 445 3 445 6 18446744073709551615 1 ( 445 6 445 7 18446744073709551615 6 size_t 445 7 445 13 106 1 i 445 14 445 15 211 1 = 445 16 445 17 18446744073709551615 1 0 445 18 445 19 18446744073709551615 1 , 445 19 445 20 18446744073709551615 1 j 445 21 445 22 212 1 = 445 23 445 24 18446744073709551615 1 0 445 25 445 26 18446744073709551615 1 ; 445 26 445 27 18446744073709551615 1 j 445 28 445 29 212 1 < 445 30 445 31 18446744073709551615 9 final_len 445 32 445 41 209 1 ; 445 41 445 42 18446744073709551615 1 i 445 43 445 44 211 2 += 445 45 445 47 18446744073709551615 1 2 445 48 445 49 18446744073709551615 1 , 445 49 445 50 18446744073709551615 1 j 445 51 445 52 212 2 ++ 445 52 445 54 18446744073709551615 1 ) 445 54 445 55 18446744073709551615 4 chrs 446 5 446 9 210 1 [ 446 9 446 10 18446744073709551615 1 j 446 10 446 11 212 1 ] 446 11 446 12 18446744073709551615 1 = 446 13 446 14 18446744073709551615 1 ( 446 15 446 16 18446744073709551615 6 hexstr 446 16 446 22 207 1 [ 446 22 446 23 18446744073709551615 1 i 446 23 446 24 211 1 ] 446 24 446 25 18446744073709551615 1 % 446 26 446 27 18446744073709551615 2 32 446 28 446 30 18446744073709551615 1 + 446 31 446 32 18446744073709551615 1 9 446 33 446 34 18446744073709551615 1 ) 446 34 446 35 18446744073709551615 1 % 446 36 446 37 18446744073709551615 2 25 446 38 446 40 18446744073709551615 1 * 446 41 446 42 18446744073709551615 2 16 446 43 446 45 18446744073709551615 1 + 446 46 446 47 18446744073709551615 1 ( 446 48 446 49 18446744073709551615 6 hexstr 446 49 446 55 207 1 [ 446 55 446 56 18446744073709551615 1 i 446 56 446 57 211 1 + 446 58 446 59 18446744073709551615 1 1 446 60 446 61 18446744073709551615 1 ] 446 61 446 62 18446744073709551615 1 % 446 63 446 64 18446744073709551615 2 32 446 65 446 67 18446744073709551615 1 + 446 68 446 69 18446744073709551615 1 9 446 70 446 71 18446744073709551615 1 ) 446 71 446 72 18446744073709551615 1 % 446 73 446 74 18446744073709551615 2 25 446 75 446 77 18446744073709551615 1 ; 446 77 446 78 18446744073709551615 6 return 447 3 447 9 18446744073709551615 4 chrs 447 10 447 14 210 1 ; 447 14 447 15 18446744073709551615 1 } 448 1 448 2 18446744073709551615 6 u_char 450 1 450 7 2 14 packet_decrypt 450 8 450 22 103 1 ( 450 22 450 23 103 5 const 450 23 450 28 18446744073709551615 6 struct 450 29 450 35 18446744073709551615 11 pcap_pkthdr 450 36 450 47 101 1 * 450 48 450 49 18446744073709551615 6 header 450 49 450 55 213 1 , 450 55 450 56 103 5 const 450 57 450 62 18446744073709551615 6 u_char 450 63 450 69 2 1 * 450 70 450 71 18446744073709551615 6 buffer 450 71 450 77 214 1 , 450 77 450 78 103 6 struct 450 79 450 85 18446744073709551615 10 eapol_info 450 86 450 96 81 1 * 450 97 450 98 18446744073709551615 10 eapol_keys 450 98 450 108 215 1 ) 450 108 450 109 103 1 { 450 110 450 111 18446744073709551615 5 const 451 3 451 8 18446744073709551615 6 struct 451 9 451 15 18446744073709551615 12 sniff_802_11 451 16 451 28 9 1 * 451 29 451 30 18446744073709551615 10 hdr_802_11 451 30 451 40 216 1 ; 451 40 451 41 18446744073709551615 10 hdr_802_11 452 3 452 13 216 1 = 452 14 452 15 18446744073709551615 1 ( 452 16 452 17 18446744073709551615 6 struct 452 17 452 23 18446744073709551615 12 sniff_802_11 452 24 452 36 9 1 * 452 37 452 38 18446744073709551615 1 ) 452 38 452 39 18446744073709551615 1 ( 452 39 452 40 18446744073709551615 6 buffer 452 40 452 46 214 1 + 452 47 452 48 18446744073709551615 16 PRISM_HEADER_LEN 452 49 452 65 18446744073709551615 1 ) 452 65 452 66 18446744073709551615 1 ; 452 66 452 67 18446744073709551615 3 int 453 3 453 6 18446744073709551615 5 is_a4 453 7 453 12 217 1 , 453 12 453 13 18446744073709551615 1 i 453 14 453 15 218 1 , 453 15 453 16 18446744073709551615 1 n 453 17 453 18 219 1 , 453 18 453 19 18446744073709551615 15 hdr_ccmp_offset 453 20 453 35 220 1 , 453 35 453 36 18446744073709551615 6 blocks 453 37 453 43 221 1 , 453 43 453 44 18446744073709551615 6 is_qos 453 45 453 51 222 1 ; 453 51 453 52 18446744073709551615 3 int 454 3 454 6 18446744073709551615 8 data_len 454 7 454 15 223 1 , 454 15 454 16 18446744073709551615 4 last 454 17 454 21 224 1 , 454 21 454 22 18446744073709551615 6 offset 454 23 454 29 225 1 ; 454 29 454 30 18446744073709551615 6 u_char 455 3 455 9 2 12 ccmp_aes_ctr 455 10 455 22 226 1 [ 455 22 455 23 18446744073709551615 2 16 455 23 455 25 18446744073709551615 1 ] 455 25 455 26 18446744073709551615 1 , 455 26 455 27 18446744073709551615 1 B 455 28 455 29 227 1 [ 455 29 455 30 18446744073709551615 2 16 455 30 455 32 18446744073709551615 1 ] 455 32 455 33 18446744073709551615 1 , 455 33 455 34 18446744073709551615 3 MIC 455 35 455 38 228 1 [ 455 38 455 39 18446744073709551615 2 16 455 39 455 41 18446744073709551615 1 ] 455 41 455 42 18446744073709551615 1 ; 455 42 455 43 18446744073709551615 6 u_char 456 3 456 9 2 13 packet_number 456 10 456 23 229 1 [ 456 23 456 24 18446744073709551615 1 6 456 24 456 25 18446744073709551615 1 ] 456 25 456 26 18446744073709551615 1 ; 456 26 456 27 18446744073709551615 5 is_a4 458 3 458 8 217 1 = 458 9 458 10 18446744073709551615 1 ( 458 11 458 12 18446744073709551615 10 hdr_802_11 458 12 458 22 216 2 -> 458 22 458 24 18446744073709551615 13 frame_control 458 24 458 37 10 1 [ 458 37 458 38 18446744073709551615 1 1 458 38 458 39 18446744073709551615 1 ] 458 39 458 40 18446744073709551615 1 & 458 41 458 42 18446744073709551615 1 3 458 43 458 44 18446744073709551615 1 ) 458 44 458 45 18446744073709551615 2 == 458 46 458 48 18446744073709551615 1 3 458 49 458 50 18446744073709551615 1 ; 458 50 458 51 18446744073709551615 6 is_qos 459 3 459 9 222 1 = 459 10 459 11 18446744073709551615 1 ( 459 12 459 13 18446744073709551615 10 hdr_802_11 459 13 459 23 216 2 -> 459 23 459 25 18446744073709551615 13 frame_control 459 25 459 38 10 1 [ 459 38 459 39 18446744073709551615 1 0 459 39 459 40 18446744073709551615 1 ] 459 40 459 41 18446744073709551615 1 & 459 42 459 43 18446744073709551615 4 0x8C 459 44 459 48 18446744073709551615 1 ) 459 48 459 49 18446744073709551615 2 == 459 50 459 52 18446744073709551615 4 0x88 459 53 459 57 18446744073709551615 1 ; 459 57 459 58 18446744073709551615 15 hdr_ccmp_offset 460 3 460 18 220 1 = 460 19 460 20 18446744073709551615 2 24 460 21 460 23 18446744073709551615 1 + 460 24 460 25 18446744073709551615 1 6 460 26 460 27 18446744073709551615 1 * 460 28 460 29 18446744073709551615 5 is_a4 460 30 460 35 217 1 ; 460 35 460 36 18446744073709551615 15 hdr_ccmp_offset 461 3 461 18 220 2 += 461 19 461 21 18446744073709551615 1 2 461 22 461 23 18446744073709551615 1 * 461 24 461 25 18446744073709551615 6 is_qos 461 26 461 32 222 1 ; 461 32 461 33 18446744073709551615 8 data_len 463 3 463 11 223 1 = 463 12 463 13 18446744073709551615 6 header 463 14 463 20 213 2 -> 463 20 463 22 18446744073709551615 6 caplen 463 22 463 28 230 1 - 463 29 463 30 18446744073709551615 16 PRISM_HEADER_LEN 463 31 463 47 18446744073709551615 1 - 463 48 463 49 18446744073709551615 15 hdr_ccmp_offset 463 50 463 65 220 1 - 463 66 463 67 18446744073709551615 1 8 463 68 463 69 18446744073709551615 1 - 463 70 463 71 18446744073709551615 1 8 463 72 463 73 18446744073709551615 1 - 463 74 463 75 18446744073709551615 1 4 463 76 463 77 18446744073709551615 1 ; 463 77 463 78 18446744073709551615 13 packet_number 465 3 465 16 229 1 [ 465 16 465 17 18446744073709551615 1 0 465 17 465 18 18446744073709551615 1 ] 465 18 465 19 18446744073709551615 1 = 465 20 465 21 18446744073709551615 1 * 465 22 465 23 18446744073709551615 1 ( 465 23 465 24 18446744073709551615 6 buffer 465 24 465 30 214 1 + 465 31 465 32 18446744073709551615 16 PRISM_HEADER_LEN 465 33 465 49 18446744073709551615 1 + 465 50 465 51 18446744073709551615 15 hdr_ccmp_offset 465 52 465 67 220 1 + 465 68 465 69 18446744073709551615 1 7 465 70 465 71 18446744073709551615 1 ) 465 71 465 72 18446744073709551615 1 ; 465 72 465 73 18446744073709551615 13 packet_number 466 3 466 16 229 1 [ 466 16 466 17 18446744073709551615 1 1 466 17 466 18 18446744073709551615 1 ] 466 18 466 19 18446744073709551615 1 = 466 20 466 21 18446744073709551615 1 * 466 22 466 23 18446744073709551615 1 ( 466 23 466 24 18446744073709551615 6 buffer 466 24 466 30 214 1 + 466 31 466 32 18446744073709551615 16 PRISM_HEADER_LEN 466 33 466 49 18446744073709551615 1 + 466 50 466 51 18446744073709551615 15 hdr_ccmp_offset 466 52 466 67 220 1 + 466 68 466 69 18446744073709551615 1 6 466 70 466 71 18446744073709551615 1 ) 466 71 466 72 18446744073709551615 1 ; 466 72 466 73 18446744073709551615 13 packet_number 467 3 467 16 229 1 [ 467 16 467 17 18446744073709551615 1 2 467 17 467 18 18446744073709551615 1 ] 467 18 467 19 18446744073709551615 1 = 467 20 467 21 18446744073709551615 1 * 467 22 467 23 18446744073709551615 1 ( 467 23 467 24 18446744073709551615 6 buffer 467 24 467 30 214 1 + 467 31 467 32 18446744073709551615 16 PRISM_HEADER_LEN 467 33 467 49 18446744073709551615 1 + 467 50 467 51 18446744073709551615 15 hdr_ccmp_offset 467 52 467 67 220 1 + 467 68 467 69 18446744073709551615 1 5 467 70 467 71 18446744073709551615 1 ) 467 71 467 72 18446744073709551615 1 ; 467 72 467 73 18446744073709551615 13 packet_number 468 3 468 16 229 1 [ 468 16 468 17 18446744073709551615 1 3 468 17 468 18 18446744073709551615 1 ] 468 18 468 19 18446744073709551615 1 = 468 20 468 21 18446744073709551615 1 * 468 22 468 23 18446744073709551615 1 ( 468 23 468 24 18446744073709551615 6 buffer 468 24 468 30 214 1 + 468 31 468 32 18446744073709551615 16 PRISM_HEADER_LEN 468 33 468 49 18446744073709551615 1 + 468 50 468 51 18446744073709551615 15 hdr_ccmp_offset 468 52 468 67 220 1 + 468 68 468 69 18446744073709551615 1 4 468 70 468 71 18446744073709551615 1 ) 468 71 468 72 18446744073709551615 1 ; 468 72 468 73 18446744073709551615 13 packet_number 469 3 469 16 229 1 [ 469 16 469 17 18446744073709551615 1 4 469 17 469 18 18446744073709551615 1 ] 469 18 469 19 18446744073709551615 1 = 469 20 469 21 18446744073709551615 1 * 469 22 469 23 18446744073709551615 1 ( 469 23 469 24 18446744073709551615 6 buffer 469 24 469 30 214 1 + 469 31 469 32 18446744073709551615 16 PRISM_HEADER_LEN 469 33 469 49 18446744073709551615 1 + 469 50 469 51 18446744073709551615 15 hdr_ccmp_offset 469 52 469 67 220 1 + 469 68 469 69 18446744073709551615 1 1 469 70 469 71 18446744073709551615 1 ) 469 71 469 72 18446744073709551615 1 ; 469 72 469 73 18446744073709551615 13 packet_number 470 3 470 16 229 1 [ 470 16 470 17 18446744073709551615 1 5 470 17 470 18 18446744073709551615 1 ] 470 18 470 19 18446744073709551615 1 = 470 20 470 21 18446744073709551615 1 * 470 22 470 23 18446744073709551615 1 ( 470 23 470 24 18446744073709551615 6 buffer 470 24 470 30 214 1 + 470 31 470 32 18446744073709551615 16 PRISM_HEADER_LEN 470 33 470 49 18446744073709551615 1 + 470 50 470 51 18446744073709551615 15 hdr_ccmp_offset 470 52 470 67 220 1 ) 470 67 470 68 18446744073709551615 1 ; 470 68 470 69 18446744073709551615 57 //ccmp_aes_ctr [0x59|priority|src_addr|packet_number|ctr] 472 3 472 60 18446744073709551615 12 ccmp_aes_ctr 473 3 473 15 226 1 [ 473 15 473 16 18446744073709551615 1 0 473 16 473 17 18446744073709551615 1 ] 473 17 473 18 18446744073709551615 1 = 473 19 473 20 18446744073709551615 4 0x59 473 21 473 25 18446744073709551615 1 ; 473 25 473 26 18446744073709551615 12 ccmp_aes_ctr 474 3 474 15 226 1 [ 474 15 474 16 18446744073709551615 1 1 474 16 474 17 18446744073709551615 1 ] 474 17 474 18 18446744073709551615 1 = 474 19 474 20 18446744073709551615 1 0 474 21 474 22 18446744073709551615 1 ; 474 22 474 23 18446744073709551615 6 memcpy 475 3 475 9 150 1 ( 475 9 475 10 150 1 & 475 10 475 11 18446744073709551615 12 ccmp_aes_ctr 475 11 475 23 226 1 [ 475 23 475 24 18446744073709551615 1 2 475 24 475 25 18446744073709551615 1 ] 475 25 475 26 18446744073709551615 1 , 475 26 475 27 150 10 hdr_802_11 475 28 475 38 216 2 -> 475 38 475 40 18446744073709551615 5 addr2 475 40 475 45 13 1 , 475 45 475 46 150 12 MAC_ADDR_LEN 475 47 475 59 150 1 ) 475 59 475 60 150 1 ; 475 60 475 61 18446744073709551615 6 memcpy 476 3 476 9 150 1 ( 476 9 476 10 150 1 & 476 10 476 11 18446744073709551615 12 ccmp_aes_ctr 476 11 476 23 226 1 [ 476 23 476 24 18446744073709551615 1 2 476 24 476 25 18446744073709551615 1 + 476 26 476 27 18446744073709551615 12 MAC_ADDR_LEN 476 28 476 40 18446744073709551615 1 ] 476 40 476 41 18446744073709551615 1 , 476 41 476 42 150 13 packet_number 476 43 476 56 229 1 , 476 56 476 57 150 1 6 476 58 476 59 18446744073709551615 1 ) 476 59 476 60 150 1 ; 476 60 476 61 18446744073709551615 12 ccmp_aes_ctr 477 3 477 15 226 1 [ 477 15 477 16 18446744073709551615 2 14 477 16 477 18 18446744073709551615 1 ] 477 18 477 19 18446744073709551615 1 = 477 20 477 21 18446744073709551615 1 ( 477 22 477 23 18446744073709551615 8 data_len 477 23 477 31 223 2 >> 477 32 477 34 18446744073709551615 1 8 477 35 477 36 18446744073709551615 1 ) 477 36 477 37 18446744073709551615 1 & 477 38 477 39 18446744073709551615 4 0xFF 477 40 477 44 18446744073709551615 1 ; 477 44 477 45 18446744073709551615 12 ccmp_aes_ctr 478 3 478 15 226 1 [ 478 15 478 16 18446744073709551615 2 15 478 16 478 18 18446744073709551615 1 ] 478 18 478 19 18446744073709551615 1 = 478 20 478 21 18446744073709551615 1 ( 478 22 478 23 18446744073709551615 8 data_len 478 23 478 31 223 1 & 478 32 478 33 18446744073709551615 4 0xFF 478 34 478 38 18446744073709551615 1 ) 478 38 478 39 18446744073709551615 1 ; 478 39 478 40 18446744073709551615 6 u_char 480 3 480 9 2 3 AAD 480 10 480 13 231 1 [ 480 13 480 14 18446744073709551615 2 32 480 14 480 16 18446744073709551615 1 ] 480 16 480 17 18446744073709551615 1 = 480 18 480 19 18446744073709551615 1 { 480 20 480 21 18446744073709551615 1 0 480 21 480 22 18446744073709551615 1 } 480 22 480 23 18446744073709551615 1 ; 480 23 480 24 18446744073709551615 3 AAD 481 3 481 6 231 1 [ 481 6 481 7 18446744073709551615 1 2 481 7 481 8 18446744073709551615 1 ] 481 8 481 9 18446744073709551615 1 = 481 10 481 11 18446744073709551615 10 hdr_802_11 481 12 481 22 216 2 -> 481 22 481 24 18446744073709551615 13 frame_control 481 24 481 37 10 1 [ 481 37 481 38 18446744073709551615 1 0 481 38 481 39 18446744073709551615 1 ] 481 39 481 40 18446744073709551615 1 & 481 41 481 42 18446744073709551615 4 0x8F 481 43 481 47 18446744073709551615 1 ; 481 47 481 48 18446744073709551615 3 AAD 482 3 482 6 231 1 [ 482 6 482 7 18446744073709551615 1 3 482 7 482 8 18446744073709551615 1 ] 482 8 482 9 18446744073709551615 1 = 482 10 482 11 18446744073709551615 10 hdr_802_11 482 12 482 22 216 2 -> 482 22 482 24 18446744073709551615 13 frame_control 482 24 482 37 10 1 [ 482 37 482 38 18446744073709551615 1 1 482 38 482 39 18446744073709551615 1 ] 482 39 482 40 18446744073709551615 1 & 482 41 482 42 18446744073709551615 4 0xC7 482 43 482 47 18446744073709551615 1 ; 482 47 482 48 18446744073709551615 6 memcpy 483 3 483 9 150 1 ( 483 9 483 10 150 3 AAD 483 10 483 13 231 1 + 483 14 483 15 18446744073709551615 1 4 483 16 483 17 18446744073709551615 1 , 483 17 483 18 150 1 & 483 19 483 20 18446744073709551615 1 ( 483 20 483 21 18446744073709551615 10 hdr_802_11 483 21 483 31 216 2 -> 483 31 483 33 18446744073709551615 5 addr1 483 33 483 38 12 1 ) 483 38 483 39 18446744073709551615 1 , 483 39 483 40 150 1 3 483 41 483 42 18446744073709551615 1 * 483 43 483 44 18446744073709551615 1 6 483 45 483 46 18446744073709551615 1 ) 483 46 483 47 150 1 ; 483 47 483 48 18446744073709551615 3 AAD 484 3 484 6 231 1 [ 484 6 484 7 18446744073709551615 2 22 484 7 484 9 18446744073709551615 1 ] 484 9 484 10 18446744073709551615 1 = 484 11 484 12 18446744073709551615 10 hdr_802_11 484 13 484 23 216 2 -> 484 23 484 25 18446744073709551615 16 sequence_control 484 25 484 41 15 1 [ 484 41 484 42 18446744073709551615 1 0 484 42 484 43 18446744073709551615 1 ] 484 43 484 44 18446744073709551615 1 & 484 45 484 46 18446744073709551615 4 0x0F 484 47 484 51 18446744073709551615 1 ; 484 51 484 52 18446744073709551615 2 if 486 3 486 5 18446744073709551615 1 ( 486 5 486 6 18446744073709551615 6 is_qos 486 6 486 12 222 1 ) 486 12 486 13 18446744073709551615 1 { 486 14 486 15 18446744073709551615 6 memcpy 487 5 487 11 150 1 ( 487 11 487 12 150 1 & 487 12 487 13 18446744073709551615 3 AAD 487 13 487 16 231 1 [ 487 16 487 17 18446744073709551615 2 24 487 17 487 19 18446744073709551615 1 ] 487 19 487 20 18446744073709551615 1 , 487 20 487 21 150 10 hdr_802_11 487 22 487 32 216 2 -> 487 32 487 34 18446744073709551615 11 qos_control 487 34 487 45 16 1 , 487 45 487 46 150 1 2 487 47 487 48 18446744073709551615 1 ) 487 48 487 49 150 1 ; 487 49 487 50 18446744073709551615 12 ccmp_aes_ctr 488 5 488 17 226 1 [ 488 17 488 18 18446744073709551615 1 1 488 18 488 19 18446744073709551615 1 ] 488 19 488 20 18446744073709551615 1 = 488 21 488 22 18446744073709551615 3 AAD 488 23 488 26 231 1 [ 488 26 488 27 18446744073709551615 2 24 488 27 488 29 18446744073709551615 1 ] 488 29 488 30 18446744073709551615 1 ; 488 30 488 31 18446744073709551615 3 AAD 489 5 489 8 231 1 [ 489 8 489 9 18446744073709551615 1 1 489 9 489 10 18446744073709551615 1 ] 489 10 489 11 18446744073709551615 1 = 489 12 489 13 18446744073709551615 2 22 489 14 489 16 18446744073709551615 1 + 489 17 489 18 18446744073709551615 1 2 489 19 489 20 18446744073709551615 1 ; 489 20 489 21 18446744073709551615 1 } 490 3 490 4 18446744073709551615 4 else 491 3 491 7 18446744073709551615 1 { 491 8 491 9 18446744073709551615 6 memset 492 5 492 11 232 1 ( 492 11 492 12 232 1 & 492 12 492 13 18446744073709551615 3 AAD 492 13 492 16 231 1 [ 492 16 492 17 18446744073709551615 2 24 492 17 492 19 18446744073709551615 1 ] 492 19 492 20 18446744073709551615 1 , 492 20 492 21 232 1 0 492 22 492 23 18446744073709551615 1 , 492 23 492 24 232 1 2 492 25 492 26 18446744073709551615 1 ) 492 26 492 27 232 1 ; 492 27 492 28 18446744073709551615 12 ccmp_aes_ctr 493 5 493 17 226 1 [ 493 17 493 18 18446744073709551615 1 1 493 18 493 19 18446744073709551615 1 ] 493 19 493 20 18446744073709551615 1 = 493 21 493 22 18446744073709551615 1 0 493 23 493 24 18446744073709551615 1 ; 493 24 493 25 18446744073709551615 3 AAD 494 5 494 8 231 1 [ 494 8 494 9 18446744073709551615 1 1 494 9 494 10 18446744073709551615 1 ] 494 10 494 11 18446744073709551615 1 = 494 12 494 13 18446744073709551615 2 22 494 14 494 16 18446744073709551615 1 + 494 17 494 18 18446744073709551615 1 2 494 19 494 20 18446744073709551615 1 ; 494 20 494 21 18446744073709551615 1 } 495 3 495 4 18446744073709551615 7 AES_KEY 497 3 497 10 233 2 TK 497 11 497 13 234 1 ; 497 13 497 14 18446744073709551615 19 AES_set_encrypt_key 498 3 498 22 235 1 ( 498 22 498 23 235 10 eapol_keys 498 23 498 33 215 2 -> 498 33 498 35 18446744073709551615 3 PTK 498 35 498 38 85 1 . 498 38 498 39 18446744073709551615 2 tk 498 39 498 41 78 1 , 498 41 498 42 235 3 128 498 43 498 46 18446744073709551615 1 , 498 46 498 47 235 1 & 498 48 498 49 18446744073709551615 2 TK 498 49 498 51 234 1 ) 498 51 498 52 235 1 ; 498 52 498 53 18446744073709551615 11 AES_encrypt 499 3 499 14 236 1 ( 499 14 499 15 236 12 ccmp_aes_ctr 499 15 499 27 226 1 , 499 27 499 28 236 3 MIC 499 29 499 32 228 1 , 499 32 499 33 236 1 & 499 34 499 35 18446744073709551615 2 TK 499 35 499 37 234 1 ) 499 37 499 38 236 1 ; 499 38 499 39 18446744073709551615 3 XOR 500 3 500 6 108 1 ( 500 6 500 7 108 3 MIC 500 7 500 10 228 1 , 500 10 500 11 108 3 AAD 500 12 500 15 231 1 , 500 15 500 16 108 2 16 500 17 500 19 18446744073709551615 1 ) 500 19 500 20 108 1 ; 500 20 500 21 18446744073709551615 11 AES_encrypt 501 3 501 14 236 1 ( 501 14 501 15 236 3 MIC 501 15 501 18 228 1 , 501 18 501 19 236 3 MIC 501 20 501 23 228 1 , 501 23 501 24 236 1 & 501 25 501 26 18446744073709551615 2 TK 501 26 501 28 234 1 ) 501 28 501 29 236 1 ; 501 29 501 30 18446744073709551615 3 XOR 502 3 502 6 108 1 ( 502 6 502 7 108 3 MIC 502 7 502 10 228 1 , 502 10 502 11 108 3 AAD 502 12 502 15 231 1 + 502 16 502 17 18446744073709551615 2 16 502 18 502 20 18446744073709551615 1 , 502 20 502 21 108 2 16 502 22 502 24 18446744073709551615 1 ) 502 24 502 25 108 1 ; 502 25 502 26 18446744073709551615 11 AES_encrypt 503 3 503 14 236 1 ( 503 14 503 15 236 3 MIC 503 15 503 18 228 1 , 503 18 503 19 236 3 MIC 503 20 503 23 228 1 , 503 23 503 24 236 1 & 503 25 503 26 18446744073709551615 2 TK 503 26 503 28 234 1 ) 503 28 503 29 236 1 ; 503 29 503 30 18446744073709551615 12 ccmp_aes_ctr 505 3 505 15 226 1 [ 505 15 505 16 18446744073709551615 1 0 505 16 505 17 18446744073709551615 1 ] 505 17 505 18 18446744073709551615 2 &= 505 19 505 21 18446744073709551615 4 0x07 505 22 505 26 18446744073709551615 1 ; 505 26 505 27 18446744073709551615 12 ccmp_aes_ctr 506 3 506 15 226 1 [ 506 15 506 16 18446744073709551615 2 14 506 16 506 18 18446744073709551615 1 ] 506 18 506 19 18446744073709551615 1 = 506 20 506 21 18446744073709551615 12 ccmp_aes_ctr 506 22 506 34 226 1 [ 506 34 506 35 18446744073709551615 2 15 506 35 506 37 18446744073709551615 1 ] 506 37 506 38 18446744073709551615 1 = 506 39 506 40 18446744073709551615 1 0 506 41 506 42 18446744073709551615 1 ; 506 42 506 43 18446744073709551615 11 AES_encrypt 507 3 507 14 236 1 ( 507 14 507 15 236 12 ccmp_aes_ctr 507 15 507 27 226 1 , 507 27 507 28 236 1 B 507 29 507 30 227 1 , 507 30 507 31 236 1 & 507 32 507 33 18446744073709551615 2 TK 507 33 507 35 234 1 ) 507 35 507 36 236 1 ; 507 36 507 37 18446744073709551615 3 XOR 508 3 508 6 108 1 ( 508 6 508 7 108 6 buffer 508 7 508 13 214 1 + 508 14 508 15 18446744073709551615 6 header 508 16 508 22 213 2 -> 508 22 508 24 18446744073709551615 6 caplen 508 24 508 30 230 1 - 508 31 508 32 18446744073709551615 1 8 508 33 508 34 18446744073709551615 1 - 508 35 508 36 18446744073709551615 1 4 508 37 508 38 18446744073709551615 1 , 508 38 508 39 108 1 B 508 40 508 41 227 1 , 508 41 508 42 108 1 8 508 43 508 44 18446744073709551615 1 ) 508 44 508 45 108 1 ; 508 45 508 46 18446744073709551615 6 blocks 510 3 510 9 221 1 = 510 10 510 11 18446744073709551615 1 ( 510 12 510 13 18446744073709551615 8 data_len 510 13 510 21 223 1 + 510 22 510 23 18446744073709551615 2 16 510 24 510 26 18446744073709551615 1 - 510 27 510 28 18446744073709551615 1 1 510 29 510 30 18446744073709551615 1 ) 510 30 510 31 18446744073709551615 1 / 510 32 510 33 18446744073709551615 2 16 510 34 510 36 18446744073709551615 1 ; 510 36 510 37 18446744073709551615 4 last 511 3 511 7 224 1 = 511 8 511 9 18446744073709551615 8 data_len 511 10 511 18 223 1 % 511 19 511 20 18446744073709551615 2 16 511 21 511 23 18446744073709551615 1 ; 511 23 511 24 18446744073709551615 6 offset 512 3 512 9 225 1 = 512 10 512 11 18446744073709551615 15 hdr_ccmp_offset 512 12 512 27 220 1 + 512 28 512 29 18446744073709551615 1 8 512 30 512 31 18446744073709551615 1 ; 512 31 512 32 18446744073709551615 3 for 514 3 514 6 18446744073709551615 1 ( 514 6 514 7 18446744073709551615 1 i 514 7 514 8 218 1 = 514 9 514 10 18446744073709551615 1 1 514 11 514 12 18446744073709551615 1 ; 514 12 514 13 18446744073709551615 1 i 514 14 514 15 218 2 <= 514 16 514 18 18446744073709551615 6 blocks 514 19 514 25 221 1 ; 514 25 514 26 18446744073709551615 1 i 514 27 514 28 218 2 ++ 514 28 514 30 18446744073709551615 1 ) 514 30 514 31 18446744073709551615 1 { 514 32 514 33 18446744073709551615 1 n 515 5 515 6 219 1 = 515 7 515 8 18446744073709551615 1 ( 515 9 515 10 18446744073709551615 4 last 515 10 515 14 224 1 > 515 15 515 16 18446744073709551615 1 0 515 17 515 18 18446744073709551615 2 && 515 19 515 21 18446744073709551615 1 i 515 22 515 23 218 2 == 515 24 515 26 18446744073709551615 6 blocks 515 27 515 33 221 1 ) 515 33 515 34 18446744073709551615 1 ? 515 35 515 36 18446744073709551615 4 last 515 37 515 41 224 1 : 515 42 515 43 18446744073709551615 2 16 515 44 515 46 18446744073709551615 1 ; 515 46 515 47 18446744073709551615 12 ccmp_aes_ctr 517 5 517 17 226 1 [ 517 17 517 18 18446744073709551615 2 14 517 18 517 20 18446744073709551615 1 ] 517 20 517 21 18446744073709551615 1 = 517 22 517 23 18446744073709551615 1 ( 517 24 517 25 18446744073709551615 1 i 517 25 517 26 218 2 >> 517 27 517 29 18446744073709551615 1 8 517 30 517 31 18446744073709551615 1 ) 517 31 517 32 18446744073709551615 1 & 517 33 517 34 18446744073709551615 4 0xFF 517 35 517 39 18446744073709551615 1 ; 517 39 517 40 18446744073709551615 12 ccmp_aes_ctr 518 5 518 17 226 1 [ 518 17 518 18 18446744073709551615 2 15 518 18 518 20 18446744073709551615 1 ] 518 20 518 21 18446744073709551615 1 = 518 22 518 23 18446744073709551615 1 i 518 24 518 25 218 1 & 518 26 518 27 18446744073709551615 4 0xFF 518 28 518 32 18446744073709551615 1 ; 518 32 518 33 18446744073709551615 11 AES_encrypt 520 5 520 16 236 1 ( 520 16 520 17 236 12 ccmp_aes_ctr 520 17 520 29 226 1 , 520 29 520 30 236 1 B 520 31 520 32 227 1 , 520 32 520 33 236 1 & 520 34 520 35 18446744073709551615 2 TK 520 35 520 37 234 1 ) 520 37 520 38 236 1 ; 520 38 520 39 18446744073709551615 21 // S_i := E( K, A_i ) 520 40 520 61 18446744073709551615 3 XOR 521 5 521 8 108 1 ( 521 8 521 9 108 6 buffer 521 9 521 15 214 1 + 521 16 521 17 18446744073709551615 16 PRISM_HEADER_LEN 521 18 521 34 18446744073709551615 1 + 521 35 521 36 18446744073709551615 6 offset 521 37 521 43 225 1 , 521 43 521 44 108 1 B 521 45 521 46 227 1 , 521 46 521 47 108 1 n 521 48 521 49 219 1 ) 521 49 521 50 108 1 ; 521 50 521 51 18446744073709551615 3 XOR 522 5 522 8 108 1 ( 522 8 522 9 108 3 MIC 522 9 522 12 228 1 , 522 12 522 13 108 6 buffer 522 14 522 20 214 1 + 522 21 522 22 18446744073709551615 16 PRISM_HEADER_LEN 522 23 522 39 18446744073709551615 1 + 522 40 522 41 18446744073709551615 6 offset 522 42 522 48 225 1 , 522 48 522 49 108 1 n 522 50 522 51 219 1 ) 522 51 522 52 108 1 ; 522 52 522 53 18446744073709551615 11 AES_encrypt 523 5 523 16 236 1 ( 523 16 523 17 236 3 MIC 523 17 523 20 228 1 , 523 20 523 21 236 3 MIC 523 22 523 25 228 1 , 523 25 523 26 236 1 & 523 27 523 28 18446744073709551615 2 TK 523 28 523 30 234 1 ) 523 30 523 31 236 1 ; 523 31 523 32 18446744073709551615 6 offset 525 5 525 11 225 2 += 525 12 525 14 18446744073709551615 1 n 525 15 525 16 219 1 ; 525 16 525 17 18446744073709551615 1 } 526 3 526 4 18446744073709551615 6 return 528 3 528 9 18446744073709551615 6 memcmp 528 10 528 16 165 1 ( 528 16 528 17 165 6 buffer 528 17 528 23 214 1 + 528 24 528 25 18446744073709551615 16 PRISM_HEADER_LEN 528 26 528 42 18446744073709551615 1 + 528 43 528 44 18446744073709551615 6 offset 528 45 528 51 225 1 , 528 51 528 52 165 3 MIC 528 53 528 56 228 1 , 528 56 528 57 165 1 8 528 58 528 59 18446744073709551615 1 ) 528 59 528 60 165 2 == 528 61 528 63 18446744073709551615 1 0 528 64 528 65 18446744073709551615 1 ; 528 65 528 66 18446744073709551615 1 } 529 1 529 2 18446744073709551615 6 static 531 1 531 7 18446744073709551615 6 inline 531 8 531 14 18446744073709551615 4 void 531 15 531 19 18446744073709551615 3 XOR 531 20 531 23 108 1 ( 531 23 531 24 108 8 unsigned 531 24 531 32 18446744073709551615 4 char 531 33 531 37 18446744073709551615 1 * 531 38 531 39 18446744073709551615 3 dst 531 39 531 42 237 1 , 531 42 531 43 108 8 unsigned 531 44 531 52 18446744073709551615 4 char 531 53 531 57 18446744073709551615 1 * 531 58 531 59 18446744073709551615 3 src 531 59 531 62 238 1 , 531 62 531 63 108 3 int 531 64 531 67 18446744073709551615 3 len 531 68 531 71 239 1 ) 531 71 531 72 108 1 { 531 73 531 74 18446744073709551615 3 int 532 3 532 6 18446744073709551615 1 i 532 7 532 8 240 1 ; 532 8 532 9 18446744073709551615 3 for 533 3 533 6 18446744073709551615 1 ( 533 6 533 7 18446744073709551615 1 i 533 7 533 8 240 1 = 533 9 533 10 18446744073709551615 1 0 533 11 533 12 18446744073709551615 1 ; 533 12 533 13 18446744073709551615 1 i 533 14 533 15 240 1 < 533 16 533 17 18446744073709551615 3 len 533 18 533 21 239 1 ; 533 21 533 22 18446744073709551615 1 i 533 23 533 24 240 2 ++ 533 24 533 26 18446744073709551615 1 ) 533 26 533 27 18446744073709551615 3 dst 534 5 534 8 237 1 [ 534 8 534 9 18446744073709551615 1 i 534 9 534 10 240 1 ] 534 10 534 11 18446744073709551615 2 ^= 534 12 534 14 18446744073709551615 3 src 534 15 534 18 238 1 [ 534 18 534 19 18446744073709551615 1 i 534 19 534 20 240 1 ] 534 20 534 21 18446744073709551615 1 ; 534 21 534 22 18446744073709551615 1 } 535 1 535 2 18446744073709551615 4 void 537 1 537 5 18446744073709551615 14 dump_decrypted 537 6 537 20 110 1 ( 537 20 537 21 110 6 u_char 537 21 537 27 2 1 * 537 28 537 29 18446744073709551615 6 dumper 537 29 537 35 241 1 , 537 35 537 36 110 5 const 537 37 537 42 18446744073709551615 6 struct 537 43 537 49 18446744073709551615 11 pcap_pkthdr 537 50 537 61 101 1 * 537 62 537 63 18446744073709551615 6 header 537 63 537 69 242 1 , 537 69 537 70 110 5 const 537 71 537 76 18446744073709551615 6 u_char 537 77 537 83 2 1 * 537 84 537 85 18446744073709551615 6 buffer 537 85 537 91 243 1 ) 537 91 537 92 110 1 { 537 93 537 94 18446744073709551615 6 u_char 538 3 538 9 2 1 * 538 10 538 11 18446744073709551615 10 new_buffer 538 11 538 21 244 1 = 538 22 538 23 18446744073709551615 6 malloc 538 24 538 30 169 1 ( 538 30 538 31 169 6 header 538 31 538 37 242 2 -> 538 37 538 39 18446744073709551615 6 caplen 538 39 538 45 230 1 - 538 46 538 47 18446744073709551615 1 8 538 48 538 49 18446744073709551615 1 ) 538 49 538 50 169 1 ; 538 50 538 51 18446744073709551615 6 size_t 539 3 539 9 106 6 length 539 10 539 16 245 1 = 539 17 539 18 18446744073709551615 16 PRISM_HEADER_LEN 539 19 539 35 245 1 + 539 36 539 37 18446744073709551615 6 sizeof 539 38 539 44 18446744073709551615 1 ( 539 44 539 45 18446744073709551615 6 struct 539 45 539 51 18446744073709551615 12 sniff_802_11 539 52 539 64 9 1 ) 539 64 539 65 18446744073709551615 1 ; 539 65 539 66 18446744073709551615 6 memcpy 540 3 540 9 150 1 ( 540 9 540 10 150 10 new_buffer 540 10 540 20 244 1 , 540 20 540 21 150 6 buffer 540 22 540 28 243 1 , 540 28 540 29 150 6 length 540 30 540 36 245 1 ) 540 36 540 37 150 1 ; 540 37 540 38 18446744073709551615 6 memcpy 541 3 541 9 150 1 ( 541 9 541 10 150 10 new_buffer 541 10 541 20 244 1 + 541 21 541 22 18446744073709551615 6 length 541 23 541 29 245 1 , 541 29 541 30 150 6 buffer 541 31 541 37 243 1 + 541 38 541 39 18446744073709551615 6 length 541 40 541 46 245 1 + 541 47 541 48 18446744073709551615 1 8 541 49 541 50 18446744073709551615 1 , 541 50 541 51 150 6 header 541 52 541 58 242 2 -> 541 58 541 60 18446744073709551615 6 caplen 541 60 541 66 230 1 - 541 67 541 68 18446744073709551615 6 length 541 69 541 75 245 1 - 541 76 541 77 18446744073709551615 1 8 541 78 541 79 18446744073709551615 1 ) 541 79 541 80 150 1 ; 541 80 541 81 18446744073709551615 9 pcap_dump 542 3 542 12 246 1 ( 542 12 542 13 246 1 ( 542 13 542 14 18446744073709551615 6 u_char 542 14 542 20 2 1 * 542 21 542 22 18446744073709551615 1 ) 542 22 542 23 18446744073709551615 8 dumpfile 542 23 542 31 97 1 , 542 31 542 32 246 6 header 542 33 542 39 242 1 , 542 39 542 40 246 10 new_buffer 542 41 542 51 244 1 ) 542 51 542 52 246 1 ; 542 52 542 53 18446744073709551615 4 free 543 3 543 7 247 1 ( 543 7 543 8 247 10 new_buffer 543 8 543 18 244 1 ) 543 18 543 19 247 1 ; 543 19 543 20 18446744073709551615 1 } 544 1 544 2 18446744073709551615 0 0 248 0 0 0 9 0 0 1 3 0 11 SHA1_LENGTH 9 1 3 0 1 A 20 1 3 0 6 u_char 9 1 3 0 8 NULL_MIC 7 1 3 0 20 WAITING_EAPOL_KEY_2: 7 1 3 0 20 WAITING_EAPOL_KEY_3: 7 1 3 0 20 WAITING_EAPOL_KEY_4: 7 1 3 0 8 SUCCESS: 20 1 3 0 12 eapol_status 2 1 3 0 12 sniff_802_11 6 1 3 0 26 frame_control:sniff_802_11 6 1 3 0 24 duration_id:sniff_802_11 6 1 3 0 18 addr1:sniff_802_11 6 1 3 0 18 addr2:sniff_802_11 6 1 3 0 18 addr3:sniff_802_11 6 1 3 0 29 sequence_control:sniff_802_11 6 1 3 0 24 qos_control:sniff_802_11 2 1 3 0 19 sniff_802_11_beacon 6 1 3 0 33 frame_control:sniff_802_11_beacon 6 1 3 0 31 duration_id:sniff_802_11_beacon 6 1 3 0 25 addr1:sniff_802_11_beacon 6 1 3 0 25 addr2:sniff_802_11_beacon 6 1 3 0 25 addr3:sniff_802_11_beacon 6 1 3 0 36 sequence_control:sniff_802_11_beacon 2 1 3 0 9 sniff_LLC 6 1 3 0 14 dsap:sniff_LLC 6 1 3 0 14 ssap:sniff_LLC 6 1 3 0 23 control_field:sniff_LLC 2 1 3 0 10 sniff_SNAP 6 1 3 0 19 org_code:sniff_SNAP 6 1 3 0 15 type:sniff_SNAP 2 1 3 0 17 sniff_802_1x_auth 6 1 3 0 25 version:sniff_802_1x_auth 6 1 3 0 22 type:sniff_802_1x_auth 6 1 3 0 24 length:sniff_802_1x_auth 6 1 3 0 37 key_descriptor_type:sniff_802_1x_auth 6 1 3 0 33 key_information:sniff_802_1x_auth 6 1 3 0 28 key_length:sniff_802_1x_auth 6 1 3 0 32 replay_counter:sniff_802_1x_auth 6 1 3 0 31 wpa_key_nonce:sniff_802_1x_auth 6 1 3 0 28 wpa_key_IV:sniff_802_1x_auth 6 1 3 0 29 wpa_key_RSC:sniff_802_1x_auth 6 1 3 0 28 wpa_key_ID:sniff_802_1x_auth 6 1 3 0 29 wpa_key_MIC:sniff_802_1x_auth 6 1 3 0 37 wpa_key_data_length:sniff_802_1x_auth 2 1 3 0 8 sniff_IP 6 1 3 0 14 ip_hl:sniff_IP 6 1 3 0 13 ip_v:sniff_IP 6 1 3 0 15 ip_dss:sniff_IP 6 1 3 0 24 ip_total_length:sniff_IP 6 1 3 0 11 id:sniff_IP 6 1 3 0 14 flags:sniff_IP 6 1 3 0 24 fragment_offset:sniff_IP 6 1 3 0 12 ttl:sniff_IP 6 1 3 0 17 protocol:sniff_IP 6 1 3 0 21 hdr_checksum:sniff_IP 6 1 3 0 12 src:sniff_IP 6 1 3 0 12 dst:sniff_IP 2 1 3 0 9 sniff_TCP 6 1 3 0 18 src_port:sniff_TCP 6 1 3 0 18 dst_port:sniff_TCP 6 1 3 0 20 sqn_number:sniff_TCP 6 1 3 0 20 ack_number:sniff_TCP 6 1 3 0 17 hdr_len:sniff_TCP 6 1 3 0 19 reserved1:sniff_TCP 6 1 3 0 19 reserved2:sniff_TCP 6 1 3 0 13 urg:sniff_TCP 6 1 3 0 13 ack:sniff_TCP 6 1 3 0 13 psh:sniff_TCP 6 1 3 0 13 rst:sniff_TCP 6 1 3 0 13 syn:sniff_TCP 6 1 3 0 13 fin:sniff_TCP 6 1 3 0 21 window_size:sniff_TCP 6 1 3 0 22 tcp_checksum:sniff_TCP 6 1 3 0 24 urgent_pointer:sniff_TCP 2 1 3 0 3 ptk 6 1 3 0 7 kck:ptk 6 1 3 0 7 kek:ptk 6 1 3 0 6 tk:ptk 6 1 3 0 7 txk:ptk 6 1 3 0 7 trk:ptk 2 1 3 0 10 eapol_info 6 1 3 0 26 sta_mac_address:eapol_info 6 1 3 0 17 ANonce:eapol_info 6 1 3 0 17 SNonce:eapol_info 6 1 3 0 14 PTK:eapol_info 6 1 3 0 17 status:eapol_info 6 1 3 0 22 last_replay:eapol_info 9 1 3 0 14 ap_mac_address 9 1 3 0 3 psk 9 1 3 0 4 ssid 20 1 3 0 5 map_t 9 1 3 0 3 map 9 1 3 0 4 PTK0 20 1 3 0 4 FILE 9 1 3 0 2 fd 20 1 3 0 13 pcap_dumper_t 9 1 3 0 8 dumpfile 9 1 3 0 22 decrypted_packet_count 9 1 3 0 22 encrypted_packet_count 8 1 3 0 14 process_beacon 2 1 3 0 11 pcap_pkthdr 8 1 3 0 14 process_packet 8 1 3 0 14 packet_decrypt 8 1 3 0 12 mac_toString 8 1 3 0 6 PRF512 20 1 3 0 6 size_t 8 1 3 0 15 hexstr_to_bytes 8 1 3 0 3 XOR 10 1 3 0 57 142:62:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 14 dump_decrypted 8 1 3 0 4 main 10 1 3 0 57 145:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 145:26:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_new 9 1 3 0 57 149:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 150:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 151:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 152:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 153:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 2 1 3 0 11 bpf_program 9 1 3 0 57 154:22:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 6 pcap_t 9 1 3 0 57 155:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 156:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 157:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 158:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 160:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 20 fastpbkdf2_hmac_sha1 8 1 3 0 6 strlen 8 1 3 0 6 printf 9 1 3 0 57 164:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 17 pcap_open_offline 8 1 3 0 7 fprintf 8 1 3 0 5 fopen 8 1 3 0 15 pcap_dump_fopen 8 1 3 0 12 pcap_compile 8 1 3 0 11 pcap_geterr 8 1 3 0 14 pcap_setfilter 9 1 3 0 56 196:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 12 pcap_next_ex 8 1 3 0 8 asprintf 8 1 3 0 6 fclose 8 1 3 0 13 pcap_freecode 8 1 3 0 10 pcap_close 10 1 3 0 57 237:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 237:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 238:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 240:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 241:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memcpy 8 1 3 0 6 strcmp 10 1 3 0 57 251:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 251:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 252:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 254:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 255:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 256:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 257:22:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 259:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_get 9 1 3 0 57 274:18:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 306:31:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 309:34:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 311:16:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memcmp 9 1 3 0 57 314:43:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 316:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 319:32:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 malloc 8 1 3 0 11 hashmap_put 9 1 3 0 57 326:26:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 7 u_short 9 1 3 0 57 327:21:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 14 hashmap_remove 9 1 3 0 57 331:34:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 340:27:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 341:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 342:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 4 HMAC 8 1 3 0 8 EVP_sha1 9 1 3 0 57 354:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 355:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 356:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 368:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 369:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 370:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 387:28:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 388:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 389:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 8 snprintf 10 1 3 0 57 398:24:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 398:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 398:47:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 398:61:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 398:78:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 398:96:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 58 398:112:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 399:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 400:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 401:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 402:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 403:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 426:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 427:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 5 u_int 9 1 3 0 56 428:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 439:33:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 440:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 443:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 444:18:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 445:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 445:21:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 450:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 450:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 450:98:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 451:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 453:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 453:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 453:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 453:20:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 453:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 453:45:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 454:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 454:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 454:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 455:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 455:28:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 455:35:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 456:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 6 1 3 0 18 caplen:pcap_pkthdr 9 1 3 0 57 480:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memset 20 1 3 0 7 AES_KEY 9 1 3 0 57 497:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 19 AES_set_encrypt_key 8 1 3 0 11 AES_encrypt 10 1 3 0 57 531:39:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 531:59:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 531:68:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 532:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 537:29:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 537:63:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 537:85:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 538:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 539:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 9 pcap_dump 8 1 3 0 4 free 0 0 3 0 0 0 56 /home/florenzi/Documenti/juci_ws/wpa_decode/fastpbkdf2.h 1509296147 53 /home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 1262964973 50 /home/florenzi/Documenti/juci_ws/wpa_decode/main.c 1518096540