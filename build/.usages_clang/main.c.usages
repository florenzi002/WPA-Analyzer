22 serialization::archive 15 0 0 0 0 43 /home/florenzi/Documenti/juci_ws/wpa_decode 49 /home/florenzi/Documenti/juci_ws/wpa_decode/build 0 0 4356 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 14 "fastpbkdf2.h" 1 10 1 24 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 11 "hashmap.h" 2 10 2 21 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 7 openssl 3 11 3 18 18446744073709551615 1 / 3 18 3 19 18446744073709551615 3 aes 3 19 3 22 18446744073709551615 1 . 3 22 3 23 18446744073709551615 1 h 3 23 3 24 18446744073709551615 1 > 3 24 3 25 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 7 openssl 4 11 4 18 18446744073709551615 1 / 4 18 4 19 18446744073709551615 4 hmac 4 19 4 23 18446744073709551615 1 . 4 23 4 24 18446744073709551615 1 h 4 24 4 25 18446744073709551615 1 > 4 25 4 26 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 7 openssl 5 11 5 18 18446744073709551615 1 / 5 18 5 19 18446744073709551615 3 sha 5 19 5 22 18446744073709551615 1 . 5 22 5 23 18446744073709551615 1 h 5 23 5 24 18446744073709551615 1 > 5 24 5 25 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 1 < 6 10 6 11 18446744073709551615 4 pcap 6 11 6 15 18446744073709551615 1 . 6 15 6 16 18446744073709551615 1 h 6 16 6 17 18446744073709551615 1 > 6 17 6 18 18446744073709551615 1 # 7 1 7 2 18446744073709551615 7 include 7 2 7 9 18446744073709551615 1 < 7 10 7 11 18446744073709551615 5 stdio 7 11 7 16 18446744073709551615 1 . 7 16 7 17 18446744073709551615 1 h 7 17 7 18 18446744073709551615 1 > 7 18 7 19 18446744073709551615 1 # 8 1 8 2 18446744073709551615 7 include 8 2 8 9 18446744073709551615 1 < 8 10 8 11 18446744073709551615 6 stdlib 8 11 8 17 18446744073709551615 1 . 8 17 8 18 18446744073709551615 1 h 8 18 8 19 18446744073709551615 1 > 8 19 8 20 18446744073709551615 1 # 10 1 10 2 18446744073709551615 6 define 10 2 10 8 18446744073709551615 16 PRISM_HEADER_LEN 10 9 10 25 18446744073709551615 3 144 10 26 10 29 18446744073709551615 1 # 11 1 11 2 18446744073709551615 6 define 11 2 11 8 18446744073709551615 11 SSID_OFFSET 11 9 11 20 18446744073709551615 2 12 11 21 11 23 18446744073709551615 1 # 12 1 12 2 18446744073709551615 6 define 12 2 12 8 18446744073709551615 13 SIZE_ETHERNET 12 9 12 22 18446744073709551615 2 14 12 23 12 25 18446744073709551615 1 # 13 1 13 2 18446744073709551615 6 define 13 2 13 8 18446744073709551615 12 MAC_ADDR_LEN 13 9 13 21 18446744073709551615 1 6 13 22 13 23 18446744073709551615 1 # 14 1 14 2 18446744073709551615 6 define 14 2 14 8 18446744073709551615 7 LLC_LEN 14 9 14 16 18446744073709551615 1 8 14 17 14 18 18446744073709551615 1 # 15 1 15 2 18446744073709551615 6 define 15 2 15 8 18446744073709551615 16 TAKE_N_BITS_FROM 15 9 15 25 18446744073709551615 1 ( 15 25 15 26 18446744073709551615 1 b 15 26 15 27 18446744073709551615 1 , 15 27 15 28 18446744073709551615 1 p 15 29 15 30 18446744073709551615 1 , 15 30 15 31 18446744073709551615 1 n 15 32 15 33 18446744073709551615 1 ) 15 33 15 34 18446744073709551615 1 ( 15 35 15 36 18446744073709551615 1 ( 15 36 15 37 18446744073709551615 1 b 15 37 15 38 18446744073709551615 1 ) 15 38 15 39 18446744073709551615 2 >> 15 40 15 42 18446744073709551615 1 ( 15 43 15 44 18446744073709551615 1 p 15 44 15 45 18446744073709551615 1 ) 15 45 15 46 18446744073709551615 1 ) 15 46 15 47 18446744073709551615 1 & 15 48 15 49 18446744073709551615 1 ( 15 50 15 51 18446744073709551615 1 ( 15 51 15 52 18446744073709551615 1 1 15 52 15 53 18446744073709551615 2 << 15 54 15 56 18446744073709551615 1 ( 15 57 15 58 18446744073709551615 1 n 15 58 15 59 18446744073709551615 1 ) 15 59 15 60 18446744073709551615 1 ) 15 60 15 61 18446744073709551615 1 - 15 62 15 63 18446744073709551615 1 1 15 64 15 65 18446744073709551615 1 ) 15 65 15 66 18446744073709551615 1 # 16 1 16 2 18446744073709551615 6 define 16 2 16 8 18446744073709551615 13 IS_BIG_ENDIAN 16 9 16 22 18446744073709551615 1 ( 16 23 16 24 18446744073709551615 1 ! 16 24 16 25 18446744073709551615 1 * 16 25 16 26 18446744073709551615 1 ( 16 26 16 27 18446744073709551615 8 unsigned 16 27 16 35 18446744073709551615 4 char 16 36 16 40 18446744073709551615 1 * 16 41 16 42 18446744073709551615 1 ) 16 42 16 43 18446744073709551615 1 & 16 43 16 44 18446744073709551615 1 ( 16 44 16 45 18446744073709551615 8 uint16_t 16 45 16 53 18446744073709551615 1 ) 16 53 16 54 18446744073709551615 1 { 16 54 16 55 18446744073709551615 1 1 16 55 16 56 18446744073709551615 1 } 16 56 16 57 18446744073709551615 1 ) 16 57 16 58 18446744073709551615 5 const 18 1 18 6 18446744073709551615 4 char 18 7 18 11 18446744073709551615 1 A 18 12 18 13 0 1 [ 18 13 18 14 18446744073709551615 1 ] 18 14 18 15 18446744073709551615 1 = 18 16 18 17 18446744073709551615 24 "Pairwise key expansion" 18 18 18 42 18446744073709551615 1 ; 18 42 18 43 18446744073709551615 5 const 19 1 19 6 18446744073709551615 6 u_char 19 7 19 13 1 8 NULL_MIC 19 14 19 22 2 1 [ 19 22 19 23 18446744073709551615 2 16 19 23 19 25 18446744073709551615 1 ] 19 25 19 26 18446744073709551615 1 = 19 27 19 28 18446744073709551615 1 { 19 29 19 30 18446744073709551615 1 0 19 30 19 31 18446744073709551615 1 } 19 31 19 32 18446744073709551615 1 ; 19 32 19 33 18446744073709551615 7 typedef 21 1 21 8 18446744073709551615 4 enum 21 9 21 13 18446744073709551615 1 { 21 14 21 15 18446744073709551615 19 WAITING_EAPOL_KEY_2 21 16 21 35 3 1 , 21 35 21 36 18446744073709551615 19 WAITING_EAPOL_KEY_3 22 16 22 35 4 1 , 22 35 22 36 18446744073709551615 19 WAITING_EAPOL_KEY_4 23 16 23 35 5 1 , 23 35 23 36 18446744073709551615 7 SUCCESS 24 16 24 23 6 1 } 24 24 24 25 18446744073709551615 12 eapol_status 24 26 24 38 7 1 ; 24 38 24 39 18446744073709551615 23 /* 802.11 MAC header */ 26 1 26 24 18446744073709551615 6 struct 27 1 27 7 18446744073709551615 12 sniff_802_11 27 8 27 20 8 1 { 27 21 27 22 18446744073709551615 6 u_char 28 3 28 9 1 13 frame_control 28 10 28 23 9 1 [ 28 23 28 24 18446744073709551615 1 2 28 24 28 25 18446744073709551615 1 ] 28 25 28 26 18446744073709551615 1 ; 28 26 28 27 18446744073709551615 6 u_char 29 3 29 9 1 11 duration_id 29 10 29 21 10 1 [ 29 21 29 22 18446744073709551615 1 2 29 22 29 23 18446744073709551615 1 ] 29 23 29 24 18446744073709551615 1 ; 29 24 29 25 18446744073709551615 6 u_char 30 3 30 9 1 5 addr1 30 10 30 15 11 1 [ 30 15 30 16 18446744073709551615 12 MAC_ADDR_LEN 30 16 30 28 11 1 ] 30 28 30 29 18446744073709551615 1 ; 30 29 30 30 18446744073709551615 6 u_char 31 3 31 9 1 5 addr2 31 10 31 15 12 1 [ 31 15 31 16 18446744073709551615 12 MAC_ADDR_LEN 31 16 31 28 12 1 ] 31 28 31 29 18446744073709551615 1 ; 31 29 31 30 18446744073709551615 6 u_char 32 3 32 9 1 5 addr3 32 10 32 15 13 1 [ 32 15 32 16 18446744073709551615 12 MAC_ADDR_LEN 32 16 32 28 13 1 ] 32 28 32 29 18446744073709551615 1 ; 32 29 32 30 18446744073709551615 6 u_char 33 3 33 9 1 16 sequence_control 33 10 33 26 14 1 [ 33 26 33 27 18446744073709551615 1 2 33 27 33 28 18446744073709551615 1 ] 33 28 33 29 18446744073709551615 1 ; 33 29 33 30 18446744073709551615 6 u_char 34 3 34 9 1 11 qos_control 34 10 34 21 15 1 [ 34 21 34 22 18446744073709551615 1 2 34 22 34 23 18446744073709551615 1 ] 34 23 34 24 18446744073709551615 1 ; 34 24 34 25 18446744073709551615 1 } 35 1 35 2 18446744073709551615 1 ; 35 2 35 3 18446744073709551615 6 struct 37 1 37 7 18446744073709551615 19 sniff_802_11_beacon 37 8 37 27 16 1 { 37 28 37 29 18446744073709551615 6 u_char 38 3 38 9 1 13 frame_control 38 10 38 23 17 1 [ 38 23 38 24 18446744073709551615 1 2 38 24 38 25 18446744073709551615 1 ] 38 25 38 26 18446744073709551615 1 ; 38 26 38 27 18446744073709551615 6 u_char 39 3 39 9 1 11 duration_id 39 10 39 21 18 1 [ 39 21 39 22 18446744073709551615 1 2 39 22 39 23 18446744073709551615 1 ] 39 23 39 24 18446744073709551615 1 ; 39 24 39 25 18446744073709551615 6 u_char 40 3 40 9 1 5 addr1 40 10 40 15 19 1 [ 40 15 40 16 18446744073709551615 12 MAC_ADDR_LEN 40 16 40 28 19 1 ] 40 28 40 29 18446744073709551615 1 ; 40 29 40 30 18446744073709551615 6 u_char 41 3 41 9 1 5 addr2 41 10 41 15 20 1 [ 41 15 41 16 18446744073709551615 12 MAC_ADDR_LEN 41 16 41 28 20 1 ] 41 28 41 29 18446744073709551615 1 ; 41 29 41 30 18446744073709551615 6 u_char 42 3 42 9 1 5 addr3 42 10 42 15 21 1 [ 42 15 42 16 18446744073709551615 12 MAC_ADDR_LEN 42 16 42 28 21 1 ] 42 28 42 29 18446744073709551615 1 ; 42 29 42 30 18446744073709551615 6 u_char 43 3 43 9 1 16 sequence_control 43 10 43 26 22 1 [ 43 26 43 27 18446744073709551615 1 2 43 27 43 28 18446744073709551615 1 ] 43 28 43 29 18446744073709551615 1 ; 43 29 43 30 18446744073709551615 1 } 44 1 44 2 18446744073709551615 1 ; 44 2 44 3 18446744073709551615 6 struct 46 1 46 7 18446744073709551615 9 sniff_LLC 46 8 46 17 23 1 { 46 18 46 19 18446744073709551615 6 u_char 47 3 47 9 1 4 dsap 47 10 47 14 24 1 ; 47 14 47 15 18446744073709551615 6 u_char 48 3 48 9 1 4 ssap 48 10 48 14 25 1 ; 48 14 48 15 18446744073709551615 6 u_char 49 3 49 9 1 13 control_field 49 10 49 23 26 1 ; 49 23 49 24 18446744073709551615 1 } 50 1 50 2 18446744073709551615 1 ; 50 2 50 3 18446744073709551615 6 struct 52 1 52 7 18446744073709551615 10 sniff_SNAP 52 8 52 18 27 1 { 52 19 52 20 18446744073709551615 6 u_char 53 3 53 9 1 8 org_code 53 10 53 18 28 1 [ 53 18 53 19 18446744073709551615 1 3 53 19 53 20 18446744073709551615 1 ] 53 20 53 21 18446744073709551615 1 ; 53 21 53 22 18446744073709551615 6 u_char 54 3 54 9 1 4 type 54 10 54 14 29 1 [ 54 14 54 15 18446744073709551615 1 2 54 15 54 16 18446744073709551615 1 ] 54 16 54 17 18446744073709551615 1 ; 54 17 54 18 18446744073709551615 1 } 55 1 55 2 18446744073709551615 1 ; 55 2 55 3 18446744073709551615 6 struct 57 1 57 7 18446744073709551615 17 sniff_802_1x_auth 57 8 57 25 30 1 { 57 26 57 27 18446744073709551615 6 u_char 58 3 58 9 1 7 version 58 10 58 17 31 1 ; 58 17 58 18 18446744073709551615 6 u_char 59 3 59 9 1 4 type 59 10 59 14 32 1 ; 59 14 59 15 18446744073709551615 6 u_char 60 3 60 9 1 6 length 60 10 60 16 33 1 [ 60 16 60 17 18446744073709551615 1 2 60 17 60 18 18446744073709551615 1 ] 60 18 60 19 18446744073709551615 1 ; 60 19 60 20 18446744073709551615 6 u_char 61 3 61 9 1 19 key_descriptor_type 61 10 61 29 34 1 ; 61 29 61 30 18446744073709551615 6 u_char 62 3 62 9 1 15 key_information 62 10 62 25 35 1 [ 62 25 62 26 18446744073709551615 1 2 62 26 62 27 18446744073709551615 1 ] 62 27 62 28 18446744073709551615 1 ; 62 28 62 29 18446744073709551615 6 u_char 63 3 63 9 1 10 key_length 63 10 63 20 36 1 [ 63 20 63 21 18446744073709551615 1 2 63 21 63 22 18446744073709551615 1 ] 63 22 63 23 18446744073709551615 1 ; 63 23 63 24 18446744073709551615 6 u_char 64 3 64 9 1 14 replay_counter 64 10 64 24 37 1 [ 64 24 64 25 18446744073709551615 1 8 64 25 64 26 18446744073709551615 1 ] 64 26 64 27 18446744073709551615 1 ; 64 27 64 28 18446744073709551615 6 u_char 65 3 65 9 1 13 wpa_key_nonce 65 10 65 23 38 1 [ 65 23 65 24 18446744073709551615 2 32 65 24 65 26 18446744073709551615 1 ] 65 26 65 27 18446744073709551615 1 ; 65 27 65 28 18446744073709551615 6 u_char 66 3 66 9 1 10 wpa_key_IV 66 10 66 20 39 1 [ 66 20 66 21 18446744073709551615 2 16 66 21 66 23 18446744073709551615 1 ] 66 23 66 24 18446744073709551615 1 ; 66 24 66 25 18446744073709551615 6 u_char 67 3 67 9 1 11 wpa_key_RSC 67 10 67 21 40 1 [ 67 21 67 22 18446744073709551615 1 8 67 22 67 23 18446744073709551615 1 ] 67 23 67 24 18446744073709551615 1 ; 67 24 67 25 18446744073709551615 6 u_char 68 3 68 9 1 10 wpa_key_ID 68 10 68 20 41 1 [ 68 20 68 21 18446744073709551615 1 8 68 21 68 22 18446744073709551615 1 ] 68 22 68 23 18446744073709551615 1 ; 68 23 68 24 18446744073709551615 6 u_char 69 3 69 9 1 11 wpa_key_MIC 69 10 69 21 42 1 [ 69 21 69 22 18446744073709551615 2 16 69 22 69 24 18446744073709551615 1 ] 69 24 69 25 18446744073709551615 1 ; 69 25 69 26 18446744073709551615 6 u_char 70 3 70 9 1 19 wpa_key_data_length 70 10 70 29 43 1 [ 70 29 70 30 18446744073709551615 1 2 70 30 70 31 18446744073709551615 1 ] 70 31 70 32 18446744073709551615 1 ; 70 32 70 33 18446744073709551615 1 } 71 1 71 2 18446744073709551615 1 ; 71 2 71 3 18446744073709551615 6 struct 73 1 73 7 18446744073709551615 8 sniff_IP 73 8 73 16 44 1 { 73 17 73 18 18446744073709551615 6 u_char 74 3 74 9 1 5 ip_hl 74 10 74 15 45 1 : 74 15 74 16 18446744073709551615 1 4 74 16 74 17 18446744073709551615 1 , 74 17 74 18 18446744073709551615 4 ip_v 74 19 74 23 46 1 : 74 23 74 24 18446744073709551615 1 4 74 24 74 25 18446744073709551615 1 ; 74 25 74 26 18446744073709551615 6 u_char 75 3 75 9 1 6 ip_dss 75 10 75 16 47 1 ; 75 16 75 17 18446744073709551615 6 u_char 76 3 76 9 1 15 ip_total_length 76 10 76 25 48 1 [ 76 25 76 26 18446744073709551615 1 2 76 26 76 27 18446744073709551615 1 ] 76 27 76 28 18446744073709551615 1 ; 76 28 76 29 18446744073709551615 6 u_char 77 3 77 9 1 2 id 77 10 77 12 49 1 [ 77 12 77 13 18446744073709551615 1 2 77 13 77 14 18446744073709551615 1 ] 77 14 77 15 18446744073709551615 1 ; 77 15 77 16 18446744073709551615 6 u_char 78 3 78 9 1 5 flags 78 10 78 15 50 1 ; 78 15 78 16 18446744073709551615 6 u_char 79 3 79 9 1 15 fragment_offset 79 10 79 25 51 1 ; 79 25 79 26 18446744073709551615 6 u_char 80 3 80 9 1 3 ttl 80 10 80 13 52 1 ; 80 13 80 14 18446744073709551615 6 u_char 81 3 81 9 1 8 protocol 81 10 81 18 53 1 ; 81 18 81 19 18446744073709551615 6 u_char 82 3 82 9 1 12 hdr_checksum 82 10 82 22 54 1 [ 82 22 82 23 18446744073709551615 1 2 82 23 82 24 18446744073709551615 1 ] 82 24 82 25 18446744073709551615 1 ; 82 25 82 26 18446744073709551615 6 u_char 83 3 83 9 1 3 src 83 10 83 13 55 1 [ 83 13 83 14 18446744073709551615 1 4 83 14 83 15 18446744073709551615 1 ] 83 15 83 16 18446744073709551615 1 ; 83 16 83 17 18446744073709551615 6 u_char 84 3 84 9 1 3 dst 84 10 84 13 56 1 [ 84 13 84 14 18446744073709551615 1 4 84 14 84 15 18446744073709551615 1 ] 84 15 84 16 18446744073709551615 1 ; 84 16 84 17 18446744073709551615 1 } 85 1 85 2 18446744073709551615 1 ; 85 2 85 3 18446744073709551615 6 struct 87 1 87 7 18446744073709551615 9 sniff_TCP 87 8 87 17 57 1 { 87 18 87 19 18446744073709551615 6 u_char 88 3 88 9 1 8 src_port 88 10 88 18 58 1 [ 88 18 88 19 18446744073709551615 1 2 88 19 88 20 18446744073709551615 1 ] 88 20 88 21 18446744073709551615 1 ; 88 21 88 22 18446744073709551615 6 u_char 89 3 89 9 1 8 dst_port 89 10 89 18 59 1 [ 89 18 89 19 18446744073709551615 1 2 89 19 89 20 18446744073709551615 1 ] 89 20 89 21 18446744073709551615 1 ; 89 21 89 22 18446744073709551615 6 u_char 90 3 90 9 1 10 sqn_number 90 10 90 20 60 1 [ 90 20 90 21 18446744073709551615 1 4 90 21 90 22 18446744073709551615 1 ] 90 22 90 23 18446744073709551615 1 ; 90 23 90 24 18446744073709551615 6 u_char 91 3 91 9 1 10 ack_number 91 10 91 20 61 1 [ 91 20 91 21 18446744073709551615 1 4 91 21 91 22 18446744073709551615 1 ] 91 22 91 23 18446744073709551615 1 ; 91 23 91 24 18446744073709551615 6 u_char 92 3 92 9 1 7 hdr_len 92 10 92 17 62 1 : 92 17 92 18 18446744073709551615 1 4 92 18 92 19 18446744073709551615 1 , 92 19 92 20 18446744073709551615 9 reserved1 92 21 92 30 63 1 : 92 30 92 31 18446744073709551615 1 4 92 31 92 32 18446744073709551615 1 ; 92 32 92 33 18446744073709551615 6 u_char 93 3 93 9 1 9 reserved2 93 10 93 19 64 1 : 93 19 93 20 18446744073709551615 1 2 93 20 93 21 18446744073709551615 1 , 93 21 93 22 18446744073709551615 3 urg 93 23 93 26 65 1 : 93 26 93 27 18446744073709551615 1 1 93 27 93 28 18446744073709551615 1 , 93 28 93 29 18446744073709551615 3 ack 93 30 93 33 66 1 : 93 33 93 34 18446744073709551615 1 1 93 34 93 35 18446744073709551615 1 , 93 35 93 36 18446744073709551615 3 psh 93 37 93 40 67 1 : 93 40 93 41 18446744073709551615 1 1 93 41 93 42 18446744073709551615 1 , 93 42 93 43 18446744073709551615 3 rst 93 44 93 47 68 1 : 93 47 93 48 18446744073709551615 1 1 93 48 93 49 18446744073709551615 1 , 93 49 93 50 18446744073709551615 3 syn 93 51 93 54 69 1 : 93 54 93 55 18446744073709551615 1 1 93 55 93 56 18446744073709551615 1 , 93 56 93 57 18446744073709551615 3 fin 93 58 93 61 70 1 : 93 61 93 62 18446744073709551615 1 1 93 62 93 63 18446744073709551615 1 ; 93 63 93 64 18446744073709551615 6 u_char 94 3 94 9 1 11 window_size 94 10 94 21 71 1 [ 94 21 94 22 18446744073709551615 1 2 94 22 94 23 18446744073709551615 1 ] 94 23 94 24 18446744073709551615 1 ; 94 24 94 25 18446744073709551615 6 u_char 95 3 95 9 1 12 tcp_checksum 95 10 95 22 72 1 [ 95 22 95 23 18446744073709551615 1 2 95 23 95 24 18446744073709551615 1 ] 95 24 95 25 18446744073709551615 1 ; 95 25 95 26 18446744073709551615 6 u_char 96 3 96 9 1 14 urgent_pointer 96 10 96 24 73 1 [ 96 24 96 25 18446744073709551615 1 2 96 25 96 26 18446744073709551615 1 ] 96 26 96 27 18446744073709551615 1 ; 96 27 96 28 18446744073709551615 1 } 97 1 97 2 18446744073709551615 1 ; 97 2 97 3 18446744073709551615 6 struct 99 1 99 7 18446744073709551615 3 ptk 99 8 99 11 74 1 { 99 12 99 13 18446744073709551615 6 u_char 100 3 100 9 1 3 kck 100 10 100 13 75 1 [ 100 13 100 14 18446744073709551615 2 16 100 14 100 16 18446744073709551615 1 ] 100 16 100 17 18446744073709551615 1 ; 100 17 100 18 18446744073709551615 6 u_char 101 3 101 9 1 3 kek 101 10 101 13 76 1 [ 101 13 101 14 18446744073709551615 2 16 101 14 101 16 18446744073709551615 1 ] 101 16 101 17 18446744073709551615 1 ; 101 17 101 18 18446744073709551615 6 u_char 102 3 102 9 1 2 tk 102 10 102 12 77 1 [ 102 12 102 13 18446744073709551615 2 16 102 13 102 15 18446744073709551615 1 ] 102 15 102 16 18446744073709551615 1 ; 102 16 102 17 18446744073709551615 6 u_char 103 3 103 9 1 3 txk 103 10 103 13 78 1 [ 103 13 103 14 18446744073709551615 1 8 103 14 103 15 18446744073709551615 1 ] 103 15 103 16 18446744073709551615 1 ; 103 16 103 17 18446744073709551615 6 u_char 104 3 104 9 1 3 trk 104 10 104 13 79 1 [ 104 13 104 14 18446744073709551615 1 8 104 14 104 15 18446744073709551615 1 ] 104 15 104 16 18446744073709551615 1 ; 104 16 104 17 18446744073709551615 1 } 105 1 105 2 18446744073709551615 1 ; 105 2 105 3 18446744073709551615 6 struct 107 1 107 7 18446744073709551615 10 eapol_info 107 8 107 18 80 1 { 107 19 107 20 18446744073709551615 6 u_char 108 3 108 9 1 15 sta_mac_address 108 10 108 25 81 1 [ 108 25 108 26 18446744073709551615 12 MAC_ADDR_LEN 108 26 108 38 81 1 ] 108 38 108 39 18446744073709551615 1 ; 108 39 108 40 18446744073709551615 6 u_char 109 3 109 9 1 6 ANonce 109 10 109 16 82 1 [ 109 16 109 17 18446744073709551615 2 32 109 17 109 19 18446744073709551615 1 ] 109 19 109 20 18446744073709551615 1 ; 109 20 109 21 18446744073709551615 6 u_char 110 3 110 9 1 6 SNonce 110 10 110 16 83 1 [ 110 16 110 17 18446744073709551615 2 32 110 17 110 19 18446744073709551615 1 ] 110 19 110 20 18446744073709551615 1 ; 110 20 110 21 18446744073709551615 6 struct 111 3 111 9 18446744073709551615 3 ptk 111 10 111 13 74 3 PTK 111 14 111 17 84 1 ; 111 17 111 18 18446744073709551615 12 eapol_status 112 3 112 15 7 6 status 112 16 112 22 85 1 ; 112 22 112 23 18446744073709551615 6 u_char 113 3 113 9 1 11 last_replay 113 10 113 21 86 1 [ 113 21 113 22 18446744073709551615 1 8 113 22 113 23 18446744073709551615 1 ] 113 23 113 24 18446744073709551615 1 ; 113 24 113 25 18446744073709551615 1 } 114 1 114 2 18446744073709551615 1 ; 114 2 114 3 18446744073709551615 6 u_char 116 1 116 7 1 14 ap_mac_address 116 8 116 22 87 1 [ 116 22 116 23 18446744073709551615 1 6 116 23 116 24 18446744073709551615 1 ] 116 24 116 25 18446744073709551615 1 ; 116 25 116 26 18446744073709551615 6 u_char 117 1 117 7 1 3 psk 117 8 117 11 88 1 [ 117 11 117 12 18446744073709551615 2 32 117 12 117 14 18446744073709551615 1 ] 117 14 117 15 18446744073709551615 1 ; 117 15 117 16 18446744073709551615 6 u_char 118 1 118 7 1 1 * 118 8 118 9 18446744073709551615 4 ssid 118 9 118 13 89 1 ; 118 13 118 14 18446744073709551615 5 map_t 119 1 119 6 90 1 * 119 7 119 8 18446744073709551615 3 map 119 8 119 11 91 1 ; 119 11 119 12 18446744073709551615 6 struct 120 1 120 7 18446744073709551615 3 ptk 120 8 120 11 74 1 * 120 12 120 13 18446744073709551615 4 PTK0 120 13 120 17 92 1 ; 120 17 120 18 18446744073709551615 4 FILE 121 1 121 5 93 1 * 121 6 121 7 18446744073709551615 2 fd 121 7 121 9 94 1 ; 121 9 121 10 18446744073709551615 13 pcap_dumper_t 122 1 122 14 95 1 * 122 15 122 16 18446744073709551615 8 dumpfile 122 16 122 24 96 1 ; 122 24 122 25 18446744073709551615 6 u_char 125 1 125 7 1 14 process_beacon 125 8 125 22 97 1 ( 125 22 125 23 97 5 const 125 23 125 28 18446744073709551615 6 struct 125 29 125 35 18446744073709551615 11 pcap_pkthdr 125 36 125 47 98 1 * 125 48 125 49 18446744073709551615 1 , 125 49 125 50 97 5 const 125 51 125 56 18446744073709551615 6 u_char 125 57 125 63 1 1 * 125 64 125 65 18446744073709551615 1 ) 125 65 125 66 97 1 ; 125 66 125 67 18446744073709551615 6 u_char 126 1 126 7 1 13 process_eapol 126 8 126 21 99 1 ( 126 21 126 22 99 5 const 126 22 126 27 18446744073709551615 6 struct 126 28 126 34 18446744073709551615 11 pcap_pkthdr 126 35 126 46 98 1 * 126 47 126 48 18446744073709551615 1 , 126 48 126 49 99 5 const 126 50 126 55 18446744073709551615 6 u_char 126 56 126 62 1 1 * 126 63 126 64 18446744073709551615 1 ) 126 64 126 65 99 1 ; 126 65 126 66 18446744073709551615 6 u_char 127 1 127 7 1 14 process_packet 127 8 127 22 100 1 ( 127 22 127 23 100 5 const 127 23 127 28 18446744073709551615 6 struct 127 29 127 35 18446744073709551615 11 pcap_pkthdr 127 36 127 47 98 1 * 127 48 127 49 18446744073709551615 1 , 127 49 127 50 100 5 const 127 51 127 56 18446744073709551615 6 u_char 127 57 127 63 1 1 * 127 64 127 65 18446744073709551615 1 ) 127 65 127 66 100 1 ; 127 66 127 67 18446744073709551615 6 u_char 128 1 128 7 1 14 packet_decrypt 128 8 128 22 101 1 ( 128 22 128 23 101 5 const 128 23 128 28 18446744073709551615 6 struct 128 29 128 35 18446744073709551615 11 pcap_pkthdr 128 36 128 47 98 1 * 128 48 128 49 18446744073709551615 1 , 128 49 128 50 101 5 const 128 51 128 56 18446744073709551615 6 u_char 128 57 128 63 1 1 * 128 64 128 65 18446744073709551615 1 , 128 65 128 66 101 6 struct 128 67 128 73 18446744073709551615 10 eapol_info 128 74 128 84 80 1 * 128 85 128 86 18446744073709551615 1 ) 128 86 128 87 101 1 ; 128 87 128 88 18446744073709551615 4 char 129 1 129 5 18446744073709551615 1 * 129 6 129 7 102 12 mac_toString 129 7 129 19 102 1 ( 129 19 129 20 102 6 u_char 129 20 129 26 1 1 * 129 27 129 28 18446744073709551615 1 ) 129 28 129 29 102 1 ; 129 29 129 30 18446744073709551615 6 u_char 130 1 130 7 1 1 * 130 8 130 9 103 6 PRF512 130 9 130 15 103 1 ( 130 15 130 16 103 6 u_char 130 16 130 22 1 1 * 130 23 130 24 18446744073709551615 1 , 130 24 130 25 103 6 u_char 130 26 130 32 1 1 * 130 33 130 34 18446744073709551615 1 , 130 34 130 35 103 6 size_t 130 36 130 42 104 1 , 130 42 130 43 103 6 u_char 130 44 130 50 1 1 * 130 51 130 52 18446744073709551615 1 , 130 52 130 53 103 6 u_char 130 54 130 60 1 1 * 130 61 130 62 18446744073709551615 1 , 130 62 130 63 103 6 u_char 130 64 130 70 1 1 * 130 71 130 72 18446744073709551615 1 , 130 72 130 73 103 6 u_char 130 74 130 80 1 1 * 130 81 130 82 18446744073709551615 1 ) 130 82 130 83 103 1 ; 130 83 130 84 18446744073709551615 6 u_char 131 1 131 7 1 1 * 131 8 131 9 105 15 hexstr_to_bytes 131 9 131 24 105 1 ( 131 24 131 25 105 6 u_char 131 25 131 31 1 1 * 131 32 131 33 18446744073709551615 1 ) 131 33 131 34 105 1 ; 131 34 131 35 18446744073709551615 6 static 132 1 132 7 18446744073709551615 6 inline 132 8 132 14 18446744073709551615 4 void 132 15 132 19 18446744073709551615 3 XOR 132 20 132 23 106 1 ( 132 23 132 24 106 8 unsigned 132 24 132 32 18446744073709551615 4 char 132 33 132 37 18446744073709551615 1 * 132 38 132 39 18446744073709551615 1 , 132 39 132 40 106 8 unsigned 132 41 132 49 18446744073709551615 4 char 132 50 132 54 18446744073709551615 1 * 132 55 132 56 18446744073709551615 1 , 132 56 132 57 106 3 int 132 58 132 61 18446744073709551615 3 len 132 62 132 65 107 1 ) 132 65 132 66 106 1 ; 132 66 132 67 18446744073709551615 4 void 133 1 133 5 18446744073709551615 14 dump_decrypted 133 6 133 20 108 1 ( 133 20 133 21 108 6 u_char 133 21 133 27 1 1 * 133 28 133 29 18446744073709551615 1 , 133 29 133 30 108 5 const 133 31 133 36 18446744073709551615 6 struct 133 37 133 43 18446744073709551615 11 pcap_pkthdr 133 44 133 55 98 1 * 133 56 133 57 18446744073709551615 1 , 133 57 133 58 108 5 const 133 59 133 64 18446744073709551615 6 u_char 133 65 133 71 1 1 * 133 72 133 73 18446744073709551615 1 ) 133 73 133 74 108 1 ; 133 74 133 75 18446744073709551615 3 int 135 1 135 4 18446744073709551615 4 main 135 5 135 9 109 1 ( 135 9 135 10 109 3 int 135 10 135 13 18446744073709551615 4 argc 135 14 135 18 110 1 , 135 18 135 19 109 4 char 135 20 135 24 18446744073709551615 1 * 135 25 135 26 18446744073709551615 4 argv 135 26 135 30 111 1 [ 135 30 135 31 18446744073709551615 1 ] 135 31 135 32 18446744073709551615 1 ) 135 32 135 33 109 1 { 135 34 135 35 18446744073709551615 3 map 137 3 137 6 91 1 = 137 7 137 8 18446744073709551615 11 hashmap_new 137 9 137 20 112 1 ( 137 20 137 21 112 1 ) 137 21 137 22 112 1 ; 137 22 137 23 18446744073709551615 4 char 138 3 138 7 18446744073709551615 1 * 138 8 138 9 18446744073709551615 3 dev 138 9 138 12 113 1 = 138 13 138 14 18446744073709551615 4 argv 138 15 138 19 111 1 [ 138 19 138 20 18446744073709551615 1 1 138 20 138 21 18446744073709551615 1 ] 138 21 138 22 18446744073709551615 1 ; 138 22 138 23 18446744073709551615 4 ssid 139 3 139 7 89 1 = 139 8 139 9 18446744073709551615 4 argv 139 10 139 14 111 1 [ 139 14 139 15 18446744073709551615 1 2 139 15 139 16 18446744073709551615 1 ] 139 16 139 17 18446744073709551615 1 ; 139 17 139 18 18446744073709551615 6 u_char 140 3 140 9 1 1 * 140 10 140 11 18446744073709551615 3 pwd 140 11 140 14 114 1 = 140 15 140 16 18446744073709551615 4 argv 140 17 140 21 111 1 [ 140 21 140 22 18446744073709551615 1 3 140 22 140 23 18446744073709551615 1 ] 140 23 140 24 18446744073709551615 1 ; 140 24 140 25 18446744073709551615 4 char 141 3 141 7 18446744073709551615 6 errbuf 141 8 141 14 115 1 [ 141 14 141 15 18446744073709551615 16 PCAP_ERRBUF_SIZE 141 15 141 31 115 1 ] 141 31 141 32 18446744073709551615 1 ; 141 32 141 33 18446744073709551615 4 char 142 3 142 7 18446744073709551615 13 filter_beacon 142 8 142 21 116 1 [ 142 21 142 22 18446744073709551615 1 ] 142 22 142 23 18446744073709551615 1 = 142 24 142 25 18446744073709551615 30 "wlan type mgt subtype beacon" 142 26 142 56 18446744073709551615 1 ; 142 56 142 57 18446744073709551615 4 char 143 3 143 7 18446744073709551615 25 filter_eapol_on_ssid_mask 143 8 143 33 117 1 [ 143 33 143 34 18446744073709551615 1 ] 143 34 143 35 18446744073709551615 1 = 143 36 143 37 18446744073709551615 32 "wlan addr1 %s or wlan addr2 %s" 143 38 143 70 18446744073709551615 1 ; 143 70 143 71 18446744073709551615 4 char 144 3 144 7 18446744073709551615 1 * 144 8 144 9 18446744073709551615 20 filter_eapol_on_ssid 144 9 144 29 118 1 ; 144 29 144 30 18446744073709551615 6 struct 145 3 145 9 18446744073709551615 11 bpf_program 145 10 145 21 119 2 fp 145 22 145 24 120 1 ; 145 24 145 25 18446744073709551615 6 pcap_t 146 3 146 9 121 1 * 146 10 146 11 18446744073709551615 6 handle 146 11 146 17 122 1 ; 146 17 146 18 18446744073709551615 6 struct 147 3 147 9 18446744073709551615 11 pcap_pkthdr 147 10 147 21 98 1 * 147 22 147 23 18446744073709551615 6 header 147 23 147 29 123 1 ; 147 29 147 30 18446744073709551615 5 const 148 3 148 8 18446744073709551615 6 u_char 148 9 148 15 1 1 * 148 16 148 17 18446744073709551615 6 packet 148 17 148 23 124 1 ; 148 23 148 24 18446744073709551615 4 char 149 3 149 7 18446744073709551615 18 ap_mac_address_str 149 8 149 26 125 1 [ 149 26 149 27 18446744073709551615 1 2 149 27 149 28 18446744073709551615 1 * 149 29 149 30 18446744073709551615 12 MAC_ADDR_LEN 149 31 149 43 18446744073709551615 1 ] 149 43 149 44 18446744073709551615 1 ; 149 44 149 45 18446744073709551615 18 ap_mac_address_str 150 3 150 21 125 1 [ 150 21 150 22 18446744073709551615 1 2 150 22 150 23 18446744073709551615 1 * 150 24 150 25 18446744073709551615 12 MAC_ADDR_LEN 150 26 150 38 18446744073709551615 1 - 150 39 150 40 18446744073709551615 1 1 150 41 150 42 18446744073709551615 1 ] 150 42 150 43 18446744073709551615 1 = 150 44 150 45 18446744073709551615 4 '\0' 150 46 150 50 18446744073709551615 1 ; 150 50 150 51 18446744073709551615 20 fastpbkdf2_hmac_sha1 152 3 152 23 126 1 ( 152 23 152 24 126 3 pwd 152 24 152 27 114 1 , 152 27 152 28 126 6 strlen 152 29 152 35 127 1 ( 152 35 152 36 127 3 pwd 152 36 152 39 114 1 ) 152 39 152 40 127 1 , 152 40 152 41 126 4 ssid 152 42 152 46 89 1 , 152 46 152 47 126 6 strlen 152 48 152 54 127 1 ( 152 54 152 55 127 4 ssid 152 55 152 59 89 1 ) 152 59 152 60 127 1 , 152 60 152 61 126 4 4096 152 62 152 66 18446744073709551615 1 , 152 66 152 67 126 3 psk 152 68 152 71 88 1 , 152 71 152 72 126 2 32 152 73 152 75 18446744073709551615 1 ) 152 75 152 76 126 1 ; 152 76 152 77 18446744073709551615 3 for 154 3 154 6 18446744073709551615 1 ( 154 6 154 7 18446744073709551615 3 int 154 7 154 10 18446744073709551615 1 i 154 11 154 12 128 1 = 154 13 154 14 18446744073709551615 1 0 154 15 154 16 18446744073709551615 1 ; 154 16 154 17 18446744073709551615 1 i 154 18 154 19 128 1 < 154 20 154 21 18446744073709551615 2 32 154 22 154 24 18446744073709551615 1 ; 154 24 154 25 18446744073709551615 1 i 154 26 154 27 128 2 ++ 154 27 154 29 18446744073709551615 1 ) 154 29 154 30 18446744073709551615 1 { 154 31 154 32 18446744073709551615 6 printf 155 5 155 11 129 1 ( 155 11 155 12 129 6 "%02x" 155 12 155 18 18446744073709551615 1 , 155 18 155 19 129 3 psk 155 20 155 23 88 1 [ 155 23 155 24 18446744073709551615 1 i 155 24 155 25 128 1 ] 155 25 155 26 18446744073709551615 1 ) 155 26 155 27 129 1 ; 155 27 155 28 18446744073709551615 1 } 156 3 156 4 18446744073709551615 6 printf 157 3 157 9 129 1 ( 157 9 157 10 129 4 "\n" 157 10 157 14 18446744073709551615 1 ) 157 14 157 15 129 1 ; 157 15 157 16 18446744073709551615 84 //u_char PMK[] = "01b809f9ab2fb5dc47984f52fb2d112e13d84ccb6b86d4a7193ec5299f851c48"; 159 3 159 87 18446744073709551615 38 //u_char passPhrase[] = "10zZz10ZZzZ"; 160 3 160 41 18446744073709551615 34 //u_char ssid[] = "Netgear 2/158"; 161 3 161 37 18446744073709551615 6 u_char 162 3 162 9 1 5 APmac 162 10 162 15 130 1 [ 162 15 162 16 18446744073709551615 1 ] 162 16 162 17 18446744073709551615 1 = 162 18 162 19 18446744073709551615 14 "c4ea1dbe06f5" 162 20 162 34 18446744073709551615 1 ; 162 34 162 35 18446744073709551615 6 u_char 163 3 163 9 1 9 Clientmac 163 10 163 19 131 1 [ 163 19 163 20 18446744073709551615 1 ] 163 20 163 21 18446744073709551615 1 = 163 22 163 23 18446744073709551615 14 "b0e5ed102445" 163 24 163 38 18446744073709551615 1 ; 163 38 163 39 18446744073709551615 6 u_char 164 3 164 9 1 6 ANonce 164 10 164 16 132 1 [ 164 16 164 17 18446744073709551615 1 ] 164 17 164 18 18446744073709551615 1 = 164 19 164 20 18446744073709551615 66 "faf4cf7ef3e37f25e833031a971343fb39b8ef00247febb110606aa11d7ff2d4" 164 21 164 87 18446744073709551615 1 ; 164 87 164 88 18446744073709551615 6 u_char 165 3 165 9 1 6 SNonce 165 10 165 16 133 1 [ 165 16 165 17 18446744073709551615 1 ] 165 17 165 18 18446744073709551615 1 = 165 19 165 20 18446744073709551615 66 "30143bb717c94943f744a749058dac154759a229012c95aeccc6193cff323cff" 165 21 165 87 18446744073709551615 1 ; 165 87 165 88 18446744073709551615 6 u_char 166 3 166 9 1 4 data 166 10 166 14 134 1 [ 166 14 166 15 18446744073709551615 1 ] 166 15 166 16 18446744073709551615 1 = 166 17 166 18 18446744073709551615 244 "0103007502010a0000000000000000000130143bb717c94943f744a749058dac154759a229012c95aeccc6193cff323cff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001630140100000fac020100000fac040100000fac020000" 166 19 166 263 18446744073709551615 1 ; 166 263 166 264 18446744073709551615 4 PTK0 168 3 168 7 92 1 = 168 8 168 9 18446744073709551615 1 ( 168 10 168 11 18446744073709551615 6 struct 168 11 168 17 18446744073709551615 3 ptk 168 18 168 21 74 1 * 168 22 168 23 18446744073709551615 1 ) 168 23 168 24 18446744073709551615 6 PRF512 168 24 168 30 103 1 ( 168 30 168 31 103 3 psk 168 31 168 34 88 1 , 168 34 168 35 103 1 A 168 36 168 37 0 1 , 168 37 168 38 103 6 strlen 168 39 168 45 127 1 ( 168 45 168 46 127 1 A 168 46 168 47 0 1 ) 168 47 168 48 127 1 , 168 48 168 49 103 15 hexstr_to_bytes 168 50 168 65 105 1 ( 168 65 168 66 105 5 APmac 168 66 168 71 130 1 ) 168 71 168 72 105 1 , 168 72 168 73 103 15 hexstr_to_bytes 168 74 168 89 105 1 ( 168 89 168 90 105 9 Clientmac 168 90 168 99 131 1 ) 168 99 168 100 105 1 , 168 100 168 101 103 15 hexstr_to_bytes 168 102 168 117 105 1 ( 168 117 168 118 105 6 ANonce 168 118 168 124 132 1 ) 168 124 168 125 105 1 , 168 125 168 126 103 15 hexstr_to_bytes 168 127 168 142 105 1 ( 168 142 168 143 105 6 SNonce 168 143 168 149 133 1 ) 168 149 168 150 105 1 ) 168 150 168 151 103 1 ; 168 151 168 152 18446744073709551615 3 int 170 3 170 6 18446744073709551615 10 sha_length 170 7 170 17 135 1 = 170 18 170 19 18446744073709551615 2 16 170 20 170 22 18446744073709551615 1 ; 170 22 170 23 18446744073709551615 6 u_char 171 3 171 9 1 1 * 171 10 171 11 18446744073709551615 3 MIC 171 11 171 14 136 1 = 171 15 171 16 18446744073709551615 6 malloc 171 17 171 23 137 1 ( 171 23 171 24 137 2 16 171 24 171 26 18446744073709551615 1 ) 171 26 171 27 137 1 ; 171 27 171 28 18446744073709551615 4 HMAC 172 3 172 7 138 1 ( 172 7 172 8 138 8 EVP_sha1 172 8 172 16 139 1 ( 172 16 172 17 139 1 ) 172 17 172 18 139 1 , 172 18 172 19 138 4 PTK0 172 20 172 24 92 2 -> 172 24 172 26 18446744073709551615 3 kck 172 26 172 29 75 1 , 172 29 172 30 138 2 16 172 31 172 33 18446744073709551615 1 , 172 33 172 34 138 15 hexstr_to_bytes 172 35 172 50 105 1 ( 172 50 172 51 105 4 data 172 51 172 55 134 1 ) 172 55 172 56 105 1 , 172 56 172 57 138 3 121 172 58 172 61 18446744073709551615 1 , 172 61 172 62 138 3 MIC 172 63 172 66 136 1 , 172 66 172 67 138 1 & 172 68 172 69 18446744073709551615 10 sha_length 172 69 172 79 135 1 ) 172 79 172 80 138 1 ; 172 80 172 81 18446744073709551615 3 for 173 3 173 6 18446744073709551615 1 ( 173 6 173 7 18446744073709551615 3 int 173 7 173 10 18446744073709551615 1 i 173 11 173 12 140 1 = 173 13 173 14 18446744073709551615 1 0 173 15 173 16 18446744073709551615 1 ; 173 16 173 17 18446744073709551615 1 i 173 18 173 19 140 1 < 173 20 173 21 18446744073709551615 2 16 173 22 173 24 18446744073709551615 1 ; 173 24 173 25 18446744073709551615 1 i 173 26 173 27 140 2 ++ 173 27 173 29 18446744073709551615 1 ) 173 29 173 30 18446744073709551615 1 { 173 31 173 32 18446744073709551615 6 printf 174 5 174 11 129 1 ( 174 11 174 12 129 6 "%02x" 174 12 174 18 18446744073709551615 1 , 174 18 174 19 129 3 MIC 174 20 174 23 136 1 [ 174 23 174 24 18446744073709551615 1 i 174 24 174 25 140 1 ] 174 25 174 26 18446744073709551615 1 ) 174 26 174 27 129 1 ; 174 27 174 28 18446744073709551615 1 } 175 3 175 4 18446744073709551615 6 printf 176 3 176 9 129 1 ( 176 9 176 10 129 4 "\n" 176 10 176 14 18446744073709551615 1 ) 176 14 176 15 129 1 ; 176 15 176 16 18446744073709551615 11 bpf_u_int32 178 3 178 14 141 4 mask 178 15 178 19 142 1 ; 178 19 178 20 18446744073709551615 40 /* The netmask of our sniffing device */ 178 21 178 61 18446744073709551615 11 bpf_u_int32 179 3 179 14 141 3 net 179 15 179 18 143 1 ; 179 18 179 19 18446744073709551615 35 /* The IP of our sniffing device */ 179 21 179 56 18446744073709551615 2 if 181 3 181 5 18446744073709551615 1 ( 181 5 181 6 18446744073709551615 14 pcap_lookupnet 181 6 181 20 144 1 ( 181 20 181 21 144 3 dev 181 21 181 24 113 1 , 181 24 181 25 144 1 & 181 26 181 27 18446744073709551615 3 net 181 27 181 30 143 1 , 181 30 181 31 144 1 & 181 32 181 33 18446744073709551615 4 mask 181 33 181 37 142 1 , 181 37 181 38 144 6 errbuf 181 39 181 45 115 1 ) 181 45 181 46 144 2 == 181 47 181 49 18446744073709551615 1 - 181 50 181 51 18446744073709551615 1 1 181 51 181 52 18446744073709551615 1 ) 181 52 181 53 18446744073709551615 1 { 181 54 181 55 18446744073709551615 7 fprintf 182 5 182 12 145 1 ( 182 12 182 13 145 6 stderr 182 13 182 19 145 1 , 182 19 182 20 145 35 "Can't get netmask for device %s\n" 182 21 182 56 18446744073709551615 1 , 182 56 182 57 145 3 dev 182 58 182 61 113 1 ) 182 61 182 62 145 1 ; 182 62 182 63 18446744073709551615 3 net 183 5 183 8 143 1 = 183 9 183 10 18446744073709551615 1 0 183 11 183 12 18446744073709551615 1 ; 183 12 183 13 18446744073709551615 4 mask 184 5 184 9 142 1 = 184 10 184 11 18446744073709551615 1 0 184 12 184 13 18446744073709551615 1 ; 184 13 184 14 18446744073709551615 1 } 185 3 185 4 18446744073709551615 4 char 187 3 187 7 18446744073709551615 8 filename 187 8 187 16 146 1 [ 187 16 187 17 18446744073709551615 1 ] 187 17 187 18 18446744073709551615 1 = 187 19 187 20 18446744073709551615 17 "../capture.pcap" 187 21 187 38 18446744073709551615 1 ; 187 38 187 39 18446744073709551615 56 //handle = pcap_open_live(dev, BUFSIZ, 1, 1000, errbuf); 188 3 188 59 18446744073709551615 6 handle 189 3 189 9 122 1 = 189 10 189 11 18446744073709551615 17 pcap_open_offline 189 12 189 29 147 1 ( 189 29 189 30 147 8 filename 189 30 189 38 146 1 , 189 38 189 39 147 6 errbuf 189 40 189 46 115 1 ) 189 46 189 47 147 1 ; 189 47 189 48 18446744073709551615 2 fd 191 3 191 5 94 1 = 191 6 191 7 18446744073709551615 5 fopen 191 8 191 13 148 1 ( 191 14 191 15 148 11 "test.pcap" 191 15 191 26 18446744073709551615 1 , 191 26 191 27 148 3 "w" 191 28 191 31 18446744073709551615 1 ) 191 31 191 32 148 1 ; 191 32 191 33 18446744073709551615 8 dumpfile 192 3 192 11 96 1 = 192 12 192 13 18446744073709551615 15 pcap_dump_fopen 192 14 192 29 149 1 ( 192 29 192 30 149 6 handle 192 30 192 36 122 1 , 192 36 192 37 149 2 fd 192 38 192 40 94 1 ) 192 40 192 41 149 1 ; 192 41 192 42 18446744073709551615 2 if 194 3 194 5 18446744073709551615 1 ( 194 5 194 6 18446744073709551615 6 handle 194 6 194 12 122 2 == 194 13 194 15 18446744073709551615 4 NULL 194 16 194 20 18446744073709551615 1 ) 194 20 194 21 18446744073709551615 1 { 194 22 194 23 18446744073709551615 7 fprintf 195 5 195 12 145 1 ( 195 12 195 13 145 6 stderr 195 13 195 19 145 1 , 195 19 195 20 145 31 "Couldn't open device %s: %s\n" 195 21 195 52 18446744073709551615 1 , 195 52 195 53 145 3 dev 195 54 195 57 113 1 , 195 57 195 58 145 6 errbuf 195 59 195 65 115 1 ) 195 65 195 66 145 1 ; 195 66 195 67 18446744073709551615 6 return 196 5 196 11 18446744073709551615 1 ( 196 12 196 13 18446744073709551615 1 2 196 13 196 14 18446744073709551615 1 ) 196 14 196 15 18446744073709551615 1 ; 196 15 196 16 18446744073709551615 1 } 197 3 197 4 18446744073709551615 2 if 199 3 199 5 18446744073709551615 1 ( 199 5 199 6 18446744073709551615 12 pcap_compile 199 6 199 18 150 1 ( 199 18 199 19 150 6 handle 199 19 199 25 122 1 , 199 25 199 26 150 1 & 199 27 199 28 18446744073709551615 2 fp 199 28 199 30 120 1 , 199 30 199 31 150 13 filter_beacon 199 32 199 45 116 1 , 199 45 199 46 150 1 0 199 47 199 48 18446744073709551615 1 , 199 48 199 49 150 3 net 199 50 199 53 143 1 ) 199 53 199 54 150 2 == 199 55 199 57 18446744073709551615 1 - 199 58 199 59 18446744073709551615 1 1 199 59 199 60 18446744073709551615 1 ) 199 60 199 61 18446744073709551615 1 { 199 62 199 63 18446744073709551615 7 fprintf 200 5 200 12 145 1 ( 200 12 200 13 145 6 stderr 200 13 200 19 145 1 , 200 19 200 20 145 32 "Couldn't parse filter %s: %s\n" 200 21 200 53 18446744073709551615 1 , 200 53 200 54 145 13 filter_beacon 200 55 200 68 116 1 , 200 68 200 69 145 11 pcap_geterr 200 70 200 81 151 1 ( 200 81 200 82 151 6 handle 200 82 200 88 122 1 ) 200 88 200 89 151 1 ) 200 89 200 90 145 1 ; 200 90 200 91 18446744073709551615 6 return 201 5 201 11 18446744073709551615 1 ( 201 12 201 13 18446744073709551615 1 2 201 13 201 14 18446744073709551615 1 ) 201 14 201 15 18446744073709551615 1 ; 201 15 201 16 18446744073709551615 1 } 202 3 202 4 18446744073709551615 2 if 204 3 204 5 18446744073709551615 1 ( 204 5 204 6 18446744073709551615 14 pcap_setfilter 204 6 204 20 152 1 ( 204 20 204 21 152 6 handle 204 21 204 27 122 1 , 204 27 204 28 152 1 & 204 29 204 30 18446744073709551615 2 fp 204 30 204 32 120 1 ) 204 32 204 33 152 2 == 204 34 204 36 18446744073709551615 1 - 204 37 204 38 18446744073709551615 1 1 204 38 204 39 18446744073709551615 1 ) 204 39 204 40 18446744073709551615 1 { 204 41 204 42 18446744073709551615 7 fprintf 205 5 205 12 145 1 ( 205 12 205 13 145 6 stderr 205 13 205 19 145 1 , 205 19 205 20 145 34 "Couldn't install filter %s: %s\n" 205 21 205 55 18446744073709551615 1 , 205 55 205 56 145 13 filter_beacon 205 57 205 70 116 1 , 205 70 205 71 145 11 pcap_geterr 205 72 205 83 151 1 ( 205 83 205 84 151 6 handle 205 84 205 90 122 1 ) 205 90 205 91 151 1 ) 205 91 205 92 145 1 ; 205 92 205 93 18446744073709551615 6 return 206 5 206 11 18446744073709551615 1 ( 206 12 206 13 18446744073709551615 1 2 206 13 206 14 18446744073709551615 1 ) 206 14 206 15 18446744073709551615 1 ; 206 15 206 16 18446744073709551615 1 } 207 3 207 4 18446744073709551615 6 printf 209 3 209 9 129 1 ( 209 9 209 10 129 14 "Device: %s\n" 209 10 209 24 18446744073709551615 1 , 209 24 209 25 129 3 dev 209 26 209 29 113 1 ) 209 29 209 30 129 1 ; 209 30 209 31 18446744073709551615 31 //Put the device in sniff loop; 210 3 210 34 18446744073709551615 5 while 211 3 211 8 18446744073709551615 1 ( 211 8 211 9 18446744073709551615 12 pcap_next_ex 211 9 211 21 153 1 ( 211 21 211 22 153 6 handle 211 22 211 28 122 1 , 211 28 211 29 153 1 & 211 30 211 31 18446744073709551615 6 header 211 31 211 37 123 1 , 211 37 211 38 153 1 & 211 39 211 40 18446744073709551615 6 packet 211 40 211 46 124 1 ) 211 46 211 47 153 2 && 211 48 211 50 18446744073709551615 1 ! 211 51 211 52 18446744073709551615 14 process_beacon 211 52 211 66 97 1 ( 211 66 211 67 97 6 header 211 67 211 73 123 1 , 211 73 211 74 97 6 packet 211 75 211 81 124 1 ) 211 81 211 82 97 1 ) 211 82 211 83 18446744073709551615 1 ; 212 5 212 6 18446744073709551615 8 asprintf 214 3 214 11 154 1 ( 214 11 214 12 154 1 & 214 12 214 13 18446744073709551615 20 filter_eapol_on_ssid 214 13 214 33 118 1 , 214 33 214 34 154 25 filter_eapol_on_ssid_mask 214 35 214 60 117 1 , 214 60 214 61 154 12 mac_toString 214 62 214 74 102 1 ( 214 74 214 75 102 14 ap_mac_address 214 75 214 89 87 1 ) 214 89 214 90 102 1 , 214 90 214 91 154 12 mac_toString 214 92 214 104 102 1 ( 214 104 214 105 102 14 ap_mac_address 214 105 214 119 87 1 ) 214 119 214 120 102 1 ) 214 120 214 121 154 1 ; 214 121 214 122 18446744073709551615 2 if 216 3 216 5 18446744073709551615 1 ( 216 5 216 6 18446744073709551615 12 pcap_compile 216 6 216 18 150 1 ( 216 18 216 19 150 6 handle 216 19 216 25 122 1 , 216 25 216 26 150 1 & 216 27 216 28 18446744073709551615 2 fp 216 28 216 30 120 1 , 216 30 216 31 150 20 filter_eapol_on_ssid 216 32 216 52 118 1 , 216 52 216 53 150 1 0 216 54 216 55 18446744073709551615 1 , 216 55 216 56 150 3 net 216 57 216 60 143 1 ) 216 60 216 61 150 2 == 216 62 216 64 18446744073709551615 1 - 216 65 216 66 18446744073709551615 1 1 216 66 216 67 18446744073709551615 1 ) 216 67 216 68 18446744073709551615 1 { 216 69 216 70 18446744073709551615 7 fprintf 217 5 217 12 145 1 ( 217 12 217 13 145 6 stderr 217 13 217 19 145 1 , 217 19 217 20 145 32 "Couldn't parse filter %s: %s\n" 217 21 217 53 18446744073709551615 1 , 217 53 217 54 145 20 filter_eapol_on_ssid 217 55 217 75 118 1 , 217 75 217 76 145 11 pcap_geterr 217 77 217 88 151 1 ( 217 88 217 89 151 6 handle 217 89 217 95 122 1 ) 217 95 217 96 151 1 ) 217 96 217 97 145 1 ; 217 97 217 98 18446744073709551615 6 return 218 5 218 11 18446744073709551615 1 ( 218 12 218 13 18446744073709551615 1 2 218 13 218 14 18446744073709551615 1 ) 218 14 218 15 18446744073709551615 1 ; 218 15 218 16 18446744073709551615 1 } 219 3 219 4 18446744073709551615 2 if 220 3 220 5 18446744073709551615 1 ( 220 5 220 6 18446744073709551615 14 pcap_setfilter 220 6 220 20 152 1 ( 220 20 220 21 152 6 handle 220 21 220 27 122 1 , 220 27 220 28 152 1 & 220 29 220 30 18446744073709551615 2 fp 220 30 220 32 120 1 ) 220 32 220 33 152 2 == 220 34 220 36 18446744073709551615 1 - 220 37 220 38 18446744073709551615 1 1 220 38 220 39 18446744073709551615 1 ) 220 39 220 40 18446744073709551615 1 { 220 41 220 42 18446744073709551615 7 fprintf 221 5 221 12 145 1 ( 221 12 221 13 145 6 stderr 221 13 221 19 145 1 , 221 19 221 20 145 34 "Couldn't install filter %s: %s\n" 221 21 221 55 18446744073709551615 1 , 221 55 221 56 145 20 filter_eapol_on_ssid 221 57 221 77 118 1 , 221 77 221 78 145 11 pcap_geterr 221 79 221 90 151 1 ( 221 90 221 91 151 6 handle 221 91 221 97 122 1 ) 221 97 221 98 151 1 ) 221 98 221 99 145 1 ; 221 99 221 100 18446744073709551615 6 return 222 5 222 11 18446744073709551615 1 ( 222 12 222 13 18446744073709551615 1 2 222 13 222 14 18446744073709551615 1 ) 222 14 222 15 18446744073709551615 1 ; 222 15 222 16 18446744073709551615 1 } 223 3 223 4 18446744073709551615 3 int 224 3 224 6 18446744073709551615 3 res 224 7 224 10 155 1 = 224 11 224 12 18446744073709551615 1 0 224 13 224 14 18446744073709551615 1 ; 224 14 224 15 18446744073709551615 5 while 225 3 225 8 18446744073709551615 1 ( 225 8 225 9 18446744073709551615 12 pcap_next_ex 225 9 225 21 153 1 ( 225 21 225 22 153 6 handle 225 22 225 28 122 1 , 225 28 225 29 153 1 & 225 30 225 31 18446744073709551615 6 header 225 31 225 37 123 1 , 225 37 225 38 153 1 & 225 39 225 40 18446744073709551615 6 packet 225 40 225 46 124 1 ) 225 46 225 47 153 2 >= 225 48 225 50 18446744073709551615 1 0 225 51 225 52 18446744073709551615 2 && 225 53 225 55 18446744073709551615 14 process_packet 225 56 225 70 100 1 ( 225 70 225 71 100 6 header 225 71 225 77 123 1 , 225 77 225 78 100 6 packet 225 79 225 85 124 1 ) 225 85 225 86 100 1 ) 225 86 225 87 18446744073709551615 1 ; 226 5 226 6 18446744073709551615 273 /*printf("AP mac address: ");
  for(int i = 0; i < MAC_ADDR_LEN; i++) {
    printf("%02x", ap_mac_address[i]);
  }
  printf(".\n");
  printf("%s\n", mac_toString(ap_mac_address));
  printf(filter_eapol_on_ssid, mac_toString(ap_mac_address), mac_toString(ap_mac_address));*/ 227 3 233 94 18446744073709551615 6 fclose 235 3 235 9 156 1 ( 235 9 235 10 156 2 fd 235 10 235 12 94 1 ) 235 12 235 13 156 1 ; 235 13 235 14 18446744073709551615 13 pcap_freecode 236 3 236 16 157 1 ( 236 16 236 17 157 1 & 236 17 236 18 18446744073709551615 2 fp 236 18 236 20 120 1 ) 236 20 236 21 157 1 ; 236 21 236 22 18446744073709551615 10 pcap_close 237 3 237 13 158 1 ( 237 13 237 14 158 6 handle 237 14 237 20 122 1 ) 237 20 237 21 158 1 ; 237 21 237 22 18446744073709551615 6 return 238 3 238 9 18446744073709551615 1 ( 238 10 238 11 18446744073709551615 1 0 238 11 238 12 18446744073709551615 1 ) 238 12 238 13 18446744073709551615 1 ; 238 13 238 14 18446744073709551615 1 } 239 1 239 2 18446744073709551615 6 u_char 241 1 241 7 1 14 process_beacon 241 8 241 22 97 1 ( 241 22 241 23 97 5 const 241 23 241 28 18446744073709551615 6 struct 241 29 241 35 18446744073709551615 11 pcap_pkthdr 241 36 241 47 98 1 * 241 48 241 49 18446744073709551615 6 header 241 49 241 55 159 1 , 241 55 241 56 97 5 const 241 57 241 62 18446744073709551615 6 u_char 241 63 241 69 1 1 * 241 70 241 71 18446744073709551615 6 buffer 241 71 241 77 160 1 ) 241 77 241 78 97 1 { 241 79 241 80 18446744073709551615 5 const 242 3 242 8 18446744073709551615 6 struct 242 9 242 15 18446744073709551615 19 sniff_802_11_beacon 242 16 242 35 16 1 * 242 36 242 37 18446744073709551615 10 hdr_802_11 242 37 242 47 161 1 ; 242 47 242 48 18446744073709551615 10 hdr_802_11 243 3 243 13 161 1 = 243 14 243 15 18446744073709551615 1 ( 243 16 243 17 18446744073709551615 6 struct 243 17 243 23 18446744073709551615 19 sniff_802_11_beacon 243 24 243 43 16 1 * 243 44 243 45 18446744073709551615 1 ) 243 45 243 46 18446744073709551615 1 ( 243 46 243 47 18446744073709551615 6 buffer 243 47 243 53 160 1 + 243 54 243 55 18446744073709551615 16 PRISM_HEADER_LEN 243 56 243 72 18446744073709551615 1 ) 243 72 243 73 18446744073709551615 1 ; 243 73 243 74 18446744073709551615 3 int 244 3 244 6 18446744073709551615 11 ssid_length 244 7 244 18 162 1 = 244 19 244 20 18446744073709551615 1 ( 244 21 244 22 18446744073709551615 3 int 244 22 244 25 18446744073709551615 1 ) 244 25 244 26 18446744073709551615 1 ( 244 26 244 27 18446744073709551615 6 buffer 244 27 244 33 160 1 + 244 34 244 35 18446744073709551615 16 PRISM_HEADER_LEN 244 36 244 52 18446744073709551615 1 + 244 53 244 54 18446744073709551615 6 sizeof 244 55 244 61 18446744073709551615 1 ( 244 61 244 62 18446744073709551615 6 struct 244 62 244 68 18446744073709551615 19 sniff_802_11_beacon 244 69 244 88 16 1 ) 244 88 244 89 18446744073709551615 1 + 244 90 244 91 18446744073709551615 2 13 244 92 244 94 18446744073709551615 1 ) 244 94 244 95 18446744073709551615 1 [ 244 95 244 96 18446744073709551615 1 0 244 96 244 97 18446744073709551615 1 ] 244 97 244 98 18446744073709551615 1 ; 244 98 244 99 18446744073709551615 6 u_char 245 3 245 9 1 11 beacon_ssid 245 10 245 21 163 1 [ 245 21 245 22 18446744073709551615 11 ssid_length 245 22 245 33 162 1 + 245 34 245 35 18446744073709551615 1 1 245 36 245 37 18446744073709551615 1 ] 245 37 245 38 18446744073709551615 1 ; 245 38 245 39 18446744073709551615 6 memcpy 246 3 246 9 164 1 ( 246 9 246 10 164 11 beacon_ssid 246 10 246 21 163 1 , 246 21 246 22 164 1 ( 246 23 246 24 18446744073709551615 6 buffer 246 24 246 30 160 1 + 246 31 246 32 18446744073709551615 16 PRISM_HEADER_LEN 246 33 246 49 18446744073709551615 1 + 246 50 246 51 18446744073709551615 6 sizeof 246 52 246 58 18446744073709551615 1 ( 246 58 246 59 18446744073709551615 6 struct 246 59 246 65 18446744073709551615 19 sniff_802_11_beacon 246 66 246 85 16 1 ) 246 85 246 86 18446744073709551615 1 + 246 87 246 88 18446744073709551615 2 14 246 89 246 91 18446744073709551615 1 ) 246 91 246 92 18446744073709551615 1 , 246 92 246 93 164 11 ssid_length 246 94 246 105 162 1 ) 246 105 246 106 164 1 ; 246 106 246 107 18446744073709551615 11 beacon_ssid 247 3 247 14 163 1 [ 247 14 247 15 18446744073709551615 11 ssid_length 247 15 247 26 162 1 ] 247 26 247 27 18446744073709551615 1 = 247 28 247 29 18446744073709551615 4 '\0' 247 30 247 34 18446744073709551615 1 ; 247 34 247 35 18446744073709551615 2 if 248 3 248 5 18446744073709551615 1 ( 248 5 248 6 18446744073709551615 6 strcmp 248 6 248 12 165 1 ( 248 12 248 13 165 11 beacon_ssid 248 13 248 24 163 1 , 248 24 248 25 165 4 ssid 248 26 248 30 89 1 ) 248 30 248 31 165 2 == 248 32 248 34 18446744073709551615 1 0 248 35 248 36 18446744073709551615 1 ) 248 36 248 37 18446744073709551615 1 { 248 38 248 39 18446744073709551615 6 memcpy 249 5 249 11 164 1 ( 249 11 249 12 164 14 ap_mac_address 249 12 249 26 87 1 , 249 26 249 27 164 10 hdr_802_11 249 28 249 38 161 2 -> 249 38 249 40 18446744073709551615 5 addr2 249 40 249 45 20 1 , 249 45 249 46 164 12 MAC_ADDR_LEN 249 47 249 59 164 1 ) 249 59 249 60 164 1 ; 249 60 249 61 18446744073709551615 6 return 250 5 250 11 18446744073709551615 1 ( 250 12 250 13 18446744073709551615 1 1 250 13 250 14 18446744073709551615 1 ) 250 14 250 15 18446744073709551615 1 ; 250 15 250 16 18446744073709551615 1 } 251 3 251 4 18446744073709551615 6 return 252 3 252 9 18446744073709551615 1 ( 252 10 252 11 18446744073709551615 1 0 252 11 252 12 18446744073709551615 1 ) 252 12 252 13 18446744073709551615 1 ; 252 13 252 14 18446744073709551615 1 } 253 1 253 2 18446744073709551615 6 u_char 255 1 255 7 1 13 process_eapol 255 8 255 21 99 1 ( 255 21 255 22 99 5 const 255 22 255 27 18446744073709551615 6 struct 255 28 255 34 18446744073709551615 11 pcap_pkthdr 255 35 255 46 98 1 * 255 47 255 48 18446744073709551615 6 header 255 48 255 54 166 1 , 255 54 255 55 99 5 const 255 56 255 61 18446744073709551615 6 u_char 255 62 255 68 1 1 * 255 69 255 70 18446744073709551615 6 buffer 255 70 255 76 167 1 ) 255 76 255 77 99 1 { 255 78 255 79 18446744073709551615 5 const 256 3 256 8 18446744073709551615 6 struct 256 9 256 15 18446744073709551615 12 sniff_802_11 256 16 256 28 8 1 * 256 29 256 30 18446744073709551615 10 hdr_802_11 256 30 256 40 168 1 ; 256 40 256 41 18446744073709551615 10 hdr_802_11 257 3 257 13 168 1 = 257 14 257 15 18446744073709551615 1 ( 257 16 257 17 18446744073709551615 6 struct 257 17 257 23 18446744073709551615 12 sniff_802_11 257 24 257 36 8 1 * 257 37 257 38 18446744073709551615 1 ) 257 38 257 39 18446744073709551615 1 ( 257 39 257 40 18446744073709551615 6 buffer 257 40 257 46 167 1 + 257 47 257 48 18446744073709551615 16 PRISM_HEADER_LEN 257 49 257 65 18446744073709551615 1 ) 257 65 257 66 18446744073709551615 1 ; 257 66 257 67 18446744073709551615 5 const 258 3 258 8 18446744073709551615 6 struct 258 9 258 15 18446744073709551615 17 sniff_802_1x_auth 258 16 258 33 30 1 * 258 34 258 35 18446744073709551615 15 hdr_802_1x_auth 258 35 258 50 169 1 ; 258 50 258 51 18446744073709551615 15 hdr_802_1x_auth 259 3 259 18 169 1 = 259 19 259 20 18446744073709551615 1 ( 259 21 259 22 18446744073709551615 6 struct 259 22 259 28 18446744073709551615 17 sniff_802_1x_auth 259 29 259 46 30 1 * 259 47 259 48 18446744073709551615 1 ) 259 48 259 49 18446744073709551615 1 ( 259 49 259 50 18446744073709551615 6 buffer 259 50 259 56 167 1 + 259 57 259 58 18446744073709551615 16 PRISM_HEADER_LEN 259 59 259 75 18446744073709551615 1 + 259 76 259 77 18446744073709551615 6 sizeof 259 78 259 84 18446744073709551615 1 ( 259 84 259 85 18446744073709551615 6 struct 259 85 259 91 18446744073709551615 12 sniff_802_11 259 92 259 104 8 1 ) 259 104 259 105 18446744073709551615 1 + 259 106 259 107 18446744073709551615 7 LLC_LEN 259 108 259 115 18446744073709551615 1 ) 259 115 259 116 18446744073709551615 1 ; 259 116 259 117 18446744073709551615 1 } 260 1 260 2 18446744073709551615 6 u_char 262 1 262 7 1 14 process_packet 262 8 262 22 100 1 ( 262 22 262 23 100 5 const 262 23 262 28 18446744073709551615 6 struct 262 29 262 35 18446744073709551615 11 pcap_pkthdr 262 36 262 47 98 1 * 262 48 262 49 18446744073709551615 6 header 262 49 262 55 170 1 , 262 55 262 56 100 5 const 262 57 262 62 18446744073709551615 6 u_char 262 63 262 69 1 1 * 262 70 262 71 18446744073709551615 6 buffer 262 71 262 77 171 1 ) 262 77 262 78 100 1 { 262 79 262 80 18446744073709551615 5 const 263 3 263 8 18446744073709551615 6 struct 263 9 263 15 18446744073709551615 12 sniff_802_11 263 16 263 28 8 1 * 263 29 263 30 18446744073709551615 10 hdr_802_11 263 30 263 40 172 1 ; 263 40 263 41 18446744073709551615 10 hdr_802_11 264 3 264 13 172 1 = 264 14 264 15 18446744073709551615 1 ( 264 16 264 17 18446744073709551615 6 struct 264 17 264 23 18446744073709551615 12 sniff_802_11 264 24 264 36 8 1 * 264 37 264 38 18446744073709551615 1 ) 264 38 264 39 18446744073709551615 1 ( 264 39 264 40 18446744073709551615 6 buffer 264 40 264 46 171 1 + 264 47 264 48 18446744073709551615 16 PRISM_HEADER_LEN 264 49 264 65 18446744073709551615 1 ) 264 65 264 66 18446744073709551615 1 ; 264 66 264 67 18446744073709551615 3 int 265 3 265 6 18446744073709551615 8 qos_type 265 7 265 15 173 1 = 265 16 265 17 18446744073709551615 16 TAKE_N_BITS_FROM 265 18 265 34 173 1 ( 265 34 265 35 18446744073709551615 10 hdr_802_11 265 35 265 45 18446744073709551615 2 -> 265 45 265 47 18446744073709551615 13 frame_control 265 47 265 60 18446744073709551615 1 [ 265 60 265 61 18446744073709551615 1 0 265 61 265 62 18446744073709551615 1 ] 265 62 265 63 18446744073709551615 1 , 265 63 265 64 18446744073709551615 1 2 265 65 265 66 18446744073709551615 1 , 265 66 265 67 18446744073709551615 1 2 265 68 265 69 18446744073709551615 1 ) 265 69 265 70 18446744073709551615 1 ; 265 70 265 71 18446744073709551615 3 int 266 3 266 6 18446744073709551615 16 packet_direction 266 7 266 23 174 1 = 266 24 266 25 18446744073709551615 16 TAKE_N_BITS_FROM 266 26 266 42 174 1 ( 266 42 266 43 18446744073709551615 10 hdr_802_11 266 43 266 53 18446744073709551615 2 -> 266 53 266 55 18446744073709551615 13 frame_control 266 55 266 68 18446744073709551615 1 [ 266 68 266 69 18446744073709551615 1 1 266 69 266 70 18446744073709551615 1 ] 266 70 266 71 18446744073709551615 1 , 266 71 266 72 18446744073709551615 1 0 266 73 266 74 18446744073709551615 1 , 266 74 266 75 18446744073709551615 1 2 266 76 266 77 18446744073709551615 1 ) 266 77 266 78 18446744073709551615 1 ; 266 78 266 79 18446744073709551615 3 int 267 3 267 6 18446744073709551615 14 data_protected 267 7 267 21 175 1 = 267 22 267 23 18446744073709551615 16 TAKE_N_BITS_FROM 267 24 267 40 175 1 ( 267 40 267 41 18446744073709551615 10 hdr_802_11 267 41 267 51 18446744073709551615 2 -> 267 51 267 53 18446744073709551615 13 frame_control 267 53 267 66 18446744073709551615 1 [ 267 66 267 67 18446744073709551615 1 1 267 67 267 68 18446744073709551615 1 ] 267 68 267 69 18446744073709551615 1 , 267 69 267 70 18446744073709551615 1 6 267 71 267 72 18446744073709551615 1 , 267 72 267 73 18446744073709551615 1 1 267 74 267 75 18446744073709551615 1 ) 267 75 267 76 18446744073709551615 1 ; 267 76 267 77 18446744073709551615 6 struct 268 3 268 9 18446744073709551615 10 eapol_info 268 10 268 20 80 1 * 268 21 268 22 18446744073709551615 17 packet_eapol_info 268 22 268 39 176 1 = 268 40 268 41 18446744073709551615 4 NULL 268 42 268 46 176 1 ; 268 46 268 47 18446744073709551615 3 int 270 3 270 6 18446744073709551615 11 sha1_length 270 7 270 18 177 1 = 270 19 270 20 18446744073709551615 2 16 270 21 270 23 18446744073709551615 1 ; 270 23 270 24 18446744073709551615 6 u_char 272 3 272 9 1 1 * 272 10 272 11 18446744073709551615 11 sta_address 272 11 272 22 178 1 ; 272 22 272 23 18446744073709551615 2 if 274 3 274 5 18446744073709551615 1 ( 274 5 274 6 18446744073709551615 16 packet_direction 274 6 274 22 174 2 == 274 23 274 25 18446744073709551615 1 2 274 26 274 27 18446744073709551615 1 ) 274 27 274 28 18446744073709551615 1 { 274 29 274 30 18446744073709551615 11 sta_address 275 5 275 16 178 1 = 275 17 275 18 18446744073709551615 10 hdr_802_11 275 19 275 29 172 2 -> 275 29 275 31 18446744073709551615 5 addr1 275 31 275 36 11 1 ; 275 36 275 37 18446744073709551615 1 } 276 3 276 4 18446744073709551615 4 else 277 3 277 7 18446744073709551615 2 if 277 8 277 10 18446744073709551615 1 ( 277 10 277 11 18446744073709551615 16 packet_direction 277 11 277 27 174 2 == 277 28 277 30 18446744073709551615 1 1 277 31 277 32 18446744073709551615 1 ) 277 32 277 33 18446744073709551615 1 { 277 34 277 35 18446744073709551615 11 sta_address 278 5 278 16 178 1 = 278 17 278 18 18446744073709551615 10 hdr_802_11 278 19 278 29 172 2 -> 278 29 278 31 18446744073709551615 5 addr2 278 31 278 36 12 1 ; 278 36 278 37 18446744073709551615 1 } 279 3 279 4 18446744073709551615 2 if 281 3 281 5 18446744073709551615 1 ( 281 5 281 6 18446744073709551615 8 qos_type 281 6 281 14 173 2 == 281 15 281 17 18446744073709551615 1 2 281 18 281 19 18446744073709551615 1 ) 281 19 281 20 18446744073709551615 1 { 281 21 281 22 18446744073709551615 2 if 282 5 282 7 18446744073709551615 1 ( 282 7 282 8 18446744073709551615 14 data_protected 282 8 282 22 175 1 ) 282 22 282 23 18446744073709551615 1 { 282 24 282 25 18446744073709551615 2 if 283 7 283 9 18446744073709551615 1 ( 283 9 283 10 18446744073709551615 11 hashmap_get 283 10 283 21 179 1 ( 283 21 283 22 179 3 map 283 22 283 25 91 1 , 283 25 283 26 179 12 mac_toString 283 27 283 39 102 1 ( 283 39 283 40 102 11 sta_address 283 40 283 51 178 1 ) 283 51 283 52 102 1 , 283 52 283 53 179 1 ( 283 54 283 55 18446744073709551615 4 void 283 55 283 59 18446744073709551615 1 * 283 60 283 61 18446744073709551615 1 * 283 61 283 62 18446744073709551615 1 ) 283 62 283 63 18446744073709551615 1 & 283 63 283 64 18446744073709551615 17 packet_eapol_info 283 64 283 81 176 1 ) 283 81 283 82 179 2 == 283 83 283 85 18446744073709551615 6 MAP_OK 283 86 283 92 18446744073709551615 2 && 283 93 283 95 18446744073709551615 17 packet_eapol_info 283 96 283 113 176 2 -> 283 113 283 115 18446744073709551615 6 status 283 115 283 121 85 2 == 283 122 283 124 18446744073709551615 7 SUCCESS 283 125 283 132 6 1 ) 283 132 283 133 18446744073709551615 1 { 283 134 283 135 18446744073709551615 2 if 284 9 284 11 18446744073709551615 1 ( 284 11 284 12 18446744073709551615 14 packet_decrypt 284 12 284 26 101 1 ( 284 26 284 27 101 6 header 284 27 284 33 170 1 , 284 33 284 34 101 6 buffer 284 35 284 41 171 1 , 284 41 284 42 101 17 packet_eapol_info 284 43 284 60 176 1 ) 284 60 284 61 101 1 ) 284 61 284 62 18446744073709551615 1 { 284 63 284 64 18446744073709551615 6 u_char 285 11 285 17 1 11 new_segment 285 18 285 29 180 1 = 285 30 285 31 18446744073709551615 10 hdr_802_11 285 32 285 42 172 2 -> 285 42 285 44 18446744073709551615 13 frame_control 285 44 285 57 9 1 [ 285 57 285 58 18446744073709551615 1 1 285 58 285 59 18446744073709551615 1 ] 285 59 285 60 18446744073709551615 1 ; 285 60 285 61 18446744073709551615 11 new_segment 286 11 286 22 180 2 &= 286 23 286 25 18446744073709551615 1 ~ 286 26 286 27 18446744073709551615 1 ( 286 27 286 28 18446744073709551615 3 1UL 286 28 286 31 18446744073709551615 2 << 286 32 286 34 18446744073709551615 1 6 286 35 286 36 18446744073709551615 1 ) 286 36 286 37 18446744073709551615 1 ; 286 37 286 38 18446744073709551615 6 memcpy 287 11 287 17 164 1 ( 287 17 287 18 164 1 & 287 18 287 19 18446744073709551615 10 hdr_802_11 287 19 287 29 172 2 -> 287 29 287 31 18446744073709551615 13 frame_control 287 31 287 44 9 1 [ 287 44 287 45 18446744073709551615 1 1 287 45 287 46 18446744073709551615 1 ] 287 46 287 47 18446744073709551615 1 , 287 47 287 48 164 1 & 287 49 287 50 18446744073709551615 11 new_segment 287 50 287 61 180 1 , 287 61 287 62 164 3 1UL 287 63 287 66 18446744073709551615 1 ) 287 66 287 67 164 1 ; 287 67 287 68 18446744073709551615 14 dump_decrypted 288 11 288 25 108 1 ( 288 25 288 26 108 1 ( 288 26 288 27 18446744073709551615 6 u_char 288 27 288 33 1 1 * 288 34 288 35 18446744073709551615 1 ) 288 35 288 36 18446744073709551615 8 dumpfile 288 36 288 44 96 1 , 288 44 288 45 108 6 header 288 46 288 52 170 1 , 288 52 288 53 108 6 buffer 288 54 288 60 171 1 ) 288 60 288 61 108 1 ; 288 61 288 62 18446744073709551615 5 const 289 11 289 16 18446744073709551615 6 struct 289 17 289 23 18446744073709551615 9 sniff_LLC 289 24 289 33 23 1 * 289 34 289 35 18446744073709551615 7 hdr_llc 289 35 289 42 181 1 ; 289 42 289 43 18446744073709551615 7 hdr_llc 290 11 290 18 181 1 = 290 19 290 20 18446744073709551615 1 ( 290 21 290 22 18446744073709551615 6 struct 290 22 290 28 18446744073709551615 9 sniff_LLC 290 29 290 38 23 1 * 290 39 290 40 18446744073709551615 1 ) 290 40 290 41 18446744073709551615 1 ( 290 41 290 42 18446744073709551615 6 buffer 290 42 290 48 171 1 + 290 49 290 50 18446744073709551615 16 PRISM_HEADER_LEN 290 51 290 67 18446744073709551615 1 + 290 68 290 69 18446744073709551615 6 sizeof 290 70 290 76 18446744073709551615 1 ( 290 76 290 77 18446744073709551615 6 struct 290 77 290 83 18446744073709551615 12 sniff_802_11 290 84 290 96 8 1 ) 290 96 290 97 18446744073709551615 1 + 290 98 290 99 18446744073709551615 1 8 290 100 290 101 18446744073709551615 1 ) 290 101 290 102 18446744073709551615 1 ; 290 102 290 103 18446744073709551615 2 if 291 11 291 13 18446744073709551615 1 ( 291 13 291 14 18446744073709551615 7 hdr_llc 291 14 291 21 181 2 -> 291 21 291 23 18446744073709551615 4 dsap 291 23 291 27 24 2 == 291 28 291 30 18446744073709551615 4 0xaa 291 31 291 35 18446744073709551615 1 ) 291 35 291 36 18446744073709551615 1 { 291 37 291 38 18446744073709551615 5 const 292 13 292 18 18446744073709551615 6 struct 292 19 292 25 18446744073709551615 10 sniff_SNAP 292 26 292 36 27 1 * 292 37 292 38 18446744073709551615 8 hdr_snap 292 38 292 46 182 1 ; 292 46 292 47 18446744073709551615 8 hdr_snap 293 13 293 21 182 1 = 293 22 293 23 18446744073709551615 1 ( 293 24 293 25 18446744073709551615 6 struct 293 25 293 31 18446744073709551615 10 sniff_SNAP 293 32 293 42 27 1 * 293 43 293 44 18446744073709551615 1 ) 293 44 293 45 18446744073709551615 1 ( 293 45 293 46 18446744073709551615 6 buffer 293 46 293 52 171 1 + 293 53 293 54 18446744073709551615 16 PRISM_HEADER_LEN 293 55 293 71 18446744073709551615 1 + 293 72 293 73 18446744073709551615 6 sizeof 293 74 293 80 18446744073709551615 1 ( 293 80 293 81 18446744073709551615 6 struct 293 81 293 87 18446744073709551615 12 sniff_802_11 293 88 293 100 8 1 ) 293 100 293 101 18446744073709551615 1 + 293 102 293 103 18446744073709551615 1 8 293 104 293 105 18446744073709551615 1 + 293 106 293 107 18446744073709551615 6 sizeof 293 108 293 114 18446744073709551615 1 ( 293 114 293 115 18446744073709551615 6 struct 293 115 293 121 18446744073709551615 9 sniff_LLC 293 122 293 131 23 1 ) 293 131 293 132 18446744073709551615 1 ) 293 132 293 133 18446744073709551615 1 ; 293 133 293 134 18446744073709551615 6 u_char 294 13 294 19 1 10 ether_IPv4 294 20 294 30 183 1 [ 294 30 294 31 18446744073709551615 1 ] 294 31 294 32 18446744073709551615 1 = 294 33 294 34 18446744073709551615 1 { 294 35 294 36 18446744073709551615 4 0x08 294 36 294 40 18446744073709551615 1 , 294 40 294 41 18446744073709551615 4 0x00 294 42 294 46 18446744073709551615 1 } 294 46 294 47 18446744073709551615 1 ; 294 47 294 48 18446744073709551615 2 if 295 13 295 15 18446744073709551615 1 ( 295 15 295 16 18446744073709551615 6 memcmp 295 16 295 22 184 1 ( 295 22 295 23 184 8 hdr_snap 295 23 295 31 182 2 -> 295 31 295 33 18446744073709551615 4 type 295 33 295 37 29 1 , 295 37 295 38 184 10 ether_IPv4 295 39 295 49 183 1 , 295 49 295 50 184 1 2 295 51 295 52 18446744073709551615 1 ) 295 52 295 53 184 2 == 295 54 295 56 18446744073709551615 1 0 295 57 295 58 18446744073709551615 1 ) 295 58 295 59 18446744073709551615 1 { 295 59 295 60 18446744073709551615 5 const 296 15 296 20 18446744073709551615 6 struct 296 21 296 27 18446744073709551615 8 sniff_IP 296 28 296 36 44 1 * 296 37 296 38 18446744073709551615 6 hdr_ip 296 38 296 44 185 1 ; 296 44 296 45 18446744073709551615 6 hdr_ip 297 15 297 21 185 1 = 297 22 297 23 18446744073709551615 1 ( 297 24 297 25 18446744073709551615 6 struct 297 25 297 31 18446744073709551615 8 sniff_IP 297 32 297 40 44 1 * 297 41 297 42 18446744073709551615 1 ) 297 42 297 43 18446744073709551615 1 ( 297 43 297 44 18446744073709551615 6 buffer 297 44 297 50 171 1 + 297 51 297 52 18446744073709551615 16 PRISM_HEADER_LEN 297 53 297 69 18446744073709551615 1 + 297 70 297 71 18446744073709551615 6 sizeof 297 72 297 78 18446744073709551615 1 ( 297 78 297 79 18446744073709551615 6 struct 297 79 297 85 18446744073709551615 12 sniff_802_11 297 86 297 98 8 1 ) 297 98 297 99 18446744073709551615 1 + 297 100 297 101 18446744073709551615 1 8 297 102 297 103 18446744073709551615 1 + 297 104 297 105 18446744073709551615 6 sizeof 297 106 297 112 18446744073709551615 1 ( 297 112 297 113 18446744073709551615 6 struct 297 113 297 119 18446744073709551615 9 sniff_LLC 297 120 297 129 23 1 ) 297 129 297 130 18446744073709551615 1 + 297 131 297 132 18446744073709551615 6 sizeof 297 133 297 139 18446744073709551615 1 ( 297 139 297 140 18446744073709551615 6 struct 297 140 297 146 18446744073709551615 10 sniff_SNAP 297 147 297 157 27 1 ) 297 157 297 158 18446744073709551615 1 ) 297 158 297 159 18446744073709551615 1 ; 297 159 297 160 18446744073709551615 2 if 298 15 298 17 18446744073709551615 1 ( 298 17 298 18 18446744073709551615 6 hdr_ip 298 18 298 24 185 2 -> 298 24 298 26 18446744073709551615 8 protocol 298 26 298 34 53 2 == 298 35 298 37 18446744073709551615 4 0x06 298 38 298 42 18446744073709551615 1 ) 298 42 298 43 18446744073709551615 1 { 298 43 298 44 18446744073709551615 5 const 299 17 299 22 18446744073709551615 6 struct 299 23 299 29 18446744073709551615 9 sniff_TCP 299 30 299 39 57 1 * 299 40 299 41 18446744073709551615 7 hdr_tcp 299 41 299 48 186 1 ; 299 48 299 49 18446744073709551615 54 //printf("hdr len: %d\n", ((int) hdr_ip->ip_hl)*32/8); 300 17 300 71 18446744073709551615 7 hdr_tcp 301 17 301 24 186 1 = 301 25 301 26 18446744073709551615 1 ( 301 27 301 28 18446744073709551615 6 struct 301 28 301 34 18446744073709551615 9 sniff_TCP 301 35 301 44 57 1 * 301 45 301 46 18446744073709551615 1 ) 301 46 301 47 18446744073709551615 1 ( 301 47 301 48 18446744073709551615 6 buffer 301 48 301 54 171 1 + 301 55 301 56 18446744073709551615 16 PRISM_HEADER_LEN 301 57 301 73 18446744073709551615 1 + 301 74 301 75 18446744073709551615 6 sizeof 301 76 301 82 18446744073709551615 1 ( 301 82 301 83 18446744073709551615 6 struct 301 83 301 89 18446744073709551615 12 sniff_802_11 301 90 301 102 8 1 ) 301 102 301 103 18446744073709551615 1 + 301 104 301 105 18446744073709551615 1 8 301 106 301 107 18446744073709551615 1 + 301 108 301 109 18446744073709551615 6 sizeof 301 110 301 116 18446744073709551615 1 ( 301 116 301 117 18446744073709551615 6 struct 301 117 301 123 18446744073709551615 9 sniff_LLC 301 124 301 133 23 1 ) 301 133 301 134 18446744073709551615 1 + 301 135 301 136 18446744073709551615 6 sizeof 301 137 301 143 18446744073709551615 1 ( 301 143 301 144 18446744073709551615 6 struct 301 144 301 150 18446744073709551615 10 sniff_SNAP 301 151 301 161 27 1 ) 301 161 301 162 18446744073709551615 1 + 301 163 301 164 18446744073709551615 1 ( 301 165 301 166 18446744073709551615 1 ( 301 166 301 167 18446744073709551615 3 int 301 167 301 170 18446744073709551615 1 ) 301 170 301 171 18446744073709551615 6 hdr_ip 301 172 301 178 185 2 -> 301 178 301 180 18446744073709551615 5 ip_hl 301 180 301 185 45 1 ) 301 185 301 186 18446744073709551615 1 * 301 186 301 187 18446744073709551615 2 32 301 187 301 189 18446744073709551615 1 / 301 189 301 190 18446744073709551615 1 8 301 190 301 191 18446744073709551615 1 ) 301 191 301 192 18446744073709551615 1 ; 301 192 301 193 18446744073709551615 6 printf 302 17 302 23 129 1 ( 302 23 302 24 129 12 "%02x%02x\n" 302 24 302 36 18446744073709551615 1 , 302 36 302 37 129 7 hdr_tcp 302 38 302 45 186 2 -> 302 45 302 47 18446744073709551615 8 dst_port 302 47 302 55 59 1 [ 302 55 302 56 18446744073709551615 1 0 302 56 302 57 18446744073709551615 1 ] 302 57 302 58 18446744073709551615 1 , 302 58 302 59 129 7 hdr_tcp 302 60 302 67 186 2 -> 302 67 302 69 18446744073709551615 8 dst_port 302 69 302 77 59 1 [ 302 77 302 78 18446744073709551615 1 1 302 78 302 79 18446744073709551615 1 ] 302 79 302 80 18446744073709551615 1 ) 302 80 302 81 129 1 ; 302 81 302 82 18446744073709551615 1 } 303 15 303 16 18446744073709551615 1 } 304 13 304 14 18446744073709551615 1 } 305 11 305 12 18446744073709551615 1 } 306 9 306 10 18446744073709551615 4 else 307 9 307 13 18446744073709551615 1 { 307 14 307 15 18446744073709551615 10 // Discard 308 11 308 21 18446744073709551615 1 } 309 9 309 10 18446744073709551615 1 } 310 7 310 8 18446744073709551615 4 else 311 7 311 11 18446744073709551615 1 { 311 12 311 13 18446744073709551615 10 // Discard 312 9 312 19 18446744073709551615 1 } 313 7 313 8 18446744073709551615 1 } 314 5 314 6 18446744073709551615 4 else 315 5 315 9 18446744073709551615 1 { 315 10 315 11 18446744073709551615 5 const 316 7 316 12 18446744073709551615 6 struct 316 13 316 19 18446744073709551615 9 sniff_LLC 316 20 316 29 23 1 * 316 30 316 31 18446744073709551615 7 hdr_llc 316 31 316 38 187 1 ; 316 38 316 39 18446744073709551615 7 hdr_llc 317 7 317 14 187 1 = 317 15 317 16 18446744073709551615 1 ( 317 17 317 18 18446744073709551615 6 struct 317 18 317 24 18446744073709551615 9 sniff_LLC 317 25 317 34 23 1 * 317 35 317 36 18446744073709551615 1 ) 317 36 317 37 18446744073709551615 1 ( 317 37 317 38 18446744073709551615 6 buffer 317 38 317 44 171 1 + 317 45 317 46 18446744073709551615 16 PRISM_HEADER_LEN 317 47 317 63 18446744073709551615 1 + 317 64 317 65 18446744073709551615 6 sizeof 317 66 317 72 18446744073709551615 1 ( 317 72 317 73 18446744073709551615 6 struct 317 73 317 79 18446744073709551615 12 sniff_802_11 317 80 317 92 8 1 ) 317 92 317 93 18446744073709551615 1 ) 317 93 317 94 18446744073709551615 1 ; 317 94 317 95 18446744073709551615 2 if 318 7 318 9 18446744073709551615 1 ( 318 9 318 10 18446744073709551615 7 hdr_llc 318 10 318 17 187 2 -> 318 17 318 19 18446744073709551615 4 dsap 318 19 318 23 24 2 == 318 24 318 26 18446744073709551615 4 0xaa 318 27 318 31 18446744073709551615 1 ) 318 31 318 32 18446744073709551615 1 { 318 33 318 34 18446744073709551615 5 const 319 9 319 14 18446744073709551615 6 struct 319 15 319 21 18446744073709551615 10 sniff_SNAP 319 22 319 32 27 1 * 319 33 319 34 18446744073709551615 8 hdr_snap 319 34 319 42 188 1 ; 319 42 319 43 18446744073709551615 8 hdr_snap 320 9 320 17 188 1 = 320 18 320 19 18446744073709551615 1 ( 320 20 320 21 18446744073709551615 6 struct 320 21 320 27 18446744073709551615 10 sniff_SNAP 320 28 320 38 27 1 * 320 39 320 40 18446744073709551615 1 ) 320 40 320 41 18446744073709551615 1 ( 320 41 320 42 18446744073709551615 6 buffer 320 42 320 48 171 1 + 320 49 320 50 18446744073709551615 16 PRISM_HEADER_LEN 320 51 320 67 18446744073709551615 1 + 320 68 320 69 18446744073709551615 6 sizeof 320 70 320 76 18446744073709551615 1 ( 320 76 320 77 18446744073709551615 6 struct 320 77 320 83 18446744073709551615 12 sniff_802_11 320 84 320 96 8 1 ) 320 96 320 97 18446744073709551615 1 + 320 98 320 99 18446744073709551615 6 sizeof 320 100 320 106 18446744073709551615 1 ( 320 106 320 107 18446744073709551615 6 struct 320 107 320 113 18446744073709551615 9 sniff_LLC 320 114 320 123 23 1 ) 320 123 320 124 18446744073709551615 1 ) 320 124 320 125 18446744073709551615 1 ; 320 125 320 126 18446744073709551615 6 u_char 321 9 321 15 1 11 ether_eapol 321 16 321 27 189 1 [ 321 27 321 28 18446744073709551615 1 ] 321 28 321 29 18446744073709551615 1 = 321 30 321 31 18446744073709551615 1 { 321 32 321 33 18446744073709551615 4 0x88 321 33 321 37 18446744073709551615 1 , 321 37 321 38 18446744073709551615 4 0x8e 321 39 321 43 18446744073709551615 1 } 321 43 321 44 18446744073709551615 1 ; 321 44 321 45 18446744073709551615 2 if 322 9 322 11 18446744073709551615 1 ( 322 11 322 12 18446744073709551615 6 memcmp 322 12 322 18 184 1 ( 322 18 322 19 184 8 hdr_snap 322 19 322 27 188 2 -> 322 27 322 29 18446744073709551615 4 type 322 29 322 33 29 1 , 322 33 322 34 184 11 ether_eapol 322 35 322 46 189 1 , 322 46 322 47 184 1 2 322 48 322 49 18446744073709551615 1 ) 322 49 322 50 184 2 == 322 51 322 53 18446744073709551615 1 0 322 54 322 55 18446744073709551615 1 ) 322 55 322 56 18446744073709551615 1 { 322 57 322 58 18446744073709551615 5 const 323 11 323 16 18446744073709551615 6 struct 323 17 323 23 18446744073709551615 17 sniff_802_1x_auth 323 24 323 41 30 1 * 323 42 323 43 18446744073709551615 10 hdr_802_1x 323 43 323 53 190 1 ; 323 53 323 54 18446744073709551615 10 hdr_802_1x 324 11 324 21 190 1 = 324 22 324 23 18446744073709551615 1 ( 324 24 324 25 18446744073709551615 6 struct 324 25 324 31 18446744073709551615 17 sniff_802_1x_auth 324 32 324 49 30 1 * 324 50 324 51 18446744073709551615 1 ) 324 51 324 52 18446744073709551615 1 ( 324 52 324 53 18446744073709551615 6 buffer 324 53 324 59 171 1 + 324 60 324 61 18446744073709551615 16 PRISM_HEADER_LEN 324 62 324 78 18446744073709551615 1 + 324 79 324 80 18446744073709551615 6 sizeof 324 81 324 87 18446744073709551615 1 ( 324 87 324 88 18446744073709551615 6 struct 324 88 324 94 18446744073709551615 12 sniff_802_11 324 95 324 107 8 1 ) 324 107 324 108 18446744073709551615 1 + 324 109 324 110 18446744073709551615 6 sizeof 324 111 324 117 18446744073709551615 1 ( 324 117 324 118 18446744073709551615 6 struct 324 118 324 124 18446744073709551615 9 sniff_LLC 324 125 324 134 23 1 ) 324 134 324 135 18446744073709551615 1 + 324 136 324 137 18446744073709551615 6 sizeof 324 138 324 144 18446744073709551615 1 ( 324 144 324 145 18446744073709551615 6 struct 324 145 324 151 18446744073709551615 10 sniff_SNAP 324 152 324 162 27 1 ) 324 162 324 163 18446744073709551615 1 ) 324 163 324 164 18446744073709551615 1 ; 324 164 324 165 18446744073709551615 3 int 325 11 325 14 18446744073709551615 20 get_from_hashmap_res 325 15 325 35 191 1 = 325 36 325 37 18446744073709551615 11 hashmap_get 325 38 325 49 179 1 ( 325 49 325 50 179 3 map 325 50 325 53 91 1 , 325 53 325 54 179 12 mac_toString 325 55 325 67 102 1 ( 325 67 325 68 102 11 sta_address 325 68 325 79 178 1 ) 325 79 325 80 102 1 , 325 80 325 81 179 1 ( 325 82 325 83 18446744073709551615 4 void 325 83 325 87 18446744073709551615 1 * 325 88 325 89 18446744073709551615 1 * 325 89 325 90 18446744073709551615 1 ) 325 90 325 91 18446744073709551615 1 & 325 91 325 92 18446744073709551615 17 packet_eapol_info 325 92 325 109 176 1 ) 325 109 325 110 179 1 ; 325 110 325 111 18446744073709551615 2 if 327 11 327 13 18446744073709551615 1 ( 327 13 327 14 18446744073709551615 20 get_from_hashmap_res 327 14 327 34 191 2 == 327 35 327 37 18446744073709551615 11 MAP_MISSING 327 38 327 49 18446744073709551615 2 && 327 50 327 52 18446744073709551615 16 packet_direction 327 53 327 69 174 2 == 327 70 327 72 18446744073709551615 1 2 327 73 327 74 18446744073709551615 2 && 327 75 327 77 18446744073709551615 1 ( 327 78 327 79 18446744073709551615 16 TAKE_N_BITS_FROM 327 79 327 95 18446744073709551615 1 ( 327 95 327 96 18446744073709551615 10 hdr_802_1x 327 96 327 106 18446744073709551615 2 -> 327 106 327 108 18446744073709551615 15 key_information 327 108 327 123 18446744073709551615 1 [ 327 123 327 124 18446744073709551615 1 0 327 124 327 125 18446744073709551615 1 ] 327 125 327 126 18446744073709551615 1 , 327 126 327 127 18446744073709551615 1 0 327 128 327 129 18446744073709551615 1 , 327 129 327 130 18446744073709551615 1 1 327 131 327 132 18446744073709551615 1 ) 327 132 327 133 18446744073709551615 1 ) 327 133 327 134 18446744073709551615 2 == 327 135 327 137 18446744073709551615 1 0 327 138 327 139 18446744073709551615 1 ) 327 139 327 140 18446744073709551615 1 { 327 141 327 142 18446744073709551615 6 struct 328 13 328 19 18446744073709551615 10 eapol_info 328 20 328 30 80 1 * 328 31 328 32 18446744073709551615 21 new_packet_eapol_info 328 32 328 53 192 1 = 328 54 328 55 18446744073709551615 6 malloc 328 56 328 62 137 1 ( 328 62 328 63 137 6 sizeof 328 63 328 69 18446744073709551615 1 ( 328 69 328 70 18446744073709551615 6 struct 328 70 328 76 18446744073709551615 10 eapol_info 328 77 328 87 80 1 ) 328 87 328 88 18446744073709551615 1 ) 328 88 328 89 137 1 ; 328 89 328 90 18446744073709551615 11 hashmap_put 329 13 329 24 193 1 ( 329 24 329 25 193 3 map 329 25 329 28 91 1 , 329 28 329 29 193 12 mac_toString 329 30 329 42 102 1 ( 329 42 329 43 102 11 sta_address 329 43 329 54 178 1 ) 329 54 329 55 102 1 , 329 55 329 56 193 21 new_packet_eapol_info 329 57 329 78 192 1 ) 329 78 329 79 193 1 ; 329 79 329 80 18446744073709551615 6 memcpy 330 13 330 19 164 1 ( 330 19 330 20 164 21 new_packet_eapol_info 330 20 330 41 192 2 -> 330 41 330 43 18446744073709551615 6 ANonce 330 43 330 49 82 1 , 330 49 330 50 164 10 hdr_802_1x 330 51 330 61 190 2 -> 330 61 330 63 18446744073709551615 13 wpa_key_nonce 330 63 330 76 38 1 , 330 76 330 77 164 2 32 330 78 330 80 18446744073709551615 1 ) 330 80 330 81 164 1 ; 330 81 330 82 18446744073709551615 6 memcpy 331 13 331 19 164 1 ( 331 19 331 20 164 21 new_packet_eapol_info 331 20 331 41 192 2 -> 331 41 331 43 18446744073709551615 11 last_replay 331 43 331 54 86 1 , 331 54 331 55 164 10 hdr_802_1x 331 56 331 66 190 2 -> 331 66 331 68 18446744073709551615 14 replay_counter 331 68 331 82 37 1 , 331 82 331 83 164 1 8 331 84 331 85 18446744073709551615 1 ) 331 85 331 86 164 1 ; 331 86 331 87 18446744073709551615 21 new_packet_eapol_info 332 13 332 34 192 2 -> 332 34 332 36 18446744073709551615 6 status 332 36 332 42 85 1 = 332 43 332 44 18446744073709551615 19 WAITING_EAPOL_KEY_2 332 45 332 64 3 1 ; 332 64 332 65 18446744073709551615 1 } 333 11 333 12 18446744073709551615 4 else 334 11 334 15 18446744073709551615 2 if 334 16 334 18 18446744073709551615 1 ( 334 18 334 19 18446744073709551615 20 get_from_hashmap_res 334 19 334 39 191 2 == 334 40 334 42 18446744073709551615 6 MAP_OK 334 43 334 49 18446744073709551615 1 ) 334 49 334 50 18446744073709551615 1 { 334 51 334 52 18446744073709551615 12 eapol_status 335 13 335 25 7 14 current_status 335 26 335 40 194 1 = 335 41 335 42 18446744073709551615 17 packet_eapol_info 335 43 335 60 176 2 -> 335 60 335 62 18446744073709551615 6 status 335 62 335 68 85 1 ; 335 68 335 69 18446744073709551615 7 u_short 336 13 336 20 195 11 data_length 336 21 336 32 196 1 = 336 33 336 34 18446744073709551615 1 ( 336 35 336 36 18446744073709551615 1 ( 336 36 336 37 18446744073709551615 10 hdr_802_1x 336 37 336 47 190 2 -> 336 47 336 49 18446744073709551615 19 wpa_key_data_length 336 49 336 68 43 1 [ 336 68 336 69 18446744073709551615 1 0 336 69 336 70 18446744073709551615 1 ] 336 70 336 71 18446744073709551615 2 << 336 72 336 74 18446744073709551615 1 8 336 75 336 76 18446744073709551615 1 ) 336 76 336 77 18446744073709551615 1 + 336 78 336 79 18446744073709551615 1 ( 336 80 336 81 18446744073709551615 10 hdr_802_1x 336 81 336 91 190 2 -> 336 91 336 93 18446744073709551615 19 wpa_key_data_length 336 93 336 112 43 1 [ 336 112 336 113 18446744073709551615 1 1 336 113 336 114 18446744073709551615 1 ] 336 114 336 115 18446744073709551615 1 ) 336 115 336 116 18446744073709551615 1 ) 336 116 336 117 18446744073709551615 1 ; 336 117 336 118 18446744073709551615 2 if 337 13 337 15 18446744073709551615 1 ( 337 15 337 16 18446744073709551615 16 packet_direction 337 16 337 32 174 2 == 337 33 337 35 18446744073709551615 1 2 337 36 337 37 18446744073709551615 2 && 337 38 337 40 18446744073709551615 1 ( 337 41 337 42 18446744073709551615 16 TAKE_N_BITS_FROM 337 42 337 58 18446744073709551615 1 ( 337 58 337 59 18446744073709551615 10 hdr_802_1x 337 59 337 69 18446744073709551615 2 -> 337 69 337 71 18446744073709551615 15 key_information 337 71 337 86 18446744073709551615 1 [ 337 86 337 87 18446744073709551615 1 0 337 87 337 88 18446744073709551615 1 ] 337 88 337 89 18446744073709551615 1 , 337 89 337 90 18446744073709551615 1 0 337 91 337 92 18446744073709551615 1 , 337 92 337 93 18446744073709551615 1 1 337 94 337 95 18446744073709551615 1 ) 337 95 337 96 18446744073709551615 1 ) 337 96 337 97 18446744073709551615 2 == 337 98 337 100 18446744073709551615 1 0 337 101 337 102 18446744073709551615 1 ) 337 102 337 103 18446744073709551615 1 { 337 104 337 105 18446744073709551615 8 // msg 1 337 106 337 114 18446744073709551615 14 hashmap_remove 338 15 338 29 197 1 ( 338 29 338 30 197 3 map 338 30 338 33 91 1 , 338 33 338 34 197 12 mac_toString 338 35 338 47 102 1 ( 338 47 338 48 102 11 sta_address 338 48 338 59 178 1 ) 338 59 338 60 102 1 ) 338 60 338 61 197 1 ; 338 61 338 62 18446744073709551615 6 struct 339 15 339 21 18446744073709551615 10 eapol_info 339 22 339 32 80 1 * 339 33 339 34 18446744073709551615 21 new_packet_eapol_info 339 34 339 55 198 1 = 339 56 339 57 18446744073709551615 6 malloc 339 58 339 64 137 1 ( 339 64 339 65 137 6 sizeof 339 65 339 71 18446744073709551615 1 ( 339 71 339 72 18446744073709551615 6 struct 339 72 339 78 18446744073709551615 10 eapol_info 339 79 339 89 80 1 ) 339 89 339 90 18446744073709551615 1 ) 339 90 339 91 137 1 ; 339 91 339 92 18446744073709551615 11 hashmap_put 340 15 340 26 193 1 ( 340 26 340 27 193 3 map 340 27 340 30 91 1 , 340 30 340 31 193 12 mac_toString 340 32 340 44 102 1 ( 340 44 340 45 102 11 sta_address 340 45 340 56 178 1 ) 340 56 340 57 102 1 , 340 57 340 58 193 21 new_packet_eapol_info 340 59 340 80 198 1 ) 340 80 340 81 193 1 ; 340 81 340 82 18446744073709551615 6 memcpy 341 15 341 21 164 1 ( 341 21 341 22 164 21 new_packet_eapol_info 341 22 341 43 198 2 -> 341 43 341 45 18446744073709551615 6 ANonce 341 45 341 51 82 1 , 341 51 341 52 164 10 hdr_802_1x 341 53 341 63 190 2 -> 341 63 341 65 18446744073709551615 13 wpa_key_nonce 341 65 341 78 38 1 , 341 78 341 79 164 2 32 341 80 341 82 18446744073709551615 1 ) 341 82 341 83 164 1 ; 341 83 341 84 18446744073709551615 6 memcpy 342 15 342 21 164 1 ( 342 21 342 22 164 21 new_packet_eapol_info 342 22 342 43 198 2 -> 342 43 342 45 18446744073709551615 11 last_replay 342 45 342 56 86 1 , 342 56 342 57 164 10 hdr_802_1x 342 58 342 68 190 2 -> 342 68 342 70 18446744073709551615 14 replay_counter 342 70 342 84 37 1 , 342 84 342 85 164 1 8 342 86 342 87 18446744073709551615 1 ) 342 87 342 88 164 1 ; 342 88 342 89 18446744073709551615 21 new_packet_eapol_info 343 15 343 36 198 2 -> 343 36 343 38 18446744073709551615 6 status 343 38 343 44 85 1 = 343 45 343 46 18446744073709551615 19 WAITING_EAPOL_KEY_2 343 47 343 66 3 1 ; 343 66 343 67 18446744073709551615 1 } 344 13 344 14 18446744073709551615 2 if 345 13 345 15 18446744073709551615 1 ( 345 15 345 16 18446744073709551615 14 current_status 345 16 345 30 194 2 == 345 31 345 33 18446744073709551615 19 WAITING_EAPOL_KEY_2 345 34 345 53 3 2 && 345 54 345 56 18446744073709551615 16 packet_direction 345 57 345 73 174 2 == 345 74 345 76 18446744073709551615 1 1 345 77 345 78 18446744073709551615 2 && 345 79 345 81 18446744073709551615 16 TAKE_N_BITS_FROM 345 82 345 98 18446744073709551615 1 ( 345 98 345 99 18446744073709551615 10 hdr_802_1x 345 99 345 109 18446744073709551615 2 -> 345 109 345 111 18446744073709551615 15 key_information 345 111 345 126 18446744073709551615 1 [ 345 126 345 127 18446744073709551615 1 0 345 127 345 128 18446744073709551615 1 ] 345 128 345 129 18446744073709551615 1 , 345 129 345 130 18446744073709551615 1 0 345 131 345 132 18446744073709551615 1 , 345 132 345 133 18446744073709551615 1 1 345 134 345 135 18446744073709551615 1 ) 345 135 345 136 18446744073709551615 2 && 345 137 345 139 18446744073709551615 1 ( 345 140 345 141 18446744073709551615 16 TAKE_N_BITS_FROM 345 141 345 157 18446744073709551615 1 ( 345 157 345 158 18446744073709551615 10 hdr_802_1x 345 158 345 168 18446744073709551615 2 -> 345 168 345 170 18446744073709551615 15 key_information 345 170 345 185 18446744073709551615 1 [ 345 185 345 186 18446744073709551615 1 1 345 186 345 187 18446744073709551615 1 ] 345 187 345 188 18446744073709551615 1 , 345 188 345 189 18446744073709551615 1 6 345 190 345 191 18446744073709551615 1 , 345 191 345 192 18446744073709551615 1 1 345 193 345 194 18446744073709551615 1 ) 345 194 345 195 18446744073709551615 1 ) 345 195 345 196 18446744073709551615 2 == 345 197 345 199 18446744073709551615 1 0 345 200 345 201 18446744073709551615 2 && 345 202 345 204 18446744073709551615 1 ( 345 205 345 206 18446744073709551615 16 TAKE_N_BITS_FROM 345 206 345 222 18446744073709551615 1 ( 345 222 345 223 18446744073709551615 10 hdr_802_1x 345 223 345 233 18446744073709551615 2 -> 345 233 345 235 18446744073709551615 15 key_information 345 235 345 250 18446744073709551615 1 [ 345 250 345 251 18446744073709551615 1 1 345 251 345 252 18446744073709551615 1 ] 345 252 345 253 18446744073709551615 1 , 345 253 345 254 18446744073709551615 1 7 345 255 345 256 18446744073709551615 1 , 345 256 345 257 18446744073709551615 1 1 345 258 345 259 18446744073709551615 1 ) 345 259 345 260 18446744073709551615 1 ) 345 260 345 261 18446744073709551615 2 == 345 262 345 264 18446744073709551615 1 0 345 265 345 266 18446744073709551615 2 && 345 267 345 269 18446744073709551615 11 data_length 345 270 345 281 196 1 > 345 282 345 283 18446744073709551615 1 0 345 284 345 285 18446744073709551615 2 && 345 286 345 288 18446744073709551615 6 memcmp 345 289 345 295 184 1 ( 345 295 345 296 184 17 packet_eapol_info 345 296 345 313 176 2 -> 345 313 345 315 18446744073709551615 11 last_replay 345 315 345 326 86 1 , 345 326 345 327 184 10 hdr_802_1x 345 328 345 338 190 2 -> 345 338 345 340 18446744073709551615 14 replay_counter 345 340 345 354 37 1 , 345 354 345 355 184 1 8 345 356 345 357 18446744073709551615 1 ) 345 357 345 358 184 2 == 345 359 345 361 18446744073709551615 1 0 345 362 345 363 18446744073709551615 1 ) 345 363 345 364 18446744073709551615 1 { 345 365 345 366 18446744073709551615 8 // msg 2 345 367 345 375 18446744073709551615 6 struct 346 15 346 21 18446744073709551615 3 ptk 346 22 346 25 74 1 * 346 26 346 27 18446744073709551615 3 PTK 346 27 346 30 199 1 = 346 31 346 32 18446744073709551615 1 ( 346 33 346 34 18446744073709551615 6 struct 346 34 346 40 18446744073709551615 3 ptk 346 41 346 44 74 1 * 346 45 346 46 18446744073709551615 1 ) 346 46 346 47 18446744073709551615 6 PRF512 346 47 346 53 103 1 ( 346 53 346 54 103 3 psk 346 54 346 57 88 1 , 346 57 346 58 103 1 A 346 59 346 60 0 1 , 346 60 346 61 103 6 strlen 346 62 346 68 127 1 ( 346 68 346 69 127 1 A 346 69 346 70 0 1 ) 346 70 346 71 127 1 , 346 71 346 72 103 14 ap_mac_address 346 73 346 87 87 1 , 346 87 346 88 103 11 sta_address 346 89 346 100 178 1 , 346 100 346 101 103 17 packet_eapol_info 346 102 346 119 176 2 -> 346 119 346 121 18446744073709551615 6 ANonce 346 121 346 127 82 1 , 346 127 346 128 103 10 hdr_802_1x 346 129 346 139 190 2 -> 346 139 346 141 18446744073709551615 13 wpa_key_nonce 346 141 346 154 38 1 ) 346 154 346 155 103 1 ; 346 155 346 156 18446744073709551615 6 u_char 347 15 347 21 1 1 * 347 22 347 23 18446744073709551615 8 real_MIC 347 23 347 31 200 1 = 347 32 347 33 18446744073709551615 6 malloc 347 34 347 40 137 1 ( 347 40 347 41 137 2 16 347 41 347 43 18446744073709551615 1 ) 347 43 347 44 137 1 ; 347 44 347 45 18446744073709551615 6 u_char 348 15 348 21 1 1 * 348 22 348 23 18446744073709551615 14 calculated_MIC 348 23 348 37 201 1 = 348 38 348 39 18446744073709551615 6 malloc 348 40 348 46 137 1 ( 348 46 348 47 137 2 16 348 47 348 49 18446744073709551615 1 ) 348 49 348 50 137 1 ; 348 50 348 51 18446744073709551615 6 memcpy 349 15 349 21 164 1 ( 349 21 349 22 164 8 real_MIC 349 22 349 30 200 1 , 349 30 349 31 164 10 hdr_802_1x 349 32 349 42 190 2 -> 349 42 349 44 18446744073709551615 11 wpa_key_MIC 349 44 349 55 42 1 , 349 55 349 56 164 2 16 349 57 349 59 18446744073709551615 1 ) 349 59 349 60 164 1 ; 349 60 349 61 18446744073709551615 6 memcpy 350 15 350 21 164 1 ( 350 21 350 22 164 10 hdr_802_1x 350 22 350 32 190 2 -> 350 32 350 34 18446744073709551615 11 wpa_key_MIC 350 34 350 45 42 1 , 350 45 350 46 164 8 NULL_MIC 350 47 350 55 2 1 , 350 55 350 56 164 2 16 350 57 350 59 18446744073709551615 1 ) 350 59 350 60 164 1 ; 350 60 350 61 18446744073709551615 4 HMAC 351 15 351 19 138 1 ( 351 19 351 20 138 8 EVP_sha1 351 20 351 28 139 1 ( 351 28 351 29 139 1 ) 351 29 351 30 139 1 , 351 30 351 31 138 3 PTK 351 32 351 35 199 2 -> 351 35 351 37 18446744073709551615 3 kck 351 37 351 40 75 1 , 351 40 351 41 138 2 16 351 42 351 44 18446744073709551615 1 , 351 44 351 45 138 10 hdr_802_1x 351 46 351 56 190 1 , 351 56 351 57 138 2 99 351 58 351 60 18446744073709551615 1 + 351 61 351 62 18446744073709551615 11 data_length 351 63 351 74 196 1 , 351 74 351 75 138 14 calculated_MIC 351 76 351 90 201 1 , 351 90 351 91 138 1 & 351 92 351 93 18446744073709551615 11 sha1_length 351 93 351 104 177 1 ) 351 104 351 105 138 1 ; 351 105 351 106 18446744073709551615 2 if 352 15 352 17 18446744073709551615 1 ( 352 17 352 18 18446744073709551615 6 memcmp 352 18 352 24 184 1 ( 352 24 352 25 184 8 real_MIC 352 25 352 33 200 1 , 352 33 352 34 184 14 calculated_MIC 352 35 352 49 201 1 , 352 49 352 50 184 2 16 352 51 352 53 18446744073709551615 1 ) 352 53 352 54 184 2 == 352 55 352 57 18446744073709551615 1 0 352 58 352 59 18446744073709551615 1 ) 352 59 352 60 18446744073709551615 1 { 352 61 352 62 18446744073709551615 6 memcpy 353 17 353 23 164 1 ( 353 23 353 24 164 17 packet_eapol_info 353 24 353 41 176 2 -> 353 41 353 43 18446744073709551615 6 SNonce 353 43 353 49 83 1 , 353 49 353 50 164 10 hdr_802_1x 353 51 353 61 190 2 -> 353 61 353 63 18446744073709551615 13 wpa_key_nonce 353 63 353 76 38 1 , 353 76 353 77 164 2 32 353 78 353 80 18446744073709551615 1 ) 353 80 353 81 164 1 ; 353 81 353 82 18446744073709551615 6 memcpy 354 17 354 23 164 1 ( 354 23 354 24 164 1 & 354 24 354 25 18446744073709551615 17 packet_eapol_info 354 25 354 42 176 2 -> 354 42 354 44 18446744073709551615 3 PTK 354 44 354 47 84 1 , 354 47 354 48 164 3 PTK 354 49 354 52 199 1 , 354 52 354 53 164 6 sizeof 354 54 354 60 18446744073709551615 1 ( 354 60 354 61 18446744073709551615 6 struct 354 61 354 67 18446744073709551615 3 ptk 354 68 354 71 74 1 ) 354 71 354 72 18446744073709551615 1 ) 354 72 354 73 164 1 ; 354 73 354 74 18446744073709551615 17 packet_eapol_info 355 17 355 34 176 2 -> 355 34 355 36 18446744073709551615 6 status 355 36 355 42 85 1 = 355 43 355 44 18446744073709551615 19 WAITING_EAPOL_KEY_3 355 45 355 64 4 1 ; 355 64 355 65 18446744073709551615 1 } 356 15 356 16 18446744073709551615 1 } 357 13 357 14 18446744073709551615 4 else 358 13 358 17 18446744073709551615 2 if 358 18 358 20 18446744073709551615 1 ( 358 20 358 21 18446744073709551615 14 current_status 358 21 358 35 194 2 == 358 36 358 38 18446744073709551615 19 WAITING_EAPOL_KEY_3 358 39 358 58 4 2 && 358 59 358 61 18446744073709551615 16 packet_direction 358 62 358 78 174 2 == 358 79 358 81 18446744073709551615 1 2 358 82 358 83 18446744073709551615 2 && 358 84 358 86 18446744073709551615 16 TAKE_N_BITS_FROM 358 87 358 103 18446744073709551615 1 ( 358 103 358 104 18446744073709551615 10 hdr_802_1x 358 104 358 114 18446744073709551615 2 -> 358 114 358 116 18446744073709551615 15 key_information 358 116 358 131 18446744073709551615 1 [ 358 131 358 132 18446744073709551615 1 0 358 132 358 133 18446744073709551615 1 ] 358 133 358 134 18446744073709551615 1 , 358 134 358 135 18446744073709551615 1 0 358 136 358 137 18446744073709551615 1 , 358 137 358 138 18446744073709551615 1 1 358 139 358 140 18446744073709551615 1 ) 358 140 358 141 18446744073709551615 2 && 358 142 358 144 18446744073709551615 1 ( 358 145 358 146 18446744073709551615 16 TAKE_N_BITS_FROM 358 146 358 162 18446744073709551615 1 ( 358 162 358 163 18446744073709551615 10 hdr_802_1x 358 163 358 173 18446744073709551615 2 -> 358 173 358 175 18446744073709551615 15 key_information 358 175 358 190 18446744073709551615 1 [ 358 190 358 191 18446744073709551615 1 1 358 191 358 192 18446744073709551615 1 ] 358 192 358 193 18446744073709551615 1 , 358 193 358 194 18446744073709551615 1 6 358 195 358 196 18446744073709551615 1 , 358 196 358 197 18446744073709551615 1 1 358 198 358 199 18446744073709551615 1 ) 358 199 358 200 18446744073709551615 1 ) 358 200 358 201 18446744073709551615 2 && 358 202 358 204 18446744073709551615 1 ( 358 205 358 206 18446744073709551615 16 TAKE_N_BITS_FROM 358 206 358 222 18446744073709551615 1 ( 358 222 358 223 18446744073709551615 10 hdr_802_1x 358 223 358 233 18446744073709551615 2 -> 358 233 358 235 18446744073709551615 15 key_information 358 235 358 250 18446744073709551615 1 [ 358 250 358 251 18446744073709551615 1 1 358 251 358 252 18446744073709551615 1 ] 358 252 358 253 18446744073709551615 1 , 358 253 358 254 18446744073709551615 1 7 358 255 358 256 18446744073709551615 1 , 358 256 358 257 18446744073709551615 1 1 358 258 358 259 18446744073709551615 1 ) 358 259 358 260 18446744073709551615 1 ) 358 260 358 261 18446744073709551615 1 ) 358 261 358 262 18446744073709551615 1 { 358 263 358 264 18446744073709551615 8 // msg 3 358 265 358 273 18446744073709551615 6 u_char 359 15 359 21 1 1 * 359 22 359 23 18446744073709551615 3 KCK 359 23 359 26 202 1 = 359 27 359 28 18446744073709551615 17 packet_eapol_info 359 29 359 46 176 2 -> 359 46 359 48 18446744073709551615 3 PTK 359 48 359 51 84 1 . 359 51 359 52 18446744073709551615 3 kck 359 52 359 55 75 1 ; 359 55 359 56 18446744073709551615 6 u_char 360 15 360 21 1 1 * 360 22 360 23 18446744073709551615 8 real_MIC 360 23 360 31 203 1 = 360 32 360 33 18446744073709551615 6 malloc 360 34 360 40 137 1 ( 360 40 360 41 137 2 16 360 41 360 43 18446744073709551615 1 ) 360 43 360 44 137 1 ; 360 44 360 45 18446744073709551615 6 u_char 361 15 361 21 1 1 * 361 22 361 23 18446744073709551615 14 calculated_MIC 361 23 361 37 204 1 = 361 38 361 39 18446744073709551615 6 malloc 361 40 361 46 137 1 ( 361 46 361 47 137 2 16 361 47 361 49 18446744073709551615 1 ) 361 49 361 50 137 1 ; 361 50 361 51 18446744073709551615 6 memcpy 362 15 362 21 164 1 ( 362 21 362 22 164 8 real_MIC 362 22 362 30 203 1 , 362 30 362 31 164 10 hdr_802_1x 362 32 362 42 190 2 -> 362 42 362 44 18446744073709551615 11 wpa_key_MIC 362 44 362 55 42 1 , 362 55 362 56 164 2 16 362 57 362 59 18446744073709551615 1 ) 362 59 362 60 164 1 ; 362 60 362 61 18446744073709551615 6 memcpy 363 15 363 21 164 1 ( 363 21 363 22 164 10 hdr_802_1x 363 22 363 32 190 2 -> 363 32 363 34 18446744073709551615 11 wpa_key_MIC 363 34 363 45 42 1 , 363 45 363 46 164 8 NULL_MIC 363 47 363 55 2 1 , 363 55 363 56 164 2 16 363 57 363 59 18446744073709551615 1 ) 363 59 363 60 164 1 ; 363 60 363 61 18446744073709551615 4 HMAC 364 15 364 19 138 1 ( 364 19 364 20 138 8 EVP_sha1 364 20 364 28 139 1 ( 364 28 364 29 139 1 ) 364 29 364 30 139 1 , 364 30 364 31 138 3 KCK 364 32 364 35 202 1 , 364 35 364 36 138 2 16 364 37 364 39 18446744073709551615 1 , 364 39 364 40 138 10 hdr_802_1x 364 41 364 51 190 1 , 364 51 364 52 138 2 99 364 53 364 55 18446744073709551615 1 + 364 56 364 57 18446744073709551615 11 data_length 364 58 364 69 196 1 , 364 69 364 70 138 14 calculated_MIC 364 71 364 85 204 1 , 364 85 364 86 138 1 & 364 87 364 88 18446744073709551615 11 sha1_length 364 88 364 99 177 1 ) 364 99 364 100 138 1 ; 364 100 364 101 18446744073709551615 2 if 365 15 365 17 18446744073709551615 1 ( 365 17 365 18 18446744073709551615 6 memcmp 365 18 365 24 184 1 ( 365 24 365 25 184 8 real_MIC 365 25 365 33 203 1 , 365 33 365 34 184 14 calculated_MIC 365 35 365 49 204 1 , 365 49 365 50 184 2 16 365 51 365 53 18446744073709551615 1 ) 365 53 365 54 184 2 == 365 55 365 57 18446744073709551615 1 0 365 58 365 59 18446744073709551615 1 ) 365 59 365 60 18446744073709551615 1 { 365 61 365 62 18446744073709551615 17 packet_eapol_info 366 17 366 34 176 2 -> 366 34 366 36 18446744073709551615 6 status 366 36 366 42 85 1 = 366 43 366 44 18446744073709551615 19 WAITING_EAPOL_KEY_4 366 45 366 64 5 1 ; 366 64 366 65 18446744073709551615 6 memcpy 367 17 367 23 164 1 ( 367 23 367 24 164 17 packet_eapol_info 367 24 367 41 176 2 -> 367 41 367 43 18446744073709551615 11 last_replay 367 43 367 54 86 1 , 367 54 367 55 164 10 hdr_802_1x 367 56 367 66 190 2 -> 367 66 367 68 18446744073709551615 14 replay_counter 367 68 367 82 37 1 , 367 82 367 83 164 1 8 367 84 367 85 18446744073709551615 1 ) 367 85 367 86 164 1 ; 367 86 367 87 18446744073709551615 1 } 368 15 368 16 18446744073709551615 1 } 369 13 369 14 18446744073709551615 4 else 370 13 370 17 18446744073709551615 2 if 370 18 370 20 18446744073709551615 1 ( 370 20 370 21 18446744073709551615 14 current_status 370 21 370 35 194 2 == 370 36 370 38 18446744073709551615 19 WAITING_EAPOL_KEY_4 370 39 370 58 5 2 && 370 59 370 61 18446744073709551615 16 packet_direction 370 62 370 78 174 2 == 370 79 370 81 18446744073709551615 1 1 370 82 370 83 18446744073709551615 2 && 370 84 370 86 18446744073709551615 16 TAKE_N_BITS_FROM 370 87 370 103 18446744073709551615 1 ( 370 103 370 104 18446744073709551615 10 hdr_802_1x 370 104 370 114 18446744073709551615 2 -> 370 114 370 116 18446744073709551615 15 key_information 370 116 370 131 18446744073709551615 1 [ 370 131 370 132 18446744073709551615 1 0 370 132 370 133 18446744073709551615 1 ] 370 133 370 134 18446744073709551615 1 , 370 134 370 135 18446744073709551615 1 0 370 136 370 137 18446744073709551615 1 , 370 137 370 138 18446744073709551615 1 1 370 139 370 140 18446744073709551615 1 ) 370 140 370 141 18446744073709551615 2 && 370 142 370 144 18446744073709551615 1 ( 370 145 370 146 18446744073709551615 16 TAKE_N_BITS_FROM 370 146 370 162 18446744073709551615 1 ( 370 162 370 163 18446744073709551615 10 hdr_802_1x 370 163 370 173 18446744073709551615 2 -> 370 173 370 175 18446744073709551615 15 key_information 370 175 370 190 18446744073709551615 1 [ 370 190 370 191 18446744073709551615 1 1 370 191 370 192 18446744073709551615 1 ] 370 192 370 193 18446744073709551615 1 , 370 193 370 194 18446744073709551615 1 6 370 195 370 196 18446744073709551615 1 , 370 196 370 197 18446744073709551615 1 1 370 198 370 199 18446744073709551615 1 ) 370 199 370 200 18446744073709551615 1 ) 370 200 370 201 18446744073709551615 2 == 370 202 370 204 18446744073709551615 1 0 370 205 370 206 18446744073709551615 2 && 370 207 370 209 18446744073709551615 1 ( 370 210 370 211 18446744073709551615 16 TAKE_N_BITS_FROM 370 211 370 227 18446744073709551615 1 ( 370 227 370 228 18446744073709551615 10 hdr_802_1x 370 228 370 238 18446744073709551615 2 -> 370 238 370 240 18446744073709551615 15 key_information 370 240 370 255 18446744073709551615 1 [ 370 255 370 256 18446744073709551615 1 1 370 256 370 257 18446744073709551615 1 ] 370 257 370 258 18446744073709551615 1 , 370 258 370 259 18446744073709551615 1 7 370 260 370 261 18446744073709551615 1 , 370 261 370 262 18446744073709551615 1 1 370 263 370 264 18446744073709551615 1 ) 370 264 370 265 18446744073709551615 1 ) 370 265 370 266 18446744073709551615 2 == 370 267 370 269 18446744073709551615 1 0 370 270 370 271 18446744073709551615 2 && 370 272 370 274 18446744073709551615 6 memcmp 370 275 370 281 184 1 ( 370 281 370 282 184 17 packet_eapol_info 370 282 370 299 176 2 -> 370 299 370 301 18446744073709551615 11 last_replay 370 301 370 312 86 1 , 370 312 370 313 184 10 hdr_802_1x 370 314 370 324 190 2 -> 370 324 370 326 18446744073709551615 14 replay_counter 370 326 370 340 37 1 , 370 340 370 341 184 1 8 370 342 370 343 18446744073709551615 1 ) 370 343 370 344 184 2 == 370 345 370 347 18446744073709551615 1 0 370 348 370 349 18446744073709551615 1 ) 370 349 370 350 18446744073709551615 1 { 370 351 370 352 18446744073709551615 8 // msg 4 370 353 370 361 18446744073709551615 6 u_char 371 15 371 21 1 1 * 371 22 371 23 18446744073709551615 3 KCK 371 23 371 26 205 1 = 371 27 371 28 18446744073709551615 17 packet_eapol_info 371 29 371 46 176 2 -> 371 46 371 48 18446744073709551615 3 PTK 371 48 371 51 84 1 . 371 51 371 52 18446744073709551615 3 kck 371 52 371 55 75 1 ; 371 55 371 56 18446744073709551615 6 u_char 372 15 372 21 1 1 * 372 22 372 23 18446744073709551615 8 real_MIC 372 23 372 31 206 1 = 372 32 372 33 18446744073709551615 6 malloc 372 34 372 40 137 1 ( 372 40 372 41 137 2 16 372 41 372 43 18446744073709551615 1 ) 372 43 372 44 137 1 ; 372 44 372 45 18446744073709551615 6 u_char 373 15 373 21 1 1 * 373 22 373 23 18446744073709551615 14 calculated_MIC 373 23 373 37 207 1 = 373 38 373 39 18446744073709551615 6 malloc 373 40 373 46 137 1 ( 373 46 373 47 137 2 16 373 47 373 49 18446744073709551615 1 ) 373 49 373 50 137 1 ; 373 50 373 51 18446744073709551615 6 memcpy 374 15 374 21 164 1 ( 374 21 374 22 164 8 real_MIC 374 22 374 30 206 1 , 374 30 374 31 164 10 hdr_802_1x 374 32 374 42 190 2 -> 374 42 374 44 18446744073709551615 11 wpa_key_MIC 374 44 374 55 42 1 , 374 55 374 56 164 2 16 374 57 374 59 18446744073709551615 1 ) 374 59 374 60 164 1 ; 374 60 374 61 18446744073709551615 6 memcpy 375 15 375 21 164 1 ( 375 21 375 22 164 10 hdr_802_1x 375 22 375 32 190 2 -> 375 32 375 34 18446744073709551615 11 wpa_key_MIC 375 34 375 45 42 1 , 375 45 375 46 164 8 NULL_MIC 375 47 375 55 2 1 , 375 55 375 56 164 2 16 375 57 375 59 18446744073709551615 1 ) 375 59 375 60 164 1 ; 375 60 375 61 18446744073709551615 4 HMAC 376 15 376 19 138 1 ( 376 19 376 20 138 8 EVP_sha1 376 20 376 28 139 1 ( 376 28 376 29 139 1 ) 376 29 376 30 139 1 , 376 30 376 31 138 3 KCK 376 32 376 35 205 1 , 376 35 376 36 138 2 16 376 37 376 39 18446744073709551615 1 , 376 39 376 40 138 10 hdr_802_1x 376 41 376 51 190 1 , 376 51 376 52 138 2 99 376 53 376 55 18446744073709551615 1 + 376 56 376 57 18446744073709551615 11 data_length 376 58 376 69 196 1 , 376 69 376 70 138 14 calculated_MIC 376 71 376 85 207 1 , 376 85 376 86 138 1 & 376 87 376 88 18446744073709551615 11 sha1_length 376 88 376 99 177 1 ) 376 99 376 100 138 1 ; 376 100 376 101 18446744073709551615 2 if 377 15 377 17 18446744073709551615 1 ( 377 17 377 18 18446744073709551615 6 memcmp 377 18 377 24 184 1 ( 377 24 377 25 184 8 real_MIC 377 25 377 33 206 1 , 377 33 377 34 184 14 calculated_MIC 377 35 377 49 207 1 , 377 49 377 50 184 2 16 377 51 377 53 18446744073709551615 1 ) 377 53 377 54 184 2 == 377 55 377 57 18446744073709551615 1 0 377 58 377 59 18446744073709551615 1 ) 377 59 377 60 18446744073709551615 1 { 377 61 377 62 18446744073709551615 17 packet_eapol_info 378 17 378 34 176 2 -> 378 34 378 36 18446744073709551615 6 status 378 36 378 42 85 1 = 378 43 378 44 18446744073709551615 7 SUCCESS 378 45 378 52 6 1 ; 378 52 378 53 18446744073709551615 1 } 379 15 379 16 18446744073709551615 1 } 380 13 380 14 18446744073709551615 1 } 381 11 381 12 18446744073709551615 1 } 382 9 382 10 18446744073709551615 1 } 383 7 383 8 18446744073709551615 1 } 384 5 384 6 18446744073709551615 1 } 385 3 385 4 18446744073709551615 6 return 386 3 386 9 18446744073709551615 1 1 386 10 386 11 18446744073709551615 1 ; 386 11 386 12 18446744073709551615 1 } 387 1 387 2 18446744073709551615 4 char 390 1 390 5 18446744073709551615 1 * 390 6 390 7 102 12 mac_toString 390 7 390 19 102 1 ( 390 19 390 20 102 6 u_char 390 20 390 26 1 1 * 390 27 390 28 18446744073709551615 4 addr 390 28 390 32 208 1 ) 390 32 390 33 102 1 { 390 34 390 35 18446744073709551615 6 static 391 3 391 9 18446744073709551615 4 char 391 10 391 14 18446744073709551615 3 str 391 15 391 18 209 1 [ 391 18 391 19 18446744073709551615 2 18 391 19 391 21 18446744073709551615 1 ] 391 21 391 22 18446744073709551615 1 ; 391 22 391 23 18446744073709551615 2 if 392 3 392 5 18446744073709551615 1 ( 392 5 392 6 18446744073709551615 4 addr 392 6 392 10 208 2 == 392 11 392 13 18446744073709551615 4 NULL 392 14 392 18 18446744073709551615 1 ) 392 18 392 19 18446744073709551615 6 return 393 5 393 11 18446744073709551615 2 "" 393 12 393 14 18446744073709551615 1 ; 393 14 393 15 18446744073709551615 8 snprintf 394 3 394 11 210 1 ( 394 11 394 12 210 3 str 394 12 394 15 209 1 , 394 15 394 16 210 6 sizeof 394 17 394 23 18446744073709551615 1 ( 394 23 394 24 18446744073709551615 3 str 394 24 394 27 209 1 ) 394 27 394 28 18446744073709551615 1 , 394 28 394 29 210 31 "%02x:%02x:%02x:%02x:%02x:%02x" 394 30 394 61 18446744073709551615 1 , 394 61 394 62 210 4 addr 395 12 395 16 208 1 [ 395 16 395 17 18446744073709551615 1 0 395 17 395 18 18446744073709551615 1 ] 395 18 395 19 18446744073709551615 1 , 395 19 395 20 210 4 addr 395 21 395 25 208 1 [ 395 25 395 26 18446744073709551615 1 1 395 26 395 27 18446744073709551615 1 ] 395 27 395 28 18446744073709551615 1 , 395 28 395 29 210 4 addr 395 30 395 34 208 1 [ 395 34 395 35 18446744073709551615 1 2 395 35 395 36 18446744073709551615 1 ] 395 36 395 37 18446744073709551615 1 , 395 37 395 38 210 4 addr 395 39 395 43 208 1 [ 395 43 395 44 18446744073709551615 1 3 395 44 395 45 18446744073709551615 1 ] 395 45 395 46 18446744073709551615 1 , 395 46 395 47 210 4 addr 395 48 395 52 208 1 [ 395 52 395 53 18446744073709551615 1 4 395 53 395 54 18446744073709551615 1 ] 395 54 395 55 18446744073709551615 1 , 395 55 395 56 210 4 addr 395 57 395 61 208 1 [ 395 61 395 62 18446744073709551615 1 5 395 62 395 63 18446744073709551615 1 ] 395 63 395 64 18446744073709551615 1 ) 395 64 395 65 210 1 ; 395 65 395 66 18446744073709551615 6 return 396 3 396 9 18446744073709551615 3 str 396 10 396 13 209 1 ; 396 13 396 14 18446744073709551615 1 } 397 1 397 2 18446744073709551615 6 u_char 399 1 399 7 1 1 * 399 8 399 9 103 6 PRF512 399 9 399 15 103 1 ( 399 15 399 16 103 6 u_char 399 16 399 22 1 1 * 399 23 399 24 18446744073709551615 3 PMK 399 24 399 27 211 1 , 399 27 399 28 103 6 u_char 399 29 399 35 1 1 * 399 36 399 37 18446744073709551615 1 A 399 37 399 38 212 1 , 399 38 399 39 103 6 size_t 399 40 399 46 104 4 lenA 399 47 399 51 213 1 , 399 51 399 52 103 6 u_char 399 53 399 59 1 1 * 399 60 399 61 18446744073709551615 7 AP_addr 399 61 399 68 214 1 , 399 68 399 69 103 6 u_char 399 70 399 76 1 1 * 399 77 399 78 18446744073709551615 8 STA_addr 399 78 399 86 215 1 , 399 86 399 87 103 6 u_char 399 88 399 94 1 1 * 399 95 399 96 18446744073709551615 6 ANonce 399 96 399 102 216 1 , 399 102 399 103 103 6 u_char 399 104 399 110 1 1 * 399 111 399 112 18446744073709551615 6 SNonce 399 112 399 118 217 1 ) 399 118 399 119 103 1 { 399 120 399 121 18446744073709551615 6 static 400 3 400 9 18446744073709551615 6 u_char 400 10 400 16 1 3 ptk 400 17 400 20 218 1 [ 400 20 400 21 18446744073709551615 2 64 400 21 400 23 18446744073709551615 1 ] 400 23 400 24 18446744073709551615 1 ; 400 24 400 25 18446744073709551615 6 u_char 401 3 401 9 1 1 B 401 10 401 11 219 1 [ 401 11 401 12 18446744073709551615 2 76 401 12 401 14 18446744073709551615 1 ] 401 14 401 15 18446744073709551615 1 ; 401 15 401 16 18446744073709551615 3 int 402 3 402 6 18446744073709551615 1 i 402 7 402 8 220 1 = 402 9 402 10 18446744073709551615 1 0 402 11 402 12 18446744073709551615 1 ; 402 12 402 13 18446744073709551615 6 u_char 403 3 403 9 1 1 c 403 10 403 11 221 1 = 403 12 403 13 18446744073709551615 4 0x00 403 14 403 18 18446744073709551615 1 ; 403 18 403 19 18446744073709551615 6 u_char 404 3 404 9 1 3 arg 404 10 404 13 222 1 [ 404 13 404 14 18446744073709551615 2 76 404 14 404 16 18446744073709551615 1 + 404 17 404 18 18446744073709551615 4 lenA 404 19 404 23 213 1 + 404 24 404 25 18446744073709551615 1 2 404 26 404 27 18446744073709551615 1 ] 404 27 404 28 18446744073709551615 1 ; 404 28 404 29 18446744073709551615 2 if 406 3 406 5 18446744073709551615 1 ( 406 5 406 6 18446744073709551615 6 strcmp 406 6 406 12 165 1 ( 406 12 406 13 165 7 AP_addr 406 13 406 20 214 1 , 406 20 406 21 165 8 STA_addr 406 22 406 30 215 1 ) 406 30 406 31 165 1 < 406 32 406 33 18446744073709551615 1 0 406 34 406 35 18446744073709551615 1 ) 406 35 406 36 18446744073709551615 1 { 406 37 406 38 18446744073709551615 6 memcpy 407 5 407 11 164 1 ( 407 11 407 12 164 1 B 407 12 407 13 219 1 , 407 13 407 14 164 7 AP_addr 407 15 407 22 214 1 , 407 22 407 23 164 12 MAC_ADDR_LEN 407 24 407 36 164 1 ) 407 36 407 37 164 1 ; 407 37 407 38 18446744073709551615 6 memcpy 408 5 408 11 164 1 ( 408 11 408 12 164 1 B 408 12 408 13 219 1 + 408 14 408 15 18446744073709551615 12 MAC_ADDR_LEN 408 16 408 28 18446744073709551615 1 , 408 28 408 29 164 8 STA_addr 408 30 408 38 215 1 , 408 38 408 39 164 12 MAC_ADDR_LEN 408 40 408 52 164 1 ) 408 52 408 53 164 1 ; 408 53 408 54 18446744073709551615 1 } 409 3 409 4 18446744073709551615 4 else 410 3 410 7 18446744073709551615 1 { 410 8 410 9 18446744073709551615 6 memcpy 411 5 411 11 164 1 ( 411 11 411 12 164 1 B 411 12 411 13 219 1 , 411 13 411 14 164 8 STA_addr 411 15 411 23 215 1 , 411 23 411 24 164 12 MAC_ADDR_LEN 411 25 411 37 164 1 ) 411 37 411 38 164 1 ; 411 38 411 39 18446744073709551615 6 memcpy 412 5 412 11 164 1 ( 412 11 412 12 164 1 B 412 12 412 13 219 1 + 412 14 412 15 18446744073709551615 12 MAC_ADDR_LEN 412 16 412 28 18446744073709551615 1 , 412 28 412 29 164 7 AP_addr 412 30 412 37 214 1 , 412 37 412 38 164 12 MAC_ADDR_LEN 412 39 412 51 164 1 ) 412 51 412 52 164 1 ; 412 52 412 53 18446744073709551615 1 } 413 3 413 4 18446744073709551615 2 if 414 3 414 5 18446744073709551615 1 ( 414 5 414 6 18446744073709551615 6 strcmp 414 6 414 12 165 1 ( 414 12 414 13 165 6 ANonce 414 13 414 19 216 1 , 414 19 414 20 165 6 SNonce 414 21 414 27 217 1 ) 414 27 414 28 165 1 < 414 29 414 30 18446744073709551615 1 0 414 31 414 32 18446744073709551615 1 ) 414 32 414 33 18446744073709551615 1 { 414 34 414 35 18446744073709551615 6 memcpy 415 5 415 11 164 1 ( 415 11 415 12 164 1 B 415 12 415 13 219 1 + 415 14 415 15 18446744073709551615 1 2 415 16 415 17 18446744073709551615 1 * 415 18 415 19 18446744073709551615 12 MAC_ADDR_LEN 415 20 415 32 18446744073709551615 1 , 415 32 415 33 164 6 ANonce 415 34 415 40 216 1 , 415 40 415 41 164 2 32 415 42 415 44 18446744073709551615 1 ) 415 44 415 45 164 1 ; 415 45 415 46 18446744073709551615 6 memcpy 416 5 416 11 164 1 ( 416 11 416 12 164 1 B 416 12 416 13 219 1 + 416 14 416 15 18446744073709551615 1 2 416 16 416 17 18446744073709551615 1 * 416 18 416 19 18446744073709551615 12 MAC_ADDR_LEN 416 20 416 32 18446744073709551615 1 + 416 33 416 34 18446744073709551615 2 32 416 35 416 37 18446744073709551615 1 , 416 37 416 38 164 6 SNonce 416 39 416 45 217 1 , 416 45 416 46 164 2 32 416 47 416 49 18446744073709551615 1 ) 416 49 416 50 164 1 ; 416 50 416 51 18446744073709551615 1 } 417 3 417 4 18446744073709551615 4 else 418 3 418 7 18446744073709551615 1 { 418 8 418 9 18446744073709551615 6 memcpy 419 5 419 11 164 1 ( 419 11 419 12 164 1 B 419 12 419 13 219 1 + 419 14 419 15 18446744073709551615 1 2 419 16 419 17 18446744073709551615 1 * 419 18 419 19 18446744073709551615 12 MAC_ADDR_LEN 419 20 419 32 18446744073709551615 1 , 419 32 419 33 164 6 SNonce 419 34 419 40 217 1 , 419 40 419 41 164 2 32 419 42 419 44 18446744073709551615 1 ) 419 44 419 45 164 1 ; 419 45 419 46 18446744073709551615 6 memcpy 420 5 420 11 164 1 ( 420 11 420 12 164 1 B 420 12 420 13 219 1 + 420 14 420 15 18446744073709551615 1 2 420 16 420 17 18446744073709551615 1 * 420 18 420 19 18446744073709551615 12 MAC_ADDR_LEN 420 20 420 32 18446744073709551615 1 + 420 33 420 34 18446744073709551615 2 32 420 35 420 37 18446744073709551615 1 , 420 37 420 38 164 6 ANonce 420 39 420 45 216 1 , 420 45 420 46 164 2 32 420 47 420 49 18446744073709551615 1 ) 420 49 420 50 164 1 ; 420 50 420 51 18446744073709551615 1 } 421 3 421 4 18446744073709551615 6 memcpy 423 3 423 9 164 1 ( 423 9 423 10 164 3 arg 423 10 423 13 222 1 , 423 13 423 14 164 1 A 423 15 423 16 212 1 , 423 16 423 17 164 4 lenA 423 18 423 22 213 1 ) 423 22 423 23 164 1 ; 423 23 423 24 18446744073709551615 3 arg 424 3 424 6 222 1 [ 424 6 424 7 18446744073709551615 4 lenA 424 7 424 11 213 1 ] 424 11 424 12 18446744073709551615 1 = 424 13 424 14 18446744073709551615 1 c 424 15 424 16 221 1 ; 424 16 424 17 18446744073709551615 6 memcpy 425 3 425 9 164 1 ( 425 9 425 10 164 3 arg 425 10 425 13 222 1 + 425 14 425 15 18446744073709551615 4 lenA 425 16 425 20 213 1 + 425 21 425 22 18446744073709551615 1 1 425 23 425 24 18446744073709551615 1 , 425 24 425 25 164 1 B 425 26 425 27 219 1 , 425 27 425 28 164 2 76 425 29 425 31 18446744073709551615 1 ) 425 31 425 32 164 1 ; 425 32 425 33 18446744073709551615 6 u_char 427 3 427 9 1 13 hmac_sha1_res 427 10 427 23 223 1 [ 427 23 427 24 18446744073709551615 2 20 427 24 427 26 18446744073709551615 1 ] 427 26 427 27 18446744073709551615 1 ; 427 27 427 28 18446744073709551615 6 u_char 428 3 428 9 1 1 R 428 10 428 11 224 1 [ 428 11 428 12 18446744073709551615 1 ( 428 12 428 13 18446744073709551615 1 ( 428 13 428 14 18446744073709551615 3 512 428 14 428 17 18446744073709551615 1 + 428 18 428 19 18446744073709551615 3 159 428 20 428 23 18446744073709551615 1 ) 428 23 428 24 18446744073709551615 1 / 428 25 428 26 18446744073709551615 3 160 428 27 428 30 18446744073709551615 1 ) 428 30 428 31 18446744073709551615 1 * 428 32 428 33 18446744073709551615 2 20 428 34 428 36 18446744073709551615 1 ] 428 36 428 37 18446744073709551615 1 ; 428 37 428 38 18446744073709551615 5 u_int 429 3 429 8 225 10 sha_length 429 9 429 19 226 1 = 429 20 429 21 18446744073709551615 2 20 429 22 429 24 18446744073709551615 1 ; 429 24 429 25 18446744073709551615 5 while 430 3 430 8 18446744073709551615 1 ( 430 8 430 9 18446744073709551615 1 i 430 9 430 10 220 2 <= 430 11 430 13 18446744073709551615 1 ( 430 14 430 15 18446744073709551615 1 ( 430 15 430 16 18446744073709551615 3 512 430 16 430 19 18446744073709551615 1 + 430 20 430 21 18446744073709551615 3 159 430 22 430 25 18446744073709551615 1 ) 430 25 430 26 18446744073709551615 1 / 430 27 430 28 18446744073709551615 3 160 430 29 430 32 18446744073709551615 1 ) 430 32 430 33 18446744073709551615 1 ) 430 33 430 34 18446744073709551615 1 { 430 35 430 36 18446744073709551615 3 arg 431 5 431 8 222 1 [ 431 8 431 9 18446744073709551615 2 76 431 9 431 11 18446744073709551615 1 + 431 12 431 13 18446744073709551615 4 lenA 431 14 431 18 213 1 + 431 19 431 20 18446744073709551615 1 1 431 21 431 22 18446744073709551615 1 ] 431 22 431 23 18446744073709551615 1 = 431 24 431 25 18446744073709551615 4 0x00 431 26 431 30 18446744073709551615 1 + 431 31 431 32 18446744073709551615 1 i 431 33 431 34 220 1 ; 431 34 431 35 18446744073709551615 4 HMAC 432 5 432 9 138 1 ( 432 9 432 10 138 8 EVP_sha1 432 10 432 18 139 1 ( 432 18 432 19 139 1 ) 432 19 432 20 139 1 , 432 20 432 21 138 3 PMK 432 22 432 25 211 1 , 432 25 432 26 138 2 32 432 27 432 29 18446744073709551615 1 , 432 29 432 30 138 3 arg 432 31 432 34 222 1 , 432 34 432 35 138 2 76 432 36 432 38 18446744073709551615 1 + 432 39 432 40 18446744073709551615 4 lenA 432 41 432 45 213 1 + 432 46 432 47 18446744073709551615 1 2 432 48 432 49 18446744073709551615 1 , 432 49 432 50 138 13 hmac_sha1_res 432 51 432 64 223 1 , 432 64 432 65 138 1 & 432 66 432 67 18446744073709551615 10 sha_length 432 67 432 77 226 1 ) 432 77 432 78 138 1 ; 432 78 432 79 18446744073709551615 6 memcpy 433 5 433 11 164 1 ( 433 11 433 12 164 1 R 433 12 433 13 224 1 + 433 14 433 15 18446744073709551615 1 i 433 16 433 17 220 1 * 433 18 433 19 18446744073709551615 2 20 433 20 433 22 18446744073709551615 1 , 433 22 433 23 164 13 hmac_sha1_res 433 24 433 37 223 1 , 433 37 433 38 164 2 20 433 39 433 41 18446744073709551615 1 ) 433 41 433 42 164 1 ; 433 42 433 43 18446744073709551615 1 i 434 5 434 6 220 2 ++ 434 6 434 8 18446744073709551615 1 ; 434 8 434 9 18446744073709551615 1 } 435 3 435 4 18446744073709551615 6 memcpy 436 3 436 9 164 1 ( 436 9 436 10 164 3 ptk 436 10 436 13 218 1 , 436 13 436 14 164 1 R 436 15 436 16 224 1 , 436 16 436 17 164 2 64 436 18 436 20 18446744073709551615 1 ) 436 20 436 21 164 1 ; 436 21 436 22 18446744073709551615 6 return 437 3 437 9 18446744073709551615 3 ptk 437 10 437 13 218 1 ; 437 13 437 14 18446744073709551615 1 } 438 1 438 2 18446744073709551615 6 u_char 440 1 440 7 1 1 * 440 8 440 9 105 15 hexstr_to_bytes 440 9 440 24 105 1 ( 440 24 440 25 105 6 u_char 440 25 440 31 1 1 * 440 32 440 33 18446744073709551615 6 hexstr 440 33 440 39 227 1 ) 440 39 440 40 105 1 { 440 41 440 42 18446744073709551615 6 size_t 441 3 441 9 104 3 len 441 10 441 13 228 1 = 441 14 441 15 18446744073709551615 6 strlen 441 16 441 22 127 1 ( 441 22 441 23 127 6 hexstr 441 23 441 29 227 1 ) 441 29 441 30 127 1 ; 441 30 441 31 18446744073709551615 2 if 442 3 442 5 18446744073709551615 1 ( 442 5 442 6 18446744073709551615 3 len 442 6 442 9 228 1 % 442 10 442 11 18446744073709551615 1 2 442 12 442 13 18446744073709551615 2 != 442 14 442 16 18446744073709551615 1 0 442 17 442 18 18446744073709551615 1 ) 442 18 442 19 18446744073709551615 6 return 443 5 443 11 18446744073709551615 4 NULL 443 12 443 16 18446744073709551615 1 ; 443 16 443 17 18446744073709551615 6 size_t 444 3 444 9 104 9 final_len 444 10 444 19 229 1 = 444 20 444 21 18446744073709551615 3 len 444 22 444 25 228 1 / 444 26 444 27 18446744073709551615 1 2 444 28 444 29 18446744073709551615 1 ; 444 29 444 30 18446744073709551615 8 unsigned 445 3 445 11 18446744073709551615 4 char 445 12 445 16 18446744073709551615 1 * 445 17 445 18 18446744073709551615 4 chrs 445 18 445 22 230 1 = 445 23 445 24 18446744073709551615 1 ( 445 25 445 26 18446744073709551615 8 unsigned 445 26 445 34 18446744073709551615 4 char 445 35 445 39 18446744073709551615 1 * 445 40 445 41 18446744073709551615 1 ) 445 41 445 42 18446744073709551615 6 malloc 445 42 445 48 137 1 ( 445 48 445 49 137 1 ( 445 49 445 50 18446744073709551615 9 final_len 445 50 445 59 229 1 ) 445 59 445 60 18446744073709551615 1 * 445 61 445 62 18446744073709551615 6 sizeof 445 63 445 69 18446744073709551615 1 ( 445 69 445 70 18446744073709551615 1 * 445 70 445 71 18446744073709551615 4 chrs 445 71 445 75 230 1 ) 445 75 445 76 18446744073709551615 1 ) 445 76 445 77 137 1 ; 445 77 445 78 18446744073709551615 3 for 446 3 446 6 18446744073709551615 1 ( 446 6 446 7 18446744073709551615 6 size_t 446 7 446 13 104 1 i 446 14 446 15 231 1 = 446 16 446 17 18446744073709551615 1 0 446 18 446 19 18446744073709551615 1 , 446 19 446 20 18446744073709551615 1 j 446 21 446 22 232 1 = 446 23 446 24 18446744073709551615 1 0 446 25 446 26 18446744073709551615 1 ; 446 26 446 27 18446744073709551615 1 j 446 28 446 29 232 1 < 446 30 446 31 18446744073709551615 9 final_len 446 32 446 41 229 1 ; 446 41 446 42 18446744073709551615 1 i 446 43 446 44 231 2 += 446 45 446 47 18446744073709551615 1 2 446 48 446 49 18446744073709551615 1 , 446 49 446 50 18446744073709551615 1 j 446 51 446 52 232 2 ++ 446 52 446 54 18446744073709551615 1 ) 446 54 446 55 18446744073709551615 4 chrs 447 5 447 9 230 1 [ 447 9 447 10 18446744073709551615 1 j 447 10 447 11 232 1 ] 447 11 447 12 18446744073709551615 1 = 447 13 447 14 18446744073709551615 1 ( 447 15 447 16 18446744073709551615 6 hexstr 447 16 447 22 227 1 [ 447 22 447 23 18446744073709551615 1 i 447 23 447 24 231 1 ] 447 24 447 25 18446744073709551615 1 % 447 26 447 27 18446744073709551615 2 32 447 28 447 30 18446744073709551615 1 + 447 31 447 32 18446744073709551615 1 9 447 33 447 34 18446744073709551615 1 ) 447 34 447 35 18446744073709551615 1 % 447 36 447 37 18446744073709551615 2 25 447 38 447 40 18446744073709551615 1 * 447 41 447 42 18446744073709551615 2 16 447 43 447 45 18446744073709551615 1 + 447 46 447 47 18446744073709551615 1 ( 447 48 447 49 18446744073709551615 6 hexstr 447 49 447 55 227 1 [ 447 55 447 56 18446744073709551615 1 i 447 56 447 57 231 1 + 447 58 447 59 18446744073709551615 1 1 447 60 447 61 18446744073709551615 1 ] 447 61 447 62 18446744073709551615 1 % 447 63 447 64 18446744073709551615 2 32 447 65 447 67 18446744073709551615 1 + 447 68 447 69 18446744073709551615 1 9 447 70 447 71 18446744073709551615 1 ) 447 71 447 72 18446744073709551615 1 % 447 73 447 74 18446744073709551615 2 25 447 75 447 77 18446744073709551615 1 ; 447 77 447 78 18446744073709551615 6 return 448 3 448 9 18446744073709551615 4 chrs 448 10 448 14 230 1 ; 448 14 448 15 18446744073709551615 1 } 449 1 449 2 18446744073709551615 6 u_char 451 1 451 7 1 14 packet_decrypt 451 8 451 22 101 1 ( 451 22 451 23 101 5 const 451 23 451 28 18446744073709551615 6 struct 451 29 451 35 18446744073709551615 11 pcap_pkthdr 451 36 451 47 98 1 * 451 48 451 49 18446744073709551615 6 header 451 49 451 55 233 1 , 451 55 451 56 101 5 const 451 57 451 62 18446744073709551615 6 u_char 451 63 451 69 1 1 * 451 70 451 71 18446744073709551615 6 buffer 451 71 451 77 234 1 , 451 77 451 78 101 6 struct 451 79 451 85 18446744073709551615 10 eapol_info 451 86 451 96 80 1 * 451 97 451 98 18446744073709551615 10 eapol_keys 451 98 451 108 235 1 ) 451 108 451 109 101 1 { 451 110 451 111 18446744073709551615 5 const 452 3 452 8 18446744073709551615 6 struct 452 9 452 15 18446744073709551615 12 sniff_802_11 452 16 452 28 8 1 * 452 29 452 30 18446744073709551615 10 hdr_802_11 452 30 452 40 236 1 ; 452 40 452 41 18446744073709551615 10 hdr_802_11 453 3 453 13 236 1 = 453 14 453 15 18446744073709551615 1 ( 453 16 453 17 18446744073709551615 6 struct 453 17 453 23 18446744073709551615 12 sniff_802_11 453 24 453 36 8 1 * 453 37 453 38 18446744073709551615 1 ) 453 38 453 39 18446744073709551615 1 ( 453 39 453 40 18446744073709551615 6 buffer 453 40 453 46 234 1 + 453 47 453 48 18446744073709551615 16 PRISM_HEADER_LEN 453 49 453 65 18446744073709551615 1 ) 453 65 453 66 18446744073709551615 1 ; 453 66 453 67 18446744073709551615 3 int 454 3 454 6 18446744073709551615 5 is_a4 454 7 454 12 237 1 , 454 12 454 13 18446744073709551615 1 i 454 14 454 15 238 1 , 454 15 454 16 18446744073709551615 1 n 454 17 454 18 239 1 , 454 18 454 19 18446744073709551615 15 hdr_ccmp_offset 454 20 454 35 240 1 , 454 35 454 36 18446744073709551615 6 blocks 454 37 454 43 241 1 , 454 43 454 44 18446744073709551615 6 is_qos 454 45 454 51 242 1 ; 454 51 454 52 18446744073709551615 3 int 455 3 455 6 18446744073709551615 8 data_len 455 7 455 15 243 1 , 455 15 455 16 18446744073709551615 4 last 455 17 455 21 244 1 , 455 21 455 22 18446744073709551615 6 offset 455 23 455 29 245 1 ; 455 29 455 30 18446744073709551615 6 u_char 456 3 456 9 1 12 ccmp_aes_ctr 456 10 456 22 246 1 [ 456 22 456 23 18446744073709551615 2 16 456 23 456 25 18446744073709551615 1 ] 456 25 456 26 18446744073709551615 1 , 456 26 456 27 18446744073709551615 1 B 456 28 456 29 247 1 [ 456 29 456 30 18446744073709551615 2 16 456 30 456 32 18446744073709551615 1 ] 456 32 456 33 18446744073709551615 1 , 456 33 456 34 18446744073709551615 3 MIC 456 35 456 38 248 1 [ 456 38 456 39 18446744073709551615 2 16 456 39 456 41 18446744073709551615 1 ] 456 41 456 42 18446744073709551615 1 ; 456 42 456 43 18446744073709551615 6 u_char 457 3 457 9 1 13 packet_number 457 10 457 23 249 1 [ 457 23 457 24 18446744073709551615 1 6 457 24 457 25 18446744073709551615 1 ] 457 25 457 26 18446744073709551615 1 ; 457 26 457 27 18446744073709551615 5 is_a4 459 3 459 8 237 1 = 459 9 459 10 18446744073709551615 1 ( 459 11 459 12 18446744073709551615 10 hdr_802_11 459 12 459 22 236 2 -> 459 22 459 24 18446744073709551615 13 frame_control 459 24 459 37 9 1 [ 459 37 459 38 18446744073709551615 1 1 459 38 459 39 18446744073709551615 1 ] 459 39 459 40 18446744073709551615 1 & 459 41 459 42 18446744073709551615 1 3 459 43 459 44 18446744073709551615 1 ) 459 44 459 45 18446744073709551615 2 == 459 46 459 48 18446744073709551615 1 3 459 49 459 50 18446744073709551615 1 ; 459 50 459 51 18446744073709551615 6 is_qos 460 3 460 9 242 1 = 460 10 460 11 18446744073709551615 1 ( 460 12 460 13 18446744073709551615 10 hdr_802_11 460 13 460 23 236 2 -> 460 23 460 25 18446744073709551615 13 frame_control 460 25 460 38 9 1 [ 460 38 460 39 18446744073709551615 1 0 460 39 460 40 18446744073709551615 1 ] 460 40 460 41 18446744073709551615 1 & 460 42 460 43 18446744073709551615 4 0x8C 460 44 460 48 18446744073709551615 1 ) 460 48 460 49 18446744073709551615 2 == 460 50 460 52 18446744073709551615 4 0x88 460 53 460 57 18446744073709551615 1 ; 460 57 460 58 18446744073709551615 15 hdr_ccmp_offset 461 3 461 18 240 1 = 461 19 461 20 18446744073709551615 2 24 461 21 461 23 18446744073709551615 1 + 461 24 461 25 18446744073709551615 1 6 461 26 461 27 18446744073709551615 1 * 461 28 461 29 18446744073709551615 5 is_a4 461 30 461 35 237 1 ; 461 35 461 36 18446744073709551615 15 hdr_ccmp_offset 462 3 462 18 240 2 += 462 19 462 21 18446744073709551615 1 2 462 22 462 23 18446744073709551615 1 * 462 24 462 25 18446744073709551615 6 is_qos 462 26 462 32 242 1 ; 462 32 462 33 18446744073709551615 8 data_len 464 3 464 11 243 1 = 464 12 464 13 18446744073709551615 6 header 464 14 464 20 233 2 -> 464 20 464 22 18446744073709551615 6 caplen 464 22 464 28 250 1 - 464 29 464 30 18446744073709551615 16 PRISM_HEADER_LEN 464 31 464 47 18446744073709551615 1 - 464 48 464 49 18446744073709551615 15 hdr_ccmp_offset 464 50 464 65 240 1 - 464 66 464 67 18446744073709551615 1 8 464 68 464 69 18446744073709551615 1 - 464 70 464 71 18446744073709551615 1 8 464 72 464 73 18446744073709551615 1 - 464 74 464 75 18446744073709551615 1 4 464 76 464 77 18446744073709551615 1 ; 464 77 464 78 18446744073709551615 13 packet_number 466 3 466 16 249 1 [ 466 16 466 17 18446744073709551615 1 0 466 17 466 18 18446744073709551615 1 ] 466 18 466 19 18446744073709551615 1 = 466 20 466 21 18446744073709551615 1 * 466 22 466 23 18446744073709551615 1 ( 466 23 466 24 18446744073709551615 6 buffer 466 24 466 30 234 1 + 466 31 466 32 18446744073709551615 16 PRISM_HEADER_LEN 466 33 466 49 18446744073709551615 1 + 466 50 466 51 18446744073709551615 15 hdr_ccmp_offset 466 52 466 67 240 1 + 466 68 466 69 18446744073709551615 1 7 466 70 466 71 18446744073709551615 1 ) 466 71 466 72 18446744073709551615 1 ; 466 72 466 73 18446744073709551615 13 packet_number 467 3 467 16 249 1 [ 467 16 467 17 18446744073709551615 1 1 467 17 467 18 18446744073709551615 1 ] 467 18 467 19 18446744073709551615 1 = 467 20 467 21 18446744073709551615 1 * 467 22 467 23 18446744073709551615 1 ( 467 23 467 24 18446744073709551615 6 buffer 467 24 467 30 234 1 + 467 31 467 32 18446744073709551615 16 PRISM_HEADER_LEN 467 33 467 49 18446744073709551615 1 + 467 50 467 51 18446744073709551615 15 hdr_ccmp_offset 467 52 467 67 240 1 + 467 68 467 69 18446744073709551615 1 6 467 70 467 71 18446744073709551615 1 ) 467 71 467 72 18446744073709551615 1 ; 467 72 467 73 18446744073709551615 13 packet_number 468 3 468 16 249 1 [ 468 16 468 17 18446744073709551615 1 2 468 17 468 18 18446744073709551615 1 ] 468 18 468 19 18446744073709551615 1 = 468 20 468 21 18446744073709551615 1 * 468 22 468 23 18446744073709551615 1 ( 468 23 468 24 18446744073709551615 6 buffer 468 24 468 30 234 1 + 468 31 468 32 18446744073709551615 16 PRISM_HEADER_LEN 468 33 468 49 18446744073709551615 1 + 468 50 468 51 18446744073709551615 15 hdr_ccmp_offset 468 52 468 67 240 1 + 468 68 468 69 18446744073709551615 1 5 468 70 468 71 18446744073709551615 1 ) 468 71 468 72 18446744073709551615 1 ; 468 72 468 73 18446744073709551615 13 packet_number 469 3 469 16 249 1 [ 469 16 469 17 18446744073709551615 1 3 469 17 469 18 18446744073709551615 1 ] 469 18 469 19 18446744073709551615 1 = 469 20 469 21 18446744073709551615 1 * 469 22 469 23 18446744073709551615 1 ( 469 23 469 24 18446744073709551615 6 buffer 469 24 469 30 234 1 + 469 31 469 32 18446744073709551615 16 PRISM_HEADER_LEN 469 33 469 49 18446744073709551615 1 + 469 50 469 51 18446744073709551615 15 hdr_ccmp_offset 469 52 469 67 240 1 + 469 68 469 69 18446744073709551615 1 4 469 70 469 71 18446744073709551615 1 ) 469 71 469 72 18446744073709551615 1 ; 469 72 469 73 18446744073709551615 13 packet_number 470 3 470 16 249 1 [ 470 16 470 17 18446744073709551615 1 4 470 17 470 18 18446744073709551615 1 ] 470 18 470 19 18446744073709551615 1 = 470 20 470 21 18446744073709551615 1 * 470 22 470 23 18446744073709551615 1 ( 470 23 470 24 18446744073709551615 6 buffer 470 24 470 30 234 1 + 470 31 470 32 18446744073709551615 16 PRISM_HEADER_LEN 470 33 470 49 18446744073709551615 1 + 470 50 470 51 18446744073709551615 15 hdr_ccmp_offset 470 52 470 67 240 1 + 470 68 470 69 18446744073709551615 1 1 470 70 470 71 18446744073709551615 1 ) 470 71 470 72 18446744073709551615 1 ; 470 72 470 73 18446744073709551615 13 packet_number 471 3 471 16 249 1 [ 471 16 471 17 18446744073709551615 1 5 471 17 471 18 18446744073709551615 1 ] 471 18 471 19 18446744073709551615 1 = 471 20 471 21 18446744073709551615 1 * 471 22 471 23 18446744073709551615 1 ( 471 23 471 24 18446744073709551615 6 buffer 471 24 471 30 234 1 + 471 31 471 32 18446744073709551615 16 PRISM_HEADER_LEN 471 33 471 49 18446744073709551615 1 + 471 50 471 51 18446744073709551615 15 hdr_ccmp_offset 471 52 471 67 240 1 ) 471 67 471 68 18446744073709551615 1 ; 471 68 471 69 18446744073709551615 57 //ccmp_aes_ctr [0x59|priority|src_addr|packet_number|ctr] 473 3 473 60 18446744073709551615 12 ccmp_aes_ctr 474 3 474 15 246 1 [ 474 15 474 16 18446744073709551615 1 0 474 16 474 17 18446744073709551615 1 ] 474 17 474 18 18446744073709551615 1 = 474 19 474 20 18446744073709551615 4 0x59 474 21 474 25 18446744073709551615 1 ; 474 25 474 26 18446744073709551615 12 ccmp_aes_ctr 475 3 475 15 246 1 [ 475 15 475 16 18446744073709551615 1 1 475 16 475 17 18446744073709551615 1 ] 475 17 475 18 18446744073709551615 1 = 475 19 475 20 18446744073709551615 1 0 475 21 475 22 18446744073709551615 1 ; 475 22 475 23 18446744073709551615 6 memcpy 476 3 476 9 164 1 ( 476 9 476 10 164 1 & 476 10 476 11 18446744073709551615 12 ccmp_aes_ctr 476 11 476 23 246 1 [ 476 23 476 24 18446744073709551615 1 2 476 24 476 25 18446744073709551615 1 ] 476 25 476 26 18446744073709551615 1 , 476 26 476 27 164 10 hdr_802_11 476 28 476 38 236 2 -> 476 38 476 40 18446744073709551615 5 addr2 476 40 476 45 12 1 , 476 45 476 46 164 12 MAC_ADDR_LEN 476 47 476 59 164 1 ) 476 59 476 60 164 1 ; 476 60 476 61 18446744073709551615 6 memcpy 477 3 477 9 164 1 ( 477 9 477 10 164 1 & 477 10 477 11 18446744073709551615 12 ccmp_aes_ctr 477 11 477 23 246 1 [ 477 23 477 24 18446744073709551615 1 2 477 24 477 25 18446744073709551615 1 + 477 26 477 27 18446744073709551615 12 MAC_ADDR_LEN 477 28 477 40 18446744073709551615 1 ] 477 40 477 41 18446744073709551615 1 , 477 41 477 42 164 13 packet_number 477 43 477 56 249 1 , 477 56 477 57 164 1 6 477 58 477 59 18446744073709551615 1 ) 477 59 477 60 164 1 ; 477 60 477 61 18446744073709551615 12 ccmp_aes_ctr 478 3 478 15 246 1 [ 478 15 478 16 18446744073709551615 2 14 478 16 478 18 18446744073709551615 1 ] 478 18 478 19 18446744073709551615 1 = 478 20 478 21 18446744073709551615 1 ( 478 22 478 23 18446744073709551615 8 data_len 478 23 478 31 243 2 >> 478 32 478 34 18446744073709551615 1 8 478 35 478 36 18446744073709551615 1 ) 478 36 478 37 18446744073709551615 1 & 478 38 478 39 18446744073709551615 4 0xFF 478 40 478 44 18446744073709551615 1 ; 478 44 478 45 18446744073709551615 12 ccmp_aes_ctr 479 3 479 15 246 1 [ 479 15 479 16 18446744073709551615 2 15 479 16 479 18 18446744073709551615 1 ] 479 18 479 19 18446744073709551615 1 = 479 20 479 21 18446744073709551615 1 ( 479 22 479 23 18446744073709551615 8 data_len 479 23 479 31 243 1 & 479 32 479 33 18446744073709551615 4 0xFF 479 34 479 38 18446744073709551615 1 ) 479 38 479 39 18446744073709551615 1 ; 479 39 479 40 18446744073709551615 6 u_char 481 3 481 9 1 3 AAD 481 10 481 13 251 1 [ 481 13 481 14 18446744073709551615 2 32 481 14 481 16 18446744073709551615 1 ] 481 16 481 17 18446744073709551615 1 = 481 18 481 19 18446744073709551615 1 { 481 20 481 21 18446744073709551615 1 0 481 21 481 22 18446744073709551615 1 } 481 22 481 23 18446744073709551615 1 ; 481 23 481 24 18446744073709551615 3 AAD 482 3 482 6 251 1 [ 482 6 482 7 18446744073709551615 1 2 482 7 482 8 18446744073709551615 1 ] 482 8 482 9 18446744073709551615 1 = 482 10 482 11 18446744073709551615 10 hdr_802_11 482 12 482 22 236 2 -> 482 22 482 24 18446744073709551615 13 frame_control 482 24 482 37 9 1 [ 482 37 482 38 18446744073709551615 1 0 482 38 482 39 18446744073709551615 1 ] 482 39 482 40 18446744073709551615 1 & 482 41 482 42 18446744073709551615 4 0x8F 482 43 482 47 18446744073709551615 1 ; 482 47 482 48 18446744073709551615 3 AAD 483 3 483 6 251 1 [ 483 6 483 7 18446744073709551615 1 3 483 7 483 8 18446744073709551615 1 ] 483 8 483 9 18446744073709551615 1 = 483 10 483 11 18446744073709551615 10 hdr_802_11 483 12 483 22 236 2 -> 483 22 483 24 18446744073709551615 13 frame_control 483 24 483 37 9 1 [ 483 37 483 38 18446744073709551615 1 1 483 38 483 39 18446744073709551615 1 ] 483 39 483 40 18446744073709551615 1 & 483 41 483 42 18446744073709551615 4 0xC7 483 43 483 47 18446744073709551615 1 ; 483 47 483 48 18446744073709551615 6 memcpy 484 3 484 9 164 1 ( 484 9 484 10 164 3 AAD 484 10 484 13 251 1 + 484 14 484 15 18446744073709551615 1 4 484 16 484 17 18446744073709551615 1 , 484 17 484 18 164 1 & 484 19 484 20 18446744073709551615 1 ( 484 20 484 21 18446744073709551615 10 hdr_802_11 484 21 484 31 236 2 -> 484 31 484 33 18446744073709551615 5 addr1 484 33 484 38 11 1 ) 484 38 484 39 18446744073709551615 1 , 484 39 484 40 164 1 3 484 41 484 42 18446744073709551615 1 * 484 43 484 44 18446744073709551615 1 6 484 45 484 46 18446744073709551615 1 ) 484 46 484 47 164 1 ; 484 47 484 48 18446744073709551615 3 AAD 485 3 485 6 251 1 [ 485 6 485 7 18446744073709551615 2 22 485 7 485 9 18446744073709551615 1 ] 485 9 485 10 18446744073709551615 1 = 485 11 485 12 18446744073709551615 10 hdr_802_11 485 13 485 23 236 2 -> 485 23 485 25 18446744073709551615 16 sequence_control 485 25 485 41 14 1 [ 485 41 485 42 18446744073709551615 1 0 485 42 485 43 18446744073709551615 1 ] 485 43 485 44 18446744073709551615 1 & 485 45 485 46 18446744073709551615 4 0x0F 485 47 485 51 18446744073709551615 1 ; 485 51 485 52 18446744073709551615 2 if 487 3 487 5 18446744073709551615 1 ( 487 5 487 6 18446744073709551615 6 is_qos 487 6 487 12 242 1 ) 487 12 487 13 18446744073709551615 1 { 487 14 487 15 18446744073709551615 6 memcpy 488 5 488 11 164 1 ( 488 11 488 12 164 1 & 488 12 488 13 18446744073709551615 3 AAD 488 13 488 16 251 1 [ 488 16 488 17 18446744073709551615 2 24 488 17 488 19 18446744073709551615 1 ] 488 19 488 20 18446744073709551615 1 , 488 20 488 21 164 10 hdr_802_11 488 22 488 32 236 2 -> 488 32 488 34 18446744073709551615 11 qos_control 488 34 488 45 15 1 , 488 45 488 46 164 1 2 488 47 488 48 18446744073709551615 1 ) 488 48 488 49 164 1 ; 488 49 488 50 18446744073709551615 12 ccmp_aes_ctr 489 5 489 17 246 1 [ 489 17 489 18 18446744073709551615 1 1 489 18 489 19 18446744073709551615 1 ] 489 19 489 20 18446744073709551615 1 = 489 21 489 22 18446744073709551615 3 AAD 489 23 489 26 251 1 [ 489 26 489 27 18446744073709551615 2 24 489 27 489 29 18446744073709551615 1 ] 489 29 489 30 18446744073709551615 1 ; 489 30 489 31 18446744073709551615 32 //  B0[     1] = CCM Nonce flags 489 32 489 64 18446744073709551615 3 AAD 490 5 490 8 251 1 [ 490 8 490 9 18446744073709551615 1 1 490 9 490 10 18446744073709551615 1 ] 490 10 490 11 18446744073709551615 1 = 490 12 490 13 18446744073709551615 2 22 490 14 490 16 18446744073709551615 1 + 490 17 490 18 18446744073709551615 1 2 490 19 490 20 18446744073709551615 1 ; 490 20 490 21 18446744073709551615 21 // AAD[ 0.. 1] = l(a) 490 32 490 53 18446744073709551615 1 } 491 3 491 4 18446744073709551615 4 else 492 3 492 7 18446744073709551615 1 { 492 8 492 9 18446744073709551615 6 memset 493 5 493 11 252 1 ( 493 11 493 12 252 1 & 493 12 493 13 18446744073709551615 3 AAD 493 13 493 16 251 1 [ 493 16 493 17 18446744073709551615 2 24 493 17 493 19 18446744073709551615 1 ] 493 19 493 20 18446744073709551615 1 , 493 20 493 21 252 1 0 493 22 493 23 18446744073709551615 1 , 493 23 493 24 252 1 2 493 25 493 26 18446744073709551615 1 ) 493 26 493 27 252 1 ; 493 27 493 28 18446744073709551615 19 // AAD[24..25] = QC 493 29 493 48 18446744073709551615 12 ccmp_aes_ctr 494 5 494 17 246 1 [ 494 17 494 18 18446744073709551615 1 1 494 18 494 19 18446744073709551615 1 ] 494 19 494 20 18446744073709551615 1 = 494 21 494 22 18446744073709551615 1 0 494 23 494 24 18446744073709551615 1 ; 494 24 494 25 18446744073709551615 32 //  B0[     1] = CCM Nonce flags 494 29 494 61 18446744073709551615 3 AAD 495 5 495 8 251 1 [ 495 8 495 9 18446744073709551615 1 1 495 9 495 10 18446744073709551615 1 ] 495 10 495 11 18446744073709551615 1 = 495 12 495 13 18446744073709551615 2 22 495 14 495 16 18446744073709551615 1 + 495 17 495 18 18446744073709551615 1 2 495 19 495 20 18446744073709551615 1 ; 495 20 495 21 18446744073709551615 21 // AAD[ 0.. 1] = l(a) 495 29 495 50 18446744073709551615 1 } 496 3 496 4 18446744073709551615 7 AES_KEY 498 3 498 10 253 2 TK 498 11 498 13 254 1 ; 498 13 498 14 18446744073709551615 19 AES_set_encrypt_key 499 3 499 22 255 1 ( 499 22 499 23 255 10 eapol_keys 499 23 499 33 235 2 -> 499 33 499 35 18446744073709551615 3 PTK 499 35 499 38 84 1 . 499 38 499 39 18446744073709551615 2 tk 499 39 499 41 77 1 , 499 41 499 42 255 3 128 499 43 499 46 18446744073709551615 1 , 499 46 499 47 255 1 & 499 48 499 49 18446744073709551615 2 TK 499 49 499 51 254 1 ) 499 51 499 52 255 1 ; 499 52 499 53 18446744073709551615 11 AES_encrypt 500 3 500 14 256 1 ( 500 14 500 15 256 12 ccmp_aes_ctr 500 15 500 27 246 1 , 500 27 500 28 256 3 MIC 500 29 500 32 248 1 , 500 32 500 33 256 1 & 500 34 500 35 18446744073709551615 2 TK 500 35 500 37 254 1 ) 500 37 500 38 256 1 ; 500 38 500 39 18446744073709551615 3 XOR 501 3 501 6 106 1 ( 501 6 501 7 106 3 MIC 501 7 501 10 248 1 , 501 10 501 11 106 3 AAD 501 12 501 15 251 1 , 501 15 501 16 106 2 16 501 17 501 19 18446744073709551615 1 ) 501 19 501 20 106 1 ; 501 20 501 21 18446744073709551615 11 AES_encrypt 502 3 502 14 256 1 ( 502 14 502 15 256 3 MIC 502 15 502 18 248 1 , 502 18 502 19 256 3 MIC 502 20 502 23 248 1 , 502 23 502 24 256 1 & 502 25 502 26 18446744073709551615 2 TK 502 26 502 28 254 1 ) 502 28 502 29 256 1 ; 502 29 502 30 18446744073709551615 3 XOR 503 3 503 6 106 1 ( 503 6 503 7 106 3 MIC 503 7 503 10 248 1 , 503 10 503 11 106 3 AAD 503 12 503 15 251 1 + 503 16 503 17 18446744073709551615 2 16 503 18 503 20 18446744073709551615 1 , 503 20 503 21 106 2 16 503 22 503 24 18446744073709551615 1 ) 503 24 503 25 106 1 ; 503 25 503 26 18446744073709551615 11 AES_encrypt 504 3 504 14 256 1 ( 504 14 504 15 256 3 MIC 504 15 504 18 248 1 , 504 18 504 19 256 3 MIC 504 20 504 23 248 1 , 504 23 504 24 256 1 & 504 25 504 26 18446744073709551615 2 TK 504 26 504 28 254 1 ) 504 28 504 29 256 1 ; 504 29 504 30 18446744073709551615 12 ccmp_aes_ctr 506 3 506 15 246 1 [ 506 15 506 16 18446744073709551615 1 0 506 16 506 17 18446744073709551615 1 ] 506 17 506 18 18446744073709551615 2 &= 506 19 506 21 18446744073709551615 4 0x07 506 22 506 26 18446744073709551615 1 ; 506 26 506 27 18446744073709551615 12 ccmp_aes_ctr 507 3 507 15 246 1 [ 507 15 507 16 18446744073709551615 2 14 507 16 507 18 18446744073709551615 1 ] 507 18 507 19 18446744073709551615 1 = 507 20 507 21 18446744073709551615 12 ccmp_aes_ctr 507 22 507 34 246 1 [ 507 34 507 35 18446744073709551615 2 15 507 35 507 37 18446744073709551615 1 ] 507 37 507 38 18446744073709551615 1 = 507 39 507 40 18446744073709551615 1 0 507 41 507 42 18446744073709551615 1 ; 507 42 507 43 18446744073709551615 11 AES_encrypt 508 3 508 14 256 1 ( 508 14 508 15 256 12 ccmp_aes_ctr 508 15 508 27 246 1 , 508 27 508 28 256 1 B 508 29 508 30 247 1 , 508 30 508 31 256 1 & 508 32 508 33 18446744073709551615 2 TK 508 33 508 35 254 1 ) 508 35 508 36 256 1 ; 508 36 508 37 18446744073709551615 3 XOR 509 3 509 6 106 1 ( 509 6 509 7 106 6 buffer 509 7 509 13 234 1 + 509 14 509 15 18446744073709551615 6 header 509 16 509 22 233 2 -> 509 22 509 24 18446744073709551615 6 caplen 509 24 509 30 250 1 - 509 31 509 32 18446744073709551615 1 8 509 33 509 34 18446744073709551615 1 - 509 35 509 36 18446744073709551615 1 4 509 37 509 38 18446744073709551615 1 , 509 38 509 39 106 1 B 509 40 509 41 247 1 , 509 41 509 42 106 1 8 509 43 509 44 18446744073709551615 1 ) 509 44 509 45 106 1 ; 509 45 509 46 18446744073709551615 6 blocks 511 3 511 9 241 1 = 511 10 511 11 18446744073709551615 1 ( 511 12 511 13 18446744073709551615 8 data_len 511 13 511 21 243 1 + 511 22 511 23 18446744073709551615 2 16 511 24 511 26 18446744073709551615 1 - 511 27 511 28 18446744073709551615 1 1 511 29 511 30 18446744073709551615 1 ) 511 30 511 31 18446744073709551615 1 / 511 32 511 33 18446744073709551615 2 16 511 34 511 36 18446744073709551615 1 ; 511 36 511 37 18446744073709551615 4 last 512 3 512 7 244 1 = 512 8 512 9 18446744073709551615 8 data_len 512 10 512 18 243 1 % 512 19 512 20 18446744073709551615 2 16 512 21 512 23 18446744073709551615 1 ; 512 23 512 24 18446744073709551615 6 offset 513 3 513 9 245 1 = 513 10 513 11 18446744073709551615 15 hdr_ccmp_offset 513 12 513 27 240 1 + 513 28 513 29 18446744073709551615 1 8 513 30 513 31 18446744073709551615 1 ; 513 31 513 32 18446744073709551615 3 for 515 3 515 6 18446744073709551615 1 ( 515 6 515 7 18446744073709551615 1 i 515 7 515 8 238 1 = 515 9 515 10 18446744073709551615 1 1 515 11 515 12 18446744073709551615 1 ; 515 12 515 13 18446744073709551615 1 i 515 14 515 15 238 2 <= 515 16 515 18 18446744073709551615 6 blocks 515 19 515 25 241 1 ; 515 25 515 26 18446744073709551615 1 i 515 27 515 28 238 2 ++ 515 28 515 30 18446744073709551615 1 ) 515 30 515 31 18446744073709551615 1 { 515 32 515 33 18446744073709551615 1 n 516 5 516 6 239 1 = 516 7 516 8 18446744073709551615 1 ( 516 9 516 10 18446744073709551615 4 last 516 10 516 14 244 1 > 516 15 516 16 18446744073709551615 1 0 516 17 516 18 18446744073709551615 2 && 516 19 516 21 18446744073709551615 1 i 516 22 516 23 238 2 == 516 24 516 26 18446744073709551615 6 blocks 516 27 516 33 241 1 ) 516 33 516 34 18446744073709551615 1 ? 516 35 516 36 18446744073709551615 4 last 516 37 516 41 244 1 : 516 42 516 43 18446744073709551615 2 16 516 44 516 46 18446744073709551615 1 ; 516 46 516 47 18446744073709551615 12 ccmp_aes_ctr 518 5 518 17 246 1 [ 518 17 518 18 18446744073709551615 2 14 518 18 518 20 18446744073709551615 1 ] 518 20 518 21 18446744073709551615 1 = 518 22 518 23 18446744073709551615 1 ( 518 24 518 25 18446744073709551615 1 i 518 25 518 26 238 2 >> 518 27 518 29 18446744073709551615 1 8 518 30 518 31 18446744073709551615 1 ) 518 31 518 32 18446744073709551615 1 & 518 33 518 34 18446744073709551615 4 0xFF 518 35 518 39 18446744073709551615 1 ; 518 39 518 40 18446744073709551615 12 ccmp_aes_ctr 519 5 519 17 246 1 [ 519 17 519 18 18446744073709551615 2 15 519 18 519 20 18446744073709551615 1 ] 519 20 519 21 18446744073709551615 1 = 519 22 519 23 18446744073709551615 1 i 519 24 519 25 238 1 & 519 26 519 27 18446744073709551615 4 0xFF 519 28 519 32 18446744073709551615 1 ; 519 32 519 33 18446744073709551615 11 AES_encrypt 521 5 521 16 256 1 ( 521 16 521 17 256 12 ccmp_aes_ctr 521 17 521 29 246 1 , 521 29 521 30 256 1 B 521 31 521 32 247 1 , 521 32 521 33 256 1 & 521 34 521 35 18446744073709551615 2 TK 521 35 521 37 254 1 ) 521 37 521 38 256 1 ; 521 38 521 39 18446744073709551615 21 // S_i := E( K, A_i ) 521 40 521 61 18446744073709551615 3 XOR 522 5 522 8 106 1 ( 522 8 522 9 106 6 buffer 522 9 522 15 234 1 + 522 16 522 17 18446744073709551615 16 PRISM_HEADER_LEN 522 18 522 34 18446744073709551615 1 + 522 35 522 36 18446744073709551615 6 offset 522 37 522 43 245 1 , 522 43 522 44 106 1 B 522 45 522 46 247 1 , 522 46 522 47 106 1 n 522 48 522 49 239 1 ) 522 49 522 50 106 1 ; 522 50 522 51 18446744073709551615 3 XOR 523 5 523 8 106 1 ( 523 8 523 9 106 3 MIC 523 9 523 12 248 1 , 523 12 523 13 106 6 buffer 523 14 523 20 234 1 + 523 21 523 22 18446744073709551615 16 PRISM_HEADER_LEN 523 23 523 39 18446744073709551615 1 + 523 40 523 41 18446744073709551615 6 offset 523 42 523 48 245 1 , 523 48 523 49 106 1 n 523 50 523 51 239 1 ) 523 51 523 52 106 1 ; 523 52 523 53 18446744073709551615 11 AES_encrypt 524 5 524 16 256 1 ( 524 16 524 17 256 3 MIC 524 17 524 20 248 1 , 524 20 524 21 256 3 MIC 524 22 524 25 248 1 , 524 25 524 26 256 1 & 524 27 524 28 18446744073709551615 2 TK 524 28 524 30 254 1 ) 524 30 524 31 256 1 ; 524 31 524 32 18446744073709551615 6 offset 526 5 526 11 245 2 += 526 12 526 14 18446744073709551615 1 n 526 15 526 16 239 1 ; 526 16 526 17 18446744073709551615 1 } 527 3 527 4 18446744073709551615 6 return 529 3 529 9 18446744073709551615 6 memcmp 529 10 529 16 184 1 ( 529 16 529 17 184 6 buffer 529 17 529 23 234 1 + 529 24 529 25 18446744073709551615 16 PRISM_HEADER_LEN 529 26 529 42 18446744073709551615 1 + 529 43 529 44 18446744073709551615 6 offset 529 45 529 51 245 1 , 529 51 529 52 184 3 MIC 529 53 529 56 248 1 , 529 56 529 57 184 1 8 529 58 529 59 18446744073709551615 1 ) 529 59 529 60 184 2 == 529 61 529 63 18446744073709551615 1 0 529 64 529 65 18446744073709551615 1 ; 529 65 529 66 18446744073709551615 1 } 530 1 530 2 18446744073709551615 6 static 532 1 532 7 18446744073709551615 6 inline 532 8 532 14 18446744073709551615 4 void 532 15 532 19 18446744073709551615 3 XOR 532 20 532 23 106 1 ( 532 23 532 24 106 8 unsigned 532 24 532 32 18446744073709551615 4 char 532 33 532 37 18446744073709551615 1 * 532 38 532 39 18446744073709551615 3 dst 532 39 532 42 257 1 , 532 42 532 43 106 8 unsigned 532 44 532 52 18446744073709551615 4 char 532 53 532 57 18446744073709551615 1 * 532 58 532 59 18446744073709551615 3 src 532 59 532 62 258 1 , 532 62 532 63 106 3 int 532 64 532 67 18446744073709551615 3 len 532 68 532 71 259 1 ) 532 71 532 72 106 1 { 532 73 532 74 18446744073709551615 3 int 533 3 533 6 18446744073709551615 1 i 533 7 533 8 260 1 ; 533 8 533 9 18446744073709551615 3 for 534 3 534 6 18446744073709551615 1 ( 534 6 534 7 18446744073709551615 1 i 534 7 534 8 260 1 = 534 9 534 10 18446744073709551615 1 0 534 11 534 12 18446744073709551615 1 ; 534 12 534 13 18446744073709551615 1 i 534 14 534 15 260 1 < 534 16 534 17 18446744073709551615 3 len 534 18 534 21 259 1 ; 534 21 534 22 18446744073709551615 1 i 534 23 534 24 260 2 ++ 534 24 534 26 18446744073709551615 1 ) 534 26 534 27 18446744073709551615 3 dst 535 5 535 8 257 1 [ 535 8 535 9 18446744073709551615 1 i 535 9 535 10 260 1 ] 535 10 535 11 18446744073709551615 2 ^= 535 12 535 14 18446744073709551615 3 src 535 15 535 18 258 1 [ 535 18 535 19 18446744073709551615 1 i 535 19 535 20 260 1 ] 535 20 535 21 18446744073709551615 1 ; 535 21 535 22 18446744073709551615 1 } 536 1 536 2 18446744073709551615 4 void 538 1 538 5 18446744073709551615 14 dump_decrypted 538 6 538 20 108 1 ( 538 20 538 21 108 6 u_char 538 21 538 27 1 1 * 538 28 538 29 18446744073709551615 6 dumper 538 29 538 35 261 1 , 538 35 538 36 108 5 const 538 37 538 42 18446744073709551615 6 struct 538 43 538 49 18446744073709551615 11 pcap_pkthdr 538 50 538 61 98 1 * 538 62 538 63 18446744073709551615 6 header 538 63 538 69 262 1 , 538 69 538 70 108 5 const 538 71 538 76 18446744073709551615 6 u_char 538 77 538 83 1 1 * 538 84 538 85 18446744073709551615 6 buffer 538 85 538 91 263 1 ) 538 91 538 92 108 1 { 538 92 538 93 18446744073709551615 6 u_char 539 3 539 9 1 1 * 539 10 539 11 18446744073709551615 10 new_buffer 539 11 539 21 264 1 = 539 22 539 23 18446744073709551615 6 malloc 539 24 539 30 137 1 ( 539 30 539 31 137 6 header 539 31 539 37 262 2 -> 539 37 539 39 18446744073709551615 6 caplen 539 39 539 45 250 1 - 539 46 539 47 18446744073709551615 1 8 539 48 539 49 18446744073709551615 1 ) 539 49 539 50 137 1 ; 539 50 539 51 18446744073709551615 6 size_t 540 3 540 9 104 6 length 540 10 540 16 265 1 = 540 17 540 18 18446744073709551615 16 PRISM_HEADER_LEN 540 19 540 35 265 1 + 540 36 540 37 18446744073709551615 6 sizeof 540 38 540 44 18446744073709551615 1 ( 540 44 540 45 18446744073709551615 6 struct 540 45 540 51 18446744073709551615 12 sniff_802_11 540 52 540 64 8 1 ) 540 64 540 65 18446744073709551615 1 ; 540 65 540 66 18446744073709551615 6 memcpy 541 3 541 9 164 1 ( 541 9 541 10 164 10 new_buffer 541 10 541 20 264 1 , 541 20 541 21 164 6 buffer 541 22 541 28 263 1 , 541 28 541 29 164 6 length 541 30 541 36 265 1 ) 541 36 541 37 164 1 ; 541 37 541 38 18446744073709551615 6 memcpy 542 3 542 9 164 1 ( 542 9 542 10 164 10 new_buffer 542 10 542 20 264 1 + 542 21 542 22 18446744073709551615 6 length 542 23 542 29 265 1 , 542 29 542 30 164 6 buffer 542 31 542 37 263 1 + 542 38 542 39 18446744073709551615 6 length 542 40 542 46 265 1 + 542 47 542 48 18446744073709551615 1 8 542 49 542 50 18446744073709551615 1 , 542 50 542 51 164 6 header 542 52 542 58 262 2 -> 542 58 542 60 18446744073709551615 6 caplen 542 60 542 66 250 1 - 542 67 542 68 18446744073709551615 6 length 542 69 542 75 265 1 - 542 76 542 77 18446744073709551615 1 8 542 78 542 79 18446744073709551615 1 ) 542 79 542 80 164 1 ; 542 80 542 81 18446744073709551615 9 pcap_dump 543 3 543 12 266 1 ( 543 12 543 13 266 1 ( 543 13 543 14 18446744073709551615 6 u_char 543 14 543 20 1 1 * 543 21 543 22 18446744073709551615 1 ) 543 22 543 23 18446744073709551615 8 dumpfile 543 23 543 31 96 1 , 543 31 543 32 266 6 header 543 33 543 39 262 1 , 543 39 543 40 266 10 new_buffer 543 41 543 51 264 1 ) 543 51 543 52 266 1 ; 543 52 543 53 18446744073709551615 4 free 544 3 544 7 267 1 ( 544 7 544 8 267 10 new_buffer 544 8 544 18 264 1 ) 544 18 544 19 267 1 ; 544 19 544 20 18446744073709551615 1 } 545 1 545 2 18446744073709551615 0 0 268 0 0 0 9 0 0 1 3 0 1 A 20 1 3 0 6 u_char 9 1 3 0 8 NULL_MIC 7 1 3 0 20 WAITING_EAPOL_KEY_2: 7 1 3 0 20 WAITING_EAPOL_KEY_3: 7 1 3 0 20 WAITING_EAPOL_KEY_4: 7 1 3 0 8 SUCCESS: 20 1 3 0 12 eapol_status 2 1 3 0 12 sniff_802_11 6 1 3 0 26 frame_control:sniff_802_11 6 1 3 0 24 duration_id:sniff_802_11 6 1 3 0 18 addr1:sniff_802_11 6 1 3 0 18 addr2:sniff_802_11 6 1 3 0 18 addr3:sniff_802_11 6 1 3 0 29 sequence_control:sniff_802_11 6 1 3 0 24 qos_control:sniff_802_11 2 1 3 0 19 sniff_802_11_beacon 6 1 3 0 33 frame_control:sniff_802_11_beacon 6 1 3 0 31 duration_id:sniff_802_11_beacon 6 1 3 0 25 addr1:sniff_802_11_beacon 6 1 3 0 25 addr2:sniff_802_11_beacon 6 1 3 0 25 addr3:sniff_802_11_beacon 6 1 3 0 36 sequence_control:sniff_802_11_beacon 2 1 3 0 9 sniff_LLC 6 1 3 0 14 dsap:sniff_LLC 6 1 3 0 14 ssap:sniff_LLC 6 1 3 0 23 control_field:sniff_LLC 2 1 3 0 10 sniff_SNAP 6 1 3 0 19 org_code:sniff_SNAP 6 1 3 0 15 type:sniff_SNAP 2 1 3 0 17 sniff_802_1x_auth 6 1 3 0 25 version:sniff_802_1x_auth 6 1 3 0 22 type:sniff_802_1x_auth 6 1 3 0 24 length:sniff_802_1x_auth 6 1 3 0 37 key_descriptor_type:sniff_802_1x_auth 6 1 3 0 33 key_information:sniff_802_1x_auth 6 1 3 0 28 key_length:sniff_802_1x_auth 6 1 3 0 32 replay_counter:sniff_802_1x_auth 6 1 3 0 31 wpa_key_nonce:sniff_802_1x_auth 6 1 3 0 28 wpa_key_IV:sniff_802_1x_auth 6 1 3 0 29 wpa_key_RSC:sniff_802_1x_auth 6 1 3 0 28 wpa_key_ID:sniff_802_1x_auth 6 1 3 0 29 wpa_key_MIC:sniff_802_1x_auth 6 1 3 0 37 wpa_key_data_length:sniff_802_1x_auth 2 1 3 0 8 sniff_IP 6 1 3 0 14 ip_hl:sniff_IP 6 1 3 0 13 ip_v:sniff_IP 6 1 3 0 15 ip_dss:sniff_IP 6 1 3 0 24 ip_total_length:sniff_IP 6 1 3 0 11 id:sniff_IP 6 1 3 0 14 flags:sniff_IP 6 1 3 0 24 fragment_offset:sniff_IP 6 1 3 0 12 ttl:sniff_IP 6 1 3 0 17 protocol:sniff_IP 6 1 3 0 21 hdr_checksum:sniff_IP 6 1 3 0 12 src:sniff_IP 6 1 3 0 12 dst:sniff_IP 2 1 3 0 9 sniff_TCP 6 1 3 0 18 src_port:sniff_TCP 6 1 3 0 18 dst_port:sniff_TCP 6 1 3 0 20 sqn_number:sniff_TCP 6 1 3 0 20 ack_number:sniff_TCP 6 1 3 0 17 hdr_len:sniff_TCP 6 1 3 0 19 reserved1:sniff_TCP 6 1 3 0 19 reserved2:sniff_TCP 6 1 3 0 13 urg:sniff_TCP 6 1 3 0 13 ack:sniff_TCP 6 1 3 0 13 psh:sniff_TCP 6 1 3 0 13 rst:sniff_TCP 6 1 3 0 13 syn:sniff_TCP 6 1 3 0 13 fin:sniff_TCP 6 1 3 0 21 window_size:sniff_TCP 6 1 3 0 22 tcp_checksum:sniff_TCP 6 1 3 0 24 urgent_pointer:sniff_TCP 2 1 3 0 3 ptk 6 1 3 0 7 kck:ptk 6 1 3 0 7 kek:ptk 6 1 3 0 6 tk:ptk 6 1 3 0 7 txk:ptk 6 1 3 0 7 trk:ptk 2 1 3 0 10 eapol_info 6 1 3 0 26 sta_mac_address:eapol_info 6 1 3 0 17 ANonce:eapol_info 6 1 3 0 17 SNonce:eapol_info 6 1 3 0 14 PTK:eapol_info 6 1 3 0 17 status:eapol_info 6 1 3 0 22 last_replay:eapol_info 9 1 3 0 14 ap_mac_address 9 1 3 0 3 psk 9 1 3 0 4 ssid 20 1 3 0 5 map_t 9 1 3 0 3 map 9 1 3 0 4 PTK0 20 1 3 0 4 FILE 9 1 3 0 2 fd 20 1 3 0 13 pcap_dumper_t 9 1 3 0 8 dumpfile 8 1 3 0 14 process_beacon 2 1 3 0 11 pcap_pkthdr 8 1 3 0 13 process_eapol 8 1 3 0 14 process_packet 8 1 3 0 14 packet_decrypt 8 1 3 0 12 mac_toString 8 1 3 0 6 PRF512 20 1 3 0 6 size_t 8 1 3 0 15 hexstr_to_bytes 8 1 3 0 3 XOR 10 1 3 0 57 132:62:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 14 dump_decrypted 8 1 3 0 4 main 10 1 3 0 57 135:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 135:26:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_new 9 1 3 0 56 138:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 140:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 141:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 142:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 143:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 144:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 2 1 3 0 11 bpf_program 9 1 3 0 57 145:22:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 6 pcap_t 9 1 3 0 57 146:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 147:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 148:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 149:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 20 fastpbkdf2_hmac_sha1 8 1 3 0 6 strlen 9 1 3 0 57 154:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 printf 9 1 3 0 57 162:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 163:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 164:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 165:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 166:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 170:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 171:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 malloc 8 1 3 0 4 HMAC 8 1 3 0 8 EVP_sha1 9 1 3 0 57 173:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 11 bpf_u_int32 9 1 3 0 57 178:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 179:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 14 pcap_lookupnet 8 1 3 0 7 fprintf 9 1 3 0 56 187:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 17 pcap_open_offline 8 1 3 0 5 fopen 8 1 3 0 15 pcap_dump_fopen 8 1 3 0 12 pcap_compile 8 1 3 0 11 pcap_geterr 8 1 3 0 14 pcap_setfilter 8 1 3 0 12 pcap_next_ex 8 1 3 0 8 asprintf 9 1 3 0 56 224:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 fclose 8 1 3 0 13 pcap_freecode 8 1 3 0 10 pcap_close 10 1 3 0 57 241:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 241:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 242:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 244:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 245:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memcpy 8 1 3 0 6 strcmp 10 1 3 0 57 255:48:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 255:70:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 256:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 258:35:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 262:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 262:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 263:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 265:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 266:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 267:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 268:22:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 270:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 272:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_get 9 1 3 0 57 285:18:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 289:35:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 292:38:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 294:20:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memcmp 9 1 3 0 57 296:38:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 299:41:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 316:31:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 319:34:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 321:16:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 323:43:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 325:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 328:32:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_put 9 1 3 0 57 335:26:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 7 u_short 9 1 3 0 57 336:21:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 14 hashmap_remove 9 1 3 0 57 339:34:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 346:27:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 347:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 348:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 359:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 360:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 361:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 371:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 372:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 373:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 390:28:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 391:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 8 snprintf 10 1 3 0 57 399:24:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 399:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 399:47:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 399:61:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 399:78:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 399:96:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 58 399:112:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 400:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 401:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 402:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 403:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 404:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 427:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 428:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 5 u_int 9 1 3 0 56 429:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 440:33:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 441:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 444:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 445:18:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 446:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 446:21:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 451:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 451:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 451:98:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 452:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 454:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 454:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 454:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 454:20:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 454:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 454:45:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 455:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 455:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 455:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 456:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 456:28:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 456:35:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 457:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 6 1 3 0 18 caplen:pcap_pkthdr 9 1 3 0 57 481:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memset 20 1 3 0 7 AES_KEY 9 1 3 0 57 498:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 19 AES_set_encrypt_key 8 1 3 0 11 AES_encrypt 10 1 3 0 57 532:39:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 532:59:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 532:68:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 533:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 538:29:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 538:63:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 538:85:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 539:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 540:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 9 pcap_dump 8 1 3 0 4 free 0 0 3 0 0 0 56 /home/florenzi/Documenti/juci_ws/wpa_decode/fastpbkdf2.h 1509296147 53 /home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 1262964973 50 /home/florenzi/Documenti/juci_ws/wpa_decode/main.c 1517433059