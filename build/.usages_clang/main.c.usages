22 serialization::archive 15 0 0 0 0 43 /home/florenzi/Documenti/juci_ws/wpa_decode 49 /home/florenzi/Documenti/juci_ws/wpa_decode/build 0 0 2230 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 14 "fastpbkdf2.h" 1 10 1 24 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 11 "hashmap.h" 2 10 2 21 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 7 openssl 3 11 3 18 18446744073709551615 1 / 3 18 3 19 18446744073709551615 4 hmac 3 19 3 23 18446744073709551615 1 . 3 23 3 24 18446744073709551615 1 h 3 24 3 25 18446744073709551615 1 > 3 25 3 26 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 7 openssl 4 11 4 18 18446744073709551615 1 / 4 18 4 19 18446744073709551615 3 sha 4 19 4 22 18446744073709551615 1 . 4 22 4 23 18446744073709551615 1 h 4 23 4 24 18446744073709551615 1 > 4 24 4 25 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 4 pcap 5 11 5 15 18446744073709551615 1 . 5 15 5 16 18446744073709551615 1 h 5 16 5 17 18446744073709551615 1 > 5 17 5 18 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 1 < 6 10 6 11 18446744073709551615 5 stdio 6 11 6 16 18446744073709551615 1 . 6 16 6 17 18446744073709551615 1 h 6 17 6 18 18446744073709551615 1 > 6 18 6 19 18446744073709551615 1 # 7 1 7 2 18446744073709551615 7 include 7 2 7 9 18446744073709551615 1 < 7 10 7 11 18446744073709551615 6 stdlib 7 11 7 17 18446744073709551615 1 . 7 17 7 18 18446744073709551615 1 h 7 18 7 19 18446744073709551615 1 > 7 19 7 20 18446744073709551615 1 # 9 1 9 2 18446744073709551615 6 define 9 2 9 8 18446744073709551615 16 PRISM_HEADER_LEN 9 9 9 25 18446744073709551615 3 144 9 26 9 29 18446744073709551615 1 # 10 1 10 2 18446744073709551615 6 define 10 2 10 8 18446744073709551615 11 SSID_OFFSET 10 9 10 20 18446744073709551615 2 12 10 21 10 23 18446744073709551615 1 # 11 1 11 2 18446744073709551615 6 define 11 2 11 8 18446744073709551615 13 SIZE_ETHERNET 11 9 11 22 18446744073709551615 2 14 11 23 11 25 18446744073709551615 1 # 12 1 12 2 18446744073709551615 6 define 12 2 12 8 18446744073709551615 12 MAC_ADDR_LEN 12 9 12 21 18446744073709551615 1 6 12 22 12 23 18446744073709551615 1 # 13 1 13 2 18446744073709551615 6 define 13 2 13 8 18446744073709551615 7 LLC_LEN 13 9 13 16 18446744073709551615 1 8 13 17 13 18 18446744073709551615 1 # 14 1 14 2 18446744073709551615 6 define 14 2 14 8 18446744073709551615 16 TAKE_N_BITS_FROM 14 9 14 25 18446744073709551615 1 ( 14 25 14 26 18446744073709551615 1 b 14 26 14 27 18446744073709551615 1 , 14 27 14 28 18446744073709551615 1 p 14 29 14 30 18446744073709551615 1 , 14 30 14 31 18446744073709551615 1 n 14 32 14 33 18446744073709551615 1 ) 14 33 14 34 18446744073709551615 1 ( 14 35 14 36 18446744073709551615 1 ( 14 36 14 37 18446744073709551615 1 b 14 37 14 38 18446744073709551615 1 ) 14 38 14 39 18446744073709551615 2 >> 14 40 14 42 18446744073709551615 1 ( 14 43 14 44 18446744073709551615 1 p 14 44 14 45 18446744073709551615 1 ) 14 45 14 46 18446744073709551615 1 ) 14 46 14 47 18446744073709551615 1 & 14 48 14 49 18446744073709551615 1 ( 14 50 14 51 18446744073709551615 1 ( 14 51 14 52 18446744073709551615 1 1 14 52 14 53 18446744073709551615 2 << 14 54 14 56 18446744073709551615 1 ( 14 57 14 58 18446744073709551615 1 n 14 58 14 59 18446744073709551615 1 ) 14 59 14 60 18446744073709551615 1 ) 14 60 14 61 18446744073709551615 1 - 14 62 14 63 18446744073709551615 1 1 14 64 14 65 18446744073709551615 1 ) 14 65 14 66 18446744073709551615 7 typedef 16 1 16 8 18446744073709551615 4 enum 16 9 16 13 18446744073709551615 1 { 16 14 16 15 18446744073709551615 7 WAITING 16 16 16 23 0 1 , 16 23 16 24 18446744073709551615 7 SUCCESS 17 16 17 23 1 1 } 17 24 17 25 18446744073709551615 12 eapol_status 17 26 17 38 2 1 ; 17 38 17 39 18446744073709551615 23 /* 802.11 MAC header */ 19 1 19 24 18446744073709551615 6 struct 20 1 20 7 18446744073709551615 12 sniff_802_11 20 8 20 20 3 1 { 20 21 20 22 18446744073709551615 6 u_char 21 3 21 9 4 13 frame_control 21 10 21 23 5 1 [ 21 23 21 24 18446744073709551615 1 2 21 24 21 25 18446744073709551615 1 ] 21 25 21 26 18446744073709551615 1 ; 21 26 21 27 18446744073709551615 6 u_char 22 3 22 9 4 11 duration_id 22 10 22 21 6 1 [ 22 21 22 22 18446744073709551615 1 2 22 22 22 23 18446744073709551615 1 ] 22 23 22 24 18446744073709551615 1 ; 22 24 22 25 18446744073709551615 6 u_char 23 3 23 9 4 5 addr1 23 10 23 15 7 1 [ 23 15 23 16 18446744073709551615 12 MAC_ADDR_LEN 23 16 23 28 7 1 ] 23 28 23 29 18446744073709551615 1 ; 23 29 23 30 18446744073709551615 6 u_char 24 3 24 9 4 5 addr2 24 10 24 15 8 1 [ 24 15 24 16 18446744073709551615 12 MAC_ADDR_LEN 24 16 24 28 8 1 ] 24 28 24 29 18446744073709551615 1 ; 24 29 24 30 18446744073709551615 6 u_char 25 3 25 9 4 5 addr3 25 10 25 15 9 1 [ 25 15 25 16 18446744073709551615 12 MAC_ADDR_LEN 25 16 25 28 9 1 ] 25 28 25 29 18446744073709551615 1 ; 25 29 25 30 18446744073709551615 6 u_char 26 3 26 9 4 16 sequence_control 26 10 26 26 10 1 [ 26 26 26 27 18446744073709551615 1 2 26 27 26 28 18446744073709551615 1 ] 26 28 26 29 18446744073709551615 1 ; 26 29 26 30 18446744073709551615 6 u_char 27 3 27 9 4 11 qos_control 27 10 27 21 11 1 [ 27 21 27 22 18446744073709551615 1 2 27 22 27 23 18446744073709551615 1 ] 27 23 27 24 18446744073709551615 1 ; 27 24 27 25 18446744073709551615 1 } 28 1 28 2 18446744073709551615 1 ; 28 2 28 3 18446744073709551615 6 struct 30 1 30 7 18446744073709551615 19 sniff_802_11_beacon 30 8 30 27 12 1 { 30 28 30 29 18446744073709551615 6 u_char 31 3 31 9 4 13 frame_control 31 10 31 23 13 1 [ 31 23 31 24 18446744073709551615 1 2 31 24 31 25 18446744073709551615 1 ] 31 25 31 26 18446744073709551615 1 ; 31 26 31 27 18446744073709551615 6 u_char 32 3 32 9 4 11 duration_id 32 10 32 21 14 1 [ 32 21 32 22 18446744073709551615 1 2 32 22 32 23 18446744073709551615 1 ] 32 23 32 24 18446744073709551615 1 ; 32 24 32 25 18446744073709551615 6 u_char 33 3 33 9 4 5 addr1 33 10 33 15 15 1 [ 33 15 33 16 18446744073709551615 12 MAC_ADDR_LEN 33 16 33 28 15 1 ] 33 28 33 29 18446744073709551615 1 ; 33 29 33 30 18446744073709551615 6 u_char 34 3 34 9 4 5 addr2 34 10 34 15 16 1 [ 34 15 34 16 18446744073709551615 12 MAC_ADDR_LEN 34 16 34 28 16 1 ] 34 28 34 29 18446744073709551615 1 ; 34 29 34 30 18446744073709551615 6 u_char 35 3 35 9 4 5 addr3 35 10 35 15 17 1 [ 35 15 35 16 18446744073709551615 12 MAC_ADDR_LEN 35 16 35 28 17 1 ] 35 28 35 29 18446744073709551615 1 ; 35 29 35 30 18446744073709551615 6 u_char 36 3 36 9 4 16 sequence_control 36 10 36 26 18 1 [ 36 26 36 27 18446744073709551615 1 2 36 27 36 28 18446744073709551615 1 ] 36 28 36 29 18446744073709551615 1 ; 36 29 36 30 18446744073709551615 1 } 37 1 37 2 18446744073709551615 1 ; 37 2 37 3 18446744073709551615 6 struct 39 1 39 7 18446744073709551615 9 sniff_LLC 39 8 39 17 19 1 { 39 18 39 19 18446744073709551615 6 u_char 40 3 40 9 4 4 dsap 40 10 40 14 20 1 ; 40 14 40 15 18446744073709551615 6 u_char 41 3 41 9 4 4 ssap 41 10 41 14 21 1 ; 41 14 41 15 18446744073709551615 6 u_char 42 3 42 9 4 13 control_field 42 10 42 23 22 1 ; 42 23 42 24 18446744073709551615 1 } 43 1 43 2 18446744073709551615 1 ; 43 2 43 3 18446744073709551615 6 struct 45 1 45 7 18446744073709551615 10 sniff_SNAP 45 8 45 18 23 1 { 45 19 45 20 18446744073709551615 6 u_char 46 3 46 9 4 8 org_code 46 10 46 18 24 1 [ 46 18 46 19 18446744073709551615 1 3 46 19 46 20 18446744073709551615 1 ] 46 20 46 21 18446744073709551615 1 ; 46 21 46 22 18446744073709551615 6 u_char 47 3 47 9 4 4 type 47 10 47 14 25 1 [ 47 14 47 15 18446744073709551615 1 2 47 15 47 16 18446744073709551615 1 ] 47 16 47 17 18446744073709551615 1 ; 47 17 47 18 18446744073709551615 1 } 48 1 48 2 18446744073709551615 1 ; 48 2 48 3 18446744073709551615 6 struct 50 1 50 7 18446744073709551615 17 sniff_802_1x_auth 50 8 50 25 26 1 { 50 26 50 27 18446744073709551615 6 u_char 51 3 51 9 4 7 version 51 10 51 17 27 1 ; 51 17 51 18 18446744073709551615 6 u_char 52 3 52 9 4 4 type 52 10 52 14 28 1 ; 52 14 52 15 18446744073709551615 6 u_char 53 3 53 9 4 6 length 53 10 53 16 29 1 [ 53 16 53 17 18446744073709551615 1 2 53 17 53 18 18446744073709551615 1 ] 53 18 53 19 18446744073709551615 1 ; 53 19 53 20 18446744073709551615 6 u_char 54 3 54 9 4 19 key_descriptor_type 54 10 54 29 30 1 ; 54 29 54 30 18446744073709551615 6 u_char 55 3 55 9 4 15 key_information 55 10 55 25 31 1 [ 55 25 55 26 18446744073709551615 1 2 55 26 55 27 18446744073709551615 1 ] 55 27 55 28 18446744073709551615 1 ; 55 28 55 29 18446744073709551615 6 u_char 56 3 56 9 4 10 key_length 56 10 56 20 32 1 [ 56 20 56 21 18446744073709551615 1 2 56 21 56 22 18446744073709551615 1 ] 56 22 56 23 18446744073709551615 1 ; 56 23 56 24 18446744073709551615 6 u_char 57 3 57 9 4 14 replay_counter 57 10 57 24 33 1 [ 57 24 57 25 18446744073709551615 1 8 57 25 57 26 18446744073709551615 1 ] 57 26 57 27 18446744073709551615 1 ; 57 27 57 28 18446744073709551615 6 u_char 58 3 58 9 4 13 wpa_key_nonce 58 10 58 23 34 1 [ 58 23 58 24 18446744073709551615 2 32 58 24 58 26 18446744073709551615 1 ] 58 26 58 27 18446744073709551615 1 ; 58 27 58 28 18446744073709551615 6 u_char 59 3 59 9 4 10 wpa_key_IV 59 10 59 20 35 1 [ 59 20 59 21 18446744073709551615 2 16 59 21 59 23 18446744073709551615 1 ] 59 23 59 24 18446744073709551615 1 ; 59 24 59 25 18446744073709551615 6 u_char 60 3 60 9 4 11 wpa_key_RSC 60 10 60 21 36 1 [ 60 21 60 22 18446744073709551615 1 8 60 22 60 23 18446744073709551615 1 ] 60 23 60 24 18446744073709551615 1 ; 60 24 60 25 18446744073709551615 6 u_char 61 3 61 9 4 10 wpa_key_ID 61 10 61 20 37 1 [ 61 20 61 21 18446744073709551615 1 8 61 21 61 22 18446744073709551615 1 ] 61 22 61 23 18446744073709551615 1 ; 61 23 61 24 18446744073709551615 6 u_char 62 3 62 9 4 11 wpa_key_MIC 62 10 62 21 38 1 [ 62 21 62 22 18446744073709551615 2 16 62 22 62 24 18446744073709551615 1 ] 62 24 62 25 18446744073709551615 1 ; 62 25 62 26 18446744073709551615 6 u_char 63 3 63 9 4 19 wpa_key_data_length 63 10 63 29 39 1 [ 63 29 63 30 18446744073709551615 1 2 63 30 63 31 18446744073709551615 1 ] 63 31 63 32 18446744073709551615 1 ; 63 32 63 33 18446744073709551615 1 } 64 1 64 2 18446744073709551615 1 ; 64 2 64 3 18446744073709551615 6 struct 66 1 66 7 18446744073709551615 3 ptk 66 8 66 11 40 1 { 66 12 66 13 18446744073709551615 6 u_char 67 3 67 9 4 3 kck 67 10 67 13 41 1 [ 67 13 67 14 18446744073709551615 2 16 67 14 67 16 18446744073709551615 1 ] 67 16 67 17 18446744073709551615 1 ; 67 17 67 18 18446744073709551615 6 u_char 68 3 68 9 4 3 kek 68 10 68 13 42 1 [ 68 13 68 14 18446744073709551615 2 16 68 14 68 16 18446744073709551615 1 ] 68 16 68 17 18446744073709551615 1 ; 68 17 68 18 18446744073709551615 6 u_char 69 3 69 9 4 2 tk 69 10 69 12 43 1 [ 69 12 69 13 18446744073709551615 2 16 69 13 69 15 18446744073709551615 1 ] 69 15 69 16 18446744073709551615 1 ; 69 16 69 17 18446744073709551615 6 u_char 70 3 70 9 4 3 txk 70 10 70 13 44 1 [ 70 13 70 14 18446744073709551615 1 8 70 14 70 15 18446744073709551615 1 ] 70 15 70 16 18446744073709551615 1 ; 70 16 70 17 18446744073709551615 6 u_char 71 3 71 9 4 3 trk 71 10 71 13 45 1 [ 71 13 71 14 18446744073709551615 1 8 71 14 71 15 18446744073709551615 1 ] 71 15 71 16 18446744073709551615 1 ; 71 16 71 17 18446744073709551615 1 } 72 1 72 2 18446744073709551615 1 ; 72 2 72 3 18446744073709551615 6 struct 74 1 74 7 18446744073709551615 10 eapol_info 74 8 74 18 46 1 { 74 19 74 20 18446744073709551615 6 u_char 75 3 75 9 4 15 sta_mac_address 75 10 75 25 47 1 [ 75 25 75 26 18446744073709551615 12 MAC_ADDR_LEN 75 26 75 38 47 1 ] 75 38 75 39 18446744073709551615 1 ; 75 39 75 40 18446744073709551615 6 u_char 76 3 76 9 4 6 ANonce 76 10 76 16 48 1 [ 76 16 76 17 18446744073709551615 2 32 76 17 76 19 18446744073709551615 1 ] 76 19 76 20 18446744073709551615 1 ; 76 20 76 21 18446744073709551615 6 u_char 77 3 77 9 4 6 SNonce 77 10 77 16 49 1 [ 77 16 77 17 18446744073709551615 2 32 77 17 77 19 18446744073709551615 1 ] 77 19 77 20 18446744073709551615 1 ; 77 20 77 21 18446744073709551615 6 struct 78 3 78 9 18446744073709551615 3 ptk 78 10 78 13 40 3 PTK 78 14 78 17 50 1 ; 78 17 78 18 18446744073709551615 12 eapol_status 79 3 79 15 2 6 status 79 16 79 22 51 1 ; 79 22 79 23 18446744073709551615 1 } 80 1 80 2 18446744073709551615 1 ; 80 2 80 3 18446744073709551615 6 u_char 82 1 82 7 4 14 ap_mac_address 82 8 82 22 52 1 [ 82 22 82 23 18446744073709551615 1 6 82 23 82 24 18446744073709551615 1 ] 82 24 82 25 18446744073709551615 1 ; 82 25 82 26 18446744073709551615 6 u_char 83 1 83 7 4 1 * 83 8 83 9 18446744073709551615 4 ssid 83 9 83 13 53 1 ; 83 13 83 14 18446744073709551615 5 map_t 84 1 84 6 54 1 * 84 7 84 8 18446744073709551615 3 map 84 8 84 11 55 1 ; 84 11 84 12 18446744073709551615 6 u_char 86 1 86 7 4 14 process_beacon 86 8 86 22 56 1 ( 86 22 86 23 56 5 const 86 23 86 28 18446744073709551615 6 struct 86 29 86 35 18446744073709551615 11 pcap_pkthdr 86 36 86 47 57 1 * 86 48 86 49 18446744073709551615 1 , 86 49 86 50 56 5 const 86 51 86 56 18446744073709551615 6 u_char 86 57 86 63 4 1 * 86 64 86 65 18446744073709551615 1 ) 86 65 86 66 56 1 ; 86 66 86 67 18446744073709551615 6 u_char 87 1 87 7 4 13 process_eapol 87 8 87 21 58 1 ( 87 21 87 22 58 5 const 87 22 87 27 18446744073709551615 6 struct 87 28 87 34 18446744073709551615 11 pcap_pkthdr 87 35 87 46 57 1 * 87 47 87 48 18446744073709551615 1 , 87 48 87 49 58 5 const 87 50 87 55 18446744073709551615 6 u_char 87 56 87 62 4 1 * 87 63 87 64 18446744073709551615 1 ) 87 64 87 65 58 1 ; 87 65 87 66 18446744073709551615 6 u_char 88 1 88 7 4 14 process_packet 88 8 88 22 59 1 ( 88 22 88 23 59 5 const 88 23 88 28 18446744073709551615 6 struct 88 29 88 35 18446744073709551615 11 pcap_pkthdr 88 36 88 47 57 1 * 88 48 88 49 18446744073709551615 1 , 88 49 88 50 59 5 const 88 51 88 56 18446744073709551615 6 u_char 88 57 88 63 4 1 * 88 64 88 65 18446744073709551615 1 ) 88 65 88 66 59 1 ; 88 66 88 67 18446744073709551615 4 char 89 1 89 5 18446744073709551615 1 * 89 6 89 7 60 12 mac_toString 89 7 89 19 60 1 ( 89 19 89 20 60 6 u_char 89 20 89 26 4 1 * 89 27 89 28 18446744073709551615 1 ) 89 28 89 29 60 1 ; 89 29 89 30 18446744073709551615 6 u_char 90 1 90 7 4 1 * 90 8 90 9 61 6 PRF512 90 9 90 15 61 1 ( 90 15 90 16 61 6 u_char 90 16 90 22 4 1 * 90 23 90 24 18446744073709551615 1 , 90 24 90 25 61 6 u_char 90 26 90 32 4 1 * 90 33 90 34 18446744073709551615 1 , 90 34 90 35 61 6 size_t 90 36 90 42 62 1 , 90 42 90 43 61 6 u_char 90 44 90 50 4 1 * 90 51 90 52 18446744073709551615 1 , 90 52 90 53 61 6 u_char 90 54 90 60 4 1 * 90 61 90 62 18446744073709551615 1 , 90 62 90 63 61 6 u_char 90 64 90 70 4 1 * 90 71 90 72 18446744073709551615 1 , 90 72 90 73 61 6 u_char 90 74 90 80 4 1 * 90 81 90 82 18446744073709551615 1 ) 90 82 90 83 61 1 ; 90 83 90 84 18446744073709551615 6 u_char 91 1 91 7 4 1 * 91 8 91 9 63 15 hexstr_to_bytes 91 9 91 24 63 1 ( 91 24 91 25 63 6 u_char 91 25 91 31 4 1 * 91 32 91 33 18446744073709551615 1 ) 91 33 91 34 63 1 ; 91 34 91 35 18446744073709551615 3 int 93 1 93 4 18446744073709551615 4 main 93 5 93 9 64 1 ( 93 9 93 10 64 3 int 93 10 93 13 18446744073709551615 4 argc 93 14 93 18 65 1 , 93 18 93 19 64 4 char 93 20 93 24 18446744073709551615 1 * 93 25 93 26 18446744073709551615 4 argv 93 26 93 30 66 1 [ 93 30 93 31 18446744073709551615 1 ] 93 31 93 32 18446744073709551615 1 ) 93 32 93 33 64 1 { 93 34 93 35 18446744073709551615 3 map 95 3 95 6 55 1 = 95 7 95 8 18446744073709551615 11 hashmap_new 95 9 95 20 67 1 ( 95 20 95 21 67 1 ) 95 21 95 22 67 1 ; 95 22 95 23 18446744073709551615 4 char 96 3 96 7 18446744073709551615 1 * 96 8 96 9 18446744073709551615 3 dev 96 9 96 12 68 1 = 96 13 96 14 18446744073709551615 4 argv 96 15 96 19 66 1 [ 96 19 96 20 18446744073709551615 1 1 96 20 96 21 18446744073709551615 1 ] 96 21 96 22 18446744073709551615 1 ; 96 22 96 23 18446744073709551615 4 ssid 97 3 97 7 53 1 = 97 8 97 9 18446744073709551615 4 argv 97 10 97 14 66 1 [ 97 14 97 15 18446744073709551615 1 2 97 15 97 16 18446744073709551615 1 ] 97 16 97 17 18446744073709551615 1 ; 97 17 97 18 18446744073709551615 6 u_char 98 3 98 9 4 1 * 98 10 98 11 18446744073709551615 3 pwd 98 11 98 14 69 1 = 98 15 98 16 18446744073709551615 4 argv 98 17 98 21 66 1 [ 98 21 98 22 18446744073709551615 1 3 98 22 98 23 18446744073709551615 1 ] 98 23 98 24 18446744073709551615 1 ; 98 24 98 25 18446744073709551615 6 u_char 99 3 99 9 4 3 psk 99 10 99 13 70 1 [ 99 13 99 14 18446744073709551615 2 32 99 14 99 16 18446744073709551615 1 ] 99 16 99 17 18446744073709551615 1 ; 99 17 99 18 18446744073709551615 4 char 100 3 100 7 18446744073709551615 6 errbuf 100 8 100 14 71 1 [ 100 14 100 15 18446744073709551615 16 PCAP_ERRBUF_SIZE 100 15 100 31 71 1 ] 100 31 100 32 18446744073709551615 1 ; 100 32 100 33 18446744073709551615 4 char 101 3 101 7 18446744073709551615 13 filter_beacon 101 8 101 21 72 1 [ 101 21 101 22 18446744073709551615 1 ] 101 22 101 23 18446744073709551615 1 = 101 24 101 25 18446744073709551615 30 "wlan type mgt subtype beacon" 101 26 101 56 18446744073709551615 1 ; 101 56 101 57 18446744073709551615 4 char 102 3 102 7 18446744073709551615 25 filter_eapol_on_ssid_mask 102 8 102 33 73 1 [ 102 33 102 34 18446744073709551615 1 ] 102 34 102 35 18446744073709551615 1 = 102 36 102 37 18446744073709551615 32 "wlan addr1 %s or wlan addr2 %s" 102 38 102 70 18446744073709551615 1 ; 102 70 102 71 18446744073709551615 4 char 103 3 103 7 18446744073709551615 1 * 103 8 103 9 18446744073709551615 20 filter_eapol_on_ssid 103 9 103 29 74 1 ; 103 29 103 30 18446744073709551615 6 struct 104 3 104 9 18446744073709551615 11 bpf_program 104 10 104 21 75 2 fp 104 22 104 24 76 1 ; 104 24 104 25 18446744073709551615 6 pcap_t 105 3 105 9 77 1 * 105 10 105 11 18446744073709551615 6 handle 105 11 105 17 78 1 ; 105 17 105 18 18446744073709551615 6 struct 106 3 106 9 18446744073709551615 11 pcap_pkthdr 106 10 106 21 57 1 * 106 22 106 23 18446744073709551615 6 header 106 23 106 29 79 1 ; 106 29 106 30 18446744073709551615 5 const 107 3 107 8 18446744073709551615 6 u_char 107 9 107 15 4 1 * 107 16 107 17 18446744073709551615 6 packet 107 17 107 23 80 1 ; 107 23 107 24 18446744073709551615 4 char 108 3 108 7 18446744073709551615 18 ap_mac_address_str 108 8 108 26 81 1 [ 108 26 108 27 18446744073709551615 1 2 108 27 108 28 18446744073709551615 1 * 108 29 108 30 18446744073709551615 12 MAC_ADDR_LEN 108 31 108 43 18446744073709551615 1 ] 108 43 108 44 18446744073709551615 1 ; 108 44 108 45 18446744073709551615 18 ap_mac_address_str 109 3 109 21 81 1 [ 109 21 109 22 18446744073709551615 1 2 109 22 109 23 18446744073709551615 1 * 109 24 109 25 18446744073709551615 12 MAC_ADDR_LEN 109 26 109 38 18446744073709551615 1 - 109 39 109 40 18446744073709551615 1 1 109 41 109 42 18446744073709551615 1 ] 109 42 109 43 18446744073709551615 1 = 109 44 109 45 18446744073709551615 4 '\0' 109 46 109 50 18446744073709551615 1 ; 109 50 109 51 18446744073709551615 20 fastpbkdf2_hmac_sha1 111 3 111 23 82 1 ( 111 23 111 24 82 3 pwd 111 24 111 27 69 1 , 111 27 111 28 82 6 strlen 111 29 111 35 83 1 ( 111 35 111 36 83 3 pwd 111 36 111 39 69 1 ) 111 39 111 40 83 1 , 111 40 111 41 82 4 ssid 111 42 111 46 53 1 , 111 46 111 47 82 6 strlen 111 48 111 54 83 1 ( 111 54 111 55 83 4 ssid 111 55 111 59 53 1 ) 111 59 111 60 83 1 , 111 60 111 61 82 4 4096 111 62 111 66 18446744073709551615 1 , 111 66 111 67 82 3 psk 111 68 111 71 70 1 , 111 71 111 72 82 2 32 111 73 111 75 18446744073709551615 1 ) 111 75 111 76 82 1 ; 111 76 111 77 18446744073709551615 6 u_char 113 3 113 9 4 3 PMK 113 10 113 13 84 1 [ 113 13 113 14 18446744073709551615 1 ] 113 14 113 15 18446744073709551615 1 = 113 16 113 17 18446744073709551615 66 "01b809f9ab2fb5dc47984f52fb2d112e13d84ccb6b86d4a7193ec5299f851c48" 113 18 113 84 18446744073709551615 1 ; 113 84 113 85 18446744073709551615 38 //u_char passPhrase[] = "10zZz10ZZzZ"; 114 3 114 41 18446744073709551615 34 //u_char ssid[] = "Netgear 2/158"; 115 3 115 37 18446744073709551615 6 u_char 116 3 116 9 4 1 A 116 10 116 11 85 1 [ 116 11 116 12 18446744073709551615 1 ] 116 12 116 13 18446744073709551615 1 = 116 14 116 15 18446744073709551615 24 "Pairwise key expansion" 116 16 116 40 18446744073709551615 1 ; 116 40 116 41 18446744073709551615 6 u_char 117 3 117 9 4 5 APmac 117 10 117 15 86 1 [ 117 15 117 16 18446744073709551615 1 ] 117 16 117 17 18446744073709551615 1 = 117 18 117 19 18446744073709551615 14 "001e2ae0bdd0" 117 20 117 34 18446744073709551615 1 ; 117 34 117 35 18446744073709551615 6 u_char 118 3 118 9 4 9 Clientmac 118 10 118 19 87 1 [ 118 19 118 20 18446744073709551615 1 ] 118 20 118 21 18446744073709551615 1 = 118 22 118 23 18446744073709551615 14 "cc08e0620bc8" 118 24 118 38 18446744073709551615 1 ; 118 38 118 39 18446744073709551615 6 u_char 119 3 119 9 4 6 ANonce 119 10 119 16 88 1 [ 119 16 119 17 18446744073709551615 1 ] 119 17 119 18 18446744073709551615 1 = 119 19 119 20 18446744073709551615 66 "61c9a3f5cdcdf5fae5fd760836b8008c863aa2317022c7a202434554fb38452b" 119 21 119 87 18446744073709551615 1 ; 119 87 119 88 18446744073709551615 6 u_char 120 3 120 9 4 6 SNonce 120 10 120 16 89 1 [ 120 16 120 17 18446744073709551615 1 ] 120 17 120 18 18446744073709551615 1 = 120 19 120 20 18446744073709551615 66 "60eff10088077f8b03a0e2fc2fc37e1fe1f30f9f7cfbcfb2826f26f3379c4318" 120 21 120 87 18446744073709551615 1 ; 120 87 120 88 18446744073709551615 6 u_char 121 3 121 9 4 4 data 121 10 121 14 90 1 [ 121 14 121 15 18446744073709551615 1 ] 121 15 121 16 18446744073709551615 1 = 121 17 121 18 18446744073709551615 198 "0103005ffe010900200000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" 121 19 121 217 18446744073709551615 1 ; 121 217 121 218 18446744073709551615 6 struct 123 3 123 9 18446744073709551615 3 ptk 123 10 123 13 40 1 * 123 14 123 15 18446744073709551615 3 PTK 123 15 123 18 91 1 = 123 19 123 20 18446744073709551615 1 ( 123 21 123 22 18446744073709551615 6 struct 123 22 123 28 18446744073709551615 3 ptk 123 29 123 32 40 1 * 123 32 123 33 18446744073709551615 1 ) 123 33 123 34 18446744073709551615 6 PRF512 123 35 123 41 61 1 ( 123 41 123 42 61 15 hexstr_to_bytes 123 42 123 57 63 1 ( 123 57 123 58 63 3 PMK 123 58 123 61 84 1 ) 123 61 123 62 63 1 , 123 62 123 63 61 1 A 123 64 123 65 85 1 , 123 65 123 66 61 6 strlen 123 67 123 73 83 1 ( 123 73 123 74 83 1 A 123 74 123 75 85 1 ) 123 75 123 76 83 1 , 123 76 123 77 61 15 hexstr_to_bytes 123 78 123 93 63 1 ( 123 93 123 94 63 5 APmac 123 94 123 99 86 1 ) 123 99 123 100 63 1 , 123 100 123 101 61 15 hexstr_to_bytes 123 102 123 117 63 1 ( 123 117 123 118 63 9 Clientmac 123 118 123 127 87 1 ) 123 127 123 128 63 1 , 123 128 123 129 61 15 hexstr_to_bytes 123 130 123 145 63 1 ( 123 145 123 146 63 6 ANonce 123 146 123 152 88 1 ) 123 152 123 153 63 1 , 123 153 123 154 61 15 hexstr_to_bytes 123 155 123 170 63 1 ( 123 170 123 171 63 6 SNonce 123 171 123 177 89 1 ) 123 177 123 178 63 1 ) 123 178 123 179 61 1 ; 123 179 123 180 18446744073709551615 3 int 125 3 125 6 18446744073709551615 10 sha_length 125 7 125 17 92 1 = 125 18 125 19 18446744073709551615 2 16 125 20 125 22 18446744073709551615 1 ; 125 22 125 23 18446744073709551615 6 u_char 126 3 126 9 4 1 * 126 10 126 11 18446744073709551615 3 MIC 126 11 126 14 93 1 = 126 15 126 16 18446744073709551615 6 malloc 126 17 126 23 94 1 ( 126 23 126 24 94 2 16 126 24 126 26 18446744073709551615 1 ) 126 26 126 27 94 1 ; 126 27 126 28 18446744073709551615 4 HMAC 127 3 127 7 95 1 ( 127 7 127 8 95 7 EVP_md5 127 8 127 15 96 1 ( 127 15 127 16 96 1 ) 127 16 127 17 96 1 , 127 17 127 18 95 3 PTK 127 19 127 22 91 2 -> 127 22 127 24 18446744073709551615 3 kck 127 24 127 27 41 1 , 127 27 127 28 95 2 16 127 29 127 31 18446744073709551615 1 , 127 31 127 32 95 15 hexstr_to_bytes 127 33 127 48 63 1 ( 127 48 127 49 63 4 data 127 49 127 53 90 1 ) 127 53 127 54 63 1 , 127 54 127 55 95 2 99 127 56 127 58 18446744073709551615 1 , 127 58 127 59 95 3 MIC 127 60 127 63 93 1 , 127 63 127 64 95 1 & 127 65 127 66 18446744073709551615 10 sha_length 127 66 127 76 92 1 ) 127 76 127 77 95 1 ; 127 77 127 78 18446744073709551615 3 for 128 3 128 6 18446744073709551615 1 ( 128 6 128 7 18446744073709551615 3 int 128 7 128 10 18446744073709551615 1 i 128 11 128 12 97 1 = 128 13 128 14 18446744073709551615 1 0 128 15 128 16 18446744073709551615 1 ; 128 16 128 17 18446744073709551615 1 i 128 18 128 19 97 1 < 128 20 128 21 18446744073709551615 2 16 128 22 128 24 18446744073709551615 1 ; 128 24 128 25 18446744073709551615 1 i 128 26 128 27 97 2 ++ 128 27 128 29 18446744073709551615 1 ) 128 29 128 30 18446744073709551615 1 { 128 30 128 31 18446744073709551615 6 printf 129 5 129 11 98 1 ( 129 11 129 12 98 6 "%02x" 129 12 129 18 18446744073709551615 1 , 129 18 129 19 98 3 MIC 129 20 129 23 93 1 [ 129 23 129 24 18446744073709551615 1 i 129 24 129 25 97 1 ] 129 25 129 26 18446744073709551615 1 ) 129 26 129 27 98 1 ; 129 27 129 28 18446744073709551615 1 } 130 3 130 4 18446744073709551615 6 printf 131 3 131 9 98 1 ( 131 9 131 10 98 4 "\n" 131 10 131 14 18446744073709551615 1 ) 131 14 131 15 98 1 ; 131 15 131 16 18446744073709551615 11 bpf_u_int32 133 3 133 14 99 4 mask 133 15 133 19 100 1 ; 133 19 133 20 18446744073709551615 40 /* The netmask of our sniffing device */ 133 21 133 61 18446744073709551615 11 bpf_u_int32 134 3 134 14 99 3 net 134 15 134 18 101 1 ; 134 18 134 19 18446744073709551615 35 /* The IP of our sniffing device */ 134 21 134 56 18446744073709551615 2 if 136 3 136 5 18446744073709551615 1 ( 136 5 136 6 18446744073709551615 14 pcap_lookupnet 136 6 136 20 102 1 ( 136 20 136 21 102 3 dev 136 21 136 24 68 1 , 136 24 136 25 102 1 & 136 26 136 27 18446744073709551615 3 net 136 27 136 30 101 1 , 136 30 136 31 102 1 & 136 32 136 33 18446744073709551615 4 mask 136 33 136 37 100 1 , 136 37 136 38 102 6 errbuf 136 39 136 45 71 1 ) 136 45 136 46 102 2 == 136 47 136 49 18446744073709551615 1 - 136 50 136 51 18446744073709551615 1 1 136 51 136 52 18446744073709551615 1 ) 136 52 136 53 18446744073709551615 1 { 136 54 136 55 18446744073709551615 7 fprintf 137 5 137 12 103 1 ( 137 12 137 13 103 6 stderr 137 13 137 19 103 1 , 137 19 137 20 103 35 "Can't get netmask for device %s\n" 137 21 137 56 18446744073709551615 1 , 137 56 137 57 103 3 dev 137 58 137 61 68 1 ) 137 61 137 62 103 1 ; 137 62 137 63 18446744073709551615 3 net 138 5 138 8 101 1 = 138 9 138 10 18446744073709551615 1 0 138 11 138 12 18446744073709551615 1 ; 138 12 138 13 18446744073709551615 4 mask 139 5 139 9 100 1 = 139 10 139 11 18446744073709551615 1 0 139 12 139 13 18446744073709551615 1 ; 139 13 139 14 18446744073709551615 1 } 140 3 140 4 18446744073709551615 6 handle 141 3 141 9 78 1 = 141 10 141 11 18446744073709551615 14 pcap_open_live 141 12 141 26 104 1 ( 141 26 141 27 104 3 dev 141 27 141 30 68 1 , 141 30 141 31 104 6 BUFSIZ 141 32 141 38 104 1 , 141 38 141 39 104 1 1 141 40 141 41 18446744073709551615 1 , 141 41 141 42 104 4 1000 141 43 141 47 18446744073709551615 1 , 141 47 141 48 104 6 errbuf 141 49 141 55 71 1 ) 141 55 141 56 104 1 ; 141 56 141 57 18446744073709551615 2 if 143 3 143 5 18446744073709551615 1 ( 143 5 143 6 18446744073709551615 6 handle 143 6 143 12 78 2 == 143 13 143 15 18446744073709551615 4 NULL 143 16 143 20 18446744073709551615 1 ) 143 20 143 21 18446744073709551615 1 { 143 22 143 23 18446744073709551615 7 fprintf 144 5 144 12 103 1 ( 144 12 144 13 103 6 stderr 144 13 144 19 103 1 , 144 19 144 20 103 31 "Couldn't open device %s: %s\n" 144 21 144 52 18446744073709551615 1 , 144 52 144 53 103 3 dev 144 54 144 57 68 1 , 144 57 144 58 103 6 errbuf 144 59 144 65 71 1 ) 144 65 144 66 103 1 ; 144 66 144 67 18446744073709551615 6 return 145 5 145 11 18446744073709551615 1 ( 145 12 145 13 18446744073709551615 1 2 145 13 145 14 18446744073709551615 1 ) 145 14 145 15 18446744073709551615 1 ; 145 15 145 16 18446744073709551615 1 } 146 3 146 4 18446744073709551615 2 if 148 3 148 5 18446744073709551615 1 ( 148 5 148 6 18446744073709551615 12 pcap_compile 148 6 148 18 105 1 ( 148 18 148 19 105 6 handle 148 19 148 25 78 1 , 148 25 148 26 105 1 & 148 27 148 28 18446744073709551615 2 fp 148 28 148 30 76 1 , 148 30 148 31 105 13 filter_beacon 148 32 148 45 72 1 , 148 45 148 46 105 1 0 148 47 148 48 18446744073709551615 1 , 148 48 148 49 105 3 net 148 50 148 53 101 1 ) 148 53 148 54 105 2 == 148 55 148 57 18446744073709551615 1 - 148 58 148 59 18446744073709551615 1 1 148 59 148 60 18446744073709551615 1 ) 148 60 148 61 18446744073709551615 1 { 148 62 148 63 18446744073709551615 7 fprintf 149 5 149 12 103 1 ( 149 12 149 13 103 6 stderr 149 13 149 19 103 1 , 149 19 149 20 103 32 "Couldn't parse filter %s: %s\n" 149 21 149 53 18446744073709551615 1 , 149 53 149 54 103 13 filter_beacon 149 55 149 68 72 1 , 149 68 149 69 103 11 pcap_geterr 149 70 149 81 106 1 ( 149 81 149 82 106 6 handle 149 82 149 88 78 1 ) 149 88 149 89 106 1 ) 149 89 149 90 103 1 ; 149 90 149 91 18446744073709551615 6 return 150 5 150 11 18446744073709551615 1 ( 150 12 150 13 18446744073709551615 1 2 150 13 150 14 18446744073709551615 1 ) 150 14 150 15 18446744073709551615 1 ; 150 15 150 16 18446744073709551615 1 } 151 3 151 4 18446744073709551615 2 if 153 3 153 5 18446744073709551615 1 ( 153 5 153 6 18446744073709551615 14 pcap_setfilter 153 6 153 20 107 1 ( 153 20 153 21 107 6 handle 153 21 153 27 78 1 , 153 27 153 28 107 1 & 153 29 153 30 18446744073709551615 2 fp 153 30 153 32 76 1 ) 153 32 153 33 107 2 == 153 34 153 36 18446744073709551615 1 - 153 37 153 38 18446744073709551615 1 1 153 38 153 39 18446744073709551615 1 ) 153 39 153 40 18446744073709551615 1 { 153 41 153 42 18446744073709551615 7 fprintf 154 5 154 12 103 1 ( 154 12 154 13 103 6 stderr 154 13 154 19 103 1 , 154 19 154 20 103 34 "Couldn't install filter %s: %s\n" 154 21 154 55 18446744073709551615 1 , 154 55 154 56 103 13 filter_beacon 154 57 154 70 72 1 , 154 70 154 71 103 11 pcap_geterr 154 72 154 83 106 1 ( 154 83 154 84 106 6 handle 154 84 154 90 78 1 ) 154 90 154 91 106 1 ) 154 91 154 92 103 1 ; 154 92 154 93 18446744073709551615 6 return 155 5 155 11 18446744073709551615 1 ( 155 12 155 13 18446744073709551615 1 2 155 13 155 14 18446744073709551615 1 ) 155 14 155 15 18446744073709551615 1 ; 155 15 155 16 18446744073709551615 1 } 156 3 156 4 18446744073709551615 6 printf 158 3 158 9 98 1 ( 158 9 158 10 98 14 "Device: %s\n" 158 10 158 24 18446744073709551615 1 , 158 24 158 25 98 3 dev 158 26 158 29 68 1 ) 158 29 158 30 98 1 ; 158 30 158 31 18446744073709551615 31 //Put the device in sniff loop; 159 3 159 34 18446744073709551615 5 while 160 3 160 8 18446744073709551615 1 ( 160 8 160 9 18446744073709551615 12 pcap_next_ex 160 9 160 21 108 1 ( 160 21 160 22 108 6 handle 160 22 160 28 78 1 , 160 28 160 29 108 1 & 160 30 160 31 18446744073709551615 6 header 160 31 160 37 79 1 , 160 37 160 38 108 1 & 160 39 160 40 18446744073709551615 6 packet 160 40 160 46 80 1 ) 160 46 160 47 108 2 && 160 48 160 50 18446744073709551615 1 ! 160 51 160 52 18446744073709551615 14 process_beacon 160 52 160 66 56 1 ( 160 66 160 67 56 6 header 160 67 160 73 79 1 , 160 73 160 74 56 6 packet 160 75 160 81 80 1 ) 160 81 160 82 56 1 ) 160 82 160 83 18446744073709551615 1 ; 161 5 161 6 18446744073709551615 8 asprintf 163 3 163 11 109 1 ( 163 11 163 12 109 1 & 163 12 163 13 18446744073709551615 20 filter_eapol_on_ssid 163 13 163 33 74 1 , 163 33 163 34 109 25 filter_eapol_on_ssid_mask 163 35 163 60 73 1 , 163 60 163 61 109 12 mac_toString 163 62 163 74 60 1 ( 163 74 163 75 60 14 ap_mac_address 163 75 163 89 52 1 ) 163 89 163 90 60 1 , 163 90 163 91 109 12 mac_toString 163 92 163 104 60 1 ( 163 104 163 105 60 14 ap_mac_address 163 105 163 119 52 1 ) 163 119 163 120 60 1 ) 163 120 163 121 109 1 ; 163 121 163 122 18446744073709551615 2 if 165 3 165 5 18446744073709551615 1 ( 165 5 165 6 18446744073709551615 12 pcap_compile 165 6 165 18 105 1 ( 165 18 165 19 105 6 handle 165 19 165 25 78 1 , 165 25 165 26 105 1 & 165 27 165 28 18446744073709551615 2 fp 165 28 165 30 76 1 , 165 30 165 31 105 20 filter_eapol_on_ssid 165 32 165 52 74 1 , 165 52 165 53 105 1 0 165 54 165 55 18446744073709551615 1 , 165 55 165 56 105 3 net 165 57 165 60 101 1 ) 165 60 165 61 105 2 == 165 62 165 64 18446744073709551615 1 - 165 65 165 66 18446744073709551615 1 1 165 66 165 67 18446744073709551615 1 ) 165 67 165 68 18446744073709551615 1 { 165 69 165 70 18446744073709551615 7 fprintf 166 5 166 12 103 1 ( 166 12 166 13 103 6 stderr 166 13 166 19 103 1 , 166 19 166 20 103 32 "Couldn't parse filter %s: %s\n" 166 21 166 53 18446744073709551615 1 , 166 53 166 54 103 20 filter_eapol_on_ssid 166 55 166 75 74 1 , 166 75 166 76 103 11 pcap_geterr 166 77 166 88 106 1 ( 166 88 166 89 106 6 handle 166 89 166 95 78 1 ) 166 95 166 96 106 1 ) 166 96 166 97 103 1 ; 166 97 166 98 18446744073709551615 6 return 167 5 167 11 18446744073709551615 1 ( 167 12 167 13 18446744073709551615 1 2 167 13 167 14 18446744073709551615 1 ) 167 14 167 15 18446744073709551615 1 ; 167 15 167 16 18446744073709551615 1 } 168 3 168 4 18446744073709551615 2 if 169 3 169 5 18446744073709551615 1 ( 169 5 169 6 18446744073709551615 14 pcap_setfilter 169 6 169 20 107 1 ( 169 20 169 21 107 6 handle 169 21 169 27 78 1 , 169 27 169 28 107 1 & 169 29 169 30 18446744073709551615 2 fp 169 30 169 32 76 1 ) 169 32 169 33 107 2 == 169 34 169 36 18446744073709551615 1 - 169 37 169 38 18446744073709551615 1 1 169 38 169 39 18446744073709551615 1 ) 169 39 169 40 18446744073709551615 1 { 169 41 169 42 18446744073709551615 7 fprintf 170 5 170 12 103 1 ( 170 12 170 13 103 6 stderr 170 13 170 19 103 1 , 170 19 170 20 103 34 "Couldn't install filter %s: %s\n" 170 21 170 55 18446744073709551615 1 , 170 55 170 56 103 20 filter_eapol_on_ssid 170 57 170 77 74 1 , 170 77 170 78 103 11 pcap_geterr 170 79 170 90 106 1 ( 170 90 170 91 106 6 handle 170 91 170 97 78 1 ) 170 97 170 98 106 1 ) 170 98 170 99 103 1 ; 170 99 170 100 18446744073709551615 6 return 171 5 171 11 18446744073709551615 1 ( 171 12 171 13 18446744073709551615 1 2 171 13 171 14 18446744073709551615 1 ) 171 14 171 15 18446744073709551615 1 ; 171 15 171 16 18446744073709551615 1 } 172 3 172 4 18446744073709551615 3 int 173 3 173 6 18446744073709551615 3 res 173 7 173 10 110 1 = 173 11 173 12 18446744073709551615 1 0 173 13 173 14 18446744073709551615 1 ; 173 14 173 15 18446744073709551615 5 while 174 3 174 8 18446744073709551615 1 ( 174 8 174 9 18446744073709551615 12 pcap_next_ex 174 9 174 21 108 1 ( 174 21 174 22 108 6 handle 174 22 174 28 78 1 , 174 28 174 29 108 1 & 174 30 174 31 18446744073709551615 6 header 174 31 174 37 79 1 , 174 37 174 38 108 1 & 174 39 174 40 18446744073709551615 6 packet 174 40 174 46 80 1 ) 174 46 174 47 108 2 >= 174 48 174 50 18446744073709551615 1 0 174 51 174 52 18446744073709551615 2 && 174 53 174 55 18446744073709551615 14 process_packet 174 56 174 70 59 1 ( 174 70 174 71 59 6 header 174 71 174 77 79 1 , 174 77 174 78 59 6 packet 174 79 174 85 80 1 ) 174 85 174 86 59 1 ) 174 86 174 87 18446744073709551615 1 ; 175 5 175 6 18446744073709551615 273 /*printf("AP mac address: ");
  for(int i = 0; i < MAC_ADDR_LEN; i++) {
    printf("%02x", ap_mac_address[i]);
  }
  printf(".\n");
  printf("%s\n", mac_toString(ap_mac_address));
  printf(filter_eapol_on_ssid, mac_toString(ap_mac_address), mac_toString(ap_mac_address));*/ 176 3 182 94 18446744073709551615 13 pcap_freecode 184 3 184 16 111 1 ( 184 16 184 17 111 1 & 184 17 184 18 18446744073709551615 2 fp 184 18 184 20 76 1 ) 184 20 184 21 111 1 ; 184 21 184 22 18446744073709551615 10 pcap_close 185 3 185 13 112 1 ( 185 13 185 14 112 6 handle 185 14 185 20 78 1 ) 185 20 185 21 112 1 ; 185 21 185 22 18446744073709551615 6 return 186 3 186 9 18446744073709551615 1 ( 186 10 186 11 18446744073709551615 1 0 186 11 186 12 18446744073709551615 1 ) 186 12 186 13 18446744073709551615 1 ; 186 13 186 14 18446744073709551615 1 } 187 1 187 2 18446744073709551615 6 u_char 189 1 189 7 4 14 process_beacon 189 8 189 22 56 1 ( 189 22 189 23 56 5 const 189 23 189 28 18446744073709551615 6 struct 189 29 189 35 18446744073709551615 11 pcap_pkthdr 189 36 189 47 57 1 * 189 48 189 49 18446744073709551615 6 header 189 49 189 55 113 1 , 189 55 189 56 56 5 const 189 57 189 62 18446744073709551615 6 u_char 189 63 189 69 4 1 * 189 70 189 71 18446744073709551615 6 buffer 189 71 189 77 114 1 ) 189 77 189 78 56 1 { 189 79 189 80 18446744073709551615 5 const 190 3 190 8 18446744073709551615 6 struct 190 9 190 15 18446744073709551615 19 sniff_802_11_beacon 190 16 190 35 12 1 * 190 36 190 37 18446744073709551615 10 hdr_802_11 190 37 190 47 115 1 ; 190 47 190 48 18446744073709551615 10 hdr_802_11 191 3 191 13 115 1 = 191 14 191 15 18446744073709551615 1 ( 191 16 191 17 18446744073709551615 6 struct 191 17 191 23 18446744073709551615 19 sniff_802_11_beacon 191 24 191 43 12 1 * 191 44 191 45 18446744073709551615 1 ) 191 45 191 46 18446744073709551615 1 ( 191 46 191 47 18446744073709551615 6 buffer 191 47 191 53 114 1 + 191 54 191 55 18446744073709551615 16 PRISM_HEADER_LEN 191 56 191 72 18446744073709551615 1 ) 191 72 191 73 18446744073709551615 1 ; 191 73 191 74 18446744073709551615 3 int 192 3 192 6 18446744073709551615 11 ssid_length 192 7 192 18 116 1 = 192 19 192 20 18446744073709551615 1 ( 192 21 192 22 18446744073709551615 3 int 192 22 192 25 18446744073709551615 1 ) 192 25 192 26 18446744073709551615 1 ( 192 26 192 27 18446744073709551615 6 buffer 192 27 192 33 114 1 + 192 34 192 35 18446744073709551615 16 PRISM_HEADER_LEN 192 36 192 52 18446744073709551615 1 + 192 53 192 54 18446744073709551615 6 sizeof 192 55 192 61 18446744073709551615 1 ( 192 61 192 62 18446744073709551615 6 struct 192 62 192 68 18446744073709551615 19 sniff_802_11_beacon 192 69 192 88 12 1 ) 192 88 192 89 18446744073709551615 1 + 192 90 192 91 18446744073709551615 2 13 192 92 192 94 18446744073709551615 1 ) 192 94 192 95 18446744073709551615 1 [ 192 95 192 96 18446744073709551615 1 0 192 96 192 97 18446744073709551615 1 ] 192 97 192 98 18446744073709551615 1 ; 192 98 192 99 18446744073709551615 6 u_char 193 3 193 9 4 11 beacon_ssid 193 10 193 21 117 1 [ 193 21 193 22 18446744073709551615 11 ssid_length 193 22 193 33 116 1 + 193 34 193 35 18446744073709551615 1 1 193 36 193 37 18446744073709551615 1 ] 193 37 193 38 18446744073709551615 1 ; 193 38 193 39 18446744073709551615 6 memcpy 194 3 194 9 118 1 ( 194 9 194 10 118 11 beacon_ssid 194 10 194 21 117 1 , 194 21 194 22 118 1 ( 194 23 194 24 18446744073709551615 6 buffer 194 24 194 30 114 1 + 194 31 194 32 18446744073709551615 16 PRISM_HEADER_LEN 194 33 194 49 18446744073709551615 1 + 194 50 194 51 18446744073709551615 6 sizeof 194 52 194 58 18446744073709551615 1 ( 194 58 194 59 18446744073709551615 6 struct 194 59 194 65 18446744073709551615 19 sniff_802_11_beacon 194 66 194 85 12 1 ) 194 85 194 86 18446744073709551615 1 + 194 87 194 88 18446744073709551615 2 14 194 89 194 91 18446744073709551615 1 ) 194 91 194 92 18446744073709551615 1 , 194 92 194 93 118 11 ssid_length 194 94 194 105 116 1 ) 194 105 194 106 118 1 ; 194 106 194 107 18446744073709551615 11 beacon_ssid 195 3 195 14 117 1 [ 195 14 195 15 18446744073709551615 11 ssid_length 195 15 195 26 116 1 ] 195 26 195 27 18446744073709551615 1 = 195 28 195 29 18446744073709551615 4 '\0' 195 30 195 34 18446744073709551615 1 ; 195 34 195 35 18446744073709551615 2 if 196 3 196 5 18446744073709551615 1 ( 196 5 196 6 18446744073709551615 6 strcmp 196 6 196 12 119 1 ( 196 12 196 13 119 11 beacon_ssid 196 13 196 24 117 1 , 196 24 196 25 119 4 ssid 196 26 196 30 53 1 ) 196 30 196 31 119 2 == 196 32 196 34 18446744073709551615 1 0 196 35 196 36 18446744073709551615 1 ) 196 36 196 37 18446744073709551615 1 { 196 38 196 39 18446744073709551615 6 memcpy 197 5 197 11 118 1 ( 197 11 197 12 118 14 ap_mac_address 197 12 197 26 52 1 , 197 26 197 27 118 10 hdr_802_11 197 28 197 38 115 2 -> 197 38 197 40 18446744073709551615 5 addr2 197 40 197 45 16 1 , 197 45 197 46 118 12 MAC_ADDR_LEN 197 47 197 59 118 1 ) 197 59 197 60 118 1 ; 197 60 197 61 18446744073709551615 6 return 198 5 198 11 18446744073709551615 1 ( 198 12 198 13 18446744073709551615 1 1 198 13 198 14 18446744073709551615 1 ) 198 14 198 15 18446744073709551615 1 ; 198 15 198 16 18446744073709551615 1 } 199 3 199 4 18446744073709551615 6 return 200 3 200 9 18446744073709551615 1 ( 200 10 200 11 18446744073709551615 1 0 200 11 200 12 18446744073709551615 1 ) 200 12 200 13 18446744073709551615 1 ; 200 13 200 14 18446744073709551615 1 } 201 1 201 2 18446744073709551615 6 u_char 203 1 203 7 4 13 process_eapol 203 8 203 21 58 1 ( 203 21 203 22 58 5 const 203 22 203 27 18446744073709551615 6 struct 203 28 203 34 18446744073709551615 11 pcap_pkthdr 203 35 203 46 57 1 * 203 47 203 48 18446744073709551615 6 header 203 48 203 54 120 1 , 203 54 203 55 58 5 const 203 56 203 61 18446744073709551615 6 u_char 203 62 203 68 4 1 * 203 69 203 70 18446744073709551615 6 buffer 203 70 203 76 121 1 ) 203 76 203 77 58 1 { 203 78 203 79 18446744073709551615 5 const 204 3 204 8 18446744073709551615 6 struct 204 9 204 15 18446744073709551615 12 sniff_802_11 204 16 204 28 3 1 * 204 29 204 30 18446744073709551615 10 hdr_802_11 204 30 204 40 122 1 ; 204 40 204 41 18446744073709551615 10 hdr_802_11 205 3 205 13 122 1 = 205 14 205 15 18446744073709551615 1 ( 205 16 205 17 18446744073709551615 6 struct 205 17 205 23 18446744073709551615 12 sniff_802_11 205 24 205 36 3 1 * 205 37 205 38 18446744073709551615 1 ) 205 38 205 39 18446744073709551615 1 ( 205 39 205 40 18446744073709551615 6 buffer 205 40 205 46 121 1 + 205 47 205 48 18446744073709551615 16 PRISM_HEADER_LEN 205 49 205 65 18446744073709551615 1 ) 205 65 205 66 18446744073709551615 1 ; 205 66 205 67 18446744073709551615 5 const 206 3 206 8 18446744073709551615 6 struct 206 9 206 15 18446744073709551615 17 sniff_802_1x_auth 206 16 206 33 26 1 * 206 34 206 35 18446744073709551615 15 hdr_802_1x_auth 206 35 206 50 123 1 ; 206 50 206 51 18446744073709551615 15 hdr_802_1x_auth 207 3 207 18 123 1 = 207 19 207 20 18446744073709551615 1 ( 207 21 207 22 18446744073709551615 6 struct 207 22 207 28 18446744073709551615 17 sniff_802_1x_auth 207 29 207 46 26 1 * 207 47 207 48 18446744073709551615 1 ) 207 48 207 49 18446744073709551615 1 ( 207 49 207 50 18446744073709551615 6 buffer 207 50 207 56 121 1 + 207 57 207 58 18446744073709551615 16 PRISM_HEADER_LEN 207 59 207 75 18446744073709551615 1 + 207 76 207 77 18446744073709551615 6 sizeof 207 78 207 84 18446744073709551615 1 ( 207 84 207 85 18446744073709551615 6 struct 207 85 207 91 18446744073709551615 12 sniff_802_11 207 92 207 104 3 1 ) 207 104 207 105 18446744073709551615 1 + 207 106 207 107 18446744073709551615 7 LLC_LEN 207 108 207 115 18446744073709551615 1 ) 207 115 207 116 18446744073709551615 1 ; 207 116 207 117 18446744073709551615 1 } 208 1 208 2 18446744073709551615 6 u_char 210 1 210 7 4 14 process_packet 210 8 210 22 59 1 ( 210 22 210 23 59 5 const 210 23 210 28 18446744073709551615 6 struct 210 29 210 35 18446744073709551615 11 pcap_pkthdr 210 36 210 47 57 1 * 210 48 210 49 18446744073709551615 6 header 210 49 210 55 124 1 , 210 55 210 56 59 5 const 210 57 210 62 18446744073709551615 6 u_char 210 63 210 69 4 1 * 210 70 210 71 18446744073709551615 6 buffer 210 71 210 77 125 1 ) 210 77 210 78 59 1 { 210 79 210 80 18446744073709551615 5 const 211 3 211 8 18446744073709551615 6 struct 211 9 211 15 18446744073709551615 12 sniff_802_11 211 16 211 28 3 1 * 211 29 211 30 18446744073709551615 10 hdr_802_11 211 30 211 40 126 1 ; 211 40 211 41 18446744073709551615 10 hdr_802_11 212 3 212 13 126 1 = 212 14 212 15 18446744073709551615 1 ( 212 16 212 17 18446744073709551615 6 struct 212 17 212 23 18446744073709551615 12 sniff_802_11 212 24 212 36 3 1 * 212 37 212 38 18446744073709551615 1 ) 212 38 212 39 18446744073709551615 1 ( 212 39 212 40 18446744073709551615 6 buffer 212 40 212 46 125 1 + 212 47 212 48 18446744073709551615 16 PRISM_HEADER_LEN 212 49 212 65 18446744073709551615 1 ) 212 65 212 66 18446744073709551615 1 ; 212 66 212 67 18446744073709551615 3 int 213 3 213 6 18446744073709551615 8 qos_type 213 7 213 15 127 1 = 213 16 213 17 18446744073709551615 16 TAKE_N_BITS_FROM 213 18 213 34 127 1 ( 213 34 213 35 18446744073709551615 10 hdr_802_11 213 35 213 45 18446744073709551615 2 -> 213 45 213 47 18446744073709551615 13 frame_control 213 47 213 60 18446744073709551615 1 [ 213 60 213 61 18446744073709551615 1 0 213 61 213 62 18446744073709551615 1 ] 213 62 213 63 18446744073709551615 1 , 213 63 213 64 18446744073709551615 1 2 213 65 213 66 18446744073709551615 1 , 213 66 213 67 18446744073709551615 1 2 213 68 213 69 18446744073709551615 1 ) 213 69 213 70 18446744073709551615 1 ; 213 70 213 71 18446744073709551615 3 int 214 3 214 6 18446744073709551615 16 packet_direction 214 7 214 23 128 1 = 214 24 214 25 18446744073709551615 16 TAKE_N_BITS_FROM 214 26 214 42 128 1 ( 214 42 214 43 18446744073709551615 10 hdr_802_11 214 43 214 53 18446744073709551615 2 -> 214 53 214 55 18446744073709551615 13 frame_control 214 55 214 68 18446744073709551615 1 [ 214 68 214 69 18446744073709551615 1 1 214 69 214 70 18446744073709551615 1 ] 214 70 214 71 18446744073709551615 1 , 214 71 214 72 18446744073709551615 1 0 214 73 214 74 18446744073709551615 1 , 214 74 214 75 18446744073709551615 1 2 214 76 214 77 18446744073709551615 1 ) 214 77 214 78 18446744073709551615 1 ; 214 78 214 79 18446744073709551615 3 int 215 3 215 6 18446744073709551615 14 data_protected 215 7 215 21 129 1 = 215 22 215 23 18446744073709551615 16 TAKE_N_BITS_FROM 215 24 215 40 129 1 ( 215 40 215 41 18446744073709551615 10 hdr_802_11 215 41 215 51 18446744073709551615 2 -> 215 51 215 53 18446744073709551615 13 frame_control 215 53 215 66 18446744073709551615 1 [ 215 66 215 67 18446744073709551615 1 1 215 67 215 68 18446744073709551615 1 ] 215 68 215 69 18446744073709551615 1 , 215 69 215 70 18446744073709551615 1 6 215 71 215 72 18446744073709551615 1 , 215 72 215 73 18446744073709551615 1 1 215 74 215 75 18446744073709551615 1 ) 215 75 215 76 18446744073709551615 1 ; 215 76 215 77 18446744073709551615 6 struct 216 3 216 9 18446744073709551615 10 eapol_info 216 10 216 20 46 1 * 216 21 216 22 18446744073709551615 17 packet_eapol_info 216 22 216 39 130 1 = 216 40 216 41 18446744073709551615 4 NULL 216 42 216 46 130 1 ; 216 46 216 47 18446744073709551615 6 u_char 218 3 218 9 4 1 * 218 10 218 11 18446744073709551615 11 sta_address 218 11 218 22 131 1 ; 218 22 218 23 18446744073709551615 2 if 219 3 219 5 18446744073709551615 1 ( 219 5 219 6 18446744073709551615 16 packet_direction 219 6 219 22 128 2 == 219 23 219 25 18446744073709551615 1 2 219 26 219 27 18446744073709551615 1 ) 219 27 219 28 18446744073709551615 1 { 219 29 219 30 18446744073709551615 11 sta_address 220 5 220 16 131 1 = 220 17 220 18 18446744073709551615 10 hdr_802_11 220 19 220 29 126 2 -> 220 29 220 31 18446744073709551615 5 addr1 220 31 220 36 7 1 ; 220 36 220 37 18446744073709551615 1 } 221 3 221 4 18446744073709551615 4 else 222 3 222 7 18446744073709551615 2 if 222 8 222 10 18446744073709551615 1 ( 222 10 222 11 18446744073709551615 16 packet_direction 222 11 222 27 128 2 == 222 28 222 30 18446744073709551615 1 1 222 31 222 32 18446744073709551615 1 ) 222 32 222 33 18446744073709551615 1 { 222 34 222 35 18446744073709551615 11 sta_address 223 5 223 16 131 1 = 223 17 223 18 18446744073709551615 10 hdr_802_11 223 19 223 29 126 2 -> 223 29 223 31 18446744073709551615 5 addr2 223 31 223 36 8 1 ; 223 36 223 37 18446744073709551615 1 } 224 3 224 4 18446744073709551615 2 if 226 3 226 5 18446744073709551615 1 ( 226 5 226 6 18446744073709551615 8 qos_type 226 6 226 14 127 2 == 226 15 226 17 18446744073709551615 1 2 226 18 226 19 18446744073709551615 1 ) 226 19 226 20 18446744073709551615 1 { 226 21 226 22 18446744073709551615 2 if 227 5 227 7 18446744073709551615 1 ( 227 7 227 8 18446744073709551615 14 data_protected 227 8 227 22 129 1 ) 227 22 227 23 18446744073709551615 1 { 227 24 227 25 18446744073709551615 2 if 228 7 228 9 18446744073709551615 1 ( 228 9 228 10 18446744073709551615 11 hashmap_get 228 10 228 21 132 1 ( 228 21 228 22 132 3 map 228 22 228 25 55 1 , 228 25 228 26 132 12 mac_toString 228 27 228 39 60 1 ( 228 39 228 40 60 11 sta_address 228 40 228 51 131 1 ) 228 51 228 52 60 1 , 228 52 228 53 132 1 ( 228 54 228 55 18446744073709551615 4 void 228 55 228 59 18446744073709551615 1 * 228 60 228 61 18446744073709551615 1 * 228 61 228 62 18446744073709551615 1 ) 228 62 228 63 18446744073709551615 1 & 228 63 228 64 18446744073709551615 17 packet_eapol_info 228 64 228 81 130 1 ) 228 81 228 82 132 2 == 228 83 228 85 18446744073709551615 6 MAP_OK 228 86 228 92 18446744073709551615 2 && 228 93 228 95 18446744073709551615 17 packet_eapol_info 228 96 228 113 130 2 -> 228 113 228 115 18446744073709551615 6 status 228 115 228 121 51 2 == 228 122 228 124 18446744073709551615 7 SUCCESS 228 125 228 132 1 1 ) 228 132 228 133 18446744073709551615 1 { 228 134 228 135 18446744073709551615 6 printf 229 9 229 15 98 1 ( 229 15 229 16 98 30 "%d -> I'm going to decrypt: " 229 16 229 46 18446744073709551615 1 , 229 46 229 47 98 6 header 229 48 229 54 124 2 -> 229 54 229 56 18446744073709551615 6 caplen 229 56 229 62 133 1 ) 229 62 229 63 98 1 ; 229 63 229 64 18446744073709551615 3 for 230 9 230 12 18446744073709551615 1 ( 230 12 230 13 18446744073709551615 3 int 230 13 230 16 18446744073709551615 1 i 230 17 230 18 134 1 = 230 19 230 20 18446744073709551615 1 0 230 21 230 22 18446744073709551615 1 ; 230 22 230 23 18446744073709551615 1 i 230 24 230 25 134 1 < 230 26 230 27 18446744073709551615 2 32 230 28 230 30 18446744073709551615 1 ; 230 30 230 31 18446744073709551615 1 i 230 32 230 33 134 2 ++ 230 33 230 35 18446744073709551615 1 ) 230 35 230 36 18446744073709551615 1 { 230 37 230 38 18446744073709551615 6 printf 231 11 231 17 98 1 ( 231 17 231 18 98 6 "%02x" 231 18 231 24 18446744073709551615 1 , 231 24 231 25 98 17 packet_eapol_info 231 26 231 43 130 2 -> 231 43 231 45 18446744073709551615 6 ANonce 231 45 231 51 48 1 [ 231 51 231 52 18446744073709551615 1 i 231 52 231 53 134 1 ] 231 53 231 54 18446744073709551615 1 ) 231 54 231 55 98 1 ; 231 55 231 56 18446744073709551615 1 } 232 9 232 10 18446744073709551615 6 printf 233 9 233 15 98 1 ( 233 15 233 16 98 4 "\n" 233 16 233 20 18446744073709551615 1 ) 233 20 233 21 98 1 ; 233 21 233 22 18446744073709551615 1 } 234 7 234 8 18446744073709551615 4 else 235 7 235 11 18446744073709551615 1 { 235 12 235 13 18446744073709551615 26 //printf("Can't decrypt"); 236 9 236 35 18446744073709551615 1 } 237 7 237 8 18446744073709551615 1 } 238 5 238 6 18446744073709551615 4 else 239 5 239 9 18446744073709551615 1 { 239 10 239 11 18446744073709551615 5 const 240 7 240 12 18446744073709551615 6 struct 240 13 240 19 18446744073709551615 9 sniff_LLC 240 20 240 29 19 1 * 240 30 240 31 18446744073709551615 7 hdr_llc 240 31 240 38 135 1 ; 240 38 240 39 18446744073709551615 7 hdr_llc 241 7 241 14 135 1 = 241 15 241 16 18446744073709551615 1 ( 241 17 241 18 18446744073709551615 6 struct 241 18 241 24 18446744073709551615 9 sniff_LLC 241 25 241 34 19 1 * 241 35 241 36 18446744073709551615 1 ) 241 36 241 37 18446744073709551615 1 ( 241 37 241 38 18446744073709551615 6 buffer 241 38 241 44 125 1 + 241 45 241 46 18446744073709551615 16 PRISM_HEADER_LEN 241 47 241 63 18446744073709551615 1 + 241 64 241 65 18446744073709551615 6 sizeof 241 66 241 72 18446744073709551615 1 ( 241 72 241 73 18446744073709551615 6 struct 241 73 241 79 18446744073709551615 12 sniff_802_11 241 80 241 92 3 1 ) 241 92 241 93 18446744073709551615 1 ) 241 93 241 94 18446744073709551615 1 ; 241 94 241 95 18446744073709551615 2 if 242 7 242 9 18446744073709551615 1 ( 242 9 242 10 18446744073709551615 7 hdr_llc 242 10 242 17 135 2 -> 242 17 242 19 18446744073709551615 4 dsap 242 19 242 23 20 2 == 242 24 242 26 18446744073709551615 4 0xaa 242 27 242 31 18446744073709551615 1 ) 242 31 242 32 18446744073709551615 1 { 242 33 242 34 18446744073709551615 5 const 243 9 243 14 18446744073709551615 6 struct 243 15 243 21 18446744073709551615 10 sniff_SNAP 243 22 243 32 23 1 * 243 33 243 34 18446744073709551615 8 hdr_snap 243 34 243 42 136 1 ; 243 42 243 43 18446744073709551615 8 hdr_snap 244 9 244 17 136 1 = 244 18 244 19 18446744073709551615 1 ( 244 20 244 21 18446744073709551615 6 struct 244 21 244 27 18446744073709551615 10 sniff_SNAP 244 28 244 38 23 1 * 244 39 244 40 18446744073709551615 1 ) 244 40 244 41 18446744073709551615 1 ( 244 41 244 42 18446744073709551615 6 buffer 244 42 244 48 125 1 + 244 49 244 50 18446744073709551615 16 PRISM_HEADER_LEN 244 51 244 67 18446744073709551615 1 + 244 68 244 69 18446744073709551615 6 sizeof 244 70 244 76 18446744073709551615 1 ( 244 76 244 77 18446744073709551615 6 struct 244 77 244 83 18446744073709551615 12 sniff_802_11 244 84 244 96 3 1 ) 244 96 244 97 18446744073709551615 1 + 244 98 244 99 18446744073709551615 6 sizeof 244 100 244 106 18446744073709551615 1 ( 244 106 244 107 18446744073709551615 6 struct 244 107 244 113 18446744073709551615 9 sniff_LLC 244 114 244 123 19 1 ) 244 123 244 124 18446744073709551615 1 ) 244 124 244 125 18446744073709551615 1 ; 244 125 244 126 18446744073709551615 6 u_char 245 9 245 15 4 11 ether_eapol 245 16 245 27 137 1 [ 245 27 245 28 18446744073709551615 1 ] 245 28 245 29 18446744073709551615 1 = 245 30 245 31 18446744073709551615 1 { 245 32 245 33 18446744073709551615 4 0x88 245 33 245 37 18446744073709551615 1 , 245 37 245 38 18446744073709551615 4 0x8e 245 39 245 43 18446744073709551615 1 } 245 43 245 44 18446744073709551615 1 ; 245 44 245 45 18446744073709551615 2 if 246 9 246 11 18446744073709551615 1 ( 246 11 246 12 18446744073709551615 6 memcmp 246 12 246 18 138 1 ( 246 18 246 19 138 8 hdr_snap 246 19 246 27 136 2 -> 246 27 246 29 18446744073709551615 4 type 246 29 246 33 25 1 , 246 33 246 34 138 11 ether_eapol 246 35 246 46 137 1 , 246 46 246 47 138 1 2 246 48 246 49 18446744073709551615 1 ) 246 49 246 50 138 2 == 246 51 246 53 18446744073709551615 1 0 246 54 246 55 18446744073709551615 1 ) 246 55 246 56 18446744073709551615 1 { 246 57 246 58 18446744073709551615 5 const 247 11 247 16 18446744073709551615 6 struct 247 17 247 23 18446744073709551615 17 sniff_802_1x_auth 247 24 247 41 26 1 * 247 42 247 43 18446744073709551615 10 hdr_802_1x 247 43 247 53 139 1 ; 247 53 247 54 18446744073709551615 10 hdr_802_1x 248 11 248 21 139 1 = 248 22 248 23 18446744073709551615 1 ( 248 24 248 25 18446744073709551615 6 struct 248 25 248 31 18446744073709551615 17 sniff_802_1x_auth 248 32 248 49 26 1 * 248 50 248 51 18446744073709551615 1 ) 248 51 248 52 18446744073709551615 1 ( 248 52 248 53 18446744073709551615 6 buffer 248 53 248 59 125 1 + 248 60 248 61 18446744073709551615 16 PRISM_HEADER_LEN 248 62 248 78 18446744073709551615 1 + 248 79 248 80 18446744073709551615 6 sizeof 248 81 248 87 18446744073709551615 1 ( 248 87 248 88 18446744073709551615 6 struct 248 88 248 94 18446744073709551615 12 sniff_802_11 248 95 248 107 3 1 ) 248 107 248 108 18446744073709551615 1 + 248 109 248 110 18446744073709551615 6 sizeof 248 111 248 117 18446744073709551615 1 ( 248 117 248 118 18446744073709551615 6 struct 248 118 248 124 18446744073709551615 9 sniff_LLC 248 125 248 134 19 1 ) 248 134 248 135 18446744073709551615 1 + 248 136 248 137 18446744073709551615 6 sizeof 248 138 248 144 18446744073709551615 1 ( 248 144 248 145 18446744073709551615 6 struct 248 145 248 151 18446744073709551615 10 sniff_SNAP 248 152 248 162 23 1 ) 248 162 248 163 18446744073709551615 1 ) 248 163 248 164 18446744073709551615 1 ; 248 164 248 165 18446744073709551615 2 if 249 11 249 13 18446744073709551615 1 ( 249 13 249 14 18446744073709551615 11 hashmap_get 249 14 249 25 132 1 ( 249 25 249 26 132 3 map 249 26 249 29 55 1 , 249 29 249 30 132 12 mac_toString 249 31 249 43 60 1 ( 249 43 249 44 60 11 sta_address 249 44 249 55 131 1 ) 249 55 249 56 60 1 , 249 56 249 57 132 1 ( 249 58 249 59 18446744073709551615 4 void 249 59 249 63 18446744073709551615 1 * 249 64 249 65 18446744073709551615 1 * 249 65 249 66 18446744073709551615 1 ) 249 66 249 67 18446744073709551615 1 & 249 67 249 68 18446744073709551615 17 packet_eapol_info 249 68 249 85 130 1 ) 249 85 249 86 132 2 == 249 87 249 89 18446744073709551615 11 MAP_MISSING 249 90 249 101 18446744073709551615 1 ) 249 101 249 102 18446744073709551615 1 { 249 103 249 104 18446744073709551615 2 if 250 13 250 15 18446744073709551615 1 ( 250 15 250 16 18446744073709551615 16 packet_direction 250 16 250 32 128 2 == 250 33 250 35 18446744073709551615 1 2 250 36 250 37 18446744073709551615 1 ) 250 37 250 38 18446744073709551615 1 { 250 39 250 40 18446744073709551615 6 struct 251 15 251 21 18446744073709551615 10 eapol_info 251 22 251 32 46 1 * 251 33 251 34 18446744073709551615 21 new_packet_eapol_info 251 34 251 55 140 1 = 251 56 251 57 18446744073709551615 6 malloc 251 58 251 64 94 1 ( 251 64 251 65 94 6 sizeof 251 65 251 71 18446744073709551615 1 ( 251 71 251 72 18446744073709551615 6 struct 251 72 251 78 18446744073709551615 10 eapol_info 251 79 251 89 46 1 ) 251 89 251 90 18446744073709551615 1 ) 251 90 251 91 94 1 ; 251 91 251 92 18446744073709551615 11 hashmap_put 252 15 252 26 141 1 ( 252 26 252 27 141 3 map 252 27 252 30 55 1 , 252 30 252 31 141 12 mac_toString 252 32 252 44 60 1 ( 252 44 252 45 60 11 sta_address 252 45 252 56 131 1 ) 252 56 252 57 60 1 , 252 57 252 58 141 21 new_packet_eapol_info 252 59 252 80 140 1 ) 252 80 252 81 141 1 ; 252 81 252 82 18446744073709551615 6 memcpy 253 15 253 21 118 1 ( 253 21 253 22 118 21 new_packet_eapol_info 253 22 253 43 140 2 -> 253 43 253 45 18446744073709551615 6 ANonce 253 45 253 51 48 1 , 253 51 253 52 118 10 hdr_802_1x 253 53 253 63 139 2 -> 253 63 253 65 18446744073709551615 13 wpa_key_nonce 253 65 253 78 34 1 , 253 78 253 79 118 2 32 253 80 253 82 18446744073709551615 1 ) 253 82 253 83 118 1 ; 253 83 253 84 18446744073709551615 21 new_packet_eapol_info 254 15 254 36 140 2 -> 254 36 254 38 18446744073709551615 6 status 254 38 254 44 51 1 = 254 45 254 46 18446744073709551615 7 SUCCESS 254 47 254 54 1 1 ; 254 54 254 55 18446744073709551615 1 } 255 13 255 14 18446744073709551615 1 } 256 11 256 12 18446744073709551615 1 } 257 9 257 10 18446744073709551615 1 } 258 7 258 8 18446744073709551615 1 } 259 5 259 6 18446744073709551615 1 } 260 3 260 4 18446744073709551615 6 return 261 3 261 9 18446744073709551615 1 1 261 10 261 11 18446744073709551615 1 ; 261 11 261 12 18446744073709551615 1 } 262 1 262 2 18446744073709551615 4 char 265 1 265 5 18446744073709551615 1 * 265 6 265 7 60 12 mac_toString 265 7 265 19 60 1 ( 265 19 265 20 60 6 u_char 265 20 265 26 4 1 * 265 27 265 28 18446744073709551615 4 addr 265 28 265 32 142 1 ) 265 32 265 33 60 1 { 265 34 265 35 18446744073709551615 6 static 266 3 266 9 18446744073709551615 4 char 266 10 266 14 18446744073709551615 3 str 266 15 266 18 143 1 [ 266 18 266 19 18446744073709551615 2 18 266 19 266 21 18446744073709551615 1 ] 266 21 266 22 18446744073709551615 1 ; 266 22 266 23 18446744073709551615 2 if 267 3 267 5 18446744073709551615 1 ( 267 5 267 6 18446744073709551615 4 addr 267 6 267 10 142 2 == 267 11 267 13 18446744073709551615 4 NULL 267 14 267 18 18446744073709551615 1 ) 267 18 267 19 18446744073709551615 6 return 268 5 268 11 18446744073709551615 2 "" 268 12 268 14 18446744073709551615 1 ; 268 14 268 15 18446744073709551615 8 snprintf 269 3 269 11 144 1 ( 269 11 269 12 144 3 str 269 12 269 15 143 1 , 269 15 269 16 144 6 sizeof 269 17 269 23 18446744073709551615 1 ( 269 23 269 24 18446744073709551615 3 str 269 24 269 27 143 1 ) 269 27 269 28 18446744073709551615 1 , 269 28 269 29 144 31 "%02x:%02x:%02x:%02x:%02x:%02x" 269 30 269 61 18446744073709551615 1 , 269 61 269 62 144 4 addr 270 12 270 16 142 1 [ 270 16 270 17 18446744073709551615 1 0 270 17 270 18 18446744073709551615 1 ] 270 18 270 19 18446744073709551615 1 , 270 19 270 20 144 4 addr 270 21 270 25 142 1 [ 270 25 270 26 18446744073709551615 1 1 270 26 270 27 18446744073709551615 1 ] 270 27 270 28 18446744073709551615 1 , 270 28 270 29 144 4 addr 270 30 270 34 142 1 [ 270 34 270 35 18446744073709551615 1 2 270 35 270 36 18446744073709551615 1 ] 270 36 270 37 18446744073709551615 1 , 270 37 270 38 144 4 addr 270 39 270 43 142 1 [ 270 43 270 44 18446744073709551615 1 3 270 44 270 45 18446744073709551615 1 ] 270 45 270 46 18446744073709551615 1 , 270 46 270 47 144 4 addr 270 48 270 52 142 1 [ 270 52 270 53 18446744073709551615 1 4 270 53 270 54 18446744073709551615 1 ] 270 54 270 55 18446744073709551615 1 , 270 55 270 56 144 4 addr 270 57 270 61 142 1 [ 270 61 270 62 18446744073709551615 1 5 270 62 270 63 18446744073709551615 1 ] 270 63 270 64 18446744073709551615 1 ) 270 64 270 65 144 1 ; 270 65 270 66 18446744073709551615 6 return 271 3 271 9 18446744073709551615 3 str 271 10 271 13 143 1 ; 271 13 271 14 18446744073709551615 1 } 272 1 272 2 18446744073709551615 6 u_char 274 1 274 7 4 1 * 274 8 274 9 61 6 PRF512 274 9 274 15 61 1 ( 274 15 274 16 61 6 u_char 274 16 274 22 4 1 * 274 23 274 24 18446744073709551615 3 PMK 274 24 274 27 145 1 , 274 27 274 28 61 6 u_char 274 29 274 35 4 1 * 274 36 274 37 18446744073709551615 1 A 274 37 274 38 146 1 , 274 38 274 39 61 6 size_t 274 40 274 46 62 4 lenA 274 47 274 51 147 1 , 274 51 274 52 61 6 u_char 274 53 274 59 4 1 * 274 60 274 61 18446744073709551615 7 AP_addr 274 61 274 68 148 1 , 274 68 274 69 61 6 u_char 274 70 274 76 4 1 * 274 77 274 78 18446744073709551615 8 STA_addr 274 78 274 86 149 1 , 274 86 274 87 61 6 u_char 274 88 274 94 4 1 * 274 95 274 96 18446744073709551615 6 ANonce 274 96 274 102 150 1 , 274 102 274 103 61 6 u_char 274 104 274 110 4 1 * 274 111 274 112 18446744073709551615 6 SNonce 274 112 274 118 151 1 ) 274 118 274 119 61 1 { 274 120 274 121 18446744073709551615 6 static 275 3 275 9 18446744073709551615 6 u_char 275 10 275 16 4 3 ptk 275 17 275 20 152 1 [ 275 20 275 21 18446744073709551615 2 64 275 21 275 23 18446744073709551615 1 ] 275 23 275 24 18446744073709551615 1 ; 275 24 275 25 18446744073709551615 6 u_char 276 3 276 9 4 1 B 276 10 276 11 153 1 [ 276 11 276 12 18446744073709551615 2 76 276 12 276 14 18446744073709551615 1 ] 276 14 276 15 18446744073709551615 1 ; 276 15 276 16 18446744073709551615 3 int 277 3 277 6 18446744073709551615 1 i 277 7 277 8 154 1 = 277 9 277 10 18446744073709551615 1 0 277 11 277 12 18446744073709551615 1 ; 277 12 277 13 18446744073709551615 6 u_char 278 3 278 9 4 1 c 278 10 278 11 155 1 = 278 12 278 13 18446744073709551615 4 0x00 278 14 278 18 18446744073709551615 1 ; 278 18 278 19 18446744073709551615 6 u_char 279 3 279 9 4 3 arg 279 10 279 13 156 1 [ 279 13 279 14 18446744073709551615 2 76 279 14 279 16 18446744073709551615 1 + 279 17 279 18 18446744073709551615 4 lenA 279 19 279 23 147 1 + 279 24 279 25 18446744073709551615 1 2 279 26 279 27 18446744073709551615 1 ] 279 27 279 28 18446744073709551615 1 ; 279 28 279 29 18446744073709551615 2 if 281 3 281 5 18446744073709551615 1 ( 281 5 281 6 18446744073709551615 6 strcmp 281 6 281 12 119 1 ( 281 12 281 13 119 7 AP_addr 281 13 281 20 148 1 , 281 20 281 21 119 8 STA_addr 281 22 281 30 149 1 ) 281 30 281 31 119 1 < 281 32 281 33 18446744073709551615 1 0 281 34 281 35 18446744073709551615 1 ) 281 35 281 36 18446744073709551615 1 { 281 37 281 38 18446744073709551615 6 memcpy 282 5 282 11 118 1 ( 282 11 282 12 118 1 B 282 12 282 13 153 1 , 282 13 282 14 118 7 AP_addr 282 15 282 22 148 1 , 282 22 282 23 118 12 MAC_ADDR_LEN 282 24 282 36 118 1 ) 282 36 282 37 118 1 ; 282 37 282 38 18446744073709551615 6 memcpy 283 5 283 11 118 1 ( 283 11 283 12 118 1 B 283 12 283 13 153 1 + 283 14 283 15 18446744073709551615 12 MAC_ADDR_LEN 283 16 283 28 18446744073709551615 1 , 283 28 283 29 118 8 STA_addr 283 30 283 38 149 1 , 283 38 283 39 118 12 MAC_ADDR_LEN 283 40 283 52 118 1 ) 283 52 283 53 118 1 ; 283 53 283 54 18446744073709551615 1 } 284 3 284 4 18446744073709551615 4 else 285 3 285 7 18446744073709551615 1 { 285 8 285 9 18446744073709551615 6 memcpy 286 5 286 11 118 1 ( 286 11 286 12 118 1 B 286 12 286 13 153 1 , 286 13 286 14 118 8 STA_addr 286 15 286 23 149 1 , 286 23 286 24 118 12 MAC_ADDR_LEN 286 25 286 37 118 1 ) 286 37 286 38 118 1 ; 286 38 286 39 18446744073709551615 6 memcpy 287 5 287 11 118 1 ( 287 11 287 12 118 1 B 287 12 287 13 153 1 + 287 14 287 15 18446744073709551615 12 MAC_ADDR_LEN 287 16 287 28 18446744073709551615 1 , 287 28 287 29 118 7 AP_addr 287 30 287 37 148 1 , 287 37 287 38 118 12 MAC_ADDR_LEN 287 39 287 51 118 1 ) 287 51 287 52 118 1 ; 287 52 287 53 18446744073709551615 1 } 288 3 288 4 18446744073709551615 2 if 289 3 289 5 18446744073709551615 1 ( 289 5 289 6 18446744073709551615 6 strcmp 289 6 289 12 119 1 ( 289 12 289 13 119 6 ANonce 289 13 289 19 150 1 , 289 19 289 20 119 6 SNonce 289 21 289 27 151 1 ) 289 27 289 28 119 1 < 289 29 289 30 18446744073709551615 1 0 289 31 289 32 18446744073709551615 1 ) 289 32 289 33 18446744073709551615 1 { 289 34 289 35 18446744073709551615 6 memcpy 290 5 290 11 118 1 ( 290 11 290 12 118 1 B 290 12 290 13 153 1 + 290 14 290 15 18446744073709551615 1 2 290 16 290 17 18446744073709551615 1 * 290 18 290 19 18446744073709551615 12 MAC_ADDR_LEN 290 20 290 32 18446744073709551615 1 , 290 32 290 33 118 6 ANonce 290 34 290 40 150 1 , 290 40 290 41 118 2 32 290 42 290 44 18446744073709551615 1 ) 290 44 290 45 118 1 ; 290 45 290 46 18446744073709551615 6 memcpy 291 5 291 11 118 1 ( 291 11 291 12 118 1 B 291 12 291 13 153 1 + 291 14 291 15 18446744073709551615 1 2 291 16 291 17 18446744073709551615 1 * 291 18 291 19 18446744073709551615 12 MAC_ADDR_LEN 291 20 291 32 18446744073709551615 1 + 291 33 291 34 18446744073709551615 2 32 291 35 291 37 18446744073709551615 1 , 291 37 291 38 118 6 SNonce 291 39 291 45 151 1 , 291 45 291 46 118 2 32 291 47 291 49 18446744073709551615 1 ) 291 49 291 50 118 1 ; 291 50 291 51 18446744073709551615 1 } 292 3 292 4 18446744073709551615 4 else 293 3 293 7 18446744073709551615 1 { 293 8 293 9 18446744073709551615 6 memcpy 294 5 294 11 118 1 ( 294 11 294 12 118 1 B 294 12 294 13 153 1 + 294 14 294 15 18446744073709551615 1 2 294 16 294 17 18446744073709551615 1 * 294 18 294 19 18446744073709551615 12 MAC_ADDR_LEN 294 20 294 32 18446744073709551615 1 , 294 32 294 33 118 6 SNonce 294 34 294 40 151 1 , 294 40 294 41 118 2 32 294 42 294 44 18446744073709551615 1 ) 294 44 294 45 118 1 ; 294 45 294 46 18446744073709551615 6 memcpy 295 5 295 11 118 1 ( 295 11 295 12 118 1 B 295 12 295 13 153 1 + 295 14 295 15 18446744073709551615 1 2 295 16 295 17 18446744073709551615 1 * 295 18 295 19 18446744073709551615 12 MAC_ADDR_LEN 295 20 295 32 18446744073709551615 1 + 295 33 295 34 18446744073709551615 2 32 295 35 295 37 18446744073709551615 1 , 295 37 295 38 118 6 ANonce 295 39 295 45 150 1 , 295 45 295 46 118 2 32 295 47 295 49 18446744073709551615 1 ) 295 49 295 50 118 1 ; 295 50 295 51 18446744073709551615 1 } 296 3 296 4 18446744073709551615 6 memcpy 298 3 298 9 118 1 ( 298 9 298 10 118 3 arg 298 10 298 13 156 1 , 298 13 298 14 118 1 A 298 15 298 16 146 1 , 298 16 298 17 118 4 lenA 298 18 298 22 147 1 ) 298 22 298 23 118 1 ; 298 23 298 24 18446744073709551615 3 arg 299 3 299 6 156 1 [ 299 6 299 7 18446744073709551615 4 lenA 299 7 299 11 147 1 ] 299 11 299 12 18446744073709551615 1 = 299 13 299 14 18446744073709551615 1 c 299 15 299 16 155 1 ; 299 16 299 17 18446744073709551615 6 memcpy 300 3 300 9 118 1 ( 300 9 300 10 118 3 arg 300 10 300 13 156 1 + 300 14 300 15 18446744073709551615 4 lenA 300 16 300 20 147 1 + 300 21 300 22 18446744073709551615 1 1 300 23 300 24 18446744073709551615 1 , 300 24 300 25 118 1 B 300 26 300 27 153 1 , 300 27 300 28 118 2 76 300 29 300 31 18446744073709551615 1 ) 300 31 300 32 118 1 ; 300 32 300 33 18446744073709551615 6 printf 301 3 301 9 98 1 ( 301 9 301 10 98 4 "\n" 301 10 301 14 18446744073709551615 1 ) 301 14 301 15 98 1 ; 301 15 301 16 18446744073709551615 6 u_char 302 3 302 9 4 13 hmac_sha1_res 302 10 302 23 157 1 [ 302 23 302 24 18446744073709551615 2 20 302 24 302 26 18446744073709551615 1 ] 302 26 302 27 18446744073709551615 1 ; 302 27 302 28 18446744073709551615 6 u_char 303 3 303 9 4 1 R 303 10 303 11 158 1 [ 303 11 303 12 18446744073709551615 1 ( 303 12 303 13 18446744073709551615 1 ( 303 13 303 14 18446744073709551615 3 512 303 14 303 17 18446744073709551615 1 + 303 18 303 19 18446744073709551615 3 159 303 20 303 23 18446744073709551615 1 ) 303 23 303 24 18446744073709551615 1 / 303 25 303 26 18446744073709551615 3 160 303 27 303 30 18446744073709551615 1 ) 303 30 303 31 18446744073709551615 1 * 303 32 303 33 18446744073709551615 2 20 303 34 303 36 18446744073709551615 1 ] 303 36 303 37 18446744073709551615 1 ; 303 37 303 38 18446744073709551615 5 u_int 304 3 304 8 159 10 sha_length 304 9 304 19 160 1 = 304 20 304 21 18446744073709551615 2 20 304 22 304 24 18446744073709551615 1 ; 304 24 304 25 18446744073709551615 5 while 305 3 305 8 18446744073709551615 1 ( 305 8 305 9 18446744073709551615 1 i 305 9 305 10 154 2 <= 305 11 305 13 18446744073709551615 1 ( 305 14 305 15 18446744073709551615 1 ( 305 15 305 16 18446744073709551615 3 512 305 16 305 19 18446744073709551615 1 + 305 20 305 21 18446744073709551615 3 159 305 22 305 25 18446744073709551615 1 ) 305 25 305 26 18446744073709551615 1 / 305 27 305 28 18446744073709551615 3 160 305 29 305 32 18446744073709551615 1 ) 305 32 305 33 18446744073709551615 1 ) 305 33 305 34 18446744073709551615 1 { 305 35 305 36 18446744073709551615 3 arg 306 5 306 8 156 1 [ 306 8 306 9 18446744073709551615 2 76 306 9 306 11 18446744073709551615 1 + 306 12 306 13 18446744073709551615 4 lenA 306 14 306 18 147 1 + 306 19 306 20 18446744073709551615 1 1 306 21 306 22 18446744073709551615 1 ] 306 22 306 23 18446744073709551615 1 = 306 24 306 25 18446744073709551615 4 0x00 306 26 306 30 18446744073709551615 1 + 306 31 306 32 18446744073709551615 1 i 306 33 306 34 154 1 ; 306 34 306 35 18446744073709551615 4 HMAC 307 5 307 9 95 1 ( 307 9 307 10 95 8 EVP_sha1 307 10 307 18 161 1 ( 307 18 307 19 161 1 ) 307 19 307 20 161 1 , 307 20 307 21 95 3 PMK 307 22 307 25 145 1 , 307 25 307 26 95 2 32 307 27 307 29 18446744073709551615 1 , 307 29 307 30 95 3 arg 307 31 307 34 156 1 , 307 34 307 35 95 2 76 307 36 307 38 18446744073709551615 1 + 307 39 307 40 18446744073709551615 4 lenA 307 41 307 45 147 1 + 307 46 307 47 18446744073709551615 1 2 307 48 307 49 18446744073709551615 1 , 307 49 307 50 95 13 hmac_sha1_res 307 51 307 64 157 1 , 307 64 307 65 95 1 & 307 66 307 67 18446744073709551615 10 sha_length 307 67 307 77 160 1 ) 307 77 307 78 95 1 ; 307 78 307 79 18446744073709551615 6 memcpy 308 5 308 11 118 1 ( 308 11 308 12 118 1 R 308 12 308 13 158 1 + 308 14 308 15 18446744073709551615 1 i 308 16 308 17 154 1 * 308 18 308 19 18446744073709551615 2 20 308 20 308 22 18446744073709551615 1 , 308 22 308 23 118 13 hmac_sha1_res 308 24 308 37 157 1 , 308 37 308 38 118 2 20 308 39 308 41 18446744073709551615 1 ) 308 41 308 42 118 1 ; 308 42 308 43 18446744073709551615 1 i 309 5 309 6 154 2 ++ 309 6 309 8 18446744073709551615 1 ; 309 8 309 9 18446744073709551615 1 } 310 3 310 4 18446744073709551615 6 memcpy 311 3 311 9 118 1 ( 311 9 311 10 118 3 ptk 311 10 311 13 152 1 , 311 13 311 14 118 1 R 311 15 311 16 158 1 , 311 16 311 17 118 2 64 311 18 311 20 18446744073709551615 1 ) 311 20 311 21 118 1 ; 311 21 311 22 18446744073709551615 6 return 312 3 312 9 18446744073709551615 3 ptk 312 10 312 13 152 1 ; 312 13 312 14 18446744073709551615 1 } 313 1 313 2 18446744073709551615 6 u_char 315 1 315 7 4 1 * 315 8 315 9 63 15 hexstr_to_bytes 315 9 315 24 63 1 ( 315 24 315 25 63 6 u_char 315 25 315 31 4 1 * 315 32 315 33 18446744073709551615 6 hexstr 315 33 315 39 162 1 ) 315 39 315 40 63 1 { 315 41 315 42 18446744073709551615 6 size_t 316 3 316 9 62 3 len 316 10 316 13 163 1 = 316 14 316 15 18446744073709551615 6 strlen 316 16 316 22 83 1 ( 316 22 316 23 83 6 hexstr 316 23 316 29 162 1 ) 316 29 316 30 83 1 ; 316 30 316 31 18446744073709551615 2 if 317 3 317 5 18446744073709551615 1 ( 317 5 317 6 18446744073709551615 3 len 317 6 317 9 163 1 % 317 10 317 11 18446744073709551615 1 2 317 12 317 13 18446744073709551615 2 != 317 14 317 16 18446744073709551615 1 0 317 17 317 18 18446744073709551615 1 ) 317 18 317 19 18446744073709551615 6 return 318 5 318 11 18446744073709551615 4 NULL 318 12 318 16 18446744073709551615 1 ; 318 16 318 17 18446744073709551615 6 size_t 319 3 319 9 62 9 final_len 319 10 319 19 164 1 = 319 20 319 21 18446744073709551615 3 len 319 22 319 25 163 1 / 319 26 319 27 18446744073709551615 1 2 319 28 319 29 18446744073709551615 1 ; 319 29 319 30 18446744073709551615 8 unsigned 320 3 320 11 18446744073709551615 4 char 320 12 320 16 18446744073709551615 1 * 320 17 320 18 18446744073709551615 4 chrs 320 18 320 22 165 1 = 320 23 320 24 18446744073709551615 1 ( 320 25 320 26 18446744073709551615 8 unsigned 320 26 320 34 18446744073709551615 4 char 320 35 320 39 18446744073709551615 1 * 320 40 320 41 18446744073709551615 1 ) 320 41 320 42 18446744073709551615 6 malloc 320 42 320 48 94 1 ( 320 48 320 49 94 1 ( 320 49 320 50 18446744073709551615 9 final_len 320 50 320 59 164 1 ) 320 59 320 60 18446744073709551615 1 * 320 61 320 62 18446744073709551615 6 sizeof 320 63 320 69 18446744073709551615 1 ( 320 69 320 70 18446744073709551615 1 * 320 70 320 71 18446744073709551615 4 chrs 320 71 320 75 165 1 ) 320 75 320 76 18446744073709551615 1 ) 320 76 320 77 94 1 ; 320 77 320 78 18446744073709551615 3 for 321 3 321 6 18446744073709551615 1 ( 321 6 321 7 18446744073709551615 6 size_t 321 7 321 13 62 1 i 321 14 321 15 166 1 = 321 16 321 17 18446744073709551615 1 0 321 18 321 19 18446744073709551615 1 , 321 19 321 20 18446744073709551615 1 j 321 21 321 22 167 1 = 321 23 321 24 18446744073709551615 1 0 321 25 321 26 18446744073709551615 1 ; 321 26 321 27 18446744073709551615 1 j 321 28 321 29 167 1 < 321 30 321 31 18446744073709551615 9 final_len 321 32 321 41 164 1 ; 321 41 321 42 18446744073709551615 1 i 321 43 321 44 166 2 += 321 45 321 47 18446744073709551615 1 2 321 48 321 49 18446744073709551615 1 , 321 49 321 50 18446744073709551615 1 j 321 51 321 52 167 2 ++ 321 52 321 54 18446744073709551615 1 ) 321 54 321 55 18446744073709551615 4 chrs 322 5 322 9 165 1 [ 322 9 322 10 18446744073709551615 1 j 322 10 322 11 167 1 ] 322 11 322 12 18446744073709551615 1 = 322 13 322 14 18446744073709551615 1 ( 322 15 322 16 18446744073709551615 6 hexstr 322 16 322 22 162 1 [ 322 22 322 23 18446744073709551615 1 i 322 23 322 24 166 1 ] 322 24 322 25 18446744073709551615 1 % 322 26 322 27 18446744073709551615 2 32 322 28 322 30 18446744073709551615 1 + 322 31 322 32 18446744073709551615 1 9 322 33 322 34 18446744073709551615 1 ) 322 34 322 35 18446744073709551615 1 % 322 36 322 37 18446744073709551615 2 25 322 38 322 40 18446744073709551615 1 * 322 41 322 42 18446744073709551615 2 16 322 43 322 45 18446744073709551615 1 + 322 46 322 47 18446744073709551615 1 ( 322 48 322 49 18446744073709551615 6 hexstr 322 49 322 55 162 1 [ 322 55 322 56 18446744073709551615 1 i 322 56 322 57 166 1 + 322 58 322 59 18446744073709551615 1 1 322 60 322 61 18446744073709551615 1 ] 322 61 322 62 18446744073709551615 1 % 322 63 322 64 18446744073709551615 2 32 322 65 322 67 18446744073709551615 1 + 322 68 322 69 18446744073709551615 1 9 322 70 322 71 18446744073709551615 1 ) 322 71 322 72 18446744073709551615 1 % 322 73 322 74 18446744073709551615 2 25 322 75 322 77 18446744073709551615 1 ; 322 77 322 78 18446744073709551615 6 return 323 3 323 9 18446744073709551615 4 chrs 323 10 323 14 165 1 ; 323 14 323 15 18446744073709551615 1 } 324 1 324 2 18446744073709551615 0 0 168 0 0 0 7 0 0 1 3 0 8 WAITING: 7 1 3 0 8 SUCCESS: 20 1 3 0 12 eapol_status 2 1 3 0 12 sniff_802_11 20 1 3 0 6 u_char 6 1 3 0 26 frame_control:sniff_802_11 6 1 3 0 24 duration_id:sniff_802_11 6 1 3 0 18 addr1:sniff_802_11 6 1 3 0 18 addr2:sniff_802_11 6 1 3 0 18 addr3:sniff_802_11 6 1 3 0 29 sequence_control:sniff_802_11 6 1 3 0 24 qos_control:sniff_802_11 2 1 3 0 19 sniff_802_11_beacon 6 1 3 0 33 frame_control:sniff_802_11_beacon 6 1 3 0 31 duration_id:sniff_802_11_beacon 6 1 3 0 25 addr1:sniff_802_11_beacon 6 1 3 0 25 addr2:sniff_802_11_beacon 6 1 3 0 25 addr3:sniff_802_11_beacon 6 1 3 0 36 sequence_control:sniff_802_11_beacon 2 1 3 0 9 sniff_LLC 6 1 3 0 14 dsap:sniff_LLC 6 1 3 0 14 ssap:sniff_LLC 6 1 3 0 23 control_field:sniff_LLC 2 1 3 0 10 sniff_SNAP 6 1 3 0 19 org_code:sniff_SNAP 6 1 3 0 15 type:sniff_SNAP 2 1 3 0 17 sniff_802_1x_auth 6 1 3 0 25 version:sniff_802_1x_auth 6 1 3 0 22 type:sniff_802_1x_auth 6 1 3 0 24 length:sniff_802_1x_auth 6 1 3 0 37 key_descriptor_type:sniff_802_1x_auth 6 1 3 0 33 key_information:sniff_802_1x_auth 6 1 3 0 28 key_length:sniff_802_1x_auth 6 1 3 0 32 replay_counter:sniff_802_1x_auth 6 1 3 0 31 wpa_key_nonce:sniff_802_1x_auth 6 1 3 0 28 wpa_key_IV:sniff_802_1x_auth 6 1 3 0 29 wpa_key_RSC:sniff_802_1x_auth 6 1 3 0 28 wpa_key_ID:sniff_802_1x_auth 6 1 3 0 29 wpa_key_MIC:sniff_802_1x_auth 6 1 3 0 37 wpa_key_data_length:sniff_802_1x_auth 2 1 3 0 3 ptk 6 1 3 0 7 kck:ptk 6 1 3 0 7 kek:ptk 6 1 3 0 6 tk:ptk 6 1 3 0 7 txk:ptk 6 1 3 0 7 trk:ptk 2 1 3 0 10 eapol_info 6 1 3 0 26 sta_mac_address:eapol_info 6 1 3 0 17 ANonce:eapol_info 6 1 3 0 17 SNonce:eapol_info 6 1 3 0 14 PTK:eapol_info 6 1 3 0 17 status:eapol_info 9 1 3 0 14 ap_mac_address 9 1 3 0 4 ssid 20 1 3 0 5 map_t 9 1 3 0 3 map 8 1 3 0 14 process_beacon 2 1 3 0 11 pcap_pkthdr 8 1 3 0 13 process_eapol 8 1 3 0 14 process_packet 8 1 3 0 12 mac_toString 8 1 3 0 6 PRF512 20 1 3 0 6 size_t 8 1 3 0 15 hexstr_to_bytes 8 1 3 0 4 main 10 1 3 0 56 93:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 56 93:26:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_new 9 1 3 0 55 96:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 98:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 99:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 100:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 101:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 102:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 103:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 2 1 3 0 11 bpf_program 9 1 3 0 57 104:22:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 6 pcap_t 9 1 3 0 57 105:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 106:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 107:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 108:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 20 fastpbkdf2_hmac_sha1 8 1 3 0 6 strlen 9 1 3 0 57 113:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 116:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 117:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 118:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 119:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 120:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 121:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 123:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 125:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 126:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 malloc 8 1 3 0 4 HMAC 8 1 3 0 7 EVP_md5 9 1 3 0 57 128:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 printf 20 1 3 0 11 bpf_u_int32 9 1 3 0 57 133:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 134:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 14 pcap_lookupnet 8 1 3 0 7 fprintf 8 1 3 0 14 pcap_open_live 8 1 3 0 12 pcap_compile 8 1 3 0 11 pcap_geterr 8 1 3 0 14 pcap_setfilter 8 1 3 0 12 pcap_next_ex 8 1 3 0 8 asprintf 9 1 3 0 56 173:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 13 pcap_freecode 8 1 3 0 10 pcap_close 10 1 3 0 57 189:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 189:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 190:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 192:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 193:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memcpy 8 1 3 0 6 strcmp 10 1 3 0 57 203:48:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 203:70:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 204:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 206:35:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 210:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 210:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 211:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 213:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 214:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 215:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 216:22:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 218:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_get 6 1 3 0 18 caplen:pcap_pkthdr 9 1 3 0 57 230:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 240:31:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 243:34:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 245:16:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memcmp 9 1 3 0 57 247:43:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 251:34:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_put 10 1 3 0 57 265:28:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 266:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 8 snprintf 10 1 3 0 57 274:24:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 274:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 274:47:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 274:61:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 274:78:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 274:96:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 58 274:112:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 275:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 276:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 277:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 278:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 279:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 302:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 303:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 5 u_int 9 1 3 0 56 304:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 8 EVP_sha1 10 1 3 0 57 315:33:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 316:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 319:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 320:18:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 321:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 321:21:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 0 0 3 0 0 0 56 /home/florenzi/Documenti/juci_ws/wpa_decode/fastpbkdf2.h 1509296147 53 /home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 1262964973 50 /home/florenzi/Documenti/juci_ws/wpa_decode/main.c 1517136904