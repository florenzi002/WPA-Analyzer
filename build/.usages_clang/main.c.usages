22 serialization::archive 15 0 0 0 0 43 /home/florenzi/Documenti/juci_ws/wpa_decode 49 /home/florenzi/Documenti/juci_ws/wpa_decode/build 0 0 4073 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 14 "fastpbkdf2.h" 1 10 1 24 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 11 "hashmap.h" 2 10 2 21 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 7 openssl 3 11 3 18 18446744073709551615 1 / 3 18 3 19 18446744073709551615 3 aes 3 19 3 22 18446744073709551615 1 . 3 22 3 23 18446744073709551615 1 h 3 23 3 24 18446744073709551615 1 > 3 24 3 25 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 7 openssl 4 11 4 18 18446744073709551615 1 / 4 18 4 19 18446744073709551615 4 hmac 4 19 4 23 18446744073709551615 1 . 4 23 4 24 18446744073709551615 1 h 4 24 4 25 18446744073709551615 1 > 4 25 4 26 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 7 openssl 5 11 5 18 18446744073709551615 1 / 5 18 5 19 18446744073709551615 3 sha 5 19 5 22 18446744073709551615 1 . 5 22 5 23 18446744073709551615 1 h 5 23 5 24 18446744073709551615 1 > 5 24 5 25 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 1 < 6 10 6 11 18446744073709551615 4 pcap 6 11 6 15 18446744073709551615 1 . 6 15 6 16 18446744073709551615 1 h 6 16 6 17 18446744073709551615 1 > 6 17 6 18 18446744073709551615 1 # 7 1 7 2 18446744073709551615 7 include 7 2 7 9 18446744073709551615 1 < 7 10 7 11 18446744073709551615 5 stdio 7 11 7 16 18446744073709551615 1 . 7 16 7 17 18446744073709551615 1 h 7 17 7 18 18446744073709551615 1 > 7 18 7 19 18446744073709551615 1 # 8 1 8 2 18446744073709551615 7 include 8 2 8 9 18446744073709551615 1 < 8 10 8 11 18446744073709551615 6 stdlib 8 11 8 17 18446744073709551615 1 . 8 17 8 18 18446744073709551615 1 h 8 18 8 19 18446744073709551615 1 > 8 19 8 20 18446744073709551615 1 # 11 1 11 2 18446744073709551615 6 define 11 2 11 8 18446744073709551615 16 PRISM_HEADER_LEN 11 9 11 25 18446744073709551615 3 144 11 26 11 29 18446744073709551615 1 # 12 1 12 2 18446744073709551615 6 define 12 2 12 8 18446744073709551615 11 SSID_OFFSET 12 9 12 20 18446744073709551615 2 12 12 21 12 23 18446744073709551615 1 # 13 1 13 2 18446744073709551615 6 define 13 2 13 8 18446744073709551615 13 SIZE_ETHERNET 13 9 13 22 18446744073709551615 2 14 13 23 13 25 18446744073709551615 1 # 14 1 14 2 18446744073709551615 6 define 14 2 14 8 18446744073709551615 12 MAC_ADDR_LEN 14 9 14 21 18446744073709551615 1 6 14 22 14 23 18446744073709551615 1 # 15 1 15 2 18446744073709551615 6 define 15 2 15 8 18446744073709551615 7 LLC_LEN 15 9 15 16 18446744073709551615 1 8 15 17 15 18 18446744073709551615 1 # 16 1 16 2 18446744073709551615 6 define 16 2 16 8 18446744073709551615 16 TAKE_N_BITS_FROM 16 9 16 25 18446744073709551615 1 ( 16 25 16 26 18446744073709551615 1 b 16 26 16 27 18446744073709551615 1 , 16 27 16 28 18446744073709551615 1 p 16 29 16 30 18446744073709551615 1 , 16 30 16 31 18446744073709551615 1 n 16 32 16 33 18446744073709551615 1 ) 16 33 16 34 18446744073709551615 1 ( 16 35 16 36 18446744073709551615 1 ( 16 36 16 37 18446744073709551615 1 b 16 37 16 38 18446744073709551615 1 ) 16 38 16 39 18446744073709551615 2 >> 16 40 16 42 18446744073709551615 1 ( 16 43 16 44 18446744073709551615 1 p 16 44 16 45 18446744073709551615 1 ) 16 45 16 46 18446744073709551615 1 ) 16 46 16 47 18446744073709551615 1 & 16 48 16 49 18446744073709551615 1 ( 16 50 16 51 18446744073709551615 1 ( 16 51 16 52 18446744073709551615 1 1 16 52 16 53 18446744073709551615 2 << 16 54 16 56 18446744073709551615 1 ( 16 57 16 58 18446744073709551615 1 n 16 58 16 59 18446744073709551615 1 ) 16 59 16 60 18446744073709551615 1 ) 16 60 16 61 18446744073709551615 1 - 16 62 16 63 18446744073709551615 1 1 16 64 16 65 18446744073709551615 1 ) 16 65 16 66 18446744073709551615 1 # 17 1 17 2 18446744073709551615 6 define 17 2 17 8 18446744073709551615 13 IS_BIG_ENDIAN 17 9 17 22 18446744073709551615 1 ( 17 23 17 24 18446744073709551615 1 ! 17 24 17 25 18446744073709551615 1 * 17 25 17 26 18446744073709551615 1 ( 17 26 17 27 18446744073709551615 8 unsigned 17 27 17 35 18446744073709551615 4 char 17 36 17 40 18446744073709551615 1 * 17 41 17 42 18446744073709551615 1 ) 17 42 17 43 18446744073709551615 1 & 17 43 17 44 18446744073709551615 1 ( 17 44 17 45 18446744073709551615 8 uint16_t 17 45 17 53 18446744073709551615 1 ) 17 53 17 54 18446744073709551615 1 { 17 54 17 55 18446744073709551615 1 1 17 55 17 56 18446744073709551615 1 } 17 56 17 57 18446744073709551615 1 ) 17 57 17 58 18446744073709551615 3 int 19 1 19 4 18446744073709551615 11 SHA1_LENGTH 19 5 19 16 0 1 = 19 17 19 18 18446744073709551615 2 16 19 19 19 21 18446744073709551615 1 ; 19 21 19 22 18446744073709551615 5 const 20 1 20 6 18446744073709551615 4 char 20 7 20 11 18446744073709551615 1 A 20 12 20 13 1 1 [ 20 13 20 14 18446744073709551615 1 ] 20 14 20 15 18446744073709551615 1 = 20 16 20 17 18446744073709551615 24 "Pairwise key expansion" 20 18 20 42 18446744073709551615 1 ; 20 42 20 43 18446744073709551615 5 const 21 1 21 6 18446744073709551615 6 u_char 21 7 21 13 2 8 NULL_MIC 21 14 21 22 3 1 [ 21 22 21 23 18446744073709551615 2 16 21 23 21 25 18446744073709551615 1 ] 21 25 21 26 18446744073709551615 1 = 21 27 21 28 18446744073709551615 1 { 21 29 21 30 18446744073709551615 1 0 21 30 21 31 18446744073709551615 1 } 21 31 21 32 18446744073709551615 1 ; 21 32 21 33 18446744073709551615 7 typedef 23 1 23 8 18446744073709551615 4 enum 23 9 23 13 18446744073709551615 1 { 23 14 23 15 18446744073709551615 19 WAITING_EAPOL_KEY_2 23 16 23 35 4 1 , 23 35 23 36 18446744073709551615 19 WAITING_EAPOL_KEY_3 24 16 24 35 5 1 , 24 35 24 36 18446744073709551615 19 WAITING_EAPOL_KEY_4 25 16 25 35 6 1 , 25 35 25 36 18446744073709551615 7 SUCCESS 26 16 26 23 7 1 } 26 24 26 25 18446744073709551615 12 eapol_status 26 26 26 38 8 1 ; 26 38 26 39 18446744073709551615 23 /* 802.11 MAC header */ 28 1 28 24 18446744073709551615 6 struct 29 1 29 7 18446744073709551615 12 sniff_802_11 29 8 29 20 9 1 { 29 21 29 22 18446744073709551615 6 u_char 30 3 30 9 2 13 frame_control 30 10 30 23 10 1 [ 30 23 30 24 18446744073709551615 1 2 30 24 30 25 18446744073709551615 1 ] 30 25 30 26 18446744073709551615 1 ; 30 26 30 27 18446744073709551615 6 u_char 31 3 31 9 2 11 duration_id 31 10 31 21 11 1 [ 31 21 31 22 18446744073709551615 1 2 31 22 31 23 18446744073709551615 1 ] 31 23 31 24 18446744073709551615 1 ; 31 24 31 25 18446744073709551615 6 u_char 32 3 32 9 2 5 addr1 32 10 32 15 12 1 [ 32 15 32 16 18446744073709551615 12 MAC_ADDR_LEN 32 16 32 28 12 1 ] 32 28 32 29 18446744073709551615 1 ; 32 29 32 30 18446744073709551615 6 u_char 33 3 33 9 2 5 addr2 33 10 33 15 13 1 [ 33 15 33 16 18446744073709551615 12 MAC_ADDR_LEN 33 16 33 28 13 1 ] 33 28 33 29 18446744073709551615 1 ; 33 29 33 30 18446744073709551615 6 u_char 34 3 34 9 2 5 addr3 34 10 34 15 14 1 [ 34 15 34 16 18446744073709551615 12 MAC_ADDR_LEN 34 16 34 28 14 1 ] 34 28 34 29 18446744073709551615 1 ; 34 29 34 30 18446744073709551615 6 u_char 35 3 35 9 2 16 sequence_control 35 10 35 26 15 1 [ 35 26 35 27 18446744073709551615 1 2 35 27 35 28 18446744073709551615 1 ] 35 28 35 29 18446744073709551615 1 ; 35 29 35 30 18446744073709551615 6 u_char 36 3 36 9 2 11 qos_control 36 10 36 21 16 1 [ 36 21 36 22 18446744073709551615 1 2 36 22 36 23 18446744073709551615 1 ] 36 23 36 24 18446744073709551615 1 ; 36 24 36 25 18446744073709551615 1 } 37 1 37 2 18446744073709551615 1 ; 37 2 37 3 18446744073709551615 38 /* 802.11 MAC header of beacon msgs */ 39 1 39 39 18446744073709551615 6 struct 40 1 40 7 18446744073709551615 19 sniff_802_11_beacon 40 8 40 27 17 1 { 40 28 40 29 18446744073709551615 6 u_char 41 3 41 9 2 13 frame_control 41 10 41 23 18 1 [ 41 23 41 24 18446744073709551615 1 2 41 24 41 25 18446744073709551615 1 ] 41 25 41 26 18446744073709551615 1 ; 41 26 41 27 18446744073709551615 6 u_char 42 3 42 9 2 11 duration_id 42 10 42 21 19 1 [ 42 21 42 22 18446744073709551615 1 2 42 22 42 23 18446744073709551615 1 ] 42 23 42 24 18446744073709551615 1 ; 42 24 42 25 18446744073709551615 6 u_char 43 3 43 9 2 5 addr1 43 10 43 15 20 1 [ 43 15 43 16 18446744073709551615 12 MAC_ADDR_LEN 43 16 43 28 20 1 ] 43 28 43 29 18446744073709551615 1 ; 43 29 43 30 18446744073709551615 6 u_char 44 3 44 9 2 5 addr2 44 10 44 15 21 1 [ 44 15 44 16 18446744073709551615 12 MAC_ADDR_LEN 44 16 44 28 21 1 ] 44 28 44 29 18446744073709551615 1 ; 44 29 44 30 18446744073709551615 6 u_char 45 3 45 9 2 5 addr3 45 10 45 15 22 1 [ 45 15 45 16 18446744073709551615 12 MAC_ADDR_LEN 45 16 45 28 22 1 ] 45 28 45 29 18446744073709551615 1 ; 45 29 45 30 18446744073709551615 6 u_char 46 3 46 9 2 16 sequence_control 46 10 46 26 23 1 [ 46 26 46 27 18446744073709551615 1 2 46 27 46 28 18446744073709551615 1 ] 46 28 46 29 18446744073709551615 1 ; 46 29 46 30 18446744073709551615 1 } 47 1 47 2 18446744073709551615 1 ; 47 2 47 3 18446744073709551615 16 /* LLC header */ 49 1 49 17 18446744073709551615 6 struct 50 1 50 7 18446744073709551615 9 sniff_LLC 50 8 50 17 24 1 { 50 18 50 19 18446744073709551615 6 u_char 51 3 51 9 2 4 dsap 51 10 51 14 25 1 ; 51 14 51 15 18446744073709551615 6 u_char 52 3 52 9 2 4 ssap 52 10 52 14 26 1 ; 52 14 52 15 18446744073709551615 6 u_char 53 3 53 9 2 13 control_field 53 10 53 23 27 1 ; 53 23 53 24 18446744073709551615 1 } 54 1 54 2 18446744073709551615 1 ; 54 2 54 3 18446744073709551615 17 /* SNAP header */ 56 1 56 18 18446744073709551615 6 struct 57 1 57 7 18446744073709551615 10 sniff_SNAP 57 8 57 18 28 1 { 57 19 57 20 18446744073709551615 6 u_char 58 3 58 9 2 8 org_code 58 10 58 18 29 1 [ 58 18 58 19 18446744073709551615 1 3 58 19 58 20 18446744073709551615 1 ] 58 20 58 21 18446744073709551615 1 ; 58 21 58 22 18446744073709551615 6 u_char 59 3 59 9 2 4 type 59 10 59 14 30 1 [ 59 14 59 15 18446744073709551615 1 2 59 15 59 16 18446744073709551615 1 ] 59 16 59 17 18446744073709551615 1 ; 59 17 59 18 18446744073709551615 1 } 60 1 60 2 18446744073709551615 1 ; 60 2 60 3 18446744073709551615 34 /* 802.1x authentication header */ 62 1 62 35 18446744073709551615 6 struct 63 1 63 7 18446744073709551615 17 sniff_802_1x_auth 63 8 63 25 31 1 { 63 26 63 27 18446744073709551615 6 u_char 64 3 64 9 2 7 version 64 10 64 17 32 1 ; 64 17 64 18 18446744073709551615 6 u_char 65 3 65 9 2 4 type 65 10 65 14 33 1 ; 65 14 65 15 18446744073709551615 6 u_char 66 3 66 9 2 6 length 66 10 66 16 34 1 [ 66 16 66 17 18446744073709551615 1 2 66 17 66 18 18446744073709551615 1 ] 66 18 66 19 18446744073709551615 1 ; 66 19 66 20 18446744073709551615 6 u_char 67 3 67 9 2 19 key_descriptor_type 67 10 67 29 35 1 ; 67 29 67 30 18446744073709551615 6 u_char 68 3 68 9 2 15 key_information 68 10 68 25 36 1 [ 68 25 68 26 18446744073709551615 1 2 68 26 68 27 18446744073709551615 1 ] 68 27 68 28 18446744073709551615 1 ; 68 28 68 29 18446744073709551615 6 u_char 69 3 69 9 2 10 key_length 69 10 69 20 37 1 [ 69 20 69 21 18446744073709551615 1 2 69 21 69 22 18446744073709551615 1 ] 69 22 69 23 18446744073709551615 1 ; 69 23 69 24 18446744073709551615 6 u_char 70 3 70 9 2 14 replay_counter 70 10 70 24 38 1 [ 70 24 70 25 18446744073709551615 1 8 70 25 70 26 18446744073709551615 1 ] 70 26 70 27 18446744073709551615 1 ; 70 27 70 28 18446744073709551615 6 u_char 71 3 71 9 2 13 wpa_key_nonce 71 10 71 23 39 1 [ 71 23 71 24 18446744073709551615 2 32 71 24 71 26 18446744073709551615 1 ] 71 26 71 27 18446744073709551615 1 ; 71 27 71 28 18446744073709551615 6 u_char 72 3 72 9 2 10 wpa_key_IV 72 10 72 20 40 1 [ 72 20 72 21 18446744073709551615 2 16 72 21 72 23 18446744073709551615 1 ] 72 23 72 24 18446744073709551615 1 ; 72 24 72 25 18446744073709551615 6 u_char 73 3 73 9 2 11 wpa_key_RSC 73 10 73 21 41 1 [ 73 21 73 22 18446744073709551615 1 8 73 22 73 23 18446744073709551615 1 ] 73 23 73 24 18446744073709551615 1 ; 73 24 73 25 18446744073709551615 6 u_char 74 3 74 9 2 10 wpa_key_ID 74 10 74 20 42 1 [ 74 20 74 21 18446744073709551615 1 8 74 21 74 22 18446744073709551615 1 ] 74 22 74 23 18446744073709551615 1 ; 74 23 74 24 18446744073709551615 6 u_char 75 3 75 9 2 11 wpa_key_MIC 75 10 75 21 43 1 [ 75 21 75 22 18446744073709551615 2 16 75 22 75 24 18446744073709551615 1 ] 75 24 75 25 18446744073709551615 1 ; 75 25 75 26 18446744073709551615 6 u_char 76 3 76 9 2 19 wpa_key_data_length 76 10 76 29 44 1 [ 76 29 76 30 18446744073709551615 1 2 76 30 76 31 18446744073709551615 1 ] 76 31 76 32 18446744073709551615 1 ; 76 32 76 33 18446744073709551615 1 } 77 1 77 2 18446744073709551615 1 ; 77 2 77 3 18446744073709551615 15 /* IP header */ 79 1 79 16 18446744073709551615 6 struct 80 1 80 7 18446744073709551615 8 sniff_IP 80 8 80 16 45 1 { 80 17 80 18 18446744073709551615 6 u_char 81 3 81 9 2 5 ip_hl 81 10 81 15 46 1 : 81 16 81 17 18446744073709551615 1 4 81 18 81 19 18446744073709551615 1 , 81 19 81 20 18446744073709551615 4 ip_v 81 21 81 25 47 1 : 81 26 81 27 18446744073709551615 1 4 81 28 81 29 18446744073709551615 1 ; 81 29 81 30 18446744073709551615 6 u_char 82 3 82 9 2 6 ip_dss 82 10 82 16 48 1 ; 82 16 82 17 18446744073709551615 6 u_char 83 3 83 9 2 15 ip_total_length 83 10 83 25 49 1 [ 83 25 83 26 18446744073709551615 1 2 83 26 83 27 18446744073709551615 1 ] 83 27 83 28 18446744073709551615 1 ; 83 28 83 29 18446744073709551615 6 u_char 84 3 84 9 2 2 id 84 10 84 12 50 1 [ 84 12 84 13 18446744073709551615 1 2 84 13 84 14 18446744073709551615 1 ] 84 14 84 15 18446744073709551615 1 ; 84 15 84 16 18446744073709551615 6 u_char 85 3 85 9 2 5 flags 85 10 85 15 51 1 ; 85 15 85 16 18446744073709551615 6 u_char 86 3 86 9 2 15 fragment_offset 86 10 86 25 52 1 ; 86 25 86 26 18446744073709551615 6 u_char 87 3 87 9 2 3 ttl 87 10 87 13 53 1 ; 87 13 87 14 18446744073709551615 6 u_char 88 3 88 9 2 8 protocol 88 10 88 18 54 1 ; 88 18 88 19 18446744073709551615 6 u_char 89 3 89 9 2 12 hdr_checksum 89 10 89 22 55 1 [ 89 22 89 23 18446744073709551615 1 2 89 23 89 24 18446744073709551615 1 ] 89 24 89 25 18446744073709551615 1 ; 89 25 89 26 18446744073709551615 6 u_char 90 3 90 9 2 3 src 90 10 90 13 56 1 [ 90 13 90 14 18446744073709551615 1 4 90 14 90 15 18446744073709551615 1 ] 90 15 90 16 18446744073709551615 1 ; 90 16 90 17 18446744073709551615 6 u_char 91 3 91 9 2 3 dst 91 10 91 13 57 1 [ 91 13 91 14 18446744073709551615 1 4 91 14 91 15 18446744073709551615 1 ] 91 15 91 16 18446744073709551615 1 ; 91 16 91 17 18446744073709551615 1 } 92 1 92 2 18446744073709551615 1 ; 92 2 92 3 18446744073709551615 16 /* TCP header */ 94 1 94 17 18446744073709551615 6 struct 95 1 95 7 18446744073709551615 9 sniff_TCP 95 8 95 17 58 1 { 95 18 95 19 18446744073709551615 6 u_char 96 3 96 9 2 8 src_port 96 10 96 18 59 1 [ 96 18 96 19 18446744073709551615 1 2 96 19 96 20 18446744073709551615 1 ] 96 20 96 21 18446744073709551615 1 ; 96 21 96 22 18446744073709551615 6 u_char 97 3 97 9 2 8 dst_port 97 10 97 18 60 1 [ 97 18 97 19 18446744073709551615 1 2 97 19 97 20 18446744073709551615 1 ] 97 20 97 21 18446744073709551615 1 ; 97 21 97 22 18446744073709551615 6 u_char 98 3 98 9 2 10 sqn_number 98 10 98 20 61 1 [ 98 20 98 21 18446744073709551615 1 4 98 21 98 22 18446744073709551615 1 ] 98 22 98 23 18446744073709551615 1 ; 98 23 98 24 18446744073709551615 6 u_char 99 3 99 9 2 10 ack_number 99 10 99 20 62 1 [ 99 20 99 21 18446744073709551615 1 4 99 21 99 22 18446744073709551615 1 ] 99 22 99 23 18446744073709551615 1 ; 99 23 99 24 18446744073709551615 6 u_char 100 3 100 9 2 7 hdr_len 100 10 100 17 63 1 : 100 18 100 19 18446744073709551615 1 4 100 20 100 21 18446744073709551615 1 , 100 21 100 22 18446744073709551615 9 reserved1 100 23 100 32 64 1 : 100 33 100 34 18446744073709551615 1 4 100 35 100 36 18446744073709551615 1 ; 100 36 100 37 18446744073709551615 6 u_char 101 3 101 9 2 9 reserved2 101 10 101 19 65 1 : 101 20 101 21 18446744073709551615 1 2 101 22 101 23 18446744073709551615 1 , 101 23 101 24 18446744073709551615 3 urg 101 25 101 28 66 1 : 101 29 101 30 18446744073709551615 1 1 101 31 101 32 18446744073709551615 1 , 101 32 101 33 18446744073709551615 3 ack 101 34 101 37 67 1 : 101 38 101 39 18446744073709551615 1 1 101 40 101 41 18446744073709551615 1 , 101 41 101 42 18446744073709551615 3 psh 101 43 101 46 68 1 : 101 47 101 48 18446744073709551615 1 1 101 49 101 50 18446744073709551615 1 , 101 50 101 51 18446744073709551615 3 rst 101 52 101 55 69 1 : 101 56 101 57 18446744073709551615 1 1 101 58 101 59 18446744073709551615 1 , 101 59 101 60 18446744073709551615 3 syn 101 61 101 64 70 1 : 101 65 101 66 18446744073709551615 1 1 101 67 101 68 18446744073709551615 1 , 101 68 101 69 18446744073709551615 3 fin 101 70 101 73 71 1 : 101 74 101 75 18446744073709551615 1 1 101 76 101 77 18446744073709551615 1 ; 101 77 101 78 18446744073709551615 6 u_char 102 3 102 9 2 11 window_size 102 10 102 21 72 1 [ 102 21 102 22 18446744073709551615 1 2 102 22 102 23 18446744073709551615 1 ] 102 23 102 24 18446744073709551615 1 ; 102 24 102 25 18446744073709551615 6 u_char 103 3 103 9 2 12 tcp_checksum 103 10 103 22 73 1 [ 103 22 103 23 18446744073709551615 1 2 103 23 103 24 18446744073709551615 1 ] 103 24 103 25 18446744073709551615 1 ; 103 25 103 26 18446744073709551615 6 u_char 104 3 104 9 2 14 urgent_pointer 104 10 104 24 74 1 [ 104 24 104 25 18446744073709551615 1 2 104 25 104 26 18446744073709551615 1 ] 104 26 104 27 18446744073709551615 1 ; 104 27 104 28 18446744073709551615 1 } 105 1 105 2 18446744073709551615 1 ; 105 2 105 3 18446744073709551615 27 /* Pairwise Temporal Key */ 107 1 107 28 18446744073709551615 6 struct 108 1 108 7 18446744073709551615 3 ptk 108 8 108 11 75 1 { 108 12 108 13 18446744073709551615 6 u_char 109 3 109 9 2 3 kck 109 10 109 13 76 1 [ 109 13 109 14 18446744073709551615 2 16 109 14 109 16 18446744073709551615 1 ] 109 16 109 17 18446744073709551615 1 ; 109 17 109 18 18446744073709551615 6 u_char 110 3 110 9 2 3 kek 110 10 110 13 77 1 [ 110 13 110 14 18446744073709551615 2 16 110 14 110 16 18446744073709551615 1 ] 110 16 110 17 18446744073709551615 1 ; 110 17 110 18 18446744073709551615 6 u_char 111 3 111 9 2 2 tk 111 10 111 12 78 1 [ 111 12 111 13 18446744073709551615 2 16 111 13 111 15 18446744073709551615 1 ] 111 15 111 16 18446744073709551615 1 ; 111 16 111 17 18446744073709551615 6 u_char 112 3 112 9 2 3 txk 112 10 112 13 79 1 [ 112 13 112 14 18446744073709551615 1 8 112 14 112 15 18446744073709551615 1 ] 112 15 112 16 18446744073709551615 1 ; 112 16 112 17 18446744073709551615 6 u_char 113 3 113 9 2 3 trk 113 10 113 13 80 1 [ 113 13 113 14 18446744073709551615 1 8 113 14 113 15 18446744073709551615 1 ] 113 15 113 16 18446744073709551615 1 ; 113 16 113 17 18446744073709551615 1 } 114 1 114 2 18446744073709551615 1 ; 114 2 114 3 18446744073709551615 36 /* Informations about 4whs status */ 116 1 116 37 18446744073709551615 6 struct 117 1 117 7 18446744073709551615 10 eapol_info 117 8 117 18 81 1 { 117 19 117 20 18446744073709551615 6 u_char 118 3 118 9 2 15 sta_mac_address 118 10 118 25 82 1 [ 118 25 118 26 18446744073709551615 12 MAC_ADDR_LEN 118 26 118 38 82 1 ] 118 38 118 39 18446744073709551615 1 ; 118 39 118 40 18446744073709551615 6 u_char 119 3 119 9 2 6 ANonce 119 10 119 16 83 1 [ 119 16 119 17 18446744073709551615 2 32 119 17 119 19 18446744073709551615 1 ] 119 19 119 20 18446744073709551615 1 ; 119 20 119 21 18446744073709551615 6 u_char 120 3 120 9 2 6 SNonce 120 10 120 16 84 1 [ 120 16 120 17 18446744073709551615 2 32 120 17 120 19 18446744073709551615 1 ] 120 19 120 20 18446744073709551615 1 ; 120 20 120 21 18446744073709551615 6 struct 121 3 121 9 18446744073709551615 3 ptk 121 10 121 13 75 3 PTK 121 14 121 17 85 1 ; 121 17 121 18 18446744073709551615 12 eapol_status 122 3 122 15 8 6 status 122 16 122 22 86 1 ; 122 22 122 23 18446744073709551615 6 u_char 123 3 123 9 2 11 last_replay 123 10 123 21 87 1 [ 123 21 123 22 18446744073709551615 1 8 123 22 123 23 18446744073709551615 1 ] 123 23 123 24 18446744073709551615 1 ; 123 24 123 25 18446744073709551615 1 } 124 1 124 2 18446744073709551615 1 ; 124 2 124 3 18446744073709551615 6 u_char 126 1 126 7 2 14 ap_mac_address 126 8 126 22 88 1 [ 126 22 126 23 18446744073709551615 1 6 126 23 126 24 18446744073709551615 1 ] 126 24 126 25 18446744073709551615 1 ; 126 25 126 26 18446744073709551615 6 u_char 127 1 127 7 2 3 psk 127 8 127 11 89 1 [ 127 11 127 12 18446744073709551615 2 32 127 12 127 14 18446744073709551615 1 ] 127 14 127 15 18446744073709551615 1 ; 127 15 127 16 18446744073709551615 6 u_char 128 1 128 7 2 1 * 128 8 128 9 18446744073709551615 4 ssid 128 9 128 13 90 1 ; 128 13 128 14 18446744073709551615 5 map_t 129 1 129 6 91 1 * 129 7 129 8 18446744073709551615 3 map 129 8 129 11 92 1 ; 129 11 129 12 18446744073709551615 6 struct 130 1 130 7 18446744073709551615 3 ptk 130 8 130 11 75 1 * 130 12 130 13 18446744073709551615 4 PTK0 130 13 130 17 93 1 ; 130 17 130 18 18446744073709551615 4 FILE 131 1 131 5 94 1 * 131 6 131 7 18446744073709551615 2 fd 131 7 131 9 95 1 ; 131 9 131 10 18446744073709551615 13 pcap_dumper_t 132 1 132 14 96 1 * 132 15 132 16 18446744073709551615 8 dumpfile 132 16 132 24 97 1 ; 132 24 132 25 18446744073709551615 6 u_char 135 1 135 7 2 14 process_beacon 135 8 135 22 98 1 ( 135 22 135 23 98 5 const 135 23 135 28 18446744073709551615 6 struct 135 29 135 35 18446744073709551615 11 pcap_pkthdr 135 36 135 47 99 1 * 135 48 135 49 18446744073709551615 1 , 135 49 135 50 98 5 const 135 51 135 56 18446744073709551615 6 u_char 135 57 135 63 2 1 * 135 64 135 65 18446744073709551615 1 ) 135 65 135 66 98 1 ; 135 66 135 67 18446744073709551615 6 u_char 136 1 136 7 2 14 process_packet 136 8 136 22 100 1 ( 136 22 136 23 100 5 const 136 23 136 28 18446744073709551615 6 struct 136 29 136 35 18446744073709551615 11 pcap_pkthdr 136 36 136 47 99 1 * 136 48 136 49 18446744073709551615 1 , 136 49 136 50 100 5 const 136 51 136 56 18446744073709551615 6 u_char 136 57 136 63 2 1 * 136 64 136 65 18446744073709551615 1 ) 136 65 136 66 100 1 ; 136 66 136 67 18446744073709551615 6 u_char 137 1 137 7 2 14 packet_decrypt 137 8 137 22 101 1 ( 137 22 137 23 101 5 const 137 23 137 28 18446744073709551615 6 struct 137 29 137 35 18446744073709551615 11 pcap_pkthdr 137 36 137 47 99 1 * 137 48 137 49 18446744073709551615 1 , 137 49 137 50 101 5 const 137 51 137 56 18446744073709551615 6 u_char 137 57 137 63 2 1 * 137 64 137 65 18446744073709551615 1 , 137 65 137 66 101 6 struct 137 67 137 73 18446744073709551615 10 eapol_info 137 74 137 84 81 1 * 137 85 137 86 18446744073709551615 1 ) 137 86 137 87 101 1 ; 137 87 137 88 18446744073709551615 4 char 138 1 138 5 18446744073709551615 1 * 138 6 138 7 102 12 mac_toString 138 7 138 19 102 1 ( 138 19 138 20 102 6 u_char 138 20 138 26 2 1 * 138 27 138 28 18446744073709551615 1 ) 138 28 138 29 102 1 ; 138 29 138 30 18446744073709551615 6 u_char 139 1 139 7 2 1 * 139 8 139 9 103 6 PRF512 139 9 139 15 103 1 ( 139 15 139 16 103 6 u_char 139 16 139 22 2 1 * 139 23 139 24 18446744073709551615 1 , 139 24 139 25 103 6 u_char 139 26 139 32 2 1 * 139 33 139 34 18446744073709551615 1 , 139 34 139 35 103 6 size_t 139 36 139 42 104 1 , 139 42 139 43 103 6 u_char 139 44 139 50 2 1 * 139 51 139 52 18446744073709551615 1 , 139 52 139 53 103 6 u_char 139 54 139 60 2 1 * 139 61 139 62 18446744073709551615 1 , 139 62 139 63 103 6 u_char 139 64 139 70 2 1 * 139 71 139 72 18446744073709551615 1 , 139 72 139 73 103 6 u_char 139 74 139 80 2 1 * 139 81 139 82 18446744073709551615 1 ) 139 82 139 83 103 1 ; 139 83 139 84 18446744073709551615 6 u_char 140 1 140 7 2 1 * 140 8 140 9 105 15 hexstr_to_bytes 140 9 140 24 105 1 ( 140 24 140 25 105 6 u_char 140 25 140 31 2 1 * 140 32 140 33 18446744073709551615 1 ) 140 33 140 34 105 1 ; 140 34 140 35 18446744073709551615 6 static 141 1 141 7 18446744073709551615 6 inline 141 8 141 14 18446744073709551615 4 void 141 15 141 19 18446744073709551615 3 XOR 141 20 141 23 106 1 ( 141 23 141 24 106 8 unsigned 141 24 141 32 18446744073709551615 4 char 141 33 141 37 18446744073709551615 1 * 141 38 141 39 18446744073709551615 1 , 141 39 141 40 106 8 unsigned 141 41 141 49 18446744073709551615 4 char 141 50 141 54 18446744073709551615 1 * 141 55 141 56 18446744073709551615 1 , 141 56 141 57 106 3 int 141 58 141 61 18446744073709551615 3 len 141 62 141 65 107 1 ) 141 65 141 66 106 1 ; 141 66 141 67 18446744073709551615 4 void 142 1 142 5 18446744073709551615 14 dump_decrypted 142 6 142 20 108 1 ( 142 20 142 21 108 6 u_char 142 21 142 27 2 1 * 142 28 142 29 18446744073709551615 1 , 142 29 142 30 108 5 const 142 31 142 36 18446744073709551615 6 struct 142 37 142 43 18446744073709551615 11 pcap_pkthdr 142 44 142 55 99 1 * 142 56 142 57 18446744073709551615 1 , 142 57 142 58 108 5 const 142 59 142 64 18446744073709551615 6 u_char 142 65 142 71 2 1 * 142 72 142 73 18446744073709551615 1 ) 142 73 142 74 108 1 ; 142 74 142 75 18446744073709551615 3 int 144 1 144 4 18446744073709551615 4 main 144 5 144 9 109 1 ( 144 9 144 10 109 3 int 144 10 144 13 18446744073709551615 4 argc 144 14 144 18 110 1 , 144 18 144 19 109 4 char 144 20 144 24 18446744073709551615 1 * 144 25 144 26 18446744073709551615 4 argv 144 26 144 30 111 1 [ 144 30 144 31 18446744073709551615 1 ] 144 31 144 32 18446744073709551615 1 ) 144 32 144 33 109 1 { 144 34 144 35 18446744073709551615 3 map 146 3 146 6 92 1 = 146 7 146 8 18446744073709551615 11 hashmap_new 146 9 146 20 112 1 ( 146 20 146 21 112 1 ) 146 21 146 22 112 1 ; 146 22 146 23 18446744073709551615 65 // map will contain eapol_info struct, indexed by STA mac address 146 26 146 91 18446744073709551615 4 ssid 147 3 147 7 90 1 = 147 8 147 9 18446744073709551615 4 argv 147 10 147 14 111 1 [ 147 14 147 15 18446744073709551615 1 3 147 15 147 16 18446744073709551615 1 ] 147 16 147 17 18446744073709551615 1 ; 147 17 147 18 18446744073709551615 12 // WLAN SSID 147 26 147 38 18446744073709551615 6 u_char 148 3 148 9 2 1 * 148 10 148 11 18446744073709551615 3 pwd 148 11 148 14 113 1 = 148 15 148 16 18446744073709551615 4 argv 148 17 148 21 111 1 [ 148 21 148 22 18446744073709551615 1 4 148 22 148 23 18446744073709551615 1 ] 148 23 148 24 18446744073709551615 1 ; 148 24 148 25 18446744073709551615 16 // WLAN password 148 26 148 42 18446744073709551615 4 char 149 3 149 7 18446744073709551615 6 errbuf 149 8 149 14 114 1 [ 149 14 149 15 18446744073709551615 16 PCAP_ERRBUF_SIZE 149 15 149 31 114 1 ] 149 31 149 32 18446744073709551615 1 ; 149 32 149 33 18446744073709551615 4 char 150 3 150 7 18446744073709551615 13 filter_beacon 150 8 150 21 115 1 [ 150 21 150 22 18446744073709551615 1 ] 150 22 150 23 18446744073709551615 1 = 150 24 150 25 18446744073709551615 30 "wlan type mgt subtype beacon" 150 26 150 56 18446744073709551615 1 ; 150 56 150 57 18446744073709551615 31 // capture only beacon messages 150 72 150 103 18446744073709551615 4 char 151 3 151 7 18446744073709551615 25 filter_eapol_on_ssid_mask 151 8 151 33 116 1 [ 151 33 151 34 18446744073709551615 1 ] 151 34 151 35 18446744073709551615 1 = 151 36 151 37 18446744073709551615 32 "wlan addr1 %s or wlan addr2 %s" 151 38 151 70 18446744073709551615 1 ; 151 70 151 71 18446744073709551615 63 // once found the address of AP, capture only packet from/to AP 151 72 151 135 18446744073709551615 4 char 152 3 152 7 18446744073709551615 1 * 152 8 152 9 18446744073709551615 20 filter_eapol_on_ssid 152 9 152 29 117 1 ; 152 29 152 30 18446744073709551615 6 struct 153 3 153 9 18446744073709551615 11 bpf_program 153 10 153 21 118 2 fp 153 22 153 24 119 1 ; 153 24 153 25 18446744073709551615 6 pcap_t 154 3 154 9 120 1 * 154 10 154 11 18446744073709551615 6 handle 154 11 154 17 121 1 ; 154 17 154 18 18446744073709551615 6 struct 155 3 155 9 18446744073709551615 11 pcap_pkthdr 155 10 155 21 99 1 * 155 22 155 23 18446744073709551615 6 header 155 23 155 29 122 1 ; 155 29 155 30 18446744073709551615 5 const 156 3 156 8 18446744073709551615 6 u_char 156 9 156 15 2 1 * 156 16 156 17 18446744073709551615 6 packet 156 17 156 23 123 1 ; 156 23 156 24 18446744073709551615 4 char 157 3 157 7 18446744073709551615 18 ap_mac_address_str 157 8 157 26 124 1 [ 157 26 157 27 18446744073709551615 1 2 157 27 157 28 18446744073709551615 1 * 157 29 157 30 18446744073709551615 12 MAC_ADDR_LEN 157 31 157 43 18446744073709551615 1 ] 157 43 157 44 18446744073709551615 1 ; 157 44 157 45 18446744073709551615 60 // String representation of MAC address as xx:xx:xx:xx:xx:xx 157 46 157 106 18446744073709551615 18 ap_mac_address_str 158 3 158 21 124 1 [ 158 21 158 22 18446744073709551615 1 2 158 22 158 23 18446744073709551615 1 * 158 24 158 25 18446744073709551615 12 MAC_ADDR_LEN 158 26 158 38 18446744073709551615 1 - 158 39 158 40 18446744073709551615 1 1 158 41 158 42 18446744073709551615 1 ] 158 42 158 43 18446744073709551615 1 = 158 44 158 45 18446744073709551615 4 '\0' 158 46 158 50 18446744073709551615 1 ; 158 50 158 51 18446744073709551615 20 fastpbkdf2_hmac_sha1 160 3 160 23 125 1 ( 160 23 160 24 125 3 pwd 160 24 160 27 113 1 , 160 27 160 28 125 6 strlen 160 29 160 35 126 1 ( 160 35 160 36 126 3 pwd 160 36 160 39 113 1 ) 160 39 160 40 126 1 , 160 40 160 41 125 4 ssid 160 42 160 46 90 1 , 160 46 160 47 125 6 strlen 160 48 160 54 126 1 ( 160 54 160 55 126 4 ssid 160 55 160 59 90 1 ) 160 59 160 60 126 1 , 160 60 160 61 125 4 4096 160 62 160 66 18446744073709551615 1 , 160 66 160 67 125 3 psk 160 68 160 71 89 1 , 160 71 160 72 125 2 32 160 73 160 75 18446744073709551615 1 ) 160 75 160 76 125 1 ; 160 76 160 77 18446744073709551615 47 // compute PSK from PWD, in WPA2-PSK PSK == PMS 160 78 160 125 18446744073709551615 61 // open the file of the capture and an handle for its content 162 3 162 64 18446744073709551615 6 handle 163 3 163 9 121 1 = 163 10 163 11 18446744073709551615 17 pcap_open_offline 163 12 163 29 127 1 ( 163 29 163 30 127 4 argv 163 30 163 34 111 1 [ 163 34 163 35 18446744073709551615 1 1 163 35 163 36 18446744073709551615 1 ] 163 36 163 37 18446744073709551615 1 , 163 37 163 38 127 6 errbuf 163 39 163 45 114 1 ) 163 45 163 46 127 1 ; 163 46 163 47 18446744073709551615 2 if 164 3 164 5 18446744073709551615 1 ( 164 5 164 6 18446744073709551615 6 handle 164 6 164 12 121 2 == 164 13 164 15 18446744073709551615 4 NULL 164 16 164 20 18446744073709551615 1 ) 164 20 164 21 18446744073709551615 1 { 164 22 164 23 18446744073709551615 7 fprintf 165 5 165 12 128 1 ( 165 12 165 13 128 6 stderr 165 13 165 19 128 1 , 165 19 165 20 128 29 "Couldn't open file %s: %s\n" 165 21 165 50 18446744073709551615 1 , 165 50 165 51 128 4 argv 165 52 165 56 111 1 [ 165 56 165 57 18446744073709551615 1 1 165 57 165 58 18446744073709551615 1 ] 165 58 165 59 18446744073709551615 1 , 165 59 165 60 128 6 errbuf 165 61 165 67 114 1 ) 165 67 165 68 128 1 ; 165 68 165 69 18446744073709551615 6 return 166 5 166 11 18446744073709551615 1 ( 166 12 166 13 18446744073709551615 1 2 166 13 166 14 18446744073709551615 1 ) 166 14 166 15 18446744073709551615 1 ; 166 15 166 16 18446744073709551615 1 } 167 3 167 4 18446744073709551615 17 // open a file in 169 3 169 20 18446744073709551615 2 if 170 3 170 5 18446744073709551615 1 ( 170 5 170 6 18446744073709551615 1 ( 170 6 170 7 18446744073709551615 2 fd 170 7 170 9 95 1 = 170 10 170 11 18446744073709551615 5 fopen 170 12 170 17 129 1 ( 170 17 170 18 129 4 argv 170 18 170 22 111 1 [ 170 22 170 23 18446744073709551615 1 2 170 23 170 24 18446744073709551615 1 ] 170 24 170 25 18446744073709551615 1 , 170 25 170 26 129 3 "w" 170 27 170 30 18446744073709551615 1 ) 170 30 170 31 129 1 ) 170 31 170 32 18446744073709551615 2 != 170 33 170 35 18446744073709551615 4 NULL 170 36 170 40 18446744073709551615 1 ) 170 40 170 41 18446744073709551615 1 { 170 42 170 43 18446744073709551615 8 dumpfile 171 5 171 13 97 1 = 171 14 171 15 18446744073709551615 15 pcap_dump_fopen 171 16 171 31 130 1 ( 171 31 171 32 130 6 handle 171 32 171 38 121 1 , 171 38 171 39 130 2 fd 171 40 171 42 95 1 ) 171 42 171 43 130 1 ; 171 43 171 44 18446744073709551615 1 } 172 3 172 4 18446744073709551615 4 else 173 3 173 7 18446744073709551615 1 { 173 8 173 9 18446744073709551615 7 fprintf 174 5 174 12 128 1 ( 174 12 174 13 128 6 stderr 174 13 174 19 128 1 , 174 19 174 20 128 47 "Couldn't open destination file. Exit program." 174 21 174 68 18446744073709551615 1 ) 174 68 174 69 128 1 ; 174 69 174 70 18446744073709551615 6 return 175 5 175 11 18446744073709551615 1 - 175 12 175 13 18446744073709551615 1 1 175 13 175 14 18446744073709551615 1 ; 175 14 175 15 18446744073709551615 1 } 176 3 176 4 18446744073709551615 2 if 178 3 178 5 18446744073709551615 1 ( 178 5 178 6 18446744073709551615 12 pcap_compile 178 6 178 18 131 1 ( 178 18 178 19 131 6 handle 178 19 178 25 121 1 , 178 25 178 26 131 1 & 178 27 178 28 18446744073709551615 2 fp 178 28 178 30 119 1 , 178 30 178 31 131 13 filter_beacon 178 32 178 45 115 1 , 178 45 178 46 131 1 0 178 47 178 48 18446744073709551615 1 , 178 48 178 49 131 1 0 178 50 178 51 18446744073709551615 1 ) 178 51 178 52 131 2 == 178 53 178 55 18446744073709551615 1 - 178 56 178 57 18446744073709551615 1 1 178 57 178 58 18446744073709551615 1 ) 178 58 178 59 18446744073709551615 1 { 178 60 178 61 18446744073709551615 7 fprintf 179 5 179 12 128 1 ( 179 12 179 13 128 6 stderr 179 13 179 19 128 1 , 179 19 179 20 128 32 "Couldn't parse filter %s: %s\n" 179 21 179 53 18446744073709551615 1 , 179 53 179 54 128 13 filter_beacon 179 55 179 68 115 1 , 179 68 179 69 128 11 pcap_geterr 179 70 179 81 132 1 ( 179 81 179 82 132 6 handle 179 82 179 88 121 1 ) 179 88 179 89 132 1 ) 179 89 179 90 128 1 ; 179 90 179 91 18446744073709551615 6 return 180 5 180 11 18446744073709551615 1 ( 180 12 180 13 18446744073709551615 1 2 180 13 180 14 18446744073709551615 1 ) 180 14 180 15 18446744073709551615 1 ; 180 15 180 16 18446744073709551615 1 } 181 3 181 4 18446744073709551615 2 if 183 3 183 5 18446744073709551615 1 ( 183 5 183 6 18446744073709551615 14 pcap_setfilter 183 6 183 20 133 1 ( 183 20 183 21 133 6 handle 183 21 183 27 121 1 , 183 27 183 28 133 1 & 183 29 183 30 18446744073709551615 2 fp 183 30 183 32 119 1 ) 183 32 183 33 133 2 == 183 34 183 36 18446744073709551615 1 - 183 37 183 38 18446744073709551615 1 1 183 38 183 39 18446744073709551615 1 ) 183 39 183 40 18446744073709551615 1 { 183 41 183 42 18446744073709551615 7 fprintf 184 5 184 12 128 1 ( 184 12 184 13 128 6 stderr 184 13 184 19 128 1 , 184 19 184 20 128 34 "Couldn't install filter %s: %s\n" 184 21 184 55 18446744073709551615 1 , 184 55 184 56 128 13 filter_beacon 184 57 184 70 115 1 , 184 70 184 71 128 11 pcap_geterr 184 72 184 83 132 1 ( 184 83 184 84 132 6 handle 184 84 184 90 121 1 ) 184 90 184 91 132 1 ) 184 91 184 92 128 1 ; 184 92 184 93 18446744073709551615 6 return 185 5 185 11 18446744073709551615 1 ( 185 12 185 13 18446744073709551615 1 2 185 13 185 14 18446744073709551615 1 ) 185 14 185 15 18446744073709551615 1 ; 185 15 185 16 18446744073709551615 1 } 186 3 186 4 18446744073709551615 121 // read the traffic file packet by packet looking for a beacon file of the AP broadcasting the SSID specified by the user 188 3 188 124 18446744073709551615 71 // stop when reach EOF or find the beacon (and thus the AP MAC address) 189 3 189 74 18446744073709551615 5 while 190 3 190 8 18446744073709551615 1 ( 190 8 190 9 18446744073709551615 12 pcap_next_ex 190 9 190 21 134 1 ( 190 21 190 22 134 6 handle 190 22 190 28 121 1 , 190 28 190 29 134 1 & 190 30 190 31 18446744073709551615 6 header 190 31 190 37 122 1 , 190 37 190 38 134 1 & 190 39 190 40 18446744073709551615 6 packet 190 40 190 46 123 1 ) 190 46 190 47 134 2 && 190 48 190 50 18446744073709551615 1 ! 190 51 190 52 18446744073709551615 14 process_beacon 190 52 190 66 98 1 ( 190 66 190 67 98 6 header 190 67 190 73 122 1 , 190 73 190 74 98 6 packet 190 75 190 81 123 1 ) 190 81 190 82 98 1 ) 190 82 190 83 18446744073709551615 1 ; 191 5 191 6 18446744073709551615 64 // build the filter used for capturing traffic on specified WLAN 193 3 193 67 18446744073709551615 8 asprintf 194 3 194 11 135 1 ( 194 11 194 12 135 1 & 194 12 194 13 18446744073709551615 20 filter_eapol_on_ssid 194 13 194 33 117 1 , 194 33 194 34 135 25 filter_eapol_on_ssid_mask 194 35 194 60 116 1 , 194 60 194 61 135 12 mac_toString 194 62 194 74 102 1 ( 194 74 194 75 102 14 ap_mac_address 194 75 194 89 88 1 ) 194 89 194 90 102 1 , 194 90 194 91 135 12 mac_toString 194 92 194 104 102 1 ( 194 104 194 105 102 14 ap_mac_address 194 105 194 119 88 1 ) 194 119 194 120 102 1 ) 194 120 194 121 135 1 ; 194 121 194 122 18446744073709551615 2 if 195 3 195 5 18446744073709551615 1 ( 195 5 195 6 18446744073709551615 12 pcap_compile 195 6 195 18 131 1 ( 195 18 195 19 131 6 handle 195 19 195 25 121 1 , 195 25 195 26 131 1 & 195 27 195 28 18446744073709551615 2 fp 195 28 195 30 119 1 , 195 30 195 31 131 20 filter_eapol_on_ssid 195 32 195 52 117 1 , 195 52 195 53 131 1 0 195 54 195 55 18446744073709551615 1 , 195 55 195 56 131 1 0 195 57 195 58 18446744073709551615 1 ) 195 58 195 59 131 2 == 195 60 195 62 18446744073709551615 1 - 195 63 195 64 18446744073709551615 1 1 195 64 195 65 18446744073709551615 1 ) 195 65 195 66 18446744073709551615 1 { 195 67 195 68 18446744073709551615 7 fprintf 196 5 196 12 128 1 ( 196 12 196 13 128 6 stderr 196 13 196 19 128 1 , 196 19 196 20 128 32 "Couldn't parse filter %s: %s\n" 196 21 196 53 18446744073709551615 1 , 196 53 196 54 128 20 filter_eapol_on_ssid 196 55 196 75 117 1 , 196 75 196 76 128 11 pcap_geterr 196 77 196 88 132 1 ( 196 88 196 89 132 6 handle 196 89 196 95 121 1 ) 196 95 196 96 132 1 ) 196 96 196 97 128 1 ; 196 97 196 98 18446744073709551615 6 return 197 5 197 11 18446744073709551615 1 ( 197 12 197 13 18446744073709551615 1 2 197 13 197 14 18446744073709551615 1 ) 197 14 197 15 18446744073709551615 1 ; 197 15 197 16 18446744073709551615 1 } 198 3 198 4 18446744073709551615 2 if 199 3 199 5 18446744073709551615 1 ( 199 5 199 6 18446744073709551615 14 pcap_setfilter 199 6 199 20 133 1 ( 199 20 199 21 133 6 handle 199 21 199 27 121 1 , 199 27 199 28 133 1 & 199 29 199 30 18446744073709551615 2 fp 199 30 199 32 119 1 ) 199 32 199 33 133 2 == 199 34 199 36 18446744073709551615 1 - 199 37 199 38 18446744073709551615 1 1 199 38 199 39 18446744073709551615 1 ) 199 39 199 40 18446744073709551615 1 { 199 41 199 42 18446744073709551615 7 fprintf 200 5 200 12 128 1 ( 200 12 200 13 128 6 stderr 200 13 200 19 128 1 , 200 19 200 20 128 34 "Couldn't install filter %s: %s\n" 200 21 200 55 18446744073709551615 1 , 200 55 200 56 128 20 filter_eapol_on_ssid 200 57 200 77 117 1 , 200 77 200 78 128 11 pcap_geterr 200 79 200 90 132 1 ( 200 90 200 91 132 6 handle 200 91 200 97 121 1 ) 200 97 200 98 132 1 ) 200 98 200 99 128 1 ; 200 99 200 100 18446744073709551615 6 return 201 5 201 11 18446744073709551615 1 ( 201 12 201 13 18446744073709551615 1 2 201 13 201 14 18446744073709551615 1 ) 201 14 201 15 18446744073709551615 1 ; 201 15 201 16 18446744073709551615 1 } 202 3 202 4 18446744073709551615 31 // start processing each packet 204 3 204 34 18446744073709551615 5 while 205 3 205 8 18446744073709551615 1 ( 205 8 205 9 18446744073709551615 12 pcap_next_ex 205 9 205 21 134 1 ( 205 21 205 22 134 6 handle 205 22 205 28 121 1 , 205 28 205 29 134 1 & 205 30 205 31 18446744073709551615 6 header 205 31 205 37 122 1 , 205 37 205 38 134 1 & 205 39 205 40 18446744073709551615 6 packet 205 40 205 46 123 1 ) 205 46 205 47 134 2 >= 205 48 205 50 18446744073709551615 1 0 205 51 205 52 18446744073709551615 1 ) 205 52 205 53 18446744073709551615 14 process_packet 206 5 206 19 100 1 ( 206 19 206 20 100 6 header 206 20 206 26 122 1 , 206 26 206 27 100 6 packet 206 28 206 34 123 1 ) 206 34 206 35 100 1 ; 206 35 206 36 18446744073709551615 6 fclose 209 3 209 9 136 1 ( 209 9 209 10 136 2 fd 209 10 209 12 95 1 ) 209 12 209 13 136 1 ; 209 13 209 14 18446744073709551615 13 pcap_freecode 210 3 210 16 137 1 ( 210 16 210 17 137 1 & 210 17 210 18 18446744073709551615 2 fp 210 18 210 20 119 1 ) 210 20 210 21 137 1 ; 210 21 210 22 18446744073709551615 10 pcap_close 211 3 211 13 138 1 ( 211 13 211 14 138 6 handle 211 14 211 20 121 1 ) 211 20 211 21 138 1 ; 211 21 211 22 18446744073709551615 6 return 212 3 212 9 18446744073709551615 1 ( 212 10 212 11 18446744073709551615 1 0 212 11 212 12 18446744073709551615 1 ) 212 12 212 13 18446744073709551615 1 ; 212 13 212 14 18446744073709551615 1 } 213 1 213 2 18446744073709551615 6 u_char 215 1 215 7 2 14 process_beacon 215 8 215 22 98 1 ( 215 22 215 23 98 5 const 215 23 215 28 18446744073709551615 6 struct 215 29 215 35 18446744073709551615 11 pcap_pkthdr 215 36 215 47 99 1 * 215 48 215 49 18446744073709551615 6 header 215 49 215 55 139 1 , 215 55 215 56 98 5 const 215 57 215 62 18446744073709551615 6 u_char 215 63 215 69 2 1 * 215 70 215 71 18446744073709551615 6 buffer 215 71 215 77 140 1 ) 215 77 215 78 98 1 { 215 79 215 80 18446744073709551615 5 const 216 3 216 8 18446744073709551615 6 struct 216 9 216 15 18446744073709551615 19 sniff_802_11_beacon 216 16 216 35 17 1 * 216 36 216 37 18446744073709551615 10 hdr_802_11 216 37 216 47 141 1 ; 216 47 216 48 18446744073709551615 10 hdr_802_11 217 3 217 13 141 1 = 217 14 217 15 18446744073709551615 1 ( 217 16 217 17 18446744073709551615 6 struct 217 17 217 23 18446744073709551615 19 sniff_802_11_beacon 217 24 217 43 17 1 * 217 44 217 45 18446744073709551615 1 ) 217 45 217 46 18446744073709551615 1 ( 217 46 217 47 18446744073709551615 6 buffer 217 47 217 53 140 1 + 217 54 217 55 18446744073709551615 16 PRISM_HEADER_LEN 217 56 217 72 18446744073709551615 1 ) 217 72 217 73 18446744073709551615 1 ; 217 73 217 74 18446744073709551615 3 int 218 3 218 6 18446744073709551615 11 ssid_length 218 7 218 18 142 1 = 218 19 218 20 18446744073709551615 1 ( 218 21 218 22 18446744073709551615 3 int 218 22 218 25 18446744073709551615 1 ) 218 25 218 26 18446744073709551615 1 ( 218 26 218 27 18446744073709551615 6 buffer 218 27 218 33 140 1 + 218 34 218 35 18446744073709551615 16 PRISM_HEADER_LEN 218 36 218 52 18446744073709551615 1 + 218 53 218 54 18446744073709551615 6 sizeof 218 55 218 61 18446744073709551615 1 ( 218 61 218 62 18446744073709551615 6 struct 218 62 218 68 18446744073709551615 19 sniff_802_11_beacon 218 69 218 88 17 1 ) 218 88 218 89 18446744073709551615 1 + 218 90 218 91 18446744073709551615 2 13 218 92 218 94 18446744073709551615 1 ) 218 94 218 95 18446744073709551615 1 [ 218 95 218 96 18446744073709551615 1 0 218 96 218 97 18446744073709551615 1 ] 218 97 218 98 18446744073709551615 1 ; 218 98 218 99 18446744073709551615 6 u_char 219 3 219 9 2 11 beacon_ssid 219 10 219 21 143 1 [ 219 21 219 22 18446744073709551615 11 ssid_length 219 22 219 33 142 1 + 219 34 219 35 18446744073709551615 1 1 219 36 219 37 18446744073709551615 1 ] 219 37 219 38 18446744073709551615 1 ; 219 38 219 39 18446744073709551615 6 memcpy 220 3 220 9 144 1 ( 220 9 220 10 144 11 beacon_ssid 220 10 220 21 143 1 , 220 21 220 22 144 1 ( 220 23 220 24 18446744073709551615 6 buffer 220 24 220 30 140 1 + 220 31 220 32 18446744073709551615 16 PRISM_HEADER_LEN 220 33 220 49 18446744073709551615 1 + 220 50 220 51 18446744073709551615 6 sizeof 220 52 220 58 18446744073709551615 1 ( 220 58 220 59 18446744073709551615 6 struct 220 59 220 65 18446744073709551615 19 sniff_802_11_beacon 220 66 220 85 17 1 ) 220 85 220 86 18446744073709551615 1 + 220 87 220 88 18446744073709551615 2 14 220 89 220 91 18446744073709551615 1 ) 220 91 220 92 18446744073709551615 1 , 220 92 220 93 144 11 ssid_length 220 94 220 105 142 1 ) 220 105 220 106 144 1 ; 220 106 220 107 18446744073709551615 11 beacon_ssid 221 3 221 14 143 1 [ 221 14 221 15 18446744073709551615 11 ssid_length 221 15 221 26 142 1 ] 221 26 221 27 18446744073709551615 1 = 221 28 221 29 18446744073709551615 4 '\0' 221 30 221 34 18446744073709551615 1 ; 221 34 221 35 18446744073709551615 2 if 222 3 222 5 18446744073709551615 1 ( 222 5 222 6 18446744073709551615 6 strcmp 222 6 222 12 145 1 ( 222 12 222 13 145 11 beacon_ssid 222 13 222 24 143 1 , 222 24 222 25 145 4 ssid 222 26 222 30 90 1 ) 222 30 222 31 145 2 == 222 32 222 34 18446744073709551615 1 0 222 35 222 36 18446744073709551615 1 ) 222 36 222 37 18446744073709551615 1 { 222 38 222 39 18446744073709551615 6 memcpy 223 5 223 11 144 1 ( 223 11 223 12 144 14 ap_mac_address 223 12 223 26 88 1 , 223 26 223 27 144 10 hdr_802_11 223 28 223 38 141 2 -> 223 38 223 40 18446744073709551615 5 addr2 223 40 223 45 21 1 , 223 45 223 46 144 12 MAC_ADDR_LEN 223 47 223 59 144 1 ) 223 59 223 60 144 1 ; 223 60 223 61 18446744073709551615 6 return 224 5 224 11 18446744073709551615 1 ( 224 12 224 13 18446744073709551615 1 1 224 13 224 14 18446744073709551615 1 ) 224 14 224 15 18446744073709551615 1 ; 224 15 224 16 18446744073709551615 1 } 225 3 225 4 18446744073709551615 6 return 226 3 226 9 18446744073709551615 1 ( 226 10 226 11 18446744073709551615 1 0 226 11 226 12 18446744073709551615 1 ) 226 12 226 13 18446744073709551615 1 ; 226 13 226 14 18446744073709551615 1 } 227 1 227 2 18446744073709551615 6 u_char 229 1 229 7 2 14 process_packet 229 8 229 22 100 1 ( 229 22 229 23 100 5 const 229 23 229 28 18446744073709551615 6 struct 229 29 229 35 18446744073709551615 11 pcap_pkthdr 229 36 229 47 99 1 * 229 48 229 49 18446744073709551615 6 header 229 49 229 55 146 1 , 229 55 229 56 100 5 const 229 57 229 62 18446744073709551615 6 u_char 229 63 229 69 2 1 * 229 70 229 71 18446744073709551615 6 buffer 229 71 229 77 147 1 ) 229 77 229 78 100 1 { 229 79 229 80 18446744073709551615 5 const 230 3 230 8 18446744073709551615 6 struct 230 9 230 15 18446744073709551615 12 sniff_802_11 230 16 230 28 9 1 * 230 29 230 30 18446744073709551615 10 hdr_802_11 230 30 230 40 148 1 ; 230 40 230 41 18446744073709551615 10 hdr_802_11 231 3 231 13 148 1 = 231 14 231 15 18446744073709551615 1 ( 231 16 231 17 18446744073709551615 6 struct 231 17 231 23 18446744073709551615 12 sniff_802_11 231 24 231 36 9 1 * 231 37 231 38 18446744073709551615 1 ) 231 38 231 39 18446744073709551615 1 ( 231 39 231 40 18446744073709551615 6 buffer 231 40 231 46 147 1 + 231 47 231 48 18446744073709551615 16 PRISM_HEADER_LEN 231 49 231 65 18446744073709551615 1 ) 231 65 231 66 18446744073709551615 1 ; 231 66 231 67 18446744073709551615 3 int 232 3 232 6 18446744073709551615 8 qos_type 232 7 232 15 149 1 = 232 16 232 17 18446744073709551615 16 TAKE_N_BITS_FROM 232 18 232 34 149 1 ( 232 34 232 35 18446744073709551615 10 hdr_802_11 232 35 232 45 18446744073709551615 2 -> 232 45 232 47 18446744073709551615 13 frame_control 232 47 232 60 18446744073709551615 1 [ 232 60 232 61 18446744073709551615 1 0 232 61 232 62 18446744073709551615 1 ] 232 62 232 63 18446744073709551615 1 , 232 63 232 64 18446744073709551615 1 2 232 65 232 66 18446744073709551615 1 , 232 66 232 67 18446744073709551615 1 2 232 68 232 69 18446744073709551615 1 ) 232 69 232 70 18446744073709551615 1 ; 232 70 232 71 18446744073709551615 3 int 233 3 233 6 18446744073709551615 16 packet_direction 233 7 233 23 150 1 = 233 24 233 25 18446744073709551615 16 TAKE_N_BITS_FROM 233 26 233 42 150 1 ( 233 42 233 43 18446744073709551615 10 hdr_802_11 233 43 233 53 18446744073709551615 2 -> 233 53 233 55 18446744073709551615 13 frame_control 233 55 233 68 18446744073709551615 1 [ 233 68 233 69 18446744073709551615 1 1 233 69 233 70 18446744073709551615 1 ] 233 70 233 71 18446744073709551615 1 , 233 71 233 72 18446744073709551615 1 0 233 73 233 74 18446744073709551615 1 , 233 74 233 75 18446744073709551615 1 2 233 76 233 77 18446744073709551615 1 ) 233 77 233 78 18446744073709551615 1 ; 233 78 233 79 18446744073709551615 3 int 234 3 234 6 18446744073709551615 14 data_protected 234 7 234 21 151 1 = 234 22 234 23 18446744073709551615 16 TAKE_N_BITS_FROM 234 24 234 40 151 1 ( 234 40 234 41 18446744073709551615 10 hdr_802_11 234 41 234 51 18446744073709551615 2 -> 234 51 234 53 18446744073709551615 13 frame_control 234 53 234 66 18446744073709551615 1 [ 234 66 234 67 18446744073709551615 1 1 234 67 234 68 18446744073709551615 1 ] 234 68 234 69 18446744073709551615 1 , 234 69 234 70 18446744073709551615 1 6 234 71 234 72 18446744073709551615 1 , 234 72 234 73 18446744073709551615 1 1 234 74 234 75 18446744073709551615 1 ) 234 75 234 76 18446744073709551615 1 ; 234 76 234 77 18446744073709551615 6 struct 235 3 235 9 18446744073709551615 10 eapol_info 235 10 235 20 81 1 * 235 21 235 22 18446744073709551615 17 packet_eapol_info 235 22 235 39 152 1 = 235 40 235 41 18446744073709551615 4 NULL 235 42 235 46 152 1 ; 235 46 235 47 18446744073709551615 6 u_char 237 3 237 9 2 1 * 237 10 237 11 18446744073709551615 11 sta_address 237 11 237 22 153 1 ; 237 22 237 23 18446744073709551615 2 if 239 3 239 5 18446744073709551615 1 ( 239 5 239 6 18446744073709551615 16 packet_direction 239 6 239 22 150 2 == 239 23 239 25 18446744073709551615 1 2 239 26 239 27 18446744073709551615 1 ) 239 27 239 28 18446744073709551615 1 { 239 29 239 30 18446744073709551615 10 // from DS 239 31 239 41 18446744073709551615 11 sta_address 240 5 240 16 153 1 = 240 17 240 18 18446744073709551615 10 hdr_802_11 240 19 240 29 148 2 -> 240 29 240 31 18446744073709551615 5 addr1 240 31 240 36 12 1 ; 240 36 240 37 18446744073709551615 1 } 241 3 241 4 18446744073709551615 4 else 242 3 242 7 18446744073709551615 2 if 242 8 242 10 18446744073709551615 1 ( 242 10 242 11 18446744073709551615 16 packet_direction 242 11 242 27 150 2 == 242 28 242 30 18446744073709551615 1 1 242 31 242 32 18446744073709551615 1 ) 242 32 242 33 18446744073709551615 1 { 242 34 242 35 18446744073709551615 8 // to DS 242 36 242 44 18446744073709551615 11 sta_address 243 5 243 16 153 1 = 243 17 243 18 18446744073709551615 10 hdr_802_11 243 19 243 29 148 2 -> 243 29 243 31 18446744073709551615 5 addr2 243 31 243 36 13 1 ; 243 36 243 37 18446744073709551615 1 } 244 3 244 4 18446744073709551615 2 if 245 3 245 5 18446744073709551615 1 ( 245 5 245 6 18446744073709551615 8 qos_type 245 6 245 14 149 2 == 245 15 245 17 18446744073709551615 1 2 245 18 245 19 18446744073709551615 1 ) 245 19 245 20 18446744073709551615 1 { 245 21 245 22 18446744073709551615 2 if 246 5 246 7 18446744073709551615 1 ( 246 7 246 8 18446744073709551615 14 data_protected 246 8 246 22 151 1 ) 246 22 246 23 18446744073709551615 1 { 246 24 246 25 18446744073709551615 96 // if we already stored a successful EAPOL handshake for that STA and we were able to decrypt it 247 7 247 103 18446744073709551615 2 if 248 7 248 9 18446744073709551615 1 ( 248 9 248 10 18446744073709551615 11 hashmap_get 248 10 248 21 154 1 ( 248 21 248 22 154 3 map 248 22 248 25 92 1 , 248 25 248 26 154 12 mac_toString 248 27 248 39 102 1 ( 248 39 248 40 102 11 sta_address 248 40 248 51 153 1 ) 248 51 248 52 102 1 , 248 52 248 53 154 1 ( 248 54 248 55 18446744073709551615 4 void 248 55 248 59 18446744073709551615 1 * 248 60 248 61 18446744073709551615 1 * 248 61 248 62 18446744073709551615 1 ) 248 62 248 63 18446744073709551615 1 & 248 63 248 64 18446744073709551615 17 packet_eapol_info 248 64 248 81 152 1 ) 248 81 248 82 154 2 == 248 83 248 85 18446744073709551615 6 MAP_OK 248 86 248 92 18446744073709551615 1 ) 248 92 248 93 18446744073709551615 1 { 248 94 248 95 18446744073709551615 2 if 249 9 249 11 18446744073709551615 1 ( 249 11 249 12 18446744073709551615 17 packet_eapol_info 249 12 249 29 152 2 -> 249 29 249 31 18446744073709551615 6 status 249 31 249 37 86 2 == 249 38 249 40 18446744073709551615 7 SUCCESS 249 41 249 48 7 2 && 249 49 249 51 18446744073709551615 14 packet_decrypt 249 52 249 66 101 1 ( 249 66 249 67 101 6 header 249 67 249 73 146 1 , 249 73 249 74 101 6 buffer 249 75 249 81 147 1 , 249 81 249 82 101 17 packet_eapol_info 249 83 249 100 152 1 ) 249 100 249 101 101 1 ) 249 101 249 102 18446744073709551615 1 { 249 103 249 104 18446744073709551615 38 // dump the decrypted packet in a file 250 11 250 49 18446744073709551615 6 u_char 251 11 251 17 2 11 new_segment 251 18 251 29 155 1 = 251 30 251 31 18446744073709551615 10 hdr_802_11 251 32 251 42 148 2 -> 251 42 251 44 18446744073709551615 13 frame_control 251 44 251 57 10 1 [ 251 57 251 58 18446744073709551615 1 1 251 58 251 59 18446744073709551615 1 ] 251 59 251 60 18446744073709551615 1 ; 251 60 251 61 18446744073709551615 11 new_segment 252 11 252 22 155 2 &= 252 23 252 25 18446744073709551615 1 ~ 252 26 252 27 18446744073709551615 1 ( 252 27 252 28 18446744073709551615 3 1UL 252 28 252 31 18446744073709551615 2 << 252 32 252 34 18446744073709551615 1 6 252 35 252 36 18446744073709551615 1 ) 252 36 252 37 18446744073709551615 1 ; 252 37 252 38 18446744073709551615 6 memcpy 253 11 253 17 144 1 ( 253 17 253 18 144 1 & 253 18 253 19 18446744073709551615 10 hdr_802_11 253 19 253 29 148 2 -> 253 29 253 31 18446744073709551615 13 frame_control 253 31 253 44 10 1 [ 253 44 253 45 18446744073709551615 1 1 253 45 253 46 18446744073709551615 1 ] 253 46 253 47 18446744073709551615 1 , 253 47 253 48 144 1 & 253 49 253 50 18446744073709551615 11 new_segment 253 50 253 61 155 1 , 253 61 253 62 144 3 1UL 253 63 253 66 18446744073709551615 1 ) 253 66 253 67 144 1 ; 253 67 253 68 18446744073709551615 14 dump_decrypted 254 11 254 25 108 1 ( 254 25 254 26 108 1 ( 254 26 254 27 18446744073709551615 6 u_char 254 27 254 33 2 1 * 254 34 254 35 18446744073709551615 1 ) 254 35 254 36 18446744073709551615 8 dumpfile 254 36 254 44 97 1 , 254 44 254 45 108 6 header 254 46 254 52 146 1 , 254 52 254 53 108 6 buffer 254 54 254 60 147 1 ) 254 60 254 61 108 1 ; 254 61 254 62 18446744073709551615 49 // print some useful info if the packet is TCP/IP 256 11 256 60 18446744073709551615 5 const 257 11 257 16 18446744073709551615 6 struct 257 17 257 23 18446744073709551615 9 sniff_LLC 257 24 257 33 24 1 * 257 34 257 35 18446744073709551615 7 hdr_llc 257 35 257 42 156 1 ; 257 42 257 43 18446744073709551615 7 hdr_llc 258 11 258 18 156 1 = 258 19 258 20 18446744073709551615 1 ( 258 21 258 22 18446744073709551615 6 struct 258 22 258 28 18446744073709551615 9 sniff_LLC 258 29 258 38 24 1 * 258 39 258 40 18446744073709551615 1 ) 258 40 258 41 18446744073709551615 1 ( 258 41 258 42 18446744073709551615 6 buffer 258 42 258 48 147 1 + 258 49 258 50 18446744073709551615 16 PRISM_HEADER_LEN 258 51 258 67 18446744073709551615 1 + 258 68 258 69 18446744073709551615 6 sizeof 258 70 258 76 18446744073709551615 1 ( 258 76 258 77 18446744073709551615 6 struct 258 77 258 83 18446744073709551615 12 sniff_802_11 258 84 258 96 9 1 ) 258 96 258 97 18446744073709551615 1 + 258 98 258 99 18446744073709551615 1 8 258 100 258 101 18446744073709551615 1 ) 258 101 258 102 18446744073709551615 1 ; 258 102 258 103 18446744073709551615 2 if 259 11 259 13 18446744073709551615 1 ( 259 13 259 14 18446744073709551615 7 hdr_llc 259 14 259 21 156 2 -> 259 21 259 23 18446744073709551615 4 dsap 259 23 259 27 25 2 == 259 28 259 30 18446744073709551615 4 0xaa 259 31 259 35 18446744073709551615 1 ) 259 35 259 36 18446744073709551615 1 { 259 37 259 38 18446744073709551615 5 const 260 13 260 18 18446744073709551615 6 struct 260 19 260 25 18446744073709551615 10 sniff_SNAP 260 26 260 36 28 1 * 260 37 260 38 18446744073709551615 8 hdr_snap 260 38 260 46 157 1 ; 260 46 260 47 18446744073709551615 8 hdr_snap 261 13 261 21 157 1 = 261 22 261 23 18446744073709551615 1 ( 261 24 261 25 18446744073709551615 6 struct 261 25 261 31 18446744073709551615 10 sniff_SNAP 261 32 261 42 28 1 * 261 43 261 44 18446744073709551615 1 ) 261 44 261 45 18446744073709551615 1 ( 261 45 261 46 18446744073709551615 6 buffer 261 46 261 52 147 1 + 261 53 261 54 18446744073709551615 16 PRISM_HEADER_LEN 261 55 261 71 18446744073709551615 1 + 261 72 261 73 18446744073709551615 6 sizeof 261 74 261 80 18446744073709551615 1 ( 261 80 261 81 18446744073709551615 6 struct 261 81 261 87 18446744073709551615 12 sniff_802_11 261 88 261 100 9 1 ) 261 100 261 101 18446744073709551615 1 + 261 102 261 103 18446744073709551615 1 8 261 104 261 105 18446744073709551615 1 + 261 106 261 107 18446744073709551615 6 sizeof 261 108 261 114 18446744073709551615 1 ( 261 114 261 115 18446744073709551615 6 struct 261 115 261 121 18446744073709551615 9 sniff_LLC 261 122 261 131 24 1 ) 261 131 261 132 18446744073709551615 1 ) 261 132 261 133 18446744073709551615 1 ; 261 133 261 134 18446744073709551615 6 u_char 262 13 262 19 2 10 ether_IPv4 262 20 262 30 158 1 [ 262 30 262 31 18446744073709551615 1 ] 262 31 262 32 18446744073709551615 1 = 262 33 262 34 18446744073709551615 1 { 262 35 262 36 18446744073709551615 4 0x08 262 36 262 40 18446744073709551615 1 , 262 40 262 41 18446744073709551615 4 0x00 262 42 262 46 18446744073709551615 1 } 262 46 262 47 18446744073709551615 1 ; 262 47 262 48 18446744073709551615 2 if 263 13 263 15 18446744073709551615 1 ( 263 15 263 16 18446744073709551615 6 memcmp 263 16 263 22 159 1 ( 263 22 263 23 159 8 hdr_snap 263 23 263 31 157 2 -> 263 31 263 33 18446744073709551615 4 type 263 33 263 37 30 1 , 263 37 263 38 159 10 ether_IPv4 263 39 263 49 158 1 , 263 49 263 50 159 1 2 263 51 263 52 18446744073709551615 1 ) 263 52 263 53 159 2 == 263 54 263 56 18446744073709551615 1 0 263 57 263 58 18446744073709551615 1 ) 263 58 263 59 18446744073709551615 1 { 263 60 263 61 18446744073709551615 5 const 264 15 264 20 18446744073709551615 6 struct 264 21 264 27 18446744073709551615 8 sniff_IP 264 28 264 36 45 1 * 264 37 264 38 18446744073709551615 6 hdr_ip 264 38 264 44 160 1 ; 264 44 264 45 18446744073709551615 6 hdr_ip 265 15 265 21 160 1 = 265 22 265 23 18446744073709551615 1 ( 265 24 265 25 18446744073709551615 6 struct 265 25 265 31 18446744073709551615 8 sniff_IP 265 32 265 40 45 1 * 265 41 265 42 18446744073709551615 1 ) 265 42 265 43 18446744073709551615 1 ( 265 43 265 44 18446744073709551615 6 buffer 265 44 265 50 147 1 + 265 51 265 52 18446744073709551615 16 PRISM_HEADER_LEN 265 53 265 69 18446744073709551615 1 + 265 70 265 71 18446744073709551615 6 sizeof 265 72 265 78 18446744073709551615 1 ( 265 78 265 79 18446744073709551615 6 struct 265 79 265 85 18446744073709551615 12 sniff_802_11 265 86 265 98 9 1 ) 265 98 265 99 18446744073709551615 1 + 265 100 265 101 18446744073709551615 1 8 265 102 265 103 18446744073709551615 1 + 265 104 265 105 18446744073709551615 6 sizeof 265 106 265 112 18446744073709551615 1 ( 265 112 265 113 18446744073709551615 6 struct 265 113 265 119 18446744073709551615 9 sniff_LLC 265 120 265 129 24 1 ) 265 129 265 130 18446744073709551615 1 + 265 131 265 132 18446744073709551615 6 sizeof 265 133 265 139 18446744073709551615 1 ( 265 139 265 140 18446744073709551615 6 struct 265 140 265 146 18446744073709551615 10 sniff_SNAP 265 147 265 157 28 1 ) 265 157 265 158 18446744073709551615 1 ) 265 158 265 159 18446744073709551615 1 ; 265 159 265 160 18446744073709551615 2 if 266 15 266 17 18446744073709551615 1 ( 266 17 266 18 18446744073709551615 6 hdr_ip 266 18 266 24 160 2 -> 266 24 266 26 18446744073709551615 8 protocol 266 26 266 34 54 2 == 266 35 266 37 18446744073709551615 4 0x06 266 38 266 42 18446744073709551615 1 ) 266 42 266 43 18446744073709551615 1 { 266 44 266 45 18446744073709551615 5 const 267 17 267 22 18446744073709551615 6 struct 267 23 267 29 18446744073709551615 9 sniff_TCP 267 30 267 39 58 1 * 267 40 267 41 18446744073709551615 7 hdr_tcp 267 41 267 48 161 1 ; 267 48 267 49 18446744073709551615 7 hdr_tcp 268 17 268 24 161 1 = 268 25 268 26 18446744073709551615 1 ( 268 27 268 28 18446744073709551615 6 struct 268 28 268 34 18446744073709551615 9 sniff_TCP 268 35 268 44 58 1 * 268 45 268 46 18446744073709551615 1 ) 268 46 268 47 18446744073709551615 1 ( 268 47 268 48 18446744073709551615 6 buffer 268 48 268 54 147 1 + 268 55 268 56 18446744073709551615 16 PRISM_HEADER_LEN 268 57 268 73 18446744073709551615 1 + 268 74 268 75 18446744073709551615 6 sizeof 268 76 268 82 18446744073709551615 1 ( 268 82 268 83 18446744073709551615 6 struct 268 83 268 89 18446744073709551615 12 sniff_802_11 268 90 268 102 9 1 ) 268 102 268 103 18446744073709551615 1 + 268 104 268 105 18446744073709551615 1 8 268 106 268 107 18446744073709551615 1 + 268 108 268 109 18446744073709551615 6 sizeof 268 110 268 116 18446744073709551615 1 ( 268 116 268 117 18446744073709551615 6 struct 268 117 268 123 18446744073709551615 9 sniff_LLC 268 124 268 133 24 1 ) 268 133 268 134 18446744073709551615 1 + 268 135 268 136 18446744073709551615 6 sizeof 268 137 268 143 18446744073709551615 1 ( 268 143 268 144 18446744073709551615 6 struct 268 144 268 150 18446744073709551615 10 sniff_SNAP 268 151 268 161 28 1 ) 268 161 268 162 18446744073709551615 1 + 268 163 268 164 18446744073709551615 1 ( 268 165 268 166 18446744073709551615 1 ( 268 166 268 167 18446744073709551615 3 int 268 167 268 170 18446744073709551615 1 ) 268 170 268 171 18446744073709551615 6 hdr_ip 268 171 268 177 160 2 -> 268 177 268 179 18446744073709551615 5 ip_hl 268 179 268 184 46 1 ) 268 184 268 185 18446744073709551615 1 * 268 186 268 187 18446744073709551615 2 32 268 188 268 190 18446744073709551615 1 / 268 191 268 192 18446744073709551615 1 8 268 193 268 194 18446744073709551615 1 ) 268 194 268 195 18446744073709551615 1 ; 268 195 268 196 18446744073709551615 1 } 269 15 269 16 18446744073709551615 1 } 270 13 270 14 18446744073709551615 1 } 271 11 271 12 18446744073709551615 1 } 272 9 272 10 18446744073709551615 4 else 273 9 273 13 18446744073709551615 1 { 273 14 273 15 18446744073709551615 10 // Discard 274 11 274 21 18446744073709551615 1 } 275 9 275 10 18446744073709551615 1 } 276 7 276 8 18446744073709551615 4 else 277 7 277 11 18446744073709551615 1 { 277 12 277 13 18446744073709551615 10 // Discard 278 9 278 19 18446744073709551615 1 } 279 7 279 8 18446744073709551615 1 } 280 5 280 6 18446744073709551615 4 else 281 5 281 9 18446744073709551615 1 { 281 10 281 11 18446744073709551615 22 // data is unprotected 282 7 282 29 18446744073709551615 5 const 283 7 283 12 18446744073709551615 6 struct 283 13 283 19 18446744073709551615 9 sniff_LLC 283 20 283 29 24 1 * 283 30 283 31 18446744073709551615 7 hdr_llc 283 31 283 38 162 1 ; 283 38 283 39 18446744073709551615 7 hdr_llc 284 7 284 14 162 1 = 284 15 284 16 18446744073709551615 1 ( 284 17 284 18 18446744073709551615 6 struct 284 18 284 24 18446744073709551615 9 sniff_LLC 284 25 284 34 24 1 * 284 35 284 36 18446744073709551615 1 ) 284 36 284 37 18446744073709551615 1 ( 284 37 284 38 18446744073709551615 6 buffer 284 38 284 44 147 1 + 284 45 284 46 18446744073709551615 16 PRISM_HEADER_LEN 284 47 284 63 18446744073709551615 1 + 284 64 284 65 18446744073709551615 6 sizeof 284 66 284 72 18446744073709551615 1 ( 284 72 284 73 18446744073709551615 6 struct 284 73 284 79 18446744073709551615 12 sniff_802_11 284 80 284 92 9 1 ) 284 92 284 93 18446744073709551615 1 ) 284 93 284 94 18446744073709551615 1 ; 284 94 284 95 18446744073709551615 2 if 285 7 285 9 18446744073709551615 1 ( 285 9 285 10 18446744073709551615 7 hdr_llc 285 10 285 17 162 2 -> 285 17 285 19 18446744073709551615 4 dsap 285 19 285 23 25 2 == 285 24 285 26 18446744073709551615 4 0xaa 285 27 285 31 18446744073709551615 1 ) 285 31 285 32 18446744073709551615 1 { 285 33 285 34 18446744073709551615 5 const 286 9 286 14 18446744073709551615 6 struct 286 15 286 21 18446744073709551615 10 sniff_SNAP 286 22 286 32 28 1 * 286 33 286 34 18446744073709551615 8 hdr_snap 286 34 286 42 163 1 ; 286 42 286 43 18446744073709551615 8 hdr_snap 287 9 287 17 163 1 = 287 18 287 19 18446744073709551615 1 ( 287 20 287 21 18446744073709551615 6 struct 287 21 287 27 18446744073709551615 10 sniff_SNAP 287 28 287 38 28 1 * 287 39 287 40 18446744073709551615 1 ) 287 40 287 41 18446744073709551615 1 ( 287 41 287 42 18446744073709551615 6 buffer 287 42 287 48 147 1 + 287 49 287 50 18446744073709551615 16 PRISM_HEADER_LEN 287 51 287 67 18446744073709551615 1 + 287 68 287 69 18446744073709551615 6 sizeof 287 70 287 76 18446744073709551615 1 ( 287 76 287 77 18446744073709551615 6 struct 287 77 287 83 18446744073709551615 12 sniff_802_11 287 84 287 96 9 1 ) 287 96 287 97 18446744073709551615 1 + 287 98 287 99 18446744073709551615 6 sizeof 287 100 287 106 18446744073709551615 1 ( 287 106 287 107 18446744073709551615 6 struct 287 107 287 113 18446744073709551615 9 sniff_LLC 287 114 287 123 24 1 ) 287 123 287 124 18446744073709551615 1 ) 287 124 287 125 18446744073709551615 1 ; 287 125 287 126 18446744073709551615 6 u_char 288 9 288 15 2 11 ether_eapol 288 16 288 27 164 1 [ 288 27 288 28 18446744073709551615 1 ] 288 28 288 29 18446744073709551615 1 = 288 30 288 31 18446744073709551615 1 { 288 32 288 33 18446744073709551615 4 0x88 288 33 288 37 18446744073709551615 1 , 288 37 288 38 18446744073709551615 4 0x8e 288 39 288 43 18446744073709551615 1 } 288 43 288 44 18446744073709551615 1 ; 288 44 288 45 18446744073709551615 84 // if the packet is an EAPOL protocol message we are listening to an 4 way handshake 289 9 289 93 18446744073709551615 2 if 290 9 290 11 18446744073709551615 1 ( 290 11 290 12 18446744073709551615 6 memcmp 290 12 290 18 159 1 ( 290 18 290 19 159 8 hdr_snap 290 19 290 27 163 2 -> 290 27 290 29 18446744073709551615 4 type 290 29 290 33 30 1 , 290 33 290 34 159 11 ether_eapol 290 35 290 46 164 1 , 290 46 290 47 159 1 2 290 48 290 49 18446744073709551615 1 ) 290 49 290 50 159 2 == 290 51 290 53 18446744073709551615 1 0 290 54 290 55 18446744073709551615 1 ) 290 55 290 56 18446744073709551615 1 { 290 57 290 58 18446744073709551615 5 const 291 11 291 16 18446744073709551615 6 struct 291 17 291 23 18446744073709551615 17 sniff_802_1x_auth 291 24 291 41 31 1 * 291 42 291 43 18446744073709551615 10 hdr_802_1x 291 43 291 53 165 1 ; 291 53 291 54 18446744073709551615 10 hdr_802_1x 292 11 292 21 165 1 = 292 22 292 23 18446744073709551615 1 ( 292 24 292 25 18446744073709551615 6 struct 292 25 292 31 18446744073709551615 17 sniff_802_1x_auth 292 32 292 49 31 1 * 292 50 292 51 18446744073709551615 1 ) 292 51 292 52 18446744073709551615 1 ( 292 52 292 53 18446744073709551615 6 buffer 292 53 292 59 147 1 + 292 60 292 61 18446744073709551615 16 PRISM_HEADER_LEN 292 62 292 78 18446744073709551615 1 + 292 79 292 80 18446744073709551615 6 sizeof 292 81 292 87 18446744073709551615 1 ( 292 87 292 88 18446744073709551615 6 struct 292 88 292 94 18446744073709551615 12 sniff_802_11 292 95 292 107 9 1 ) 292 107 292 108 18446744073709551615 1 + 292 109 292 110 18446744073709551615 6 sizeof 292 111 292 117 18446744073709551615 1 ( 292 117 292 118 18446744073709551615 6 struct 292 118 292 124 18446744073709551615 9 sniff_LLC 292 125 292 134 24 1 ) 292 134 292 135 18446744073709551615 1 + 292 136 292 137 18446744073709551615 6 sizeof 292 138 292 144 18446744073709551615 1 ( 292 144 292 145 18446744073709551615 6 struct 292 145 292 151 18446744073709551615 10 sniff_SNAP 292 152 292 162 28 1 ) 292 162 292 163 18446744073709551615 1 ) 292 163 292 164 18446744073709551615 1 ; 292 164 292 165 18446744073709551615 3 int 293 11 293 14 18446744073709551615 20 get_from_hashmap_res 293 15 293 35 166 1 = 293 36 293 37 18446744073709551615 11 hashmap_get 293 38 293 49 154 1 ( 293 49 293 50 154 3 map 293 50 293 53 92 1 , 293 53 293 54 154 12 mac_toString 293 55 293 67 102 1 ( 293 67 293 68 102 11 sta_address 293 68 293 79 153 1 ) 293 79 293 80 102 1 , 293 80 293 81 154 1 ( 293 82 293 83 18446744073709551615 4 void 293 83 293 87 18446744073709551615 1 * 293 88 293 89 18446744073709551615 1 * 293 89 293 90 18446744073709551615 1 ) 293 90 293 91 18446744073709551615 1 & 293 91 293 92 18446744073709551615 17 packet_eapol_info 293 92 293 109 152 1 ) 293 109 293 110 154 1 ; 293 110 293 111 18446744073709551615 158 // if we don't have info about WPA handshake for that STA and this message is the first one of the handshake, we start listening for the handshake to complete 294 11 294 169 18446744073709551615 2 if 295 11 295 13 18446744073709551615 1 ( 295 13 295 14 18446744073709551615 20 get_from_hashmap_res 295 14 295 34 166 2 == 295 35 295 37 18446744073709551615 11 MAP_MISSING 295 38 295 49 18446744073709551615 2 && 295 50 295 52 18446744073709551615 16 packet_direction 295 53 295 69 150 2 == 295 70 295 72 18446744073709551615 1 2 295 73 295 74 18446744073709551615 2 && 295 75 295 77 18446744073709551615 1 ( 295 78 295 79 18446744073709551615 16 TAKE_N_BITS_FROM 295 79 295 95 18446744073709551615 1 ( 295 95 295 96 18446744073709551615 10 hdr_802_1x 295 96 295 106 18446744073709551615 2 -> 295 106 295 108 18446744073709551615 15 key_information 295 108 295 123 18446744073709551615 1 [ 295 123 295 124 18446744073709551615 1 0 295 124 295 125 18446744073709551615 1 ] 295 125 295 126 18446744073709551615 1 , 295 126 295 127 18446744073709551615 1 0 295 128 295 129 18446744073709551615 1 , 295 129 295 130 18446744073709551615 1 1 295 131 295 132 18446744073709551615 1 ) 295 132 295 133 18446744073709551615 1 ) 295 133 295 134 18446744073709551615 2 == 295 135 295 137 18446744073709551615 1 0 295 138 295 139 18446744073709551615 1 ) 295 139 295 140 18446744073709551615 1 { 295 141 295 142 18446744073709551615 6 struct 296 13 296 19 18446744073709551615 10 eapol_info 296 20 296 30 81 1 * 296 31 296 32 18446744073709551615 21 new_packet_eapol_info 296 32 296 53 167 1 = 296 54 296 55 18446744073709551615 6 malloc 296 56 296 62 168 1 ( 296 62 296 63 168 6 sizeof 296 63 296 69 18446744073709551615 1 ( 296 69 296 70 18446744073709551615 6 struct 296 70 296 76 18446744073709551615 10 eapol_info 296 77 296 87 81 1 ) 296 87 296 88 18446744073709551615 1 ) 296 88 296 89 168 1 ; 296 89 296 90 18446744073709551615 11 hashmap_put 297 13 297 24 169 1 ( 297 24 297 25 169 3 map 297 25 297 28 92 1 , 297 28 297 29 169 12 mac_toString 297 30 297 42 102 1 ( 297 42 297 43 102 11 sta_address 297 43 297 54 153 1 ) 297 54 297 55 102 1 , 297 55 297 56 169 21 new_packet_eapol_info 297 57 297 78 167 1 ) 297 78 297 79 169 1 ; 297 79 297 80 18446744073709551615 6 memcpy 298 13 298 19 144 1 ( 298 19 298 20 144 21 new_packet_eapol_info 298 20 298 41 167 2 -> 298 41 298 43 18446744073709551615 6 ANonce 298 43 298 49 83 1 , 298 49 298 50 144 10 hdr_802_1x 298 51 298 61 165 2 -> 298 61 298 63 18446744073709551615 13 wpa_key_nonce 298 63 298 76 39 1 , 298 76 298 77 144 2 32 298 78 298 80 18446744073709551615 1 ) 298 80 298 81 144 1 ; 298 81 298 82 18446744073709551615 6 memcpy 299 13 299 19 144 1 ( 299 19 299 20 144 21 new_packet_eapol_info 299 20 299 41 167 2 -> 299 41 299 43 18446744073709551615 11 last_replay 299 43 299 54 87 1 , 299 54 299 55 144 10 hdr_802_1x 299 56 299 66 165 2 -> 299 66 299 68 18446744073709551615 14 replay_counter 299 68 299 82 38 1 , 299 82 299 83 144 1 8 299 84 299 85 18446744073709551615 1 ) 299 85 299 86 144 1 ; 299 86 299 87 18446744073709551615 21 new_packet_eapol_info 300 13 300 34 167 2 -> 300 34 300 36 18446744073709551615 6 status 300 36 300 42 86 1 = 300 43 300 44 18446744073709551615 19 WAITING_EAPOL_KEY_2 300 45 300 64 4 1 ; 300 64 300 65 18446744073709551615 1 } 301 11 301 12 18446744073709551615 4 else 302 11 302 15 18446744073709551615 2 if 302 16 302 18 18446744073709551615 1 ( 302 18 302 19 18446744073709551615 20 get_from_hashmap_res 302 19 302 39 166 2 == 302 40 302 42 18446744073709551615 6 MAP_OK 302 43 302 49 18446744073709551615 1 ) 302 49 302 50 18446744073709551615 1 { 302 51 302 52 18446744073709551615 46 // if we're already listening for an handshake 302 53 302 99 18446744073709551615 12 eapol_status 303 13 303 25 8 14 current_status 303 26 303 40 170 1 = 303 41 303 42 18446744073709551615 17 packet_eapol_info 303 43 303 60 152 2 -> 303 60 303 62 18446744073709551615 6 status 303 62 303 68 86 1 ; 303 68 303 69 18446744073709551615 7 u_short 304 13 304 20 171 11 data_length 304 21 304 32 172 1 = 304 33 304 34 18446744073709551615 1 ( 304 35 304 36 18446744073709551615 1 ( 304 36 304 37 18446744073709551615 10 hdr_802_1x 304 37 304 47 165 2 -> 304 47 304 49 18446744073709551615 19 wpa_key_data_length 304 49 304 68 44 1 [ 304 68 304 69 18446744073709551615 1 0 304 69 304 70 18446744073709551615 1 ] 304 70 304 71 18446744073709551615 2 << 304 72 304 74 18446744073709551615 1 8 304 75 304 76 18446744073709551615 1 ) 304 76 304 77 18446744073709551615 1 + 304 78 304 79 18446744073709551615 1 ( 304 80 304 81 18446744073709551615 10 hdr_802_1x 304 81 304 91 165 2 -> 304 91 304 93 18446744073709551615 19 wpa_key_data_length 304 93 304 112 44 1 [ 304 112 304 113 18446744073709551615 1 1 304 113 304 114 18446744073709551615 1 ] 304 114 304 115 18446744073709551615 1 ) 304 115 304 116 18446744073709551615 1 ) 304 116 304 117 18446744073709551615 1 ; 304 117 304 118 18446744073709551615 2 if 305 13 305 15 18446744073709551615 1 ( 305 15 305 16 18446744073709551615 16 packet_direction 305 16 305 32 150 2 == 305 33 305 35 18446744073709551615 1 2 305 36 305 37 18446744073709551615 2 && 305 38 305 40 18446744073709551615 1 ( 305 41 305 42 18446744073709551615 16 TAKE_N_BITS_FROM 305 42 305 58 18446744073709551615 1 ( 305 58 305 59 18446744073709551615 10 hdr_802_1x 305 59 305 69 18446744073709551615 2 -> 305 69 305 71 18446744073709551615 15 key_information 305 71 305 86 18446744073709551615 1 [ 305 86 305 87 18446744073709551615 1 0 305 87 305 88 18446744073709551615 1 ] 305 88 305 89 18446744073709551615 1 , 305 89 305 90 18446744073709551615 1 0 305 91 305 92 18446744073709551615 1 , 305 92 305 93 18446744073709551615 1 1 305 94 305 95 18446744073709551615 1 ) 305 95 305 96 18446744073709551615 1 ) 305 96 305 97 18446744073709551615 2 == 305 98 305 100 18446744073709551615 1 0 305 101 305 102 18446744073709551615 1 ) 305 102 305 103 18446744073709551615 1 { 305 104 305 105 18446744073709551615 42 // the AP is demanding for a new handshake 305 106 305 148 18446744073709551615 76 // we remove previous informations and start listening for the new handshake 306 15 306 91 18446744073709551615 14 hashmap_remove 307 15 307 29 173 1 ( 307 29 307 30 173 3 map 307 30 307 33 92 1 , 307 33 307 34 173 12 mac_toString 307 35 307 47 102 1 ( 307 47 307 48 102 11 sta_address 307 48 307 59 153 1 ) 307 59 307 60 102 1 ) 307 60 307 61 173 1 ; 307 61 307 62 18446744073709551615 6 struct 308 15 308 21 18446744073709551615 10 eapol_info 308 22 308 32 81 1 * 308 33 308 34 18446744073709551615 21 new_packet_eapol_info 308 34 308 55 174 1 = 308 56 308 57 18446744073709551615 6 malloc 308 58 308 64 168 1 ( 308 64 308 65 168 6 sizeof 308 65 308 71 18446744073709551615 1 ( 308 71 308 72 18446744073709551615 6 struct 308 72 308 78 18446744073709551615 10 eapol_info 308 79 308 89 81 1 ) 308 89 308 90 18446744073709551615 1 ) 308 90 308 91 168 1 ; 308 91 308 92 18446744073709551615 11 hashmap_put 309 15 309 26 169 1 ( 309 26 309 27 169 3 map 309 27 309 30 92 1 , 309 30 309 31 169 12 mac_toString 309 32 309 44 102 1 ( 309 44 309 45 102 11 sta_address 309 45 309 56 153 1 ) 309 56 309 57 102 1 , 309 57 309 58 169 21 new_packet_eapol_info 309 59 309 80 174 1 ) 309 80 309 81 169 1 ; 309 81 309 82 18446744073709551615 6 memcpy 310 15 310 21 144 1 ( 310 21 310 22 144 21 new_packet_eapol_info 310 22 310 43 174 2 -> 310 43 310 45 18446744073709551615 6 ANonce 310 45 310 51 83 1 , 310 51 310 52 144 10 hdr_802_1x 310 53 310 63 165 2 -> 310 63 310 65 18446744073709551615 13 wpa_key_nonce 310 65 310 78 39 1 , 310 78 310 79 144 2 32 310 80 310 82 18446744073709551615 1 ) 310 82 310 83 144 1 ; 310 83 310 84 18446744073709551615 6 memcpy 311 15 311 21 144 1 ( 311 21 311 22 144 21 new_packet_eapol_info 311 22 311 43 174 2 -> 311 43 311 45 18446744073709551615 11 last_replay 311 45 311 56 87 1 , 311 56 311 57 144 10 hdr_802_1x 311 58 311 68 165 2 -> 311 68 311 70 18446744073709551615 14 replay_counter 311 70 311 84 38 1 , 311 84 311 85 144 1 8 311 86 311 87 18446744073709551615 1 ) 311 87 311 88 144 1 ; 311 88 311 89 18446744073709551615 21 new_packet_eapol_info 312 15 312 36 174 2 -> 312 36 312 38 18446744073709551615 6 status 312 38 312 44 86 1 = 312 45 312 46 18446744073709551615 19 WAITING_EAPOL_KEY_2 312 47 312 66 4 1 ; 312 66 312 67 18446744073709551615 1 } 313 13 313 14 18446744073709551615 74 // is the message is the second one of the 4WHS and we were waiting for it 314 13 314 87 18446744073709551615 2 if 315 13 315 15 18446744073709551615 1 ( 315 15 315 16 18446744073709551615 14 current_status 315 16 315 30 170 2 == 315 31 315 33 18446744073709551615 19 WAITING_EAPOL_KEY_2 315 34 315 53 4 2 && 315 54 315 56 18446744073709551615 16 packet_direction 315 57 315 73 150 2 == 315 74 315 76 18446744073709551615 1 1 315 77 315 78 18446744073709551615 2 && 315 79 315 81 18446744073709551615 16 TAKE_N_BITS_FROM 315 82 315 98 18446744073709551615 1 ( 315 98 315 99 18446744073709551615 10 hdr_802_1x 315 99 315 109 18446744073709551615 2 -> 315 109 315 111 18446744073709551615 15 key_information 315 111 315 126 18446744073709551615 1 [ 315 126 315 127 18446744073709551615 1 0 315 127 315 128 18446744073709551615 1 ] 315 128 315 129 18446744073709551615 1 , 315 129 315 130 18446744073709551615 1 0 315 131 315 132 18446744073709551615 1 , 315 132 315 133 18446744073709551615 1 1 315 134 315 135 18446744073709551615 1 ) 315 135 315 136 18446744073709551615 2 && 315 137 315 139 18446744073709551615 1 ( 315 140 315 141 18446744073709551615 16 TAKE_N_BITS_FROM 315 141 315 157 18446744073709551615 1 ( 315 157 315 158 18446744073709551615 10 hdr_802_1x 315 158 315 168 18446744073709551615 2 -> 315 168 315 170 18446744073709551615 15 key_information 315 170 315 185 18446744073709551615 1 [ 315 185 315 186 18446744073709551615 1 1 315 186 315 187 18446744073709551615 1 ] 315 187 315 188 18446744073709551615 1 , 315 188 315 189 18446744073709551615 1 6 315 190 315 191 18446744073709551615 1 , 315 191 315 192 18446744073709551615 1 1 315 193 315 194 18446744073709551615 1 ) 315 194 315 195 18446744073709551615 1 ) 315 195 315 196 18446744073709551615 2 == 315 197 315 199 18446744073709551615 1 0 315 200 315 201 18446744073709551615 2 && 315 202 315 204 18446744073709551615 1 ( 315 205 315 206 18446744073709551615 16 TAKE_N_BITS_FROM 315 206 315 222 18446744073709551615 1 ( 315 222 315 223 18446744073709551615 10 hdr_802_1x 315 223 315 233 18446744073709551615 2 -> 315 233 315 235 18446744073709551615 15 key_information 315 235 315 250 18446744073709551615 1 [ 315 250 315 251 18446744073709551615 1 1 315 251 315 252 18446744073709551615 1 ] 315 252 315 253 18446744073709551615 1 , 315 253 315 254 18446744073709551615 1 7 315 255 315 256 18446744073709551615 1 , 315 256 315 257 18446744073709551615 1 1 315 258 315 259 18446744073709551615 1 ) 315 259 315 260 18446744073709551615 1 ) 315 260 315 261 18446744073709551615 2 == 315 262 315 264 18446744073709551615 1 0 315 265 315 266 18446744073709551615 2 && 315 267 315 269 18446744073709551615 11 data_length 315 270 315 281 172 1 > 315 282 315 283 18446744073709551615 1 0 315 284 315 285 18446744073709551615 2 && 315 286 315 288 18446744073709551615 6 memcmp 315 289 315 295 159 1 ( 315 295 315 296 159 17 packet_eapol_info 315 296 315 313 152 2 -> 315 313 315 315 18446744073709551615 11 last_replay 315 315 315 326 87 1 , 315 326 315 327 159 10 hdr_802_1x 315 328 315 338 165 2 -> 315 338 315 340 18446744073709551615 14 replay_counter 315 340 315 354 38 1 , 315 354 315 355 159 1 8 315 356 315 357 18446744073709551615 1 ) 315 357 315 358 159 2 == 315 359 315 361 18446744073709551615 1 0 315 362 315 363 18446744073709551615 1 ) 315 363 315 364 18446744073709551615 1 { 315 365 315 366 18446744073709551615 8 // msg 2 315 367 315 375 18446744073709551615 58 // we have all the infos needed for the computation of PTK 316 15 316 73 18446744073709551615 6 struct 317 15 317 21 18446744073709551615 3 ptk 317 22 317 25 75 1 * 317 26 317 27 18446744073709551615 3 PTK 317 27 317 30 175 1 = 317 31 317 32 18446744073709551615 1 ( 317 33 317 34 18446744073709551615 6 struct 317 34 317 40 18446744073709551615 3 ptk 317 41 317 44 75 1 * 317 45 317 46 18446744073709551615 1 ) 317 46 317 47 18446744073709551615 6 PRF512 317 47 317 53 103 1 ( 317 53 317 54 103 3 psk 317 54 317 57 89 1 , 317 57 317 58 103 1 A 317 59 317 60 1 1 , 317 60 317 61 103 6 strlen 317 62 317 68 126 1 ( 317 68 317 69 126 1 A 317 69 317 70 1 1 ) 317 70 317 71 126 1 , 317 71 317 72 103 14 ap_mac_address 317 73 317 87 88 1 , 317 87 317 88 103 11 sta_address 317 89 317 100 153 1 , 317 100 317 101 103 17 packet_eapol_info 317 102 317 119 152 2 -> 317 119 317 121 18446744073709551615 6 ANonce 317 121 317 127 83 1 , 317 127 317 128 103 10 hdr_802_1x 317 129 317 139 165 2 -> 317 139 317 141 18446744073709551615 13 wpa_key_nonce 317 141 317 154 39 1 ) 317 154 317 155 103 1 ; 317 155 317 156 18446744073709551615 6 u_char 318 15 318 21 2 1 * 318 22 318 23 18446744073709551615 8 real_MIC 318 23 318 31 176 1 = 318 32 318 33 18446744073709551615 6 malloc 318 34 318 40 168 1 ( 318 40 318 41 168 2 16 318 41 318 43 18446744073709551615 1 ) 318 43 318 44 168 1 ; 318 44 318 45 18446744073709551615 6 u_char 319 15 319 21 2 1 * 319 22 319 23 18446744073709551615 14 calculated_MIC 319 23 319 37 177 1 = 319 38 319 39 18446744073709551615 6 malloc 319 40 319 46 168 1 ( 319 46 319 47 168 2 16 319 47 319 49 18446744073709551615 1 ) 319 49 319 50 168 1 ; 319 50 319 51 18446744073709551615 6 memcpy 320 15 320 21 144 1 ( 320 21 320 22 144 8 real_MIC 320 22 320 30 176 1 , 320 30 320 31 144 10 hdr_802_1x 320 32 320 42 165 2 -> 320 42 320 44 18446744073709551615 11 wpa_key_MIC 320 44 320 55 43 1 , 320 55 320 56 144 2 16 320 57 320 59 18446744073709551615 1 ) 320 59 320 60 144 1 ; 320 60 320 61 18446744073709551615 6 memcpy 321 15 321 21 144 1 ( 321 21 321 22 144 10 hdr_802_1x 321 22 321 32 165 2 -> 321 32 321 34 18446744073709551615 11 wpa_key_MIC 321 34 321 45 43 1 , 321 45 321 46 144 8 NULL_MIC 321 47 321 55 3 1 , 321 55 321 56 144 2 16 321 57 321 59 18446744073709551615 1 ) 321 59 321 60 144 1 ; 321 60 321 61 18446744073709551615 4 HMAC 322 15 322 19 178 1 ( 322 19 322 20 178 8 EVP_sha1 322 20 322 28 179 1 ( 322 28 322 29 179 1 ) 322 29 322 30 179 1 , 322 30 322 31 178 3 PTK 322 32 322 35 175 2 -> 322 35 322 37 18446744073709551615 3 kck 322 37 322 40 76 1 , 322 40 322 41 178 2 16 322 42 322 44 18446744073709551615 1 , 322 44 322 45 178 10 hdr_802_1x 322 46 322 56 165 1 , 322 56 322 57 178 2 99 322 58 322 60 18446744073709551615 1 + 322 61 322 62 18446744073709551615 11 data_length 322 63 322 74 172 1 , 322 74 322 75 178 14 calculated_MIC 322 76 322 90 177 1 , 322 90 322 91 178 1 & 322 92 322 93 18446744073709551615 11 SHA1_LENGTH 322 93 322 104 0 1 ) 322 104 322 105 178 1 ; 322 105 322 106 18446744073709551615 107 // if the original MIC in the packet is equal to the one we calculate using the derived PTK, then PTK is OK 323 15 323 122 18446744073709551615 2 if 324 15 324 17 18446744073709551615 1 ( 324 17 324 18 18446744073709551615 6 memcmp 324 18 324 24 159 1 ( 324 24 324 25 159 8 real_MIC 324 25 324 33 176 1 , 324 33 324 34 159 14 calculated_MIC 324 35 324 49 177 1 , 324 49 324 50 159 2 16 324 51 324 53 18446744073709551615 1 ) 324 53 324 54 159 2 == 324 55 324 57 18446744073709551615 1 0 324 58 324 59 18446744073709551615 1 ) 324 59 324 60 18446744073709551615 1 { 324 61 324 62 18446744073709551615 6 memcpy 325 17 325 23 144 1 ( 325 23 325 24 144 17 packet_eapol_info 325 24 325 41 152 2 -> 325 41 325 43 18446744073709551615 6 SNonce 325 43 325 49 84 1 , 325 49 325 50 144 10 hdr_802_1x 325 51 325 61 165 2 -> 325 61 325 63 18446744073709551615 13 wpa_key_nonce 325 63 325 76 39 1 , 325 76 325 77 144 2 32 325 78 325 80 18446744073709551615 1 ) 325 80 325 81 144 1 ; 325 81 325 82 18446744073709551615 6 memcpy 326 17 326 23 144 1 ( 326 23 326 24 144 1 & 326 24 326 25 18446744073709551615 17 packet_eapol_info 326 25 326 42 152 2 -> 326 42 326 44 18446744073709551615 3 PTK 326 44 326 47 85 1 , 326 47 326 48 144 3 PTK 326 49 326 52 175 1 , 326 52 326 53 144 6 sizeof 326 54 326 60 18446744073709551615 1 ( 326 60 326 61 18446744073709551615 6 struct 326 61 326 67 18446744073709551615 3 ptk 326 68 326 71 75 1 ) 326 71 326 72 18446744073709551615 1 ) 326 72 326 73 144 1 ; 326 73 326 74 18446744073709551615 17 packet_eapol_info 327 17 327 34 152 2 -> 327 34 327 36 18446744073709551615 6 status 327 36 327 42 86 1 = 327 43 327 44 18446744073709551615 19 WAITING_EAPOL_KEY_3 327 45 327 64 5 1 ; 327 64 327 65 18446744073709551615 1 } 328 15 328 16 18446744073709551615 1 } 329 13 329 14 18446744073709551615 4 else 330 13 330 17 18446744073709551615 2 if 330 18 330 20 18446744073709551615 1 ( 330 20 330 21 18446744073709551615 14 current_status 330 21 330 35 170 2 == 330 36 330 38 18446744073709551615 19 WAITING_EAPOL_KEY_3 330 39 330 58 5 2 && 330 59 330 61 18446744073709551615 16 packet_direction 330 62 330 78 150 2 == 330 79 330 81 18446744073709551615 1 2 330 82 330 83 18446744073709551615 2 && 330 84 330 86 18446744073709551615 16 TAKE_N_BITS_FROM 330 87 330 103 18446744073709551615 1 ( 330 103 330 104 18446744073709551615 10 hdr_802_1x 330 104 330 114 18446744073709551615 2 -> 330 114 330 116 18446744073709551615 15 key_information 330 116 330 131 18446744073709551615 1 [ 330 131 330 132 18446744073709551615 1 0 330 132 330 133 18446744073709551615 1 ] 330 133 330 134 18446744073709551615 1 , 330 134 330 135 18446744073709551615 1 0 330 136 330 137 18446744073709551615 1 , 330 137 330 138 18446744073709551615 1 1 330 139 330 140 18446744073709551615 1 ) 330 140 330 141 18446744073709551615 2 && 330 142 330 144 18446744073709551615 1 ( 330 145 330 146 18446744073709551615 16 TAKE_N_BITS_FROM 330 146 330 162 18446744073709551615 1 ( 330 162 330 163 18446744073709551615 10 hdr_802_1x 330 163 330 173 18446744073709551615 2 -> 330 173 330 175 18446744073709551615 15 key_information 330 175 330 190 18446744073709551615 1 [ 330 190 330 191 18446744073709551615 1 1 330 191 330 192 18446744073709551615 1 ] 330 192 330 193 18446744073709551615 1 , 330 193 330 194 18446744073709551615 1 6 330 195 330 196 18446744073709551615 1 , 330 196 330 197 18446744073709551615 1 1 330 198 330 199 18446744073709551615 1 ) 330 199 330 200 18446744073709551615 1 ) 330 200 330 201 18446744073709551615 2 && 330 202 330 204 18446744073709551615 1 ( 330 205 330 206 18446744073709551615 16 TAKE_N_BITS_FROM 330 206 330 222 18446744073709551615 1 ( 330 222 330 223 18446744073709551615 10 hdr_802_1x 330 223 330 233 18446744073709551615 2 -> 330 233 330 235 18446744073709551615 15 key_information 330 235 330 250 18446744073709551615 1 [ 330 250 330 251 18446744073709551615 1 1 330 251 330 252 18446744073709551615 1 ] 330 252 330 253 18446744073709551615 1 , 330 253 330 254 18446744073709551615 1 7 330 255 330 256 18446744073709551615 1 , 330 256 330 257 18446744073709551615 1 1 330 258 330 259 18446744073709551615 1 ) 330 259 330 260 18446744073709551615 1 ) 330 260 330 261 18446744073709551615 1 ) 330 261 330 262 18446744073709551615 1 { 330 263 330 264 18446744073709551615 8 // msg 3 330 265 330 273 18446744073709551615 6 u_char 331 15 331 21 2 1 * 331 22 331 23 18446744073709551615 3 KCK 331 23 331 26 180 1 = 331 27 331 28 18446744073709551615 17 packet_eapol_info 331 29 331 46 152 2 -> 331 46 331 48 18446744073709551615 3 PTK 331 48 331 51 85 1 . 331 51 331 52 18446744073709551615 3 kck 331 52 331 55 76 1 ; 331 55 331 56 18446744073709551615 6 u_char 332 15 332 21 2 1 * 332 22 332 23 18446744073709551615 8 real_MIC 332 23 332 31 181 1 = 332 32 332 33 18446744073709551615 6 malloc 332 34 332 40 168 1 ( 332 40 332 41 168 2 16 332 41 332 43 18446744073709551615 1 ) 332 43 332 44 168 1 ; 332 44 332 45 18446744073709551615 6 u_char 333 15 333 21 2 1 * 333 22 333 23 18446744073709551615 14 calculated_MIC 333 23 333 37 182 1 = 333 38 333 39 18446744073709551615 6 malloc 333 40 333 46 168 1 ( 333 46 333 47 168 2 16 333 47 333 49 18446744073709551615 1 ) 333 49 333 50 168 1 ; 333 50 333 51 18446744073709551615 6 memcpy 334 15 334 21 144 1 ( 334 21 334 22 144 8 real_MIC 334 22 334 30 181 1 , 334 30 334 31 144 10 hdr_802_1x 334 32 334 42 165 2 -> 334 42 334 44 18446744073709551615 11 wpa_key_MIC 334 44 334 55 43 1 , 334 55 334 56 144 2 16 334 57 334 59 18446744073709551615 1 ) 334 59 334 60 144 1 ; 334 60 334 61 18446744073709551615 6 memcpy 335 15 335 21 144 1 ( 335 21 335 22 144 10 hdr_802_1x 335 22 335 32 165 2 -> 335 32 335 34 18446744073709551615 11 wpa_key_MIC 335 34 335 45 43 1 , 335 45 335 46 144 8 NULL_MIC 335 47 335 55 3 1 , 335 55 335 56 144 2 16 335 57 335 59 18446744073709551615 1 ) 335 59 335 60 144 1 ; 335 60 335 61 18446744073709551615 4 HMAC 336 15 336 19 178 1 ( 336 19 336 20 178 8 EVP_sha1 336 20 336 28 179 1 ( 336 28 336 29 179 1 ) 336 29 336 30 179 1 , 336 30 336 31 178 3 KCK 336 32 336 35 180 1 , 336 35 336 36 178 2 16 336 37 336 39 18446744073709551615 1 , 336 39 336 40 178 10 hdr_802_1x 336 41 336 51 165 1 , 336 51 336 52 178 2 99 336 53 336 55 18446744073709551615 1 + 336 56 336 57 18446744073709551615 11 data_length 336 58 336 69 172 1 , 336 69 336 70 178 14 calculated_MIC 336 71 336 85 182 1 , 336 85 336 86 178 1 & 336 87 336 88 18446744073709551615 11 SHA1_LENGTH 336 88 336 99 0 1 ) 336 99 336 100 178 1 ; 336 100 336 101 18446744073709551615 103 // we keep checking for MIC correspondence, and if the packet is legitimate, we save the replay counter 337 15 337 118 18446744073709551615 2 if 338 15 338 17 18446744073709551615 1 ( 338 17 338 18 18446744073709551615 6 memcmp 338 18 338 24 159 1 ( 338 24 338 25 159 8 real_MIC 338 25 338 33 181 1 , 338 33 338 34 159 14 calculated_MIC 338 35 338 49 182 1 , 338 49 338 50 159 2 16 338 51 338 53 18446744073709551615 1 ) 338 53 338 54 159 2 == 338 55 338 57 18446744073709551615 1 0 338 58 338 59 18446744073709551615 1 ) 338 59 338 60 18446744073709551615 1 { 338 61 338 62 18446744073709551615 17 packet_eapol_info 339 17 339 34 152 2 -> 339 34 339 36 18446744073709551615 6 status 339 36 339 42 86 1 = 339 43 339 44 18446744073709551615 19 WAITING_EAPOL_KEY_4 339 45 339 64 6 1 ; 339 64 339 65 18446744073709551615 93 // we save replay counter since msg 2 and 4 look the same except for the replay counter value 340 17 340 110 18446744073709551615 6 memcpy 341 17 341 23 144 1 ( 341 23 341 24 144 17 packet_eapol_info 341 24 341 41 152 2 -> 341 41 341 43 18446744073709551615 11 last_replay 341 43 341 54 87 1 , 341 54 341 55 144 10 hdr_802_1x 341 56 341 66 165 2 -> 341 66 341 68 18446744073709551615 14 replay_counter 341 68 341 82 38 1 , 341 82 341 83 144 1 8 341 84 341 85 18446744073709551615 1 ) 341 85 341 86 144 1 ; 341 86 341 87 18446744073709551615 1 } 342 15 342 16 18446744073709551615 1 } 343 13 343 14 18446744073709551615 4 else 344 13 344 17 18446744073709551615 2 if 344 18 344 20 18446744073709551615 1 ( 344 20 344 21 18446744073709551615 14 current_status 344 21 344 35 170 2 == 344 36 344 38 18446744073709551615 19 WAITING_EAPOL_KEY_4 344 39 344 58 6 2 && 344 59 344 61 18446744073709551615 16 packet_direction 344 62 344 78 150 2 == 344 79 344 81 18446744073709551615 1 1 344 82 344 83 18446744073709551615 2 && 344 84 344 86 18446744073709551615 16 TAKE_N_BITS_FROM 344 87 344 103 18446744073709551615 1 ( 344 103 344 104 18446744073709551615 10 hdr_802_1x 344 104 344 114 18446744073709551615 2 -> 344 114 344 116 18446744073709551615 15 key_information 344 116 344 131 18446744073709551615 1 [ 344 131 344 132 18446744073709551615 1 0 344 132 344 133 18446744073709551615 1 ] 344 133 344 134 18446744073709551615 1 , 344 134 344 135 18446744073709551615 1 0 344 136 344 137 18446744073709551615 1 , 344 137 344 138 18446744073709551615 1 1 344 139 344 140 18446744073709551615 1 ) 344 140 344 141 18446744073709551615 2 && 344 142 344 144 18446744073709551615 1 ( 344 145 344 146 18446744073709551615 16 TAKE_N_BITS_FROM 344 146 344 162 18446744073709551615 1 ( 344 162 344 163 18446744073709551615 10 hdr_802_1x 344 163 344 173 18446744073709551615 2 -> 344 173 344 175 18446744073709551615 15 key_information 344 175 344 190 18446744073709551615 1 [ 344 190 344 191 18446744073709551615 1 1 344 191 344 192 18446744073709551615 1 ] 344 192 344 193 18446744073709551615 1 , 344 193 344 194 18446744073709551615 1 6 344 195 344 196 18446744073709551615 1 , 344 196 344 197 18446744073709551615 1 1 344 198 344 199 18446744073709551615 1 ) 344 199 344 200 18446744073709551615 1 ) 344 200 344 201 18446744073709551615 2 == 344 202 344 204 18446744073709551615 1 0 344 205 344 206 18446744073709551615 2 && 344 207 344 209 18446744073709551615 1 ( 344 210 344 211 18446744073709551615 16 TAKE_N_BITS_FROM 344 211 344 227 18446744073709551615 1 ( 344 227 344 228 18446744073709551615 10 hdr_802_1x 344 228 344 238 18446744073709551615 2 -> 344 238 344 240 18446744073709551615 15 key_information 344 240 344 255 18446744073709551615 1 [ 344 255 344 256 18446744073709551615 1 1 344 256 344 257 18446744073709551615 1 ] 344 257 344 258 18446744073709551615 1 , 344 258 344 259 18446744073709551615 1 7 344 260 344 261 18446744073709551615 1 , 344 261 344 262 18446744073709551615 1 1 344 263 344 264 18446744073709551615 1 ) 344 264 344 265 18446744073709551615 1 ) 344 265 344 266 18446744073709551615 2 == 344 267 344 269 18446744073709551615 1 0 344 270 344 271 18446744073709551615 2 && 344 272 344 274 18446744073709551615 6 memcmp 344 275 344 281 159 1 ( 344 281 344 282 159 17 packet_eapol_info 344 282 344 299 152 2 -> 344 299 344 301 18446744073709551615 11 last_replay 344 301 344 312 87 1 , 344 312 344 313 159 10 hdr_802_1x 344 314 344 324 165 2 -> 344 324 344 326 18446744073709551615 14 replay_counter 344 326 344 340 38 1 , 344 340 344 341 159 1 8 344 342 344 343 18446744073709551615 1 ) 344 343 344 344 159 2 == 344 345 344 347 18446744073709551615 1 0 344 348 344 349 18446744073709551615 1 ) 344 349 344 350 18446744073709551615 1 { 344 351 344 352 18446744073709551615 8 // msg 4 344 353 344 361 18446744073709551615 6 u_char 345 15 345 21 2 1 * 345 22 345 23 18446744073709551615 3 KCK 345 23 345 26 183 1 = 345 27 345 28 18446744073709551615 17 packet_eapol_info 345 29 345 46 152 2 -> 345 46 345 48 18446744073709551615 3 PTK 345 48 345 51 85 1 . 345 51 345 52 18446744073709551615 3 kck 345 52 345 55 76 1 ; 345 55 345 56 18446744073709551615 6 u_char 346 15 346 21 2 1 * 346 22 346 23 18446744073709551615 8 real_MIC 346 23 346 31 184 1 = 346 32 346 33 18446744073709551615 6 malloc 346 34 346 40 168 1 ( 346 40 346 41 168 2 16 346 41 346 43 18446744073709551615 1 ) 346 43 346 44 168 1 ; 346 44 346 45 18446744073709551615 6 u_char 347 15 347 21 2 1 * 347 22 347 23 18446744073709551615 14 calculated_MIC 347 23 347 37 185 1 = 347 38 347 39 18446744073709551615 6 malloc 347 40 347 46 168 1 ( 347 46 347 47 168 2 16 347 47 347 49 18446744073709551615 1 ) 347 49 347 50 168 1 ; 347 50 347 51 18446744073709551615 6 memcpy 348 15 348 21 144 1 ( 348 21 348 22 144 8 real_MIC 348 22 348 30 184 1 , 348 30 348 31 144 10 hdr_802_1x 348 32 348 42 165 2 -> 348 42 348 44 18446744073709551615 11 wpa_key_MIC 348 44 348 55 43 1 , 348 55 348 56 144 2 16 348 57 348 59 18446744073709551615 1 ) 348 59 348 60 144 1 ; 348 60 348 61 18446744073709551615 6 memcpy 349 15 349 21 144 1 ( 349 21 349 22 144 10 hdr_802_1x 349 22 349 32 165 2 -> 349 32 349 34 18446744073709551615 11 wpa_key_MIC 349 34 349 45 43 1 , 349 45 349 46 144 8 NULL_MIC 349 47 349 55 3 1 , 349 55 349 56 144 2 16 349 57 349 59 18446744073709551615 1 ) 349 59 349 60 144 1 ; 349 60 349 61 18446744073709551615 4 HMAC 350 15 350 19 178 1 ( 350 19 350 20 178 8 EVP_sha1 350 20 350 28 179 1 ( 350 28 350 29 179 1 ) 350 29 350 30 179 1 , 350 30 350 31 178 3 KCK 350 32 350 35 183 1 , 350 35 350 36 178 2 16 350 37 350 39 18446744073709551615 1 , 350 39 350 40 178 10 hdr_802_1x 350 41 350 51 165 1 , 350 51 350 52 178 2 99 350 53 350 55 18446744073709551615 1 + 350 56 350 57 18446744073709551615 11 data_length 350 58 350 69 172 1 , 350 69 350 70 178 14 calculated_MIC 350 71 350 85 185 1 , 350 85 350 86 178 1 & 350 87 350 88 18446744073709551615 11 SHA1_LENGTH 350 88 350 99 0 1 ) 350 99 350 100 178 1 ; 350 100 350 101 18446744073709551615 2 if 351 15 351 17 18446744073709551615 1 ( 351 17 351 18 18446744073709551615 6 memcmp 351 18 351 24 159 1 ( 351 24 351 25 159 8 real_MIC 351 25 351 33 184 1 , 351 33 351 34 159 14 calculated_MIC 351 35 351 49 185 1 , 351 49 351 50 159 2 16 351 51 351 53 18446744073709551615 1 ) 351 53 351 54 159 2 == 351 55 351 57 18446744073709551615 1 0 351 58 351 59 18446744073709551615 1 ) 351 59 351 60 18446744073709551615 1 { 351 61 351 62 18446744073709551615 17 packet_eapol_info 352 17 352 34 152 2 -> 352 34 352 36 18446744073709551615 6 status 352 36 352 42 86 1 = 352 43 352 44 18446744073709551615 7 SUCCESS 352 45 352 52 7 1 ; 352 52 352 53 18446744073709551615 1 } 353 15 353 16 18446744073709551615 1 } 354 13 354 14 18446744073709551615 1 } 355 11 355 12 18446744073709551615 1 } 356 9 356 10 18446744073709551615 1 } 357 7 357 8 18446744073709551615 1 } 358 5 358 6 18446744073709551615 1 } 359 3 359 4 18446744073709551615 6 return 360 3 360 9 18446744073709551615 1 1 360 10 360 11 18446744073709551615 1 ; 360 11 360 12 18446744073709551615 1 } 361 1 361 2 18446744073709551615 4 char 363 1 363 5 18446744073709551615 1 * 363 6 363 7 102 12 mac_toString 363 7 363 19 102 1 ( 363 19 363 20 102 6 u_char 363 20 363 26 2 1 * 363 27 363 28 18446744073709551615 4 addr 363 28 363 32 186 1 ) 363 32 363 33 102 1 { 363 34 363 35 18446744073709551615 6 static 364 3 364 9 18446744073709551615 4 char 364 10 364 14 18446744073709551615 3 str 364 15 364 18 187 1 [ 364 18 364 19 18446744073709551615 2 18 364 19 364 21 18446744073709551615 1 ] 364 21 364 22 18446744073709551615 1 ; 364 22 364 23 18446744073709551615 2 if 365 3 365 5 18446744073709551615 1 ( 365 5 365 6 18446744073709551615 4 addr 365 6 365 10 186 2 == 365 11 365 13 18446744073709551615 4 NULL 365 14 365 18 18446744073709551615 1 ) 365 18 365 19 18446744073709551615 6 return 366 5 366 11 18446744073709551615 2 "" 366 12 366 14 18446744073709551615 1 ; 366 14 366 15 18446744073709551615 8 snprintf 367 3 367 11 188 1 ( 367 11 367 12 188 3 str 367 12 367 15 187 1 , 367 15 367 16 188 6 sizeof 367 17 367 23 18446744073709551615 1 ( 367 23 367 24 18446744073709551615 3 str 367 24 367 27 187 1 ) 367 27 367 28 18446744073709551615 1 , 367 28 367 29 188 31 "%02x:%02x:%02x:%02x:%02x:%02x" 367 30 367 61 18446744073709551615 1 , 367 61 367 62 188 4 addr 368 12 368 16 186 1 [ 368 16 368 17 18446744073709551615 1 0 368 17 368 18 18446744073709551615 1 ] 368 18 368 19 18446744073709551615 1 , 368 19 368 20 188 4 addr 368 21 368 25 186 1 [ 368 25 368 26 18446744073709551615 1 1 368 26 368 27 18446744073709551615 1 ] 368 27 368 28 18446744073709551615 1 , 368 28 368 29 188 4 addr 368 30 368 34 186 1 [ 368 34 368 35 18446744073709551615 1 2 368 35 368 36 18446744073709551615 1 ] 368 36 368 37 18446744073709551615 1 , 368 37 368 38 188 4 addr 368 39 368 43 186 1 [ 368 43 368 44 18446744073709551615 1 3 368 44 368 45 18446744073709551615 1 ] 368 45 368 46 18446744073709551615 1 , 368 46 368 47 188 4 addr 368 48 368 52 186 1 [ 368 52 368 53 18446744073709551615 1 4 368 53 368 54 18446744073709551615 1 ] 368 54 368 55 18446744073709551615 1 , 368 55 368 56 188 4 addr 368 57 368 61 186 1 [ 368 61 368 62 18446744073709551615 1 5 368 62 368 63 18446744073709551615 1 ] 368 63 368 64 18446744073709551615 1 ) 368 64 368 65 188 1 ; 368 65 368 66 18446744073709551615 6 return 369 3 369 9 18446744073709551615 3 str 369 10 369 13 187 1 ; 369 13 369 14 18446744073709551615 1 } 370 1 370 2 18446744073709551615 6 u_char 372 1 372 7 2 1 * 372 8 372 9 103 6 PRF512 372 9 372 15 103 1 ( 372 15 372 16 103 6 u_char 372 16 372 22 2 1 * 372 23 372 24 18446744073709551615 3 PMK 372 24 372 27 189 1 , 372 27 372 28 103 6 u_char 372 29 372 35 2 1 * 372 36 372 37 18446744073709551615 1 A 372 37 372 38 190 1 , 372 38 372 39 103 6 size_t 372 40 372 46 104 4 lenA 372 47 372 51 191 1 , 372 51 372 52 103 6 u_char 372 53 372 59 2 1 * 372 60 372 61 18446744073709551615 7 AP_addr 372 61 372 68 192 1 , 372 68 372 69 103 6 u_char 372 70 372 76 2 1 * 372 77 372 78 18446744073709551615 8 STA_addr 372 78 372 86 193 1 , 372 86 372 87 103 6 u_char 372 88 372 94 2 1 * 372 95 372 96 18446744073709551615 6 ANonce 372 96 372 102 194 1 , 372 102 372 103 103 6 u_char 372 104 372 110 2 1 * 372 111 372 112 18446744073709551615 6 SNonce 372 112 372 118 195 1 ) 372 118 372 119 103 1 { 372 120 372 121 18446744073709551615 6 static 373 3 373 9 18446744073709551615 6 u_char 373 10 373 16 2 3 ptk 373 17 373 20 196 1 [ 373 20 373 21 18446744073709551615 2 64 373 21 373 23 18446744073709551615 1 ] 373 23 373 24 18446744073709551615 1 ; 373 24 373 25 18446744073709551615 6 u_char 374 3 374 9 2 1 B 374 10 374 11 197 1 [ 374 11 374 12 18446744073709551615 2 76 374 12 374 14 18446744073709551615 1 ] 374 14 374 15 18446744073709551615 1 ; 374 15 374 16 18446744073709551615 3 int 375 3 375 6 18446744073709551615 1 i 375 7 375 8 198 1 = 375 9 375 10 18446744073709551615 1 0 375 11 375 12 18446744073709551615 1 ; 375 12 375 13 18446744073709551615 6 u_char 376 3 376 9 2 1 c 376 10 376 11 199 1 = 376 12 376 13 18446744073709551615 4 0x00 376 14 376 18 18446744073709551615 1 ; 376 18 376 19 18446744073709551615 6 u_char 377 3 377 9 2 3 arg 377 10 377 13 200 1 [ 377 13 377 14 18446744073709551615 2 76 377 14 377 16 18446744073709551615 1 + 377 17 377 18 18446744073709551615 4 lenA 377 19 377 23 191 1 + 377 24 377 25 18446744073709551615 1 2 377 26 377 27 18446744073709551615 1 ] 377 27 377 28 18446744073709551615 1 ; 377 28 377 29 18446744073709551615 2 if 379 3 379 5 18446744073709551615 1 ( 379 5 379 6 18446744073709551615 6 strcmp 379 6 379 12 145 1 ( 379 12 379 13 145 7 AP_addr 379 13 379 20 192 1 , 379 20 379 21 145 8 STA_addr 379 22 379 30 193 1 ) 379 30 379 31 145 1 < 379 32 379 33 18446744073709551615 1 0 379 34 379 35 18446744073709551615 1 ) 379 35 379 36 18446744073709551615 1 { 379 37 379 38 18446744073709551615 6 memcpy 380 5 380 11 144 1 ( 380 11 380 12 144 1 B 380 12 380 13 197 1 , 380 13 380 14 144 7 AP_addr 380 15 380 22 192 1 , 380 22 380 23 144 12 MAC_ADDR_LEN 380 24 380 36 144 1 ) 380 36 380 37 144 1 ; 380 37 380 38 18446744073709551615 6 memcpy 381 5 381 11 144 1 ( 381 11 381 12 144 1 B 381 12 381 13 197 1 + 381 14 381 15 18446744073709551615 12 MAC_ADDR_LEN 381 16 381 28 18446744073709551615 1 , 381 28 381 29 144 8 STA_addr 381 30 381 38 193 1 , 381 38 381 39 144 12 MAC_ADDR_LEN 381 40 381 52 144 1 ) 381 52 381 53 144 1 ; 381 53 381 54 18446744073709551615 1 } 382 3 382 4 18446744073709551615 4 else 383 3 383 7 18446744073709551615 1 { 383 8 383 9 18446744073709551615 6 memcpy 384 5 384 11 144 1 ( 384 11 384 12 144 1 B 384 12 384 13 197 1 , 384 13 384 14 144 8 STA_addr 384 15 384 23 193 1 , 384 23 384 24 144 12 MAC_ADDR_LEN 384 25 384 37 144 1 ) 384 37 384 38 144 1 ; 384 38 384 39 18446744073709551615 6 memcpy 385 5 385 11 144 1 ( 385 11 385 12 144 1 B 385 12 385 13 197 1 + 385 14 385 15 18446744073709551615 12 MAC_ADDR_LEN 385 16 385 28 18446744073709551615 1 , 385 28 385 29 144 7 AP_addr 385 30 385 37 192 1 , 385 37 385 38 144 12 MAC_ADDR_LEN 385 39 385 51 144 1 ) 385 51 385 52 144 1 ; 385 52 385 53 18446744073709551615 1 } 386 3 386 4 18446744073709551615 2 if 387 3 387 5 18446744073709551615 1 ( 387 5 387 6 18446744073709551615 6 strcmp 387 6 387 12 145 1 ( 387 12 387 13 145 6 ANonce 387 13 387 19 194 1 , 387 19 387 20 145 6 SNonce 387 21 387 27 195 1 ) 387 27 387 28 145 1 < 387 29 387 30 18446744073709551615 1 0 387 31 387 32 18446744073709551615 1 ) 387 32 387 33 18446744073709551615 1 { 387 34 387 35 18446744073709551615 6 memcpy 388 5 388 11 144 1 ( 388 11 388 12 144 1 B 388 12 388 13 197 1 + 388 14 388 15 18446744073709551615 1 2 388 16 388 17 18446744073709551615 1 * 388 18 388 19 18446744073709551615 12 MAC_ADDR_LEN 388 20 388 32 18446744073709551615 1 , 388 32 388 33 144 6 ANonce 388 34 388 40 194 1 , 388 40 388 41 144 2 32 388 42 388 44 18446744073709551615 1 ) 388 44 388 45 144 1 ; 388 45 388 46 18446744073709551615 6 memcpy 389 5 389 11 144 1 ( 389 11 389 12 144 1 B 389 12 389 13 197 1 + 389 14 389 15 18446744073709551615 1 2 389 16 389 17 18446744073709551615 1 * 389 18 389 19 18446744073709551615 12 MAC_ADDR_LEN 389 20 389 32 18446744073709551615 1 + 389 33 389 34 18446744073709551615 2 32 389 35 389 37 18446744073709551615 1 , 389 37 389 38 144 6 SNonce 389 39 389 45 195 1 , 389 45 389 46 144 2 32 389 47 389 49 18446744073709551615 1 ) 389 49 389 50 144 1 ; 389 50 389 51 18446744073709551615 1 } 390 3 390 4 18446744073709551615 4 else 391 3 391 7 18446744073709551615 1 { 391 8 391 9 18446744073709551615 6 memcpy 392 5 392 11 144 1 ( 392 11 392 12 144 1 B 392 12 392 13 197 1 + 392 14 392 15 18446744073709551615 1 2 392 16 392 17 18446744073709551615 1 * 392 18 392 19 18446744073709551615 12 MAC_ADDR_LEN 392 20 392 32 18446744073709551615 1 , 392 32 392 33 144 6 SNonce 392 34 392 40 195 1 , 392 40 392 41 144 2 32 392 42 392 44 18446744073709551615 1 ) 392 44 392 45 144 1 ; 392 45 392 46 18446744073709551615 6 memcpy 393 5 393 11 144 1 ( 393 11 393 12 144 1 B 393 12 393 13 197 1 + 393 14 393 15 18446744073709551615 1 2 393 16 393 17 18446744073709551615 1 * 393 18 393 19 18446744073709551615 12 MAC_ADDR_LEN 393 20 393 32 18446744073709551615 1 + 393 33 393 34 18446744073709551615 2 32 393 35 393 37 18446744073709551615 1 , 393 37 393 38 144 6 ANonce 393 39 393 45 194 1 , 393 45 393 46 144 2 32 393 47 393 49 18446744073709551615 1 ) 393 49 393 50 144 1 ; 393 50 393 51 18446744073709551615 1 } 394 3 394 4 18446744073709551615 6 memcpy 396 3 396 9 144 1 ( 396 9 396 10 144 3 arg 396 10 396 13 200 1 , 396 13 396 14 144 1 A 396 15 396 16 190 1 , 396 16 396 17 144 4 lenA 396 18 396 22 191 1 ) 396 22 396 23 144 1 ; 396 23 396 24 18446744073709551615 3 arg 397 3 397 6 200 1 [ 397 6 397 7 18446744073709551615 4 lenA 397 7 397 11 191 1 ] 397 11 397 12 18446744073709551615 1 = 397 13 397 14 18446744073709551615 1 c 397 15 397 16 199 1 ; 397 16 397 17 18446744073709551615 6 memcpy 398 3 398 9 144 1 ( 398 9 398 10 144 3 arg 398 10 398 13 200 1 + 398 14 398 15 18446744073709551615 4 lenA 398 16 398 20 191 1 + 398 21 398 22 18446744073709551615 1 1 398 23 398 24 18446744073709551615 1 , 398 24 398 25 144 1 B 398 26 398 27 197 1 , 398 27 398 28 144 2 76 398 29 398 31 18446744073709551615 1 ) 398 31 398 32 144 1 ; 398 32 398 33 18446744073709551615 6 u_char 400 3 400 9 2 13 hmac_sha1_res 400 10 400 23 201 1 [ 400 23 400 24 18446744073709551615 2 20 400 24 400 26 18446744073709551615 1 ] 400 26 400 27 18446744073709551615 1 ; 400 27 400 28 18446744073709551615 6 u_char 401 3 401 9 2 1 R 401 10 401 11 202 1 [ 401 11 401 12 18446744073709551615 1 ( 401 12 401 13 18446744073709551615 1 ( 401 13 401 14 18446744073709551615 3 512 401 14 401 17 18446744073709551615 1 + 401 18 401 19 18446744073709551615 3 159 401 20 401 23 18446744073709551615 1 ) 401 23 401 24 18446744073709551615 1 / 401 25 401 26 18446744073709551615 3 160 401 27 401 30 18446744073709551615 1 ) 401 30 401 31 18446744073709551615 1 * 401 32 401 33 18446744073709551615 2 20 401 34 401 36 18446744073709551615 1 ] 401 36 401 37 18446744073709551615 1 ; 401 37 401 38 18446744073709551615 5 u_int 402 3 402 8 203 10 sha_length 402 9 402 19 204 1 = 402 20 402 21 18446744073709551615 2 20 402 22 402 24 18446744073709551615 1 ; 402 24 402 25 18446744073709551615 5 while 403 3 403 8 18446744073709551615 1 ( 403 8 403 9 18446744073709551615 1 i 403 9 403 10 198 2 <= 403 11 403 13 18446744073709551615 1 ( 403 14 403 15 18446744073709551615 1 ( 403 15 403 16 18446744073709551615 3 512 403 16 403 19 18446744073709551615 1 + 403 20 403 21 18446744073709551615 3 159 403 22 403 25 18446744073709551615 1 ) 403 25 403 26 18446744073709551615 1 / 403 27 403 28 18446744073709551615 3 160 403 29 403 32 18446744073709551615 1 ) 403 32 403 33 18446744073709551615 1 ) 403 33 403 34 18446744073709551615 1 { 403 35 403 36 18446744073709551615 3 arg 404 5 404 8 200 1 [ 404 8 404 9 18446744073709551615 2 76 404 9 404 11 18446744073709551615 1 + 404 12 404 13 18446744073709551615 4 lenA 404 14 404 18 191 1 + 404 19 404 20 18446744073709551615 1 1 404 21 404 22 18446744073709551615 1 ] 404 22 404 23 18446744073709551615 1 = 404 24 404 25 18446744073709551615 4 0x00 404 26 404 30 18446744073709551615 1 + 404 31 404 32 18446744073709551615 1 i 404 33 404 34 198 1 ; 404 34 404 35 18446744073709551615 4 HMAC 405 5 405 9 178 1 ( 405 9 405 10 178 8 EVP_sha1 405 10 405 18 179 1 ( 405 18 405 19 179 1 ) 405 19 405 20 179 1 , 405 20 405 21 178 3 PMK 405 22 405 25 189 1 , 405 25 405 26 178 2 32 405 27 405 29 18446744073709551615 1 , 405 29 405 30 178 3 arg 405 31 405 34 200 1 , 405 34 405 35 178 2 76 405 36 405 38 18446744073709551615 1 + 405 39 405 40 18446744073709551615 4 lenA 405 41 405 45 191 1 + 405 46 405 47 18446744073709551615 1 2 405 48 405 49 18446744073709551615 1 , 405 49 405 50 178 13 hmac_sha1_res 405 51 405 64 201 1 , 405 64 405 65 178 1 & 405 66 405 67 18446744073709551615 10 sha_length 405 67 405 77 204 1 ) 405 77 405 78 178 1 ; 405 78 405 79 18446744073709551615 6 memcpy 406 5 406 11 144 1 ( 406 11 406 12 144 1 R 406 12 406 13 202 1 + 406 14 406 15 18446744073709551615 1 i 406 16 406 17 198 1 * 406 18 406 19 18446744073709551615 2 20 406 20 406 22 18446744073709551615 1 , 406 22 406 23 144 13 hmac_sha1_res 406 24 406 37 201 1 , 406 37 406 38 144 2 20 406 39 406 41 18446744073709551615 1 ) 406 41 406 42 144 1 ; 406 42 406 43 18446744073709551615 1 i 407 5 407 6 198 2 ++ 407 6 407 8 18446744073709551615 1 ; 407 8 407 9 18446744073709551615 1 } 408 3 408 4 18446744073709551615 6 memcpy 409 3 409 9 144 1 ( 409 9 409 10 144 3 ptk 409 10 409 13 196 1 , 409 13 409 14 144 1 R 409 15 409 16 202 1 , 409 16 409 17 144 2 64 409 18 409 20 18446744073709551615 1 ) 409 20 409 21 144 1 ; 409 21 409 22 18446744073709551615 6 return 410 3 410 9 18446744073709551615 3 ptk 410 10 410 13 196 1 ; 410 13 410 14 18446744073709551615 1 } 411 1 411 2 18446744073709551615 6 u_char 413 1 413 7 2 1 * 413 8 413 9 105 15 hexstr_to_bytes 413 9 413 24 105 1 ( 413 24 413 25 105 6 u_char 413 25 413 31 2 1 * 413 32 413 33 18446744073709551615 6 hexstr 413 33 413 39 205 1 ) 413 39 413 40 105 1 { 413 41 413 42 18446744073709551615 6 size_t 414 3 414 9 104 3 len 414 10 414 13 206 1 = 414 14 414 15 18446744073709551615 6 strlen 414 16 414 22 126 1 ( 414 22 414 23 126 6 hexstr 414 23 414 29 205 1 ) 414 29 414 30 126 1 ; 414 30 414 31 18446744073709551615 2 if 415 3 415 5 18446744073709551615 1 ( 415 5 415 6 18446744073709551615 3 len 415 6 415 9 206 1 % 415 10 415 11 18446744073709551615 1 2 415 12 415 13 18446744073709551615 2 != 415 14 415 16 18446744073709551615 1 0 415 17 415 18 18446744073709551615 1 ) 415 18 415 19 18446744073709551615 6 return 416 5 416 11 18446744073709551615 4 NULL 416 12 416 16 18446744073709551615 1 ; 416 16 416 17 18446744073709551615 6 size_t 417 3 417 9 104 9 final_len 417 10 417 19 207 1 = 417 20 417 21 18446744073709551615 3 len 417 22 417 25 206 1 / 417 26 417 27 18446744073709551615 1 2 417 28 417 29 18446744073709551615 1 ; 417 29 417 30 18446744073709551615 8 unsigned 418 3 418 11 18446744073709551615 4 char 418 12 418 16 18446744073709551615 1 * 418 17 418 18 18446744073709551615 4 chrs 418 18 418 22 208 1 = 418 23 418 24 18446744073709551615 1 ( 418 25 418 26 18446744073709551615 8 unsigned 418 26 418 34 18446744073709551615 4 char 418 35 418 39 18446744073709551615 1 * 418 40 418 41 18446744073709551615 1 ) 418 41 418 42 18446744073709551615 6 malloc 418 42 418 48 168 1 ( 418 48 418 49 168 1 ( 418 49 418 50 18446744073709551615 9 final_len 418 50 418 59 207 1 ) 418 59 418 60 18446744073709551615 1 * 418 61 418 62 18446744073709551615 6 sizeof 418 63 418 69 18446744073709551615 1 ( 418 69 418 70 18446744073709551615 1 * 418 70 418 71 18446744073709551615 4 chrs 418 71 418 75 208 1 ) 418 75 418 76 18446744073709551615 1 ) 418 76 418 77 168 1 ; 418 77 418 78 18446744073709551615 3 for 419 3 419 6 18446744073709551615 1 ( 419 6 419 7 18446744073709551615 6 size_t 419 7 419 13 104 1 i 419 14 419 15 209 1 = 419 16 419 17 18446744073709551615 1 0 419 18 419 19 18446744073709551615 1 , 419 19 419 20 18446744073709551615 1 j 419 21 419 22 210 1 = 419 23 419 24 18446744073709551615 1 0 419 25 419 26 18446744073709551615 1 ; 419 26 419 27 18446744073709551615 1 j 419 28 419 29 210 1 < 419 30 419 31 18446744073709551615 9 final_len 419 32 419 41 207 1 ; 419 41 419 42 18446744073709551615 1 i 419 43 419 44 209 2 += 419 45 419 47 18446744073709551615 1 2 419 48 419 49 18446744073709551615 1 , 419 49 419 50 18446744073709551615 1 j 419 51 419 52 210 2 ++ 419 52 419 54 18446744073709551615 1 ) 419 54 419 55 18446744073709551615 4 chrs 420 5 420 9 208 1 [ 420 9 420 10 18446744073709551615 1 j 420 10 420 11 210 1 ] 420 11 420 12 18446744073709551615 1 = 420 13 420 14 18446744073709551615 1 ( 420 15 420 16 18446744073709551615 6 hexstr 420 16 420 22 205 1 [ 420 22 420 23 18446744073709551615 1 i 420 23 420 24 209 1 ] 420 24 420 25 18446744073709551615 1 % 420 26 420 27 18446744073709551615 2 32 420 28 420 30 18446744073709551615 1 + 420 31 420 32 18446744073709551615 1 9 420 33 420 34 18446744073709551615 1 ) 420 34 420 35 18446744073709551615 1 % 420 36 420 37 18446744073709551615 2 25 420 38 420 40 18446744073709551615 1 * 420 41 420 42 18446744073709551615 2 16 420 43 420 45 18446744073709551615 1 + 420 46 420 47 18446744073709551615 1 ( 420 48 420 49 18446744073709551615 6 hexstr 420 49 420 55 205 1 [ 420 55 420 56 18446744073709551615 1 i 420 56 420 57 209 1 + 420 58 420 59 18446744073709551615 1 1 420 60 420 61 18446744073709551615 1 ] 420 61 420 62 18446744073709551615 1 % 420 63 420 64 18446744073709551615 2 32 420 65 420 67 18446744073709551615 1 + 420 68 420 69 18446744073709551615 1 9 420 70 420 71 18446744073709551615 1 ) 420 71 420 72 18446744073709551615 1 % 420 73 420 74 18446744073709551615 2 25 420 75 420 77 18446744073709551615 1 ; 420 77 420 78 18446744073709551615 6 return 421 3 421 9 18446744073709551615 4 chrs 421 10 421 14 208 1 ; 421 14 421 15 18446744073709551615 1 } 422 1 422 2 18446744073709551615 6 u_char 424 1 424 7 2 14 packet_decrypt 424 8 424 22 101 1 ( 424 22 424 23 101 5 const 424 23 424 28 18446744073709551615 6 struct 424 29 424 35 18446744073709551615 11 pcap_pkthdr 424 36 424 47 99 1 * 424 48 424 49 18446744073709551615 6 header 424 49 424 55 211 1 , 424 55 424 56 101 5 const 424 57 424 62 18446744073709551615 6 u_char 424 63 424 69 2 1 * 424 70 424 71 18446744073709551615 6 buffer 424 71 424 77 212 1 , 424 77 424 78 101 6 struct 424 79 424 85 18446744073709551615 10 eapol_info 424 86 424 96 81 1 * 424 97 424 98 18446744073709551615 10 eapol_keys 424 98 424 108 213 1 ) 424 108 424 109 101 1 { 424 110 424 111 18446744073709551615 5 const 425 3 425 8 18446744073709551615 6 struct 425 9 425 15 18446744073709551615 12 sniff_802_11 425 16 425 28 9 1 * 425 29 425 30 18446744073709551615 10 hdr_802_11 425 30 425 40 214 1 ; 425 40 425 41 18446744073709551615 10 hdr_802_11 426 3 426 13 214 1 = 426 14 426 15 18446744073709551615 1 ( 426 16 426 17 18446744073709551615 6 struct 426 17 426 23 18446744073709551615 12 sniff_802_11 426 24 426 36 9 1 * 426 37 426 38 18446744073709551615 1 ) 426 38 426 39 18446744073709551615 1 ( 426 39 426 40 18446744073709551615 6 buffer 426 40 426 46 212 1 + 426 47 426 48 18446744073709551615 16 PRISM_HEADER_LEN 426 49 426 65 18446744073709551615 1 ) 426 65 426 66 18446744073709551615 1 ; 426 66 426 67 18446744073709551615 3 int 427 3 427 6 18446744073709551615 5 is_a4 427 7 427 12 215 1 , 427 12 427 13 18446744073709551615 1 i 427 14 427 15 216 1 , 427 15 427 16 18446744073709551615 1 n 427 17 427 18 217 1 , 427 18 427 19 18446744073709551615 15 hdr_ccmp_offset 427 20 427 35 218 1 , 427 35 427 36 18446744073709551615 6 blocks 427 37 427 43 219 1 , 427 43 427 44 18446744073709551615 6 is_qos 427 45 427 51 220 1 ; 427 51 427 52 18446744073709551615 3 int 428 3 428 6 18446744073709551615 8 data_len 428 7 428 15 221 1 , 428 15 428 16 18446744073709551615 4 last 428 17 428 21 222 1 , 428 21 428 22 18446744073709551615 6 offset 428 23 428 29 223 1 ; 428 29 428 30 18446744073709551615 6 u_char 429 3 429 9 2 12 ccmp_aes_ctr 429 10 429 22 224 1 [ 429 22 429 23 18446744073709551615 2 16 429 23 429 25 18446744073709551615 1 ] 429 25 429 26 18446744073709551615 1 , 429 26 429 27 18446744073709551615 1 B 429 28 429 29 225 1 [ 429 29 429 30 18446744073709551615 2 16 429 30 429 32 18446744073709551615 1 ] 429 32 429 33 18446744073709551615 1 , 429 33 429 34 18446744073709551615 3 MIC 429 35 429 38 226 1 [ 429 38 429 39 18446744073709551615 2 16 429 39 429 41 18446744073709551615 1 ] 429 41 429 42 18446744073709551615 1 ; 429 42 429 43 18446744073709551615 6 u_char 430 3 430 9 2 13 packet_number 430 10 430 23 227 1 [ 430 23 430 24 18446744073709551615 1 6 430 24 430 25 18446744073709551615 1 ] 430 25 430 26 18446744073709551615 1 ; 430 26 430 27 18446744073709551615 5 is_a4 432 3 432 8 215 1 = 432 9 432 10 18446744073709551615 1 ( 432 11 432 12 18446744073709551615 10 hdr_802_11 432 12 432 22 214 2 -> 432 22 432 24 18446744073709551615 13 frame_control 432 24 432 37 10 1 [ 432 37 432 38 18446744073709551615 1 1 432 38 432 39 18446744073709551615 1 ] 432 39 432 40 18446744073709551615 1 & 432 41 432 42 18446744073709551615 1 3 432 43 432 44 18446744073709551615 1 ) 432 44 432 45 18446744073709551615 2 == 432 46 432 48 18446744073709551615 1 3 432 49 432 50 18446744073709551615 1 ; 432 50 432 51 18446744073709551615 6 is_qos 433 3 433 9 220 1 = 433 10 433 11 18446744073709551615 1 ( 433 12 433 13 18446744073709551615 10 hdr_802_11 433 13 433 23 214 2 -> 433 23 433 25 18446744073709551615 13 frame_control 433 25 433 38 10 1 [ 433 38 433 39 18446744073709551615 1 0 433 39 433 40 18446744073709551615 1 ] 433 40 433 41 18446744073709551615 1 & 433 42 433 43 18446744073709551615 4 0x8C 433 44 433 48 18446744073709551615 1 ) 433 48 433 49 18446744073709551615 2 == 433 50 433 52 18446744073709551615 4 0x88 433 53 433 57 18446744073709551615 1 ; 433 57 433 58 18446744073709551615 15 hdr_ccmp_offset 434 3 434 18 218 1 = 434 19 434 20 18446744073709551615 2 24 434 21 434 23 18446744073709551615 1 + 434 24 434 25 18446744073709551615 1 6 434 26 434 27 18446744073709551615 1 * 434 28 434 29 18446744073709551615 5 is_a4 434 30 434 35 215 1 ; 434 35 434 36 18446744073709551615 15 hdr_ccmp_offset 435 3 435 18 218 2 += 435 19 435 21 18446744073709551615 1 2 435 22 435 23 18446744073709551615 1 * 435 24 435 25 18446744073709551615 6 is_qos 435 26 435 32 220 1 ; 435 32 435 33 18446744073709551615 8 data_len 437 3 437 11 221 1 = 437 12 437 13 18446744073709551615 6 header 437 14 437 20 211 2 -> 437 20 437 22 18446744073709551615 6 caplen 437 22 437 28 228 1 - 437 29 437 30 18446744073709551615 16 PRISM_HEADER_LEN 437 31 437 47 18446744073709551615 1 - 437 48 437 49 18446744073709551615 15 hdr_ccmp_offset 437 50 437 65 218 1 - 437 66 437 67 18446744073709551615 1 8 437 68 437 69 18446744073709551615 1 - 437 70 437 71 18446744073709551615 1 8 437 72 437 73 18446744073709551615 1 - 437 74 437 75 18446744073709551615 1 4 437 76 437 77 18446744073709551615 1 ; 437 77 437 78 18446744073709551615 13 packet_number 439 3 439 16 227 1 [ 439 16 439 17 18446744073709551615 1 0 439 17 439 18 18446744073709551615 1 ] 439 18 439 19 18446744073709551615 1 = 439 20 439 21 18446744073709551615 1 * 439 22 439 23 18446744073709551615 1 ( 439 23 439 24 18446744073709551615 6 buffer 439 24 439 30 212 1 + 439 31 439 32 18446744073709551615 16 PRISM_HEADER_LEN 439 33 439 49 18446744073709551615 1 + 439 50 439 51 18446744073709551615 15 hdr_ccmp_offset 439 52 439 67 218 1 + 439 68 439 69 18446744073709551615 1 7 439 70 439 71 18446744073709551615 1 ) 439 71 439 72 18446744073709551615 1 ; 439 72 439 73 18446744073709551615 13 packet_number 440 3 440 16 227 1 [ 440 16 440 17 18446744073709551615 1 1 440 17 440 18 18446744073709551615 1 ] 440 18 440 19 18446744073709551615 1 = 440 20 440 21 18446744073709551615 1 * 440 22 440 23 18446744073709551615 1 ( 440 23 440 24 18446744073709551615 6 buffer 440 24 440 30 212 1 + 440 31 440 32 18446744073709551615 16 PRISM_HEADER_LEN 440 33 440 49 18446744073709551615 1 + 440 50 440 51 18446744073709551615 15 hdr_ccmp_offset 440 52 440 67 218 1 + 440 68 440 69 18446744073709551615 1 6 440 70 440 71 18446744073709551615 1 ) 440 71 440 72 18446744073709551615 1 ; 440 72 440 73 18446744073709551615 13 packet_number 441 3 441 16 227 1 [ 441 16 441 17 18446744073709551615 1 2 441 17 441 18 18446744073709551615 1 ] 441 18 441 19 18446744073709551615 1 = 441 20 441 21 18446744073709551615 1 * 441 22 441 23 18446744073709551615 1 ( 441 23 441 24 18446744073709551615 6 buffer 441 24 441 30 212 1 + 441 31 441 32 18446744073709551615 16 PRISM_HEADER_LEN 441 33 441 49 18446744073709551615 1 + 441 50 441 51 18446744073709551615 15 hdr_ccmp_offset 441 52 441 67 218 1 + 441 68 441 69 18446744073709551615 1 5 441 70 441 71 18446744073709551615 1 ) 441 71 441 72 18446744073709551615 1 ; 441 72 441 73 18446744073709551615 13 packet_number 442 3 442 16 227 1 [ 442 16 442 17 18446744073709551615 1 3 442 17 442 18 18446744073709551615 1 ] 442 18 442 19 18446744073709551615 1 = 442 20 442 21 18446744073709551615 1 * 442 22 442 23 18446744073709551615 1 ( 442 23 442 24 18446744073709551615 6 buffer 442 24 442 30 212 1 + 442 31 442 32 18446744073709551615 16 PRISM_HEADER_LEN 442 33 442 49 18446744073709551615 1 + 442 50 442 51 18446744073709551615 15 hdr_ccmp_offset 442 52 442 67 218 1 + 442 68 442 69 18446744073709551615 1 4 442 70 442 71 18446744073709551615 1 ) 442 71 442 72 18446744073709551615 1 ; 442 72 442 73 18446744073709551615 13 packet_number 443 3 443 16 227 1 [ 443 16 443 17 18446744073709551615 1 4 443 17 443 18 18446744073709551615 1 ] 443 18 443 19 18446744073709551615 1 = 443 20 443 21 18446744073709551615 1 * 443 22 443 23 18446744073709551615 1 ( 443 23 443 24 18446744073709551615 6 buffer 443 24 443 30 212 1 + 443 31 443 32 18446744073709551615 16 PRISM_HEADER_LEN 443 33 443 49 18446744073709551615 1 + 443 50 443 51 18446744073709551615 15 hdr_ccmp_offset 443 52 443 67 218 1 + 443 68 443 69 18446744073709551615 1 1 443 70 443 71 18446744073709551615 1 ) 443 71 443 72 18446744073709551615 1 ; 443 72 443 73 18446744073709551615 13 packet_number 444 3 444 16 227 1 [ 444 16 444 17 18446744073709551615 1 5 444 17 444 18 18446744073709551615 1 ] 444 18 444 19 18446744073709551615 1 = 444 20 444 21 18446744073709551615 1 * 444 22 444 23 18446744073709551615 1 ( 444 23 444 24 18446744073709551615 6 buffer 444 24 444 30 212 1 + 444 31 444 32 18446744073709551615 16 PRISM_HEADER_LEN 444 33 444 49 18446744073709551615 1 + 444 50 444 51 18446744073709551615 15 hdr_ccmp_offset 444 52 444 67 218 1 ) 444 67 444 68 18446744073709551615 1 ; 444 68 444 69 18446744073709551615 57 //ccmp_aes_ctr [0x59|priority|src_addr|packet_number|ctr] 446 3 446 60 18446744073709551615 12 ccmp_aes_ctr 447 3 447 15 224 1 [ 447 15 447 16 18446744073709551615 1 0 447 16 447 17 18446744073709551615 1 ] 447 17 447 18 18446744073709551615 1 = 447 19 447 20 18446744073709551615 4 0x59 447 21 447 25 18446744073709551615 1 ; 447 25 447 26 18446744073709551615 12 ccmp_aes_ctr 448 3 448 15 224 1 [ 448 15 448 16 18446744073709551615 1 1 448 16 448 17 18446744073709551615 1 ] 448 17 448 18 18446744073709551615 1 = 448 19 448 20 18446744073709551615 1 0 448 21 448 22 18446744073709551615 1 ; 448 22 448 23 18446744073709551615 6 memcpy 449 3 449 9 144 1 ( 449 9 449 10 144 1 & 449 10 449 11 18446744073709551615 12 ccmp_aes_ctr 449 11 449 23 224 1 [ 449 23 449 24 18446744073709551615 1 2 449 24 449 25 18446744073709551615 1 ] 449 25 449 26 18446744073709551615 1 , 449 26 449 27 144 10 hdr_802_11 449 28 449 38 214 2 -> 449 38 449 40 18446744073709551615 5 addr2 449 40 449 45 13 1 , 449 45 449 46 144 12 MAC_ADDR_LEN 449 47 449 59 144 1 ) 449 59 449 60 144 1 ; 449 60 449 61 18446744073709551615 6 memcpy 450 3 450 9 144 1 ( 450 9 450 10 144 1 & 450 10 450 11 18446744073709551615 12 ccmp_aes_ctr 450 11 450 23 224 1 [ 450 23 450 24 18446744073709551615 1 2 450 24 450 25 18446744073709551615 1 + 450 26 450 27 18446744073709551615 12 MAC_ADDR_LEN 450 28 450 40 18446744073709551615 1 ] 450 40 450 41 18446744073709551615 1 , 450 41 450 42 144 13 packet_number 450 43 450 56 227 1 , 450 56 450 57 144 1 6 450 58 450 59 18446744073709551615 1 ) 450 59 450 60 144 1 ; 450 60 450 61 18446744073709551615 12 ccmp_aes_ctr 451 3 451 15 224 1 [ 451 15 451 16 18446744073709551615 2 14 451 16 451 18 18446744073709551615 1 ] 451 18 451 19 18446744073709551615 1 = 451 20 451 21 18446744073709551615 1 ( 451 22 451 23 18446744073709551615 8 data_len 451 23 451 31 221 2 >> 451 32 451 34 18446744073709551615 1 8 451 35 451 36 18446744073709551615 1 ) 451 36 451 37 18446744073709551615 1 & 451 38 451 39 18446744073709551615 4 0xFF 451 40 451 44 18446744073709551615 1 ; 451 44 451 45 18446744073709551615 12 ccmp_aes_ctr 452 3 452 15 224 1 [ 452 15 452 16 18446744073709551615 2 15 452 16 452 18 18446744073709551615 1 ] 452 18 452 19 18446744073709551615 1 = 452 20 452 21 18446744073709551615 1 ( 452 22 452 23 18446744073709551615 8 data_len 452 23 452 31 221 1 & 452 32 452 33 18446744073709551615 4 0xFF 452 34 452 38 18446744073709551615 1 ) 452 38 452 39 18446744073709551615 1 ; 452 39 452 40 18446744073709551615 6 u_char 454 3 454 9 2 3 AAD 454 10 454 13 229 1 [ 454 13 454 14 18446744073709551615 2 32 454 14 454 16 18446744073709551615 1 ] 454 16 454 17 18446744073709551615 1 = 454 18 454 19 18446744073709551615 1 { 454 20 454 21 18446744073709551615 1 0 454 21 454 22 18446744073709551615 1 } 454 22 454 23 18446744073709551615 1 ; 454 23 454 24 18446744073709551615 3 AAD 455 3 455 6 229 1 [ 455 6 455 7 18446744073709551615 1 2 455 7 455 8 18446744073709551615 1 ] 455 8 455 9 18446744073709551615 1 = 455 10 455 11 18446744073709551615 10 hdr_802_11 455 12 455 22 214 2 -> 455 22 455 24 18446744073709551615 13 frame_control 455 24 455 37 10 1 [ 455 37 455 38 18446744073709551615 1 0 455 38 455 39 18446744073709551615 1 ] 455 39 455 40 18446744073709551615 1 & 455 41 455 42 18446744073709551615 4 0x8F 455 43 455 47 18446744073709551615 1 ; 455 47 455 48 18446744073709551615 3 AAD 456 3 456 6 229 1 [ 456 6 456 7 18446744073709551615 1 3 456 7 456 8 18446744073709551615 1 ] 456 8 456 9 18446744073709551615 1 = 456 10 456 11 18446744073709551615 10 hdr_802_11 456 12 456 22 214 2 -> 456 22 456 24 18446744073709551615 13 frame_control 456 24 456 37 10 1 [ 456 37 456 38 18446744073709551615 1 1 456 38 456 39 18446744073709551615 1 ] 456 39 456 40 18446744073709551615 1 & 456 41 456 42 18446744073709551615 4 0xC7 456 43 456 47 18446744073709551615 1 ; 456 47 456 48 18446744073709551615 6 memcpy 457 3 457 9 144 1 ( 457 9 457 10 144 3 AAD 457 10 457 13 229 1 + 457 14 457 15 18446744073709551615 1 4 457 16 457 17 18446744073709551615 1 , 457 17 457 18 144 1 & 457 19 457 20 18446744073709551615 1 ( 457 20 457 21 18446744073709551615 10 hdr_802_11 457 21 457 31 214 2 -> 457 31 457 33 18446744073709551615 5 addr1 457 33 457 38 12 1 ) 457 38 457 39 18446744073709551615 1 , 457 39 457 40 144 1 3 457 41 457 42 18446744073709551615 1 * 457 43 457 44 18446744073709551615 1 6 457 45 457 46 18446744073709551615 1 ) 457 46 457 47 144 1 ; 457 47 457 48 18446744073709551615 3 AAD 458 3 458 6 229 1 [ 458 6 458 7 18446744073709551615 2 22 458 7 458 9 18446744073709551615 1 ] 458 9 458 10 18446744073709551615 1 = 458 11 458 12 18446744073709551615 10 hdr_802_11 458 13 458 23 214 2 -> 458 23 458 25 18446744073709551615 16 sequence_control 458 25 458 41 15 1 [ 458 41 458 42 18446744073709551615 1 0 458 42 458 43 18446744073709551615 1 ] 458 43 458 44 18446744073709551615 1 & 458 45 458 46 18446744073709551615 4 0x0F 458 47 458 51 18446744073709551615 1 ; 458 51 458 52 18446744073709551615 2 if 460 3 460 5 18446744073709551615 1 ( 460 5 460 6 18446744073709551615 6 is_qos 460 6 460 12 220 1 ) 460 12 460 13 18446744073709551615 1 { 460 14 460 15 18446744073709551615 6 memcpy 461 5 461 11 144 1 ( 461 11 461 12 144 1 & 461 12 461 13 18446744073709551615 3 AAD 461 13 461 16 229 1 [ 461 16 461 17 18446744073709551615 2 24 461 17 461 19 18446744073709551615 1 ] 461 19 461 20 18446744073709551615 1 , 461 20 461 21 144 10 hdr_802_11 461 22 461 32 214 2 -> 461 32 461 34 18446744073709551615 11 qos_control 461 34 461 45 16 1 , 461 45 461 46 144 1 2 461 47 461 48 18446744073709551615 1 ) 461 48 461 49 144 1 ; 461 49 461 50 18446744073709551615 12 ccmp_aes_ctr 462 5 462 17 224 1 [ 462 17 462 18 18446744073709551615 1 1 462 18 462 19 18446744073709551615 1 ] 462 19 462 20 18446744073709551615 1 = 462 21 462 22 18446744073709551615 3 AAD 462 23 462 26 229 1 [ 462 26 462 27 18446744073709551615 2 24 462 27 462 29 18446744073709551615 1 ] 462 29 462 30 18446744073709551615 1 ; 462 30 462 31 18446744073709551615 32 //  B0[     1] = CCM Nonce flags 462 32 462 64 18446744073709551615 3 AAD 463 5 463 8 229 1 [ 463 8 463 9 18446744073709551615 1 1 463 9 463 10 18446744073709551615 1 ] 463 10 463 11 18446744073709551615 1 = 463 12 463 13 18446744073709551615 2 22 463 14 463 16 18446744073709551615 1 + 463 17 463 18 18446744073709551615 1 2 463 19 463 20 18446744073709551615 1 ; 463 20 463 21 18446744073709551615 21 // AAD[ 0.. 1] = l(a) 463 32 463 53 18446744073709551615 1 } 464 3 464 4 18446744073709551615 4 else 465 3 465 7 18446744073709551615 1 { 465 8 465 9 18446744073709551615 6 memset 466 5 466 11 230 1 ( 466 11 466 12 230 1 & 466 12 466 13 18446744073709551615 3 AAD 466 13 466 16 229 1 [ 466 16 466 17 18446744073709551615 2 24 466 17 466 19 18446744073709551615 1 ] 466 19 466 20 18446744073709551615 1 , 466 20 466 21 230 1 0 466 22 466 23 18446744073709551615 1 , 466 23 466 24 230 1 2 466 25 466 26 18446744073709551615 1 ) 466 26 466 27 230 1 ; 466 27 466 28 18446744073709551615 19 // AAD[24..25] = QC 466 29 466 48 18446744073709551615 12 ccmp_aes_ctr 467 5 467 17 224 1 [ 467 17 467 18 18446744073709551615 1 1 467 18 467 19 18446744073709551615 1 ] 467 19 467 20 18446744073709551615 1 = 467 21 467 22 18446744073709551615 1 0 467 23 467 24 18446744073709551615 1 ; 467 24 467 25 18446744073709551615 32 //  B0[     1] = CCM Nonce flags 467 29 467 61 18446744073709551615 3 AAD 468 5 468 8 229 1 [ 468 8 468 9 18446744073709551615 1 1 468 9 468 10 18446744073709551615 1 ] 468 10 468 11 18446744073709551615 1 = 468 12 468 13 18446744073709551615 2 22 468 14 468 16 18446744073709551615 1 + 468 17 468 18 18446744073709551615 1 2 468 19 468 20 18446744073709551615 1 ; 468 20 468 21 18446744073709551615 21 // AAD[ 0.. 1] = l(a) 468 29 468 50 18446744073709551615 1 } 469 3 469 4 18446744073709551615 7 AES_KEY 471 3 471 10 231 2 TK 471 11 471 13 232 1 ; 471 13 471 14 18446744073709551615 19 AES_set_encrypt_key 472 3 472 22 233 1 ( 472 22 472 23 233 10 eapol_keys 472 23 472 33 213 2 -> 472 33 472 35 18446744073709551615 3 PTK 472 35 472 38 85 1 . 472 38 472 39 18446744073709551615 2 tk 472 39 472 41 78 1 , 472 41 472 42 233 3 128 472 43 472 46 18446744073709551615 1 , 472 46 472 47 233 1 & 472 48 472 49 18446744073709551615 2 TK 472 49 472 51 232 1 ) 472 51 472 52 233 1 ; 472 52 472 53 18446744073709551615 11 AES_encrypt 473 3 473 14 234 1 ( 473 14 473 15 234 12 ccmp_aes_ctr 473 15 473 27 224 1 , 473 27 473 28 234 3 MIC 473 29 473 32 226 1 , 473 32 473 33 234 1 & 473 34 473 35 18446744073709551615 2 TK 473 35 473 37 232 1 ) 473 37 473 38 234 1 ; 473 38 473 39 18446744073709551615 3 XOR 474 3 474 6 106 1 ( 474 6 474 7 106 3 MIC 474 7 474 10 226 1 , 474 10 474 11 106 3 AAD 474 12 474 15 229 1 , 474 15 474 16 106 2 16 474 17 474 19 18446744073709551615 1 ) 474 19 474 20 106 1 ; 474 20 474 21 18446744073709551615 11 AES_encrypt 475 3 475 14 234 1 ( 475 14 475 15 234 3 MIC 475 15 475 18 226 1 , 475 18 475 19 234 3 MIC 475 20 475 23 226 1 , 475 23 475 24 234 1 & 475 25 475 26 18446744073709551615 2 TK 475 26 475 28 232 1 ) 475 28 475 29 234 1 ; 475 29 475 30 18446744073709551615 3 XOR 476 3 476 6 106 1 ( 476 6 476 7 106 3 MIC 476 7 476 10 226 1 , 476 10 476 11 106 3 AAD 476 12 476 15 229 1 + 476 16 476 17 18446744073709551615 2 16 476 18 476 20 18446744073709551615 1 , 476 20 476 21 106 2 16 476 22 476 24 18446744073709551615 1 ) 476 24 476 25 106 1 ; 476 25 476 26 18446744073709551615 11 AES_encrypt 477 3 477 14 234 1 ( 477 14 477 15 234 3 MIC 477 15 477 18 226 1 , 477 18 477 19 234 3 MIC 477 20 477 23 226 1 , 477 23 477 24 234 1 & 477 25 477 26 18446744073709551615 2 TK 477 26 477 28 232 1 ) 477 28 477 29 234 1 ; 477 29 477 30 18446744073709551615 12 ccmp_aes_ctr 479 3 479 15 224 1 [ 479 15 479 16 18446744073709551615 1 0 479 16 479 17 18446744073709551615 1 ] 479 17 479 18 18446744073709551615 2 &= 479 19 479 21 18446744073709551615 4 0x07 479 22 479 26 18446744073709551615 1 ; 479 26 479 27 18446744073709551615 12 ccmp_aes_ctr 480 3 480 15 224 1 [ 480 15 480 16 18446744073709551615 2 14 480 16 480 18 18446744073709551615 1 ] 480 18 480 19 18446744073709551615 1 = 480 20 480 21 18446744073709551615 12 ccmp_aes_ctr 480 22 480 34 224 1 [ 480 34 480 35 18446744073709551615 2 15 480 35 480 37 18446744073709551615 1 ] 480 37 480 38 18446744073709551615 1 = 480 39 480 40 18446744073709551615 1 0 480 41 480 42 18446744073709551615 1 ; 480 42 480 43 18446744073709551615 11 AES_encrypt 481 3 481 14 234 1 ( 481 14 481 15 234 12 ccmp_aes_ctr 481 15 481 27 224 1 , 481 27 481 28 234 1 B 481 29 481 30 225 1 , 481 30 481 31 234 1 & 481 32 481 33 18446744073709551615 2 TK 481 33 481 35 232 1 ) 481 35 481 36 234 1 ; 481 36 481 37 18446744073709551615 3 XOR 482 3 482 6 106 1 ( 482 6 482 7 106 6 buffer 482 7 482 13 212 1 + 482 14 482 15 18446744073709551615 6 header 482 16 482 22 211 2 -> 482 22 482 24 18446744073709551615 6 caplen 482 24 482 30 228 1 - 482 31 482 32 18446744073709551615 1 8 482 33 482 34 18446744073709551615 1 - 482 35 482 36 18446744073709551615 1 4 482 37 482 38 18446744073709551615 1 , 482 38 482 39 106 1 B 482 40 482 41 225 1 , 482 41 482 42 106 1 8 482 43 482 44 18446744073709551615 1 ) 482 44 482 45 106 1 ; 482 45 482 46 18446744073709551615 6 blocks 484 3 484 9 219 1 = 484 10 484 11 18446744073709551615 1 ( 484 12 484 13 18446744073709551615 8 data_len 484 13 484 21 221 1 + 484 22 484 23 18446744073709551615 2 16 484 24 484 26 18446744073709551615 1 - 484 27 484 28 18446744073709551615 1 1 484 29 484 30 18446744073709551615 1 ) 484 30 484 31 18446744073709551615 1 / 484 32 484 33 18446744073709551615 2 16 484 34 484 36 18446744073709551615 1 ; 484 36 484 37 18446744073709551615 4 last 485 3 485 7 222 1 = 485 8 485 9 18446744073709551615 8 data_len 485 10 485 18 221 1 % 485 19 485 20 18446744073709551615 2 16 485 21 485 23 18446744073709551615 1 ; 485 23 485 24 18446744073709551615 6 offset 486 3 486 9 223 1 = 486 10 486 11 18446744073709551615 15 hdr_ccmp_offset 486 12 486 27 218 1 + 486 28 486 29 18446744073709551615 1 8 486 30 486 31 18446744073709551615 1 ; 486 31 486 32 18446744073709551615 3 for 488 3 488 6 18446744073709551615 1 ( 488 6 488 7 18446744073709551615 1 i 488 7 488 8 216 1 = 488 9 488 10 18446744073709551615 1 1 488 11 488 12 18446744073709551615 1 ; 488 12 488 13 18446744073709551615 1 i 488 14 488 15 216 2 <= 488 16 488 18 18446744073709551615 6 blocks 488 19 488 25 219 1 ; 488 25 488 26 18446744073709551615 1 i 488 27 488 28 216 2 ++ 488 28 488 30 18446744073709551615 1 ) 488 30 488 31 18446744073709551615 1 { 488 32 488 33 18446744073709551615 1 n 489 5 489 6 217 1 = 489 7 489 8 18446744073709551615 1 ( 489 9 489 10 18446744073709551615 4 last 489 10 489 14 222 1 > 489 15 489 16 18446744073709551615 1 0 489 17 489 18 18446744073709551615 2 && 489 19 489 21 18446744073709551615 1 i 489 22 489 23 216 2 == 489 24 489 26 18446744073709551615 6 blocks 489 27 489 33 219 1 ) 489 33 489 34 18446744073709551615 1 ? 489 35 489 36 18446744073709551615 4 last 489 37 489 41 222 1 : 489 42 489 43 18446744073709551615 2 16 489 44 489 46 18446744073709551615 1 ; 489 46 489 47 18446744073709551615 12 ccmp_aes_ctr 491 5 491 17 224 1 [ 491 17 491 18 18446744073709551615 2 14 491 18 491 20 18446744073709551615 1 ] 491 20 491 21 18446744073709551615 1 = 491 22 491 23 18446744073709551615 1 ( 491 24 491 25 18446744073709551615 1 i 491 25 491 26 216 2 >> 491 27 491 29 18446744073709551615 1 8 491 30 491 31 18446744073709551615 1 ) 491 31 491 32 18446744073709551615 1 & 491 33 491 34 18446744073709551615 4 0xFF 491 35 491 39 18446744073709551615 1 ; 491 39 491 40 18446744073709551615 12 ccmp_aes_ctr 492 5 492 17 224 1 [ 492 17 492 18 18446744073709551615 2 15 492 18 492 20 18446744073709551615 1 ] 492 20 492 21 18446744073709551615 1 = 492 22 492 23 18446744073709551615 1 i 492 24 492 25 216 1 & 492 26 492 27 18446744073709551615 4 0xFF 492 28 492 32 18446744073709551615 1 ; 492 32 492 33 18446744073709551615 11 AES_encrypt 494 5 494 16 234 1 ( 494 16 494 17 234 12 ccmp_aes_ctr 494 17 494 29 224 1 , 494 29 494 30 234 1 B 494 31 494 32 225 1 , 494 32 494 33 234 1 & 494 34 494 35 18446744073709551615 2 TK 494 35 494 37 232 1 ) 494 37 494 38 234 1 ; 494 38 494 39 18446744073709551615 21 // S_i := E( K, A_i ) 494 40 494 61 18446744073709551615 3 XOR 495 5 495 8 106 1 ( 495 8 495 9 106 6 buffer 495 9 495 15 212 1 + 495 16 495 17 18446744073709551615 16 PRISM_HEADER_LEN 495 18 495 34 18446744073709551615 1 + 495 35 495 36 18446744073709551615 6 offset 495 37 495 43 223 1 , 495 43 495 44 106 1 B 495 45 495 46 225 1 , 495 46 495 47 106 1 n 495 48 495 49 217 1 ) 495 49 495 50 106 1 ; 495 50 495 51 18446744073709551615 3 XOR 496 5 496 8 106 1 ( 496 8 496 9 106 3 MIC 496 9 496 12 226 1 , 496 12 496 13 106 6 buffer 496 14 496 20 212 1 + 496 21 496 22 18446744073709551615 16 PRISM_HEADER_LEN 496 23 496 39 18446744073709551615 1 + 496 40 496 41 18446744073709551615 6 offset 496 42 496 48 223 1 , 496 48 496 49 106 1 n 496 50 496 51 217 1 ) 496 51 496 52 106 1 ; 496 52 496 53 18446744073709551615 11 AES_encrypt 497 5 497 16 234 1 ( 497 16 497 17 234 3 MIC 497 17 497 20 226 1 , 497 20 497 21 234 3 MIC 497 22 497 25 226 1 , 497 25 497 26 234 1 & 497 27 497 28 18446744073709551615 2 TK 497 28 497 30 232 1 ) 497 30 497 31 234 1 ; 497 31 497 32 18446744073709551615 6 offset 499 5 499 11 223 2 += 499 12 499 14 18446744073709551615 1 n 499 15 499 16 217 1 ; 499 16 499 17 18446744073709551615 1 } 500 3 500 4 18446744073709551615 6 return 502 3 502 9 18446744073709551615 6 memcmp 502 10 502 16 159 1 ( 502 16 502 17 159 6 buffer 502 17 502 23 212 1 + 502 24 502 25 18446744073709551615 16 PRISM_HEADER_LEN 502 26 502 42 18446744073709551615 1 + 502 43 502 44 18446744073709551615 6 offset 502 45 502 51 223 1 , 502 51 502 52 159 3 MIC 502 53 502 56 226 1 , 502 56 502 57 159 1 8 502 58 502 59 18446744073709551615 1 ) 502 59 502 60 159 2 == 502 61 502 63 18446744073709551615 1 0 502 64 502 65 18446744073709551615 1 ; 502 65 502 66 18446744073709551615 1 } 503 1 503 2 18446744073709551615 6 static 505 1 505 7 18446744073709551615 6 inline 505 8 505 14 18446744073709551615 4 void 505 15 505 19 18446744073709551615 3 XOR 505 20 505 23 106 1 ( 505 23 505 24 106 8 unsigned 505 24 505 32 18446744073709551615 4 char 505 33 505 37 18446744073709551615 1 * 505 38 505 39 18446744073709551615 3 dst 505 39 505 42 235 1 , 505 42 505 43 106 8 unsigned 505 44 505 52 18446744073709551615 4 char 505 53 505 57 18446744073709551615 1 * 505 58 505 59 18446744073709551615 3 src 505 59 505 62 236 1 , 505 62 505 63 106 3 int 505 64 505 67 18446744073709551615 3 len 505 68 505 71 237 1 ) 505 71 505 72 106 1 { 505 73 505 74 18446744073709551615 3 int 506 3 506 6 18446744073709551615 1 i 506 7 506 8 238 1 ; 506 8 506 9 18446744073709551615 3 for 507 3 507 6 18446744073709551615 1 ( 507 6 507 7 18446744073709551615 1 i 507 7 507 8 238 1 = 507 9 507 10 18446744073709551615 1 0 507 11 507 12 18446744073709551615 1 ; 507 12 507 13 18446744073709551615 1 i 507 14 507 15 238 1 < 507 16 507 17 18446744073709551615 3 len 507 18 507 21 237 1 ; 507 21 507 22 18446744073709551615 1 i 507 23 507 24 238 2 ++ 507 24 507 26 18446744073709551615 1 ) 507 26 507 27 18446744073709551615 3 dst 508 5 508 8 235 1 [ 508 8 508 9 18446744073709551615 1 i 508 9 508 10 238 1 ] 508 10 508 11 18446744073709551615 2 ^= 508 12 508 14 18446744073709551615 3 src 508 15 508 18 236 1 [ 508 18 508 19 18446744073709551615 1 i 508 19 508 20 238 1 ] 508 20 508 21 18446744073709551615 1 ; 508 21 508 22 18446744073709551615 1 } 509 1 509 2 18446744073709551615 4 void 511 1 511 5 18446744073709551615 14 dump_decrypted 511 6 511 20 108 1 ( 511 20 511 21 108 6 u_char 511 21 511 27 2 1 * 511 28 511 29 18446744073709551615 6 dumper 511 29 511 35 239 1 , 511 35 511 36 108 5 const 511 37 511 42 18446744073709551615 6 struct 511 43 511 49 18446744073709551615 11 pcap_pkthdr 511 50 511 61 99 1 * 511 62 511 63 18446744073709551615 6 header 511 63 511 69 240 1 , 511 69 511 70 108 5 const 511 71 511 76 18446744073709551615 6 u_char 511 77 511 83 2 1 * 511 84 511 85 18446744073709551615 6 buffer 511 85 511 91 241 1 ) 511 91 511 92 108 1 { 511 93 511 94 18446744073709551615 6 u_char 512 3 512 9 2 1 * 512 10 512 11 18446744073709551615 10 new_buffer 512 11 512 21 242 1 = 512 22 512 23 18446744073709551615 6 malloc 512 24 512 30 168 1 ( 512 30 512 31 168 6 header 512 31 512 37 240 2 -> 512 37 512 39 18446744073709551615 6 caplen 512 39 512 45 228 1 - 512 46 512 47 18446744073709551615 1 8 512 48 512 49 18446744073709551615 1 ) 512 49 512 50 168 1 ; 512 50 512 51 18446744073709551615 6 size_t 513 3 513 9 104 6 length 513 10 513 16 243 1 = 513 17 513 18 18446744073709551615 16 PRISM_HEADER_LEN 513 19 513 35 243 1 + 513 36 513 37 18446744073709551615 6 sizeof 513 38 513 44 18446744073709551615 1 ( 513 44 513 45 18446744073709551615 6 struct 513 45 513 51 18446744073709551615 12 sniff_802_11 513 52 513 64 9 1 ) 513 64 513 65 18446744073709551615 1 ; 513 65 513 66 18446744073709551615 6 memcpy 514 3 514 9 144 1 ( 514 9 514 10 144 10 new_buffer 514 10 514 20 242 1 , 514 20 514 21 144 6 buffer 514 22 514 28 241 1 , 514 28 514 29 144 6 length 514 30 514 36 243 1 ) 514 36 514 37 144 1 ; 514 37 514 38 18446744073709551615 6 memcpy 515 3 515 9 144 1 ( 515 9 515 10 144 10 new_buffer 515 10 515 20 242 1 + 515 21 515 22 18446744073709551615 6 length 515 23 515 29 243 1 , 515 29 515 30 144 6 buffer 515 31 515 37 241 1 + 515 38 515 39 18446744073709551615 6 length 515 40 515 46 243 1 + 515 47 515 48 18446744073709551615 1 8 515 49 515 50 18446744073709551615 1 , 515 50 515 51 144 6 header 515 52 515 58 240 2 -> 515 58 515 60 18446744073709551615 6 caplen 515 60 515 66 228 1 - 515 67 515 68 18446744073709551615 6 length 515 69 515 75 243 1 - 515 76 515 77 18446744073709551615 1 8 515 78 515 79 18446744073709551615 1 ) 515 79 515 80 144 1 ; 515 80 515 81 18446744073709551615 9 pcap_dump 516 3 516 12 244 1 ( 516 12 516 13 244 1 ( 516 13 516 14 18446744073709551615 6 u_char 516 14 516 20 2 1 * 516 21 516 22 18446744073709551615 1 ) 516 22 516 23 18446744073709551615 8 dumpfile 516 23 516 31 97 1 , 516 31 516 32 244 6 header 516 33 516 39 240 1 , 516 39 516 40 244 10 new_buffer 516 41 516 51 242 1 ) 516 51 516 52 244 1 ; 516 52 516 53 18446744073709551615 4 free 517 3 517 7 245 1 ( 517 7 517 8 245 10 new_buffer 517 8 517 18 242 1 ) 517 18 517 19 245 1 ; 517 19 517 20 18446744073709551615 1 } 518 1 518 2 18446744073709551615 0 0 246 0 0 0 9 0 0 1 3 0 11 SHA1_LENGTH 9 1 3 0 1 A 20 1 3 0 6 u_char 9 1 3 0 8 NULL_MIC 7 1 3 0 20 WAITING_EAPOL_KEY_2: 7 1 3 0 20 WAITING_EAPOL_KEY_3: 7 1 3 0 20 WAITING_EAPOL_KEY_4: 7 1 3 0 8 SUCCESS: 20 1 3 0 12 eapol_status 2 1 3 0 12 sniff_802_11 6 1 3 0 26 frame_control:sniff_802_11 6 1 3 0 24 duration_id:sniff_802_11 6 1 3 0 18 addr1:sniff_802_11 6 1 3 0 18 addr2:sniff_802_11 6 1 3 0 18 addr3:sniff_802_11 6 1 3 0 29 sequence_control:sniff_802_11 6 1 3 0 24 qos_control:sniff_802_11 2 1 3 0 19 sniff_802_11_beacon 6 1 3 0 33 frame_control:sniff_802_11_beacon 6 1 3 0 31 duration_id:sniff_802_11_beacon 6 1 3 0 25 addr1:sniff_802_11_beacon 6 1 3 0 25 addr2:sniff_802_11_beacon 6 1 3 0 25 addr3:sniff_802_11_beacon 6 1 3 0 36 sequence_control:sniff_802_11_beacon 2 1 3 0 9 sniff_LLC 6 1 3 0 14 dsap:sniff_LLC 6 1 3 0 14 ssap:sniff_LLC 6 1 3 0 23 control_field:sniff_LLC 2 1 3 0 10 sniff_SNAP 6 1 3 0 19 org_code:sniff_SNAP 6 1 3 0 15 type:sniff_SNAP 2 1 3 0 17 sniff_802_1x_auth 6 1 3 0 25 version:sniff_802_1x_auth 6 1 3 0 22 type:sniff_802_1x_auth 6 1 3 0 24 length:sniff_802_1x_auth 6 1 3 0 37 key_descriptor_type:sniff_802_1x_auth 6 1 3 0 33 key_information:sniff_802_1x_auth 6 1 3 0 28 key_length:sniff_802_1x_auth 6 1 3 0 32 replay_counter:sniff_802_1x_auth 6 1 3 0 31 wpa_key_nonce:sniff_802_1x_auth 6 1 3 0 28 wpa_key_IV:sniff_802_1x_auth 6 1 3 0 29 wpa_key_RSC:sniff_802_1x_auth 6 1 3 0 28 wpa_key_ID:sniff_802_1x_auth 6 1 3 0 29 wpa_key_MIC:sniff_802_1x_auth 6 1 3 0 37 wpa_key_data_length:sniff_802_1x_auth 2 1 3 0 8 sniff_IP 6 1 3 0 14 ip_hl:sniff_IP 6 1 3 0 13 ip_v:sniff_IP 6 1 3 0 15 ip_dss:sniff_IP 6 1 3 0 24 ip_total_length:sniff_IP 6 1 3 0 11 id:sniff_IP 6 1 3 0 14 flags:sniff_IP 6 1 3 0 24 fragment_offset:sniff_IP 6 1 3 0 12 ttl:sniff_IP 6 1 3 0 17 protocol:sniff_IP 6 1 3 0 21 hdr_checksum:sniff_IP 6 1 3 0 12 src:sniff_IP 6 1 3 0 12 dst:sniff_IP 2 1 3 0 9 sniff_TCP 6 1 3 0 18 src_port:sniff_TCP 6 1 3 0 18 dst_port:sniff_TCP 6 1 3 0 20 sqn_number:sniff_TCP 6 1 3 0 20 ack_number:sniff_TCP 6 1 3 0 17 hdr_len:sniff_TCP 6 1 3 0 19 reserved1:sniff_TCP 6 1 3 0 19 reserved2:sniff_TCP 6 1 3 0 13 urg:sniff_TCP 6 1 3 0 13 ack:sniff_TCP 6 1 3 0 13 psh:sniff_TCP 6 1 3 0 13 rst:sniff_TCP 6 1 3 0 13 syn:sniff_TCP 6 1 3 0 13 fin:sniff_TCP 6 1 3 0 21 window_size:sniff_TCP 6 1 3 0 22 tcp_checksum:sniff_TCP 6 1 3 0 24 urgent_pointer:sniff_TCP 2 1 3 0 3 ptk 6 1 3 0 7 kck:ptk 6 1 3 0 7 kek:ptk 6 1 3 0 6 tk:ptk 6 1 3 0 7 txk:ptk 6 1 3 0 7 trk:ptk 2 1 3 0 10 eapol_info 6 1 3 0 26 sta_mac_address:eapol_info 6 1 3 0 17 ANonce:eapol_info 6 1 3 0 17 SNonce:eapol_info 6 1 3 0 14 PTK:eapol_info 6 1 3 0 17 status:eapol_info 6 1 3 0 22 last_replay:eapol_info 9 1 3 0 14 ap_mac_address 9 1 3 0 3 psk 9 1 3 0 4 ssid 20 1 3 0 5 map_t 9 1 3 0 3 map 9 1 3 0 4 PTK0 20 1 3 0 4 FILE 9 1 3 0 2 fd 20 1 3 0 13 pcap_dumper_t 9 1 3 0 8 dumpfile 8 1 3 0 14 process_beacon 2 1 3 0 11 pcap_pkthdr 8 1 3 0 14 process_packet 8 1 3 0 14 packet_decrypt 8 1 3 0 12 mac_toString 8 1 3 0 6 PRF512 20 1 3 0 6 size_t 8 1 3 0 15 hexstr_to_bytes 8 1 3 0 3 XOR 10 1 3 0 57 141:62:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 14 dump_decrypted 8 1 3 0 4 main 10 1 3 0 57 144:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 144:26:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_new 9 1 3 0 57 148:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 149:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 150:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 151:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 152:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 2 1 3 0 11 bpf_program 9 1 3 0 57 153:22:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 6 pcap_t 9 1 3 0 57 154:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 155:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 156:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 157:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 20 fastpbkdf2_hmac_sha1 8 1 3 0 6 strlen 8 1 3 0 17 pcap_open_offline 8 1 3 0 7 fprintf 8 1 3 0 5 fopen 8 1 3 0 15 pcap_dump_fopen 8 1 3 0 12 pcap_compile 8 1 3 0 11 pcap_geterr 8 1 3 0 14 pcap_setfilter 8 1 3 0 12 pcap_next_ex 8 1 3 0 8 asprintf 8 1 3 0 6 fclose 8 1 3 0 13 pcap_freecode 8 1 3 0 10 pcap_close 10 1 3 0 57 215:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 215:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 216:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 218:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 219:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memcpy 8 1 3 0 6 strcmp 10 1 3 0 57 229:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 229:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 230:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 232:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 233:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 234:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 235:22:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 237:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_get 9 1 3 0 57 251:18:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 257:35:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 260:38:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 262:20:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memcmp 9 1 3 0 57 264:38:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 267:41:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 283:31:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 286:34:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 288:16:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 291:43:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 293:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 296:32:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 malloc 8 1 3 0 11 hashmap_put 9 1 3 0 57 303:26:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 7 u_short 9 1 3 0 57 304:21:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 14 hashmap_remove 9 1 3 0 57 308:34:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 317:27:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 318:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 319:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 4 HMAC 8 1 3 0 8 EVP_sha1 9 1 3 0 57 331:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 332:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 333:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 345:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 346:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 347:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 363:28:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 364:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 8 snprintf 10 1 3 0 57 372:24:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 372:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 372:47:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 372:61:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 372:78:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 372:96:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 58 372:112:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 373:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 374:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 375:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 376:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 377:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 400:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 401:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 5 u_int 9 1 3 0 56 402:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 413:33:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 414:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 417:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 418:18:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 419:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 419:21:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 424:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 424:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 424:98:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 425:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 427:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 427:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 427:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 427:20:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 427:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 427:45:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 428:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 428:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 428:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 429:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 429:28:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 429:35:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 430:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 6 1 3 0 18 caplen:pcap_pkthdr 9 1 3 0 57 454:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memset 20 1 3 0 7 AES_KEY 9 1 3 0 57 471:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 19 AES_set_encrypt_key 8 1 3 0 11 AES_encrypt 10 1 3 0 57 505:39:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 505:59:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 505:68:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 506:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 511:29:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 511:63:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 511:85:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 512:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 513:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 9 pcap_dump 8 1 3 0 4 free 0 0 3 0 0 0 56 /home/florenzi/Documenti/juci_ws/wpa_decode/fastpbkdf2.h 1509296147 53 /home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 1262964973 50 /home/florenzi/Documenti/juci_ws/wpa_decode/main.c 1518081107