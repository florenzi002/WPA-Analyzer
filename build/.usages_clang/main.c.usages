22 serialization::archive 15 0 0 0 0 43 /home/florenzi/Documenti/juci_ws/wpa_decode 49 /home/florenzi/Documenti/juci_ws/wpa_decode/build 0 0 2531 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 14 "fastpbkdf2.h" 1 10 1 24 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 11 "hashmap.h" 2 10 2 21 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 7 openssl 3 11 3 18 18446744073709551615 1 / 3 18 3 19 18446744073709551615 4 hmac 3 19 3 23 18446744073709551615 1 . 3 23 3 24 18446744073709551615 1 h 3 24 3 25 18446744073709551615 1 > 3 25 3 26 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 7 openssl 4 11 4 18 18446744073709551615 1 / 4 18 4 19 18446744073709551615 3 sha 4 19 4 22 18446744073709551615 1 . 4 22 4 23 18446744073709551615 1 h 4 23 4 24 18446744073709551615 1 > 4 24 4 25 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 4 pcap 5 11 5 15 18446744073709551615 1 . 5 15 5 16 18446744073709551615 1 h 5 16 5 17 18446744073709551615 1 > 5 17 5 18 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 1 < 6 10 6 11 18446744073709551615 5 stdio 6 11 6 16 18446744073709551615 1 . 6 16 6 17 18446744073709551615 1 h 6 17 6 18 18446744073709551615 1 > 6 18 6 19 18446744073709551615 1 # 7 1 7 2 18446744073709551615 7 include 7 2 7 9 18446744073709551615 1 < 7 10 7 11 18446744073709551615 6 stdlib 7 11 7 17 18446744073709551615 1 . 7 17 7 18 18446744073709551615 1 h 7 18 7 19 18446744073709551615 1 > 7 19 7 20 18446744073709551615 1 # 9 1 9 2 18446744073709551615 6 define 9 2 9 8 18446744073709551615 16 PRISM_HEADER_LEN 9 9 9 25 18446744073709551615 3 144 9 26 9 29 18446744073709551615 1 # 10 1 10 2 18446744073709551615 6 define 10 2 10 8 18446744073709551615 11 SSID_OFFSET 10 9 10 20 18446744073709551615 2 12 10 21 10 23 18446744073709551615 1 # 11 1 11 2 18446744073709551615 6 define 11 2 11 8 18446744073709551615 13 SIZE_ETHERNET 11 9 11 22 18446744073709551615 2 14 11 23 11 25 18446744073709551615 1 # 12 1 12 2 18446744073709551615 6 define 12 2 12 8 18446744073709551615 12 MAC_ADDR_LEN 12 9 12 21 18446744073709551615 1 6 12 22 12 23 18446744073709551615 1 # 13 1 13 2 18446744073709551615 6 define 13 2 13 8 18446744073709551615 7 LLC_LEN 13 9 13 16 18446744073709551615 1 8 13 17 13 18 18446744073709551615 1 # 14 1 14 2 18446744073709551615 6 define 14 2 14 8 18446744073709551615 16 TAKE_N_BITS_FROM 14 9 14 25 18446744073709551615 1 ( 14 25 14 26 18446744073709551615 1 b 14 26 14 27 18446744073709551615 1 , 14 27 14 28 18446744073709551615 1 p 14 29 14 30 18446744073709551615 1 , 14 30 14 31 18446744073709551615 1 n 14 32 14 33 18446744073709551615 1 ) 14 33 14 34 18446744073709551615 1 ( 14 35 14 36 18446744073709551615 1 ( 14 36 14 37 18446744073709551615 1 b 14 37 14 38 18446744073709551615 1 ) 14 38 14 39 18446744073709551615 2 >> 14 40 14 42 18446744073709551615 1 ( 14 43 14 44 18446744073709551615 1 p 14 44 14 45 18446744073709551615 1 ) 14 45 14 46 18446744073709551615 1 ) 14 46 14 47 18446744073709551615 1 & 14 48 14 49 18446744073709551615 1 ( 14 50 14 51 18446744073709551615 1 ( 14 51 14 52 18446744073709551615 1 1 14 52 14 53 18446744073709551615 2 << 14 54 14 56 18446744073709551615 1 ( 14 57 14 58 18446744073709551615 1 n 14 58 14 59 18446744073709551615 1 ) 14 59 14 60 18446744073709551615 1 ) 14 60 14 61 18446744073709551615 1 - 14 62 14 63 18446744073709551615 1 1 14 64 14 65 18446744073709551615 1 ) 14 65 14 66 18446744073709551615 5 const 16 1 16 6 18446744073709551615 4 char 16 7 16 11 18446744073709551615 1 A 16 12 16 13 0 1 [ 16 13 16 14 18446744073709551615 1 ] 16 14 16 15 18446744073709551615 1 = 16 16 16 17 18446744073709551615 24 "Pairwise key expansion" 16 18 16 42 18446744073709551615 1 ; 16 42 16 43 18446744073709551615 5 const 17 1 17 6 18446744073709551615 6 u_char 17 7 17 13 1 8 NULL_MIC 17 14 17 22 2 1 [ 17 22 17 23 18446744073709551615 2 16 17 23 17 25 18446744073709551615 1 ] 17 25 17 26 18446744073709551615 1 = 17 27 17 28 18446744073709551615 1 { 17 29 17 30 18446744073709551615 1 0 17 30 17 31 18446744073709551615 1 } 17 31 17 32 18446744073709551615 1 ; 17 32 17 33 18446744073709551615 7 typedef 19 1 19 8 18446744073709551615 4 enum 19 9 19 13 18446744073709551615 1 { 19 14 19 15 18446744073709551615 19 WAITING_EAPOL_KEY_2 19 16 19 35 3 1 , 19 35 19 36 18446744073709551615 19 WAITING_EAPOL_KEY_3 20 16 20 35 4 1 , 20 35 20 36 18446744073709551615 19 WAITING_EAPOL_KEY_4 21 16 21 35 5 1 , 21 35 21 36 18446744073709551615 7 SUCCESS 22 16 22 23 6 1 } 22 24 22 25 18446744073709551615 12 eapol_status 22 26 22 38 7 1 ; 22 38 22 39 18446744073709551615 23 /* 802.11 MAC header */ 24 1 24 24 18446744073709551615 6 struct 25 1 25 7 18446744073709551615 12 sniff_802_11 25 8 25 20 8 1 { 25 21 25 22 18446744073709551615 6 u_char 26 3 26 9 1 13 frame_control 26 10 26 23 9 1 [ 26 23 26 24 18446744073709551615 1 2 26 24 26 25 18446744073709551615 1 ] 26 25 26 26 18446744073709551615 1 ; 26 26 26 27 18446744073709551615 6 u_char 27 3 27 9 1 11 duration_id 27 10 27 21 10 1 [ 27 21 27 22 18446744073709551615 1 2 27 22 27 23 18446744073709551615 1 ] 27 23 27 24 18446744073709551615 1 ; 27 24 27 25 18446744073709551615 6 u_char 28 3 28 9 1 5 addr1 28 10 28 15 11 1 [ 28 15 28 16 18446744073709551615 12 MAC_ADDR_LEN 28 16 28 28 11 1 ] 28 28 28 29 18446744073709551615 1 ; 28 29 28 30 18446744073709551615 6 u_char 29 3 29 9 1 5 addr2 29 10 29 15 12 1 [ 29 15 29 16 18446744073709551615 12 MAC_ADDR_LEN 29 16 29 28 12 1 ] 29 28 29 29 18446744073709551615 1 ; 29 29 29 30 18446744073709551615 6 u_char 30 3 30 9 1 5 addr3 30 10 30 15 13 1 [ 30 15 30 16 18446744073709551615 12 MAC_ADDR_LEN 30 16 30 28 13 1 ] 30 28 30 29 18446744073709551615 1 ; 30 29 30 30 18446744073709551615 6 u_char 31 3 31 9 1 16 sequence_control 31 10 31 26 14 1 [ 31 26 31 27 18446744073709551615 1 2 31 27 31 28 18446744073709551615 1 ] 31 28 31 29 18446744073709551615 1 ; 31 29 31 30 18446744073709551615 6 u_char 32 3 32 9 1 11 qos_control 32 10 32 21 15 1 [ 32 21 32 22 18446744073709551615 1 2 32 22 32 23 18446744073709551615 1 ] 32 23 32 24 18446744073709551615 1 ; 32 24 32 25 18446744073709551615 1 } 33 1 33 2 18446744073709551615 1 ; 33 2 33 3 18446744073709551615 6 struct 35 1 35 7 18446744073709551615 19 sniff_802_11_beacon 35 8 35 27 16 1 { 35 28 35 29 18446744073709551615 6 u_char 36 3 36 9 1 13 frame_control 36 10 36 23 17 1 [ 36 23 36 24 18446744073709551615 1 2 36 24 36 25 18446744073709551615 1 ] 36 25 36 26 18446744073709551615 1 ; 36 26 36 27 18446744073709551615 6 u_char 37 3 37 9 1 11 duration_id 37 10 37 21 18 1 [ 37 21 37 22 18446744073709551615 1 2 37 22 37 23 18446744073709551615 1 ] 37 23 37 24 18446744073709551615 1 ; 37 24 37 25 18446744073709551615 6 u_char 38 3 38 9 1 5 addr1 38 10 38 15 19 1 [ 38 15 38 16 18446744073709551615 12 MAC_ADDR_LEN 38 16 38 28 19 1 ] 38 28 38 29 18446744073709551615 1 ; 38 29 38 30 18446744073709551615 6 u_char 39 3 39 9 1 5 addr2 39 10 39 15 20 1 [ 39 15 39 16 18446744073709551615 12 MAC_ADDR_LEN 39 16 39 28 20 1 ] 39 28 39 29 18446744073709551615 1 ; 39 29 39 30 18446744073709551615 6 u_char 40 3 40 9 1 5 addr3 40 10 40 15 21 1 [ 40 15 40 16 18446744073709551615 12 MAC_ADDR_LEN 40 16 40 28 21 1 ] 40 28 40 29 18446744073709551615 1 ; 40 29 40 30 18446744073709551615 6 u_char 41 3 41 9 1 16 sequence_control 41 10 41 26 22 1 [ 41 26 41 27 18446744073709551615 1 2 41 27 41 28 18446744073709551615 1 ] 41 28 41 29 18446744073709551615 1 ; 41 29 41 30 18446744073709551615 1 } 42 1 42 2 18446744073709551615 1 ; 42 2 42 3 18446744073709551615 6 struct 44 1 44 7 18446744073709551615 9 sniff_LLC 44 8 44 17 23 1 { 44 18 44 19 18446744073709551615 6 u_char 45 3 45 9 1 4 dsap 45 10 45 14 24 1 ; 45 14 45 15 18446744073709551615 6 u_char 46 3 46 9 1 4 ssap 46 10 46 14 25 1 ; 46 14 46 15 18446744073709551615 6 u_char 47 3 47 9 1 13 control_field 47 10 47 23 26 1 ; 47 23 47 24 18446744073709551615 1 } 48 1 48 2 18446744073709551615 1 ; 48 2 48 3 18446744073709551615 6 struct 50 1 50 7 18446744073709551615 10 sniff_SNAP 50 8 50 18 27 1 { 50 19 50 20 18446744073709551615 6 u_char 51 3 51 9 1 8 org_code 51 10 51 18 28 1 [ 51 18 51 19 18446744073709551615 1 3 51 19 51 20 18446744073709551615 1 ] 51 20 51 21 18446744073709551615 1 ; 51 21 51 22 18446744073709551615 6 u_char 52 3 52 9 1 4 type 52 10 52 14 29 1 [ 52 14 52 15 18446744073709551615 1 2 52 15 52 16 18446744073709551615 1 ] 52 16 52 17 18446744073709551615 1 ; 52 17 52 18 18446744073709551615 1 } 53 1 53 2 18446744073709551615 1 ; 53 2 53 3 18446744073709551615 6 struct 55 1 55 7 18446744073709551615 17 sniff_802_1x_auth 55 8 55 25 30 1 { 55 26 55 27 18446744073709551615 6 u_char 56 3 56 9 1 7 version 56 10 56 17 31 1 ; 56 17 56 18 18446744073709551615 6 u_char 57 3 57 9 1 4 type 57 10 57 14 32 1 ; 57 14 57 15 18446744073709551615 6 u_char 58 3 58 9 1 6 length 58 10 58 16 33 1 [ 58 16 58 17 18446744073709551615 1 2 58 17 58 18 18446744073709551615 1 ] 58 18 58 19 18446744073709551615 1 ; 58 19 58 20 18446744073709551615 6 u_char 59 3 59 9 1 19 key_descriptor_type 59 10 59 29 34 1 ; 59 29 59 30 18446744073709551615 6 u_char 60 3 60 9 1 15 key_information 60 10 60 25 35 1 [ 60 25 60 26 18446744073709551615 1 2 60 26 60 27 18446744073709551615 1 ] 60 27 60 28 18446744073709551615 1 ; 60 28 60 29 18446744073709551615 6 u_char 61 3 61 9 1 10 key_length 61 10 61 20 36 1 [ 61 20 61 21 18446744073709551615 1 2 61 21 61 22 18446744073709551615 1 ] 61 22 61 23 18446744073709551615 1 ; 61 23 61 24 18446744073709551615 6 u_char 62 3 62 9 1 14 replay_counter 62 10 62 24 37 1 [ 62 24 62 25 18446744073709551615 1 8 62 25 62 26 18446744073709551615 1 ] 62 26 62 27 18446744073709551615 1 ; 62 27 62 28 18446744073709551615 6 u_char 63 3 63 9 1 13 wpa_key_nonce 63 10 63 23 38 1 [ 63 23 63 24 18446744073709551615 2 32 63 24 63 26 18446744073709551615 1 ] 63 26 63 27 18446744073709551615 1 ; 63 27 63 28 18446744073709551615 6 u_char 64 3 64 9 1 10 wpa_key_IV 64 10 64 20 39 1 [ 64 20 64 21 18446744073709551615 2 16 64 21 64 23 18446744073709551615 1 ] 64 23 64 24 18446744073709551615 1 ; 64 24 64 25 18446744073709551615 6 u_char 65 3 65 9 1 11 wpa_key_RSC 65 10 65 21 40 1 [ 65 21 65 22 18446744073709551615 1 8 65 22 65 23 18446744073709551615 1 ] 65 23 65 24 18446744073709551615 1 ; 65 24 65 25 18446744073709551615 6 u_char 66 3 66 9 1 10 wpa_key_ID 66 10 66 20 41 1 [ 66 20 66 21 18446744073709551615 1 8 66 21 66 22 18446744073709551615 1 ] 66 22 66 23 18446744073709551615 1 ; 66 23 66 24 18446744073709551615 6 u_char 67 3 67 9 1 11 wpa_key_MIC 67 10 67 21 42 1 [ 67 21 67 22 18446744073709551615 2 16 67 22 67 24 18446744073709551615 1 ] 67 24 67 25 18446744073709551615 1 ; 67 25 67 26 18446744073709551615 6 u_char 68 3 68 9 1 19 wpa_key_data_length 68 10 68 29 43 1 [ 68 29 68 30 18446744073709551615 1 2 68 30 68 31 18446744073709551615 1 ] 68 31 68 32 18446744073709551615 1 ; 68 32 68 33 18446744073709551615 1 } 69 1 69 2 18446744073709551615 1 ; 69 2 69 3 18446744073709551615 6 struct 71 1 71 7 18446744073709551615 3 ptk 71 8 71 11 44 1 { 71 12 71 13 18446744073709551615 6 u_char 72 3 72 9 1 3 kck 72 10 72 13 45 1 [ 72 13 72 14 18446744073709551615 2 16 72 14 72 16 18446744073709551615 1 ] 72 16 72 17 18446744073709551615 1 ; 72 17 72 18 18446744073709551615 6 u_char 73 3 73 9 1 3 kek 73 10 73 13 46 1 [ 73 13 73 14 18446744073709551615 2 16 73 14 73 16 18446744073709551615 1 ] 73 16 73 17 18446744073709551615 1 ; 73 17 73 18 18446744073709551615 6 u_char 74 3 74 9 1 2 tk 74 10 74 12 47 1 [ 74 12 74 13 18446744073709551615 2 16 74 13 74 15 18446744073709551615 1 ] 74 15 74 16 18446744073709551615 1 ; 74 16 74 17 18446744073709551615 6 u_char 75 3 75 9 1 3 txk 75 10 75 13 48 1 [ 75 13 75 14 18446744073709551615 1 8 75 14 75 15 18446744073709551615 1 ] 75 15 75 16 18446744073709551615 1 ; 75 16 75 17 18446744073709551615 6 u_char 76 3 76 9 1 3 trk 76 10 76 13 49 1 [ 76 13 76 14 18446744073709551615 1 8 76 14 76 15 18446744073709551615 1 ] 76 15 76 16 18446744073709551615 1 ; 76 16 76 17 18446744073709551615 1 } 77 1 77 2 18446744073709551615 1 ; 77 2 77 3 18446744073709551615 6 struct 79 1 79 7 18446744073709551615 10 eapol_info 79 8 79 18 50 1 { 79 19 79 20 18446744073709551615 6 u_char 80 3 80 9 1 15 sta_mac_address 80 10 80 25 51 1 [ 80 25 80 26 18446744073709551615 12 MAC_ADDR_LEN 80 26 80 38 51 1 ] 80 38 80 39 18446744073709551615 1 ; 80 39 80 40 18446744073709551615 6 u_char 81 3 81 9 1 6 ANonce 81 10 81 16 52 1 [ 81 16 81 17 18446744073709551615 2 32 81 17 81 19 18446744073709551615 1 ] 81 19 81 20 18446744073709551615 1 ; 81 20 81 21 18446744073709551615 6 u_char 82 3 82 9 1 6 SNonce 82 10 82 16 53 1 [ 82 16 82 17 18446744073709551615 2 32 82 17 82 19 18446744073709551615 1 ] 82 19 82 20 18446744073709551615 1 ; 82 20 82 21 18446744073709551615 6 struct 83 3 83 9 18446744073709551615 3 ptk 83 10 83 13 44 3 PTK 83 14 83 17 54 1 ; 83 17 83 18 18446744073709551615 12 eapol_status 84 3 84 15 7 6 status 84 16 84 22 55 1 ; 84 22 84 23 18446744073709551615 1 } 85 1 85 2 18446744073709551615 1 ; 85 2 85 3 18446744073709551615 6 u_char 87 1 87 7 1 14 ap_mac_address 87 8 87 22 56 1 [ 87 22 87 23 18446744073709551615 1 6 87 23 87 24 18446744073709551615 1 ] 87 24 87 25 18446744073709551615 1 ; 87 25 87 26 18446744073709551615 6 u_char 88 1 88 7 1 3 psk 88 8 88 11 57 1 [ 88 11 88 12 18446744073709551615 2 32 88 12 88 14 18446744073709551615 1 ] 88 14 88 15 18446744073709551615 1 ; 88 15 88 16 18446744073709551615 6 u_char 89 1 89 7 1 1 * 89 8 89 9 18446744073709551615 4 ssid 89 9 89 13 58 1 ; 89 13 89 14 18446744073709551615 5 map_t 90 1 90 6 59 1 * 90 7 90 8 18446744073709551615 3 map 90 8 90 11 60 1 ; 90 11 90 12 18446744073709551615 6 u_char 93 1 93 7 1 14 process_beacon 93 8 93 22 61 1 ( 93 22 93 23 61 5 const 93 23 93 28 18446744073709551615 6 struct 93 29 93 35 18446744073709551615 11 pcap_pkthdr 93 36 93 47 62 1 * 93 48 93 49 18446744073709551615 1 , 93 49 93 50 61 5 const 93 51 93 56 18446744073709551615 6 u_char 93 57 93 63 1 1 * 93 64 93 65 18446744073709551615 1 ) 93 65 93 66 61 1 ; 93 66 93 67 18446744073709551615 6 u_char 94 1 94 7 1 13 process_eapol 94 8 94 21 63 1 ( 94 21 94 22 63 5 const 94 22 94 27 18446744073709551615 6 struct 94 28 94 34 18446744073709551615 11 pcap_pkthdr 94 35 94 46 62 1 * 94 47 94 48 18446744073709551615 1 , 94 48 94 49 63 5 const 94 50 94 55 18446744073709551615 6 u_char 94 56 94 62 1 1 * 94 63 94 64 18446744073709551615 1 ) 94 64 94 65 63 1 ; 94 65 94 66 18446744073709551615 6 u_char 95 1 95 7 1 14 process_packet 95 8 95 22 64 1 ( 95 22 95 23 64 5 const 95 23 95 28 18446744073709551615 6 struct 95 29 95 35 18446744073709551615 11 pcap_pkthdr 95 36 95 47 62 1 * 95 48 95 49 18446744073709551615 1 , 95 49 95 50 64 5 const 95 51 95 56 18446744073709551615 6 u_char 95 57 95 63 1 1 * 95 64 95 65 18446744073709551615 1 ) 95 65 95 66 64 1 ; 95 66 95 67 18446744073709551615 4 char 96 1 96 5 18446744073709551615 1 * 96 6 96 7 65 12 mac_toString 96 7 96 19 65 1 ( 96 19 96 20 65 6 u_char 96 20 96 26 1 1 * 96 27 96 28 18446744073709551615 1 ) 96 28 96 29 65 1 ; 96 29 96 30 18446744073709551615 6 u_char 97 1 97 7 1 1 * 97 8 97 9 66 6 PRF512 97 9 97 15 66 1 ( 97 15 97 16 66 6 u_char 97 16 97 22 1 1 * 97 23 97 24 18446744073709551615 1 , 97 24 97 25 66 6 u_char 97 26 97 32 1 1 * 97 33 97 34 18446744073709551615 1 , 97 34 97 35 66 6 size_t 97 36 97 42 67 1 , 97 42 97 43 66 6 u_char 97 44 97 50 1 1 * 97 51 97 52 18446744073709551615 1 , 97 52 97 53 66 6 u_char 97 54 97 60 1 1 * 97 61 97 62 18446744073709551615 1 , 97 62 97 63 66 6 u_char 97 64 97 70 1 1 * 97 71 97 72 18446744073709551615 1 , 97 72 97 73 66 6 u_char 97 74 97 80 1 1 * 97 81 97 82 18446744073709551615 1 ) 97 82 97 83 66 1 ; 97 83 97 84 18446744073709551615 6 u_char 98 1 98 7 1 1 * 98 8 98 9 68 15 hexstr_to_bytes 98 9 98 24 68 1 ( 98 24 98 25 68 6 u_char 98 25 98 31 1 1 * 98 32 98 33 18446744073709551615 1 ) 98 33 98 34 68 1 ; 98 34 98 35 18446744073709551615 3 int 100 1 100 4 18446744073709551615 4 main 100 5 100 9 69 1 ( 100 9 100 10 69 3 int 100 10 100 13 18446744073709551615 4 argc 100 14 100 18 70 1 , 100 18 100 19 69 4 char 100 20 100 24 18446744073709551615 1 * 100 25 100 26 18446744073709551615 4 argv 100 26 100 30 71 1 [ 100 30 100 31 18446744073709551615 1 ] 100 31 100 32 18446744073709551615 1 ) 100 32 100 33 69 1 { 100 34 100 35 18446744073709551615 3 map 102 3 102 6 60 1 = 102 7 102 8 18446744073709551615 11 hashmap_new 102 9 102 20 72 1 ( 102 20 102 21 72 1 ) 102 21 102 22 72 1 ; 102 22 102 23 18446744073709551615 4 char 103 3 103 7 18446744073709551615 1 * 103 8 103 9 18446744073709551615 3 dev 103 9 103 12 73 1 = 103 13 103 14 18446744073709551615 4 argv 103 15 103 19 71 1 [ 103 19 103 20 18446744073709551615 1 1 103 20 103 21 18446744073709551615 1 ] 103 21 103 22 18446744073709551615 1 ; 103 22 103 23 18446744073709551615 4 ssid 104 3 104 7 58 1 = 104 8 104 9 18446744073709551615 4 argv 104 10 104 14 71 1 [ 104 14 104 15 18446744073709551615 1 2 104 15 104 16 18446744073709551615 1 ] 104 16 104 17 18446744073709551615 1 ; 104 17 104 18 18446744073709551615 6 u_char 105 3 105 9 1 1 * 105 10 105 11 18446744073709551615 3 pwd 105 11 105 14 74 1 = 105 15 105 16 18446744073709551615 4 argv 105 17 105 21 71 1 [ 105 21 105 22 18446744073709551615 1 3 105 22 105 23 18446744073709551615 1 ] 105 23 105 24 18446744073709551615 1 ; 105 24 105 25 18446744073709551615 4 char 106 3 106 7 18446744073709551615 6 errbuf 106 8 106 14 75 1 [ 106 14 106 15 18446744073709551615 16 PCAP_ERRBUF_SIZE 106 15 106 31 75 1 ] 106 31 106 32 18446744073709551615 1 ; 106 32 106 33 18446744073709551615 4 char 107 3 107 7 18446744073709551615 13 filter_beacon 107 8 107 21 76 1 [ 107 21 107 22 18446744073709551615 1 ] 107 22 107 23 18446744073709551615 1 = 107 24 107 25 18446744073709551615 30 "wlan type mgt subtype beacon" 107 26 107 56 18446744073709551615 1 ; 107 56 107 57 18446744073709551615 4 char 108 3 108 7 18446744073709551615 25 filter_eapol_on_ssid_mask 108 8 108 33 77 1 [ 108 33 108 34 18446744073709551615 1 ] 108 34 108 35 18446744073709551615 1 = 108 36 108 37 18446744073709551615 32 "wlan addr1 %s or wlan addr2 %s" 108 38 108 70 18446744073709551615 1 ; 108 70 108 71 18446744073709551615 4 char 109 3 109 7 18446744073709551615 1 * 109 8 109 9 18446744073709551615 20 filter_eapol_on_ssid 109 9 109 29 78 1 ; 109 29 109 30 18446744073709551615 6 struct 110 3 110 9 18446744073709551615 11 bpf_program 110 10 110 21 79 2 fp 110 22 110 24 80 1 ; 110 24 110 25 18446744073709551615 6 pcap_t 111 3 111 9 81 1 * 111 10 111 11 18446744073709551615 6 handle 111 11 111 17 82 1 ; 111 17 111 18 18446744073709551615 6 struct 112 3 112 9 18446744073709551615 11 pcap_pkthdr 112 10 112 21 62 1 * 112 22 112 23 18446744073709551615 6 header 112 23 112 29 83 1 ; 112 29 112 30 18446744073709551615 5 const 113 3 113 8 18446744073709551615 6 u_char 113 9 113 15 1 1 * 113 16 113 17 18446744073709551615 6 packet 113 17 113 23 84 1 ; 113 23 113 24 18446744073709551615 4 char 114 3 114 7 18446744073709551615 18 ap_mac_address_str 114 8 114 26 85 1 [ 114 26 114 27 18446744073709551615 1 2 114 27 114 28 18446744073709551615 1 * 114 29 114 30 18446744073709551615 12 MAC_ADDR_LEN 114 31 114 43 18446744073709551615 1 ] 114 43 114 44 18446744073709551615 1 ; 114 44 114 45 18446744073709551615 18 ap_mac_address_str 115 3 115 21 85 1 [ 115 21 115 22 18446744073709551615 1 2 115 22 115 23 18446744073709551615 1 * 115 24 115 25 18446744073709551615 12 MAC_ADDR_LEN 115 26 115 38 18446744073709551615 1 - 115 39 115 40 18446744073709551615 1 1 115 41 115 42 18446744073709551615 1 ] 115 42 115 43 18446744073709551615 1 = 115 44 115 45 18446744073709551615 4 '\0' 115 46 115 50 18446744073709551615 1 ; 115 50 115 51 18446744073709551615 20 fastpbkdf2_hmac_sha1 117 3 117 23 86 1 ( 117 23 117 24 86 3 pwd 117 24 117 27 74 1 , 117 27 117 28 86 6 strlen 117 29 117 35 87 1 ( 117 35 117 36 87 3 pwd 117 36 117 39 74 1 ) 117 39 117 40 87 1 , 117 40 117 41 86 4 ssid 117 42 117 46 58 1 , 117 46 117 47 86 6 strlen 117 48 117 54 87 1 ( 117 54 117 55 87 4 ssid 117 55 117 59 58 1 ) 117 59 117 60 87 1 , 117 60 117 61 86 4 4096 117 62 117 66 18446744073709551615 1 , 117 66 117 67 86 3 psk 117 68 117 71 57 1 , 117 71 117 72 86 2 32 117 73 117 75 18446744073709551615 1 ) 117 75 117 76 86 1 ; 117 76 117 77 18446744073709551615 3 for 119 3 119 6 18446744073709551615 1 ( 119 6 119 7 18446744073709551615 3 int 119 7 119 10 18446744073709551615 1 i 119 11 119 12 88 1 = 119 13 119 14 18446744073709551615 1 0 119 15 119 16 18446744073709551615 1 ; 119 16 119 17 18446744073709551615 1 i 119 18 119 19 88 1 < 119 20 119 21 18446744073709551615 2 32 119 22 119 24 18446744073709551615 1 ; 119 24 119 25 18446744073709551615 1 i 119 26 119 27 88 2 ++ 119 27 119 29 18446744073709551615 1 ) 119 29 119 30 18446744073709551615 1 { 119 31 119 32 18446744073709551615 6 printf 120 5 120 11 89 1 ( 120 11 120 12 89 6 "%02x" 120 12 120 18 18446744073709551615 1 , 120 18 120 19 89 3 psk 120 20 120 23 57 1 [ 120 23 120 24 18446744073709551615 1 i 120 24 120 25 88 1 ] 120 25 120 26 18446744073709551615 1 ) 120 26 120 27 89 1 ; 120 27 120 28 18446744073709551615 1 } 121 3 121 4 18446744073709551615 6 printf 122 3 122 9 89 1 ( 122 9 122 10 89 4 "\n" 122 10 122 14 18446744073709551615 1 ) 122 14 122 15 89 1 ; 122 15 122 16 18446744073709551615 84 //u_char PMK[] = "01b809f9ab2fb5dc47984f52fb2d112e13d84ccb6b86d4a7193ec5299f851c48"; 124 3 124 87 18446744073709551615 38 //u_char passPhrase[] = "10zZz10ZZzZ"; 125 3 125 41 18446744073709551615 34 //u_char ssid[] = "Netgear 2/158"; 126 3 126 37 18446744073709551615 6 u_char 127 3 127 9 1 5 APmac 127 10 127 15 90 1 [ 127 15 127 16 18446744073709551615 1 ] 127 16 127 17 18446744073709551615 1 = 127 18 127 19 18446744073709551615 14 "c4ea1dbe06f5" 127 20 127 34 18446744073709551615 1 ; 127 34 127 35 18446744073709551615 6 u_char 128 3 128 9 1 9 Clientmac 128 10 128 19 91 1 [ 128 19 128 20 18446744073709551615 1 ] 128 20 128 21 18446744073709551615 1 = 128 22 128 23 18446744073709551615 14 "b0e5ed102445" 128 24 128 38 18446744073709551615 1 ; 128 38 128 39 18446744073709551615 6 u_char 129 3 129 9 1 6 ANonce 129 10 129 16 92 1 [ 129 16 129 17 18446744073709551615 1 ] 129 17 129 18 18446744073709551615 1 = 129 19 129 20 18446744073709551615 66 "faf4cf7ef3e37f25e833031a971343fb39b8ef00247febb110606aa11d7ff2d4" 129 21 129 87 18446744073709551615 1 ; 129 87 129 88 18446744073709551615 6 u_char 130 3 130 9 1 6 SNonce 130 10 130 16 93 1 [ 130 16 130 17 18446744073709551615 1 ] 130 17 130 18 18446744073709551615 1 = 130 19 130 20 18446744073709551615 66 "30143bb717c94943f744a749058dac154759a229012c95aeccc6193cff323cff" 130 21 130 87 18446744073709551615 1 ; 130 87 130 88 18446744073709551615 6 u_char 131 3 131 9 1 4 data 131 10 131 14 94 1 [ 131 14 131 15 18446744073709551615 1 ] 131 15 131 16 18446744073709551615 1 = 131 17 131 18 18446744073709551615 244 "0103007502010a0000000000000000000130143bb717c94943f744a749058dac154759a229012c95aeccc6193cff323cff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001630140100000fac020100000fac040100000fac020000" 131 19 131 263 18446744073709551615 1 ; 131 263 131 264 18446744073709551615 6 struct 133 3 133 9 18446744073709551615 3 ptk 133 10 133 13 44 1 * 133 14 133 15 18446744073709551615 3 PTK 133 15 133 18 95 1 = 133 19 133 20 18446744073709551615 1 ( 133 21 133 22 18446744073709551615 6 struct 133 22 133 28 18446744073709551615 3 ptk 133 29 133 32 44 1 * 133 33 133 34 18446744073709551615 1 ) 133 34 133 35 18446744073709551615 6 PRF512 133 35 133 41 66 1 ( 133 41 133 42 66 3 psk 133 42 133 45 57 1 , 133 45 133 46 66 1 A 133 47 133 48 0 1 , 133 48 133 49 66 6 strlen 133 50 133 56 87 1 ( 133 56 133 57 87 1 A 133 57 133 58 0 1 ) 133 58 133 59 87 1 , 133 59 133 60 66 15 hexstr_to_bytes 133 61 133 76 68 1 ( 133 76 133 77 68 5 APmac 133 77 133 82 90 1 ) 133 82 133 83 68 1 , 133 83 133 84 66 15 hexstr_to_bytes 133 85 133 100 68 1 ( 133 100 133 101 68 9 Clientmac 133 101 133 110 91 1 ) 133 110 133 111 68 1 , 133 111 133 112 66 15 hexstr_to_bytes 133 113 133 128 68 1 ( 133 128 133 129 68 6 ANonce 133 129 133 135 92 1 ) 133 135 133 136 68 1 , 133 136 133 137 66 15 hexstr_to_bytes 133 138 133 153 68 1 ( 133 153 133 154 68 6 SNonce 133 154 133 160 93 1 ) 133 160 133 161 68 1 ) 133 161 133 162 66 1 ; 133 162 133 163 18446744073709551615 3 int 135 3 135 6 18446744073709551615 10 sha_length 135 7 135 17 96 1 = 135 18 135 19 18446744073709551615 2 16 135 20 135 22 18446744073709551615 1 ; 135 22 135 23 18446744073709551615 6 u_char 136 3 136 9 1 1 * 136 10 136 11 18446744073709551615 3 MIC 136 11 136 14 97 1 = 136 15 136 16 18446744073709551615 6 malloc 136 17 136 23 98 1 ( 136 23 136 24 98 2 16 136 24 136 26 18446744073709551615 1 ) 136 26 136 27 98 1 ; 136 27 136 28 18446744073709551615 4 HMAC 137 3 137 7 99 1 ( 137 7 137 8 99 8 EVP_sha1 137 8 137 16 100 1 ( 137 16 137 17 100 1 ) 137 17 137 18 100 1 , 137 18 137 19 99 3 PTK 137 20 137 23 95 2 -> 137 23 137 25 18446744073709551615 3 kck 137 25 137 28 45 1 , 137 28 137 29 99 2 16 137 30 137 32 18446744073709551615 1 , 137 32 137 33 99 15 hexstr_to_bytes 137 34 137 49 68 1 ( 137 49 137 50 68 4 data 137 50 137 54 94 1 ) 137 54 137 55 68 1 , 137 55 137 56 99 3 121 137 57 137 60 18446744073709551615 1 , 137 60 137 61 99 3 MIC 137 62 137 65 97 1 , 137 65 137 66 99 1 & 137 67 137 68 18446744073709551615 10 sha_length 137 68 137 78 96 1 ) 137 78 137 79 99 1 ; 137 79 137 80 18446744073709551615 3 for 138 3 138 6 18446744073709551615 1 ( 138 6 138 7 18446744073709551615 3 int 138 7 138 10 18446744073709551615 1 i 138 11 138 12 101 1 = 138 13 138 14 18446744073709551615 1 0 138 15 138 16 18446744073709551615 1 ; 138 16 138 17 18446744073709551615 1 i 138 18 138 19 101 1 < 138 20 138 21 18446744073709551615 2 16 138 22 138 24 18446744073709551615 1 ; 138 24 138 25 18446744073709551615 1 i 138 26 138 27 101 2 ++ 138 27 138 29 18446744073709551615 1 ) 138 29 138 30 18446744073709551615 1 { 138 31 138 32 18446744073709551615 6 printf 139 5 139 11 89 1 ( 139 11 139 12 89 6 "%02x" 139 12 139 18 18446744073709551615 1 , 139 18 139 19 89 3 MIC 139 20 139 23 97 1 [ 139 23 139 24 18446744073709551615 1 i 139 24 139 25 101 1 ] 139 25 139 26 18446744073709551615 1 ) 139 26 139 27 89 1 ; 139 27 139 28 18446744073709551615 1 } 140 3 140 4 18446744073709551615 6 printf 141 3 141 9 89 1 ( 141 9 141 10 89 4 "\n" 141 10 141 14 18446744073709551615 1 ) 141 14 141 15 89 1 ; 141 15 141 16 18446744073709551615 11 bpf_u_int32 143 3 143 14 102 4 mask 143 15 143 19 103 1 ; 143 19 143 20 18446744073709551615 40 /* The netmask of our sniffing device */ 143 21 143 61 18446744073709551615 11 bpf_u_int32 144 3 144 14 102 3 net 144 15 144 18 104 1 ; 144 18 144 19 18446744073709551615 35 /* The IP of our sniffing device */ 144 21 144 56 18446744073709551615 2 if 146 3 146 5 18446744073709551615 1 ( 146 5 146 6 18446744073709551615 14 pcap_lookupnet 146 6 146 20 105 1 ( 146 20 146 21 105 3 dev 146 21 146 24 73 1 , 146 24 146 25 105 1 & 146 26 146 27 18446744073709551615 3 net 146 27 146 30 104 1 , 146 30 146 31 105 1 & 146 32 146 33 18446744073709551615 4 mask 146 33 146 37 103 1 , 146 37 146 38 105 6 errbuf 146 39 146 45 75 1 ) 146 45 146 46 105 2 == 146 47 146 49 18446744073709551615 1 - 146 50 146 51 18446744073709551615 1 1 146 51 146 52 18446744073709551615 1 ) 146 52 146 53 18446744073709551615 1 { 146 54 146 55 18446744073709551615 7 fprintf 147 5 147 12 106 1 ( 147 12 147 13 106 6 stderr 147 13 147 19 106 1 , 147 19 147 20 106 35 "Can't get netmask for device %s\n" 147 21 147 56 18446744073709551615 1 , 147 56 147 57 106 3 dev 147 58 147 61 73 1 ) 147 61 147 62 106 1 ; 147 62 147 63 18446744073709551615 3 net 148 5 148 8 104 1 = 148 9 148 10 18446744073709551615 1 0 148 11 148 12 18446744073709551615 1 ; 148 12 148 13 18446744073709551615 4 mask 149 5 149 9 103 1 = 149 10 149 11 18446744073709551615 1 0 149 12 149 13 18446744073709551615 1 ; 149 13 149 14 18446744073709551615 1 } 150 3 150 4 18446744073709551615 4 char 152 3 152 7 18446744073709551615 8 filename 152 8 152 16 107 1 [ 152 16 152 17 18446744073709551615 1 ] 152 17 152 18 18446744073709551615 1 = 152 19 152 20 18446744073709551615 17 "../capture.pcap" 152 21 152 38 18446744073709551615 1 ; 152 38 152 39 18446744073709551615 56 //handle = pcap_open_live(dev, BUFSIZ, 1, 1000, errbuf); 153 3 153 59 18446744073709551615 6 handle 154 3 154 9 82 1 = 154 10 154 11 18446744073709551615 17 pcap_open_offline 154 12 154 29 108 1 ( 154 29 154 30 108 8 filename 154 30 154 38 107 1 , 154 38 154 39 108 6 errbuf 154 40 154 46 75 1 ) 154 46 154 47 108 1 ; 154 47 154 48 18446744073709551615 2 if 156 3 156 5 18446744073709551615 1 ( 156 5 156 6 18446744073709551615 6 handle 156 6 156 12 82 2 == 156 13 156 15 18446744073709551615 4 NULL 156 16 156 20 18446744073709551615 1 ) 156 20 156 21 18446744073709551615 1 { 156 22 156 23 18446744073709551615 7 fprintf 157 5 157 12 106 1 ( 157 12 157 13 106 6 stderr 157 13 157 19 106 1 , 157 19 157 20 106 31 "Couldn't open device %s: %s\n" 157 21 157 52 18446744073709551615 1 , 157 52 157 53 106 3 dev 157 54 157 57 73 1 , 157 57 157 58 106 6 errbuf 157 59 157 65 75 1 ) 157 65 157 66 106 1 ; 157 66 157 67 18446744073709551615 6 return 158 5 158 11 18446744073709551615 1 ( 158 12 158 13 18446744073709551615 1 2 158 13 158 14 18446744073709551615 1 ) 158 14 158 15 18446744073709551615 1 ; 158 15 158 16 18446744073709551615 1 } 159 3 159 4 18446744073709551615 2 if 161 3 161 5 18446744073709551615 1 ( 161 5 161 6 18446744073709551615 12 pcap_compile 161 6 161 18 109 1 ( 161 18 161 19 109 6 handle 161 19 161 25 82 1 , 161 25 161 26 109 1 & 161 27 161 28 18446744073709551615 2 fp 161 28 161 30 80 1 , 161 30 161 31 109 13 filter_beacon 161 32 161 45 76 1 , 161 45 161 46 109 1 0 161 47 161 48 18446744073709551615 1 , 161 48 161 49 109 3 net 161 50 161 53 104 1 ) 161 53 161 54 109 2 == 161 55 161 57 18446744073709551615 1 - 161 58 161 59 18446744073709551615 1 1 161 59 161 60 18446744073709551615 1 ) 161 60 161 61 18446744073709551615 1 { 161 62 161 63 18446744073709551615 7 fprintf 162 5 162 12 106 1 ( 162 12 162 13 106 6 stderr 162 13 162 19 106 1 , 162 19 162 20 106 32 "Couldn't parse filter %s: %s\n" 162 21 162 53 18446744073709551615 1 , 162 53 162 54 106 13 filter_beacon 162 55 162 68 76 1 , 162 68 162 69 106 11 pcap_geterr 162 70 162 81 110 1 ( 162 81 162 82 110 6 handle 162 82 162 88 82 1 ) 162 88 162 89 110 1 ) 162 89 162 90 106 1 ; 162 90 162 91 18446744073709551615 6 return 163 5 163 11 18446744073709551615 1 ( 163 12 163 13 18446744073709551615 1 2 163 13 163 14 18446744073709551615 1 ) 163 14 163 15 18446744073709551615 1 ; 163 15 163 16 18446744073709551615 1 } 164 3 164 4 18446744073709551615 2 if 166 3 166 5 18446744073709551615 1 ( 166 5 166 6 18446744073709551615 14 pcap_setfilter 166 6 166 20 111 1 ( 166 20 166 21 111 6 handle 166 21 166 27 82 1 , 166 27 166 28 111 1 & 166 29 166 30 18446744073709551615 2 fp 166 30 166 32 80 1 ) 166 32 166 33 111 2 == 166 34 166 36 18446744073709551615 1 - 166 37 166 38 18446744073709551615 1 1 166 38 166 39 18446744073709551615 1 ) 166 39 166 40 18446744073709551615 1 { 166 41 166 42 18446744073709551615 7 fprintf 167 5 167 12 106 1 ( 167 12 167 13 106 6 stderr 167 13 167 19 106 1 , 167 19 167 20 106 34 "Couldn't install filter %s: %s\n" 167 21 167 55 18446744073709551615 1 , 167 55 167 56 106 13 filter_beacon 167 57 167 70 76 1 , 167 70 167 71 106 11 pcap_geterr 167 72 167 83 110 1 ( 167 83 167 84 110 6 handle 167 84 167 90 82 1 ) 167 90 167 91 110 1 ) 167 91 167 92 106 1 ; 167 92 167 93 18446744073709551615 6 return 168 5 168 11 18446744073709551615 1 ( 168 12 168 13 18446744073709551615 1 2 168 13 168 14 18446744073709551615 1 ) 168 14 168 15 18446744073709551615 1 ; 168 15 168 16 18446744073709551615 1 } 169 3 169 4 18446744073709551615 6 printf 171 3 171 9 89 1 ( 171 9 171 10 89 14 "Device: %s\n" 171 10 171 24 18446744073709551615 1 , 171 24 171 25 89 3 dev 171 26 171 29 73 1 ) 171 29 171 30 89 1 ; 171 30 171 31 18446744073709551615 31 //Put the device in sniff loop; 172 3 172 34 18446744073709551615 5 while 173 3 173 8 18446744073709551615 1 ( 173 8 173 9 18446744073709551615 12 pcap_next_ex 173 9 173 21 112 1 ( 173 21 173 22 112 6 handle 173 22 173 28 82 1 , 173 28 173 29 112 1 & 173 30 173 31 18446744073709551615 6 header 173 31 173 37 83 1 , 173 37 173 38 112 1 & 173 39 173 40 18446744073709551615 6 packet 173 40 173 46 84 1 ) 173 46 173 47 112 2 && 173 48 173 50 18446744073709551615 1 ! 173 51 173 52 18446744073709551615 14 process_beacon 173 52 173 66 61 1 ( 173 66 173 67 61 6 header 173 67 173 73 83 1 , 173 73 173 74 61 6 packet 173 75 173 81 84 1 ) 173 81 173 82 61 1 ) 173 82 173 83 18446744073709551615 1 ; 174 5 174 6 18446744073709551615 8 asprintf 176 3 176 11 113 1 ( 176 11 176 12 113 1 & 176 12 176 13 18446744073709551615 20 filter_eapol_on_ssid 176 13 176 33 78 1 , 176 33 176 34 113 25 filter_eapol_on_ssid_mask 176 35 176 60 77 1 , 176 60 176 61 113 12 mac_toString 176 62 176 74 65 1 ( 176 74 176 75 65 14 ap_mac_address 176 75 176 89 56 1 ) 176 89 176 90 65 1 , 176 90 176 91 113 12 mac_toString 176 92 176 104 65 1 ( 176 104 176 105 65 14 ap_mac_address 176 105 176 119 56 1 ) 176 119 176 120 65 1 ) 176 120 176 121 113 1 ; 176 121 176 122 18446744073709551615 2 if 178 3 178 5 18446744073709551615 1 ( 178 5 178 6 18446744073709551615 12 pcap_compile 178 6 178 18 109 1 ( 178 18 178 19 109 6 handle 178 19 178 25 82 1 , 178 25 178 26 109 1 & 178 27 178 28 18446744073709551615 2 fp 178 28 178 30 80 1 , 178 30 178 31 109 20 filter_eapol_on_ssid 178 32 178 52 78 1 , 178 52 178 53 109 1 0 178 54 178 55 18446744073709551615 1 , 178 55 178 56 109 3 net 178 57 178 60 104 1 ) 178 60 178 61 109 2 == 178 62 178 64 18446744073709551615 1 - 178 65 178 66 18446744073709551615 1 1 178 66 178 67 18446744073709551615 1 ) 178 67 178 68 18446744073709551615 1 { 178 69 178 70 18446744073709551615 7 fprintf 179 5 179 12 106 1 ( 179 12 179 13 106 6 stderr 179 13 179 19 106 1 , 179 19 179 20 106 32 "Couldn't parse filter %s: %s\n" 179 21 179 53 18446744073709551615 1 , 179 53 179 54 106 20 filter_eapol_on_ssid 179 55 179 75 78 1 , 179 75 179 76 106 11 pcap_geterr 179 77 179 88 110 1 ( 179 88 179 89 110 6 handle 179 89 179 95 82 1 ) 179 95 179 96 110 1 ) 179 96 179 97 106 1 ; 179 97 179 98 18446744073709551615 6 return 180 5 180 11 18446744073709551615 1 ( 180 12 180 13 18446744073709551615 1 2 180 13 180 14 18446744073709551615 1 ) 180 14 180 15 18446744073709551615 1 ; 180 15 180 16 18446744073709551615 1 } 181 3 181 4 18446744073709551615 2 if 182 3 182 5 18446744073709551615 1 ( 182 5 182 6 18446744073709551615 14 pcap_setfilter 182 6 182 20 111 1 ( 182 20 182 21 111 6 handle 182 21 182 27 82 1 , 182 27 182 28 111 1 & 182 29 182 30 18446744073709551615 2 fp 182 30 182 32 80 1 ) 182 32 182 33 111 2 == 182 34 182 36 18446744073709551615 1 - 182 37 182 38 18446744073709551615 1 1 182 38 182 39 18446744073709551615 1 ) 182 39 182 40 18446744073709551615 1 { 182 41 182 42 18446744073709551615 7 fprintf 183 5 183 12 106 1 ( 183 12 183 13 106 6 stderr 183 13 183 19 106 1 , 183 19 183 20 106 34 "Couldn't install filter %s: %s\n" 183 21 183 55 18446744073709551615 1 , 183 55 183 56 106 20 filter_eapol_on_ssid 183 57 183 77 78 1 , 183 77 183 78 106 11 pcap_geterr 183 79 183 90 110 1 ( 183 90 183 91 110 6 handle 183 91 183 97 82 1 ) 183 97 183 98 110 1 ) 183 98 183 99 106 1 ; 183 99 183 100 18446744073709551615 6 return 184 5 184 11 18446744073709551615 1 ( 184 12 184 13 18446744073709551615 1 2 184 13 184 14 18446744073709551615 1 ) 184 14 184 15 18446744073709551615 1 ; 184 15 184 16 18446744073709551615 1 } 185 3 185 4 18446744073709551615 3 int 186 3 186 6 18446744073709551615 3 res 186 7 186 10 114 1 = 186 11 186 12 18446744073709551615 1 0 186 13 186 14 18446744073709551615 1 ; 186 14 186 15 18446744073709551615 5 while 187 3 187 8 18446744073709551615 1 ( 187 8 187 9 18446744073709551615 12 pcap_next_ex 187 9 187 21 112 1 ( 187 21 187 22 112 6 handle 187 22 187 28 82 1 , 187 28 187 29 112 1 & 187 30 187 31 18446744073709551615 6 header 187 31 187 37 83 1 , 187 37 187 38 112 1 & 187 39 187 40 18446744073709551615 6 packet 187 40 187 46 84 1 ) 187 46 187 47 112 2 >= 187 48 187 50 18446744073709551615 1 0 187 51 187 52 18446744073709551615 2 && 187 53 187 55 18446744073709551615 14 process_packet 187 56 187 70 64 1 ( 187 70 187 71 64 6 header 187 71 187 77 83 1 , 187 77 187 78 64 6 packet 187 79 187 85 84 1 ) 187 85 187 86 64 1 ) 187 86 187 87 18446744073709551615 1 ; 188 5 188 6 18446744073709551615 273 /*printf("AP mac address: ");
  for(int i = 0; i < MAC_ADDR_LEN; i++) {
    printf("%02x", ap_mac_address[i]);
  }
  printf(".\n");
  printf("%s\n", mac_toString(ap_mac_address));
  printf(filter_eapol_on_ssid, mac_toString(ap_mac_address), mac_toString(ap_mac_address));*/ 189 3 195 94 18446744073709551615 13 pcap_freecode 197 3 197 16 115 1 ( 197 16 197 17 115 1 & 197 17 197 18 18446744073709551615 2 fp 197 18 197 20 80 1 ) 197 20 197 21 115 1 ; 197 21 197 22 18446744073709551615 10 pcap_close 198 3 198 13 116 1 ( 198 13 198 14 116 6 handle 198 14 198 20 82 1 ) 198 20 198 21 116 1 ; 198 21 198 22 18446744073709551615 6 return 199 3 199 9 18446744073709551615 1 ( 199 10 199 11 18446744073709551615 1 0 199 11 199 12 18446744073709551615 1 ) 199 12 199 13 18446744073709551615 1 ; 199 13 199 14 18446744073709551615 1 } 200 1 200 2 18446744073709551615 6 u_char 202 1 202 7 1 14 process_beacon 202 8 202 22 61 1 ( 202 22 202 23 61 5 const 202 23 202 28 18446744073709551615 6 struct 202 29 202 35 18446744073709551615 11 pcap_pkthdr 202 36 202 47 62 1 * 202 48 202 49 18446744073709551615 6 header 202 49 202 55 117 1 , 202 55 202 56 61 5 const 202 57 202 62 18446744073709551615 6 u_char 202 63 202 69 1 1 * 202 70 202 71 18446744073709551615 6 buffer 202 71 202 77 118 1 ) 202 77 202 78 61 1 { 202 79 202 80 18446744073709551615 5 const 203 3 203 8 18446744073709551615 6 struct 203 9 203 15 18446744073709551615 19 sniff_802_11_beacon 203 16 203 35 16 1 * 203 36 203 37 18446744073709551615 10 hdr_802_11 203 37 203 47 119 1 ; 203 47 203 48 18446744073709551615 10 hdr_802_11 204 3 204 13 119 1 = 204 14 204 15 18446744073709551615 1 ( 204 16 204 17 18446744073709551615 6 struct 204 17 204 23 18446744073709551615 19 sniff_802_11_beacon 204 24 204 43 16 1 * 204 44 204 45 18446744073709551615 1 ) 204 45 204 46 18446744073709551615 1 ( 204 46 204 47 18446744073709551615 6 buffer 204 47 204 53 118 1 + 204 54 204 55 18446744073709551615 16 PRISM_HEADER_LEN 204 56 204 72 18446744073709551615 1 ) 204 72 204 73 18446744073709551615 1 ; 204 73 204 74 18446744073709551615 3 int 205 3 205 6 18446744073709551615 11 ssid_length 205 7 205 18 120 1 = 205 19 205 20 18446744073709551615 1 ( 205 21 205 22 18446744073709551615 3 int 205 22 205 25 18446744073709551615 1 ) 205 25 205 26 18446744073709551615 1 ( 205 26 205 27 18446744073709551615 6 buffer 205 27 205 33 118 1 + 205 34 205 35 18446744073709551615 16 PRISM_HEADER_LEN 205 36 205 52 18446744073709551615 1 + 205 53 205 54 18446744073709551615 6 sizeof 205 55 205 61 18446744073709551615 1 ( 205 61 205 62 18446744073709551615 6 struct 205 62 205 68 18446744073709551615 19 sniff_802_11_beacon 205 69 205 88 16 1 ) 205 88 205 89 18446744073709551615 1 + 205 90 205 91 18446744073709551615 2 13 205 92 205 94 18446744073709551615 1 ) 205 94 205 95 18446744073709551615 1 [ 205 95 205 96 18446744073709551615 1 0 205 96 205 97 18446744073709551615 1 ] 205 97 205 98 18446744073709551615 1 ; 205 98 205 99 18446744073709551615 6 u_char 206 3 206 9 1 11 beacon_ssid 206 10 206 21 121 1 [ 206 21 206 22 18446744073709551615 11 ssid_length 206 22 206 33 120 1 + 206 34 206 35 18446744073709551615 1 1 206 36 206 37 18446744073709551615 1 ] 206 37 206 38 18446744073709551615 1 ; 206 38 206 39 18446744073709551615 6 memcpy 207 3 207 9 122 1 ( 207 9 207 10 122 11 beacon_ssid 207 10 207 21 121 1 , 207 21 207 22 122 1 ( 207 23 207 24 18446744073709551615 6 buffer 207 24 207 30 118 1 + 207 31 207 32 18446744073709551615 16 PRISM_HEADER_LEN 207 33 207 49 18446744073709551615 1 + 207 50 207 51 18446744073709551615 6 sizeof 207 52 207 58 18446744073709551615 1 ( 207 58 207 59 18446744073709551615 6 struct 207 59 207 65 18446744073709551615 19 sniff_802_11_beacon 207 66 207 85 16 1 ) 207 85 207 86 18446744073709551615 1 + 207 87 207 88 18446744073709551615 2 14 207 89 207 91 18446744073709551615 1 ) 207 91 207 92 18446744073709551615 1 , 207 92 207 93 122 11 ssid_length 207 94 207 105 120 1 ) 207 105 207 106 122 1 ; 207 106 207 107 18446744073709551615 11 beacon_ssid 208 3 208 14 121 1 [ 208 14 208 15 18446744073709551615 11 ssid_length 208 15 208 26 120 1 ] 208 26 208 27 18446744073709551615 1 = 208 28 208 29 18446744073709551615 4 '\0' 208 30 208 34 18446744073709551615 1 ; 208 34 208 35 18446744073709551615 2 if 209 3 209 5 18446744073709551615 1 ( 209 5 209 6 18446744073709551615 6 strcmp 209 6 209 12 123 1 ( 209 12 209 13 123 11 beacon_ssid 209 13 209 24 121 1 , 209 24 209 25 123 4 ssid 209 26 209 30 58 1 ) 209 30 209 31 123 2 == 209 32 209 34 18446744073709551615 1 0 209 35 209 36 18446744073709551615 1 ) 209 36 209 37 18446744073709551615 1 { 209 38 209 39 18446744073709551615 6 memcpy 210 5 210 11 122 1 ( 210 11 210 12 122 14 ap_mac_address 210 12 210 26 56 1 , 210 26 210 27 122 10 hdr_802_11 210 28 210 38 119 2 -> 210 38 210 40 18446744073709551615 5 addr2 210 40 210 45 20 1 , 210 45 210 46 122 12 MAC_ADDR_LEN 210 47 210 59 122 1 ) 210 59 210 60 122 1 ; 210 60 210 61 18446744073709551615 6 return 211 5 211 11 18446744073709551615 1 ( 211 12 211 13 18446744073709551615 1 1 211 13 211 14 18446744073709551615 1 ) 211 14 211 15 18446744073709551615 1 ; 211 15 211 16 18446744073709551615 1 } 212 3 212 4 18446744073709551615 6 return 213 3 213 9 18446744073709551615 1 ( 213 10 213 11 18446744073709551615 1 0 213 11 213 12 18446744073709551615 1 ) 213 12 213 13 18446744073709551615 1 ; 213 13 213 14 18446744073709551615 1 } 214 1 214 2 18446744073709551615 6 u_char 216 1 216 7 1 13 process_eapol 216 8 216 21 63 1 ( 216 21 216 22 63 5 const 216 22 216 27 18446744073709551615 6 struct 216 28 216 34 18446744073709551615 11 pcap_pkthdr 216 35 216 46 62 1 * 216 47 216 48 18446744073709551615 6 header 216 48 216 54 124 1 , 216 54 216 55 63 5 const 216 56 216 61 18446744073709551615 6 u_char 216 62 216 68 1 1 * 216 69 216 70 18446744073709551615 6 buffer 216 70 216 76 125 1 ) 216 76 216 77 63 1 { 216 78 216 79 18446744073709551615 5 const 217 3 217 8 18446744073709551615 6 struct 217 9 217 15 18446744073709551615 12 sniff_802_11 217 16 217 28 8 1 * 217 29 217 30 18446744073709551615 10 hdr_802_11 217 30 217 40 126 1 ; 217 40 217 41 18446744073709551615 10 hdr_802_11 218 3 218 13 126 1 = 218 14 218 15 18446744073709551615 1 ( 218 16 218 17 18446744073709551615 6 struct 218 17 218 23 18446744073709551615 12 sniff_802_11 218 24 218 36 8 1 * 218 37 218 38 18446744073709551615 1 ) 218 38 218 39 18446744073709551615 1 ( 218 39 218 40 18446744073709551615 6 buffer 218 40 218 46 125 1 + 218 47 218 48 18446744073709551615 16 PRISM_HEADER_LEN 218 49 218 65 18446744073709551615 1 ) 218 65 218 66 18446744073709551615 1 ; 218 66 218 67 18446744073709551615 5 const 219 3 219 8 18446744073709551615 6 struct 219 9 219 15 18446744073709551615 17 sniff_802_1x_auth 219 16 219 33 30 1 * 219 34 219 35 18446744073709551615 15 hdr_802_1x_auth 219 35 219 50 127 1 ; 219 50 219 51 18446744073709551615 15 hdr_802_1x_auth 220 3 220 18 127 1 = 220 19 220 20 18446744073709551615 1 ( 220 21 220 22 18446744073709551615 6 struct 220 22 220 28 18446744073709551615 17 sniff_802_1x_auth 220 29 220 46 30 1 * 220 47 220 48 18446744073709551615 1 ) 220 48 220 49 18446744073709551615 1 ( 220 49 220 50 18446744073709551615 6 buffer 220 50 220 56 125 1 + 220 57 220 58 18446744073709551615 16 PRISM_HEADER_LEN 220 59 220 75 18446744073709551615 1 + 220 76 220 77 18446744073709551615 6 sizeof 220 78 220 84 18446744073709551615 1 ( 220 84 220 85 18446744073709551615 6 struct 220 85 220 91 18446744073709551615 12 sniff_802_11 220 92 220 104 8 1 ) 220 104 220 105 18446744073709551615 1 + 220 106 220 107 18446744073709551615 7 LLC_LEN 220 108 220 115 18446744073709551615 1 ) 220 115 220 116 18446744073709551615 1 ; 220 116 220 117 18446744073709551615 1 } 221 1 221 2 18446744073709551615 6 u_char 223 1 223 7 1 14 process_packet 223 8 223 22 64 1 ( 223 22 223 23 64 5 const 223 23 223 28 18446744073709551615 6 struct 223 29 223 35 18446744073709551615 11 pcap_pkthdr 223 36 223 47 62 1 * 223 48 223 49 18446744073709551615 6 header 223 49 223 55 128 1 , 223 55 223 56 64 5 const 223 57 223 62 18446744073709551615 6 u_char 223 63 223 69 1 1 * 223 70 223 71 18446744073709551615 6 buffer 223 71 223 77 129 1 ) 223 77 223 78 64 1 { 223 79 223 80 18446744073709551615 5 const 224 3 224 8 18446744073709551615 6 struct 224 9 224 15 18446744073709551615 12 sniff_802_11 224 16 224 28 8 1 * 224 29 224 30 18446744073709551615 10 hdr_802_11 224 30 224 40 130 1 ; 224 40 224 41 18446744073709551615 10 hdr_802_11 225 3 225 13 130 1 = 225 14 225 15 18446744073709551615 1 ( 225 16 225 17 18446744073709551615 6 struct 225 17 225 23 18446744073709551615 12 sniff_802_11 225 24 225 36 8 1 * 225 37 225 38 18446744073709551615 1 ) 225 38 225 39 18446744073709551615 1 ( 225 39 225 40 18446744073709551615 6 buffer 225 40 225 46 129 1 + 225 47 225 48 18446744073709551615 16 PRISM_HEADER_LEN 225 49 225 65 18446744073709551615 1 ) 225 65 225 66 18446744073709551615 1 ; 225 66 225 67 18446744073709551615 3 int 226 3 226 6 18446744073709551615 8 qos_type 226 7 226 15 131 1 = 226 16 226 17 18446744073709551615 16 TAKE_N_BITS_FROM 226 18 226 34 131 1 ( 226 34 226 35 18446744073709551615 10 hdr_802_11 226 35 226 45 18446744073709551615 2 -> 226 45 226 47 18446744073709551615 13 frame_control 226 47 226 60 18446744073709551615 1 [ 226 60 226 61 18446744073709551615 1 0 226 61 226 62 18446744073709551615 1 ] 226 62 226 63 18446744073709551615 1 , 226 63 226 64 18446744073709551615 1 2 226 65 226 66 18446744073709551615 1 , 226 66 226 67 18446744073709551615 1 2 226 68 226 69 18446744073709551615 1 ) 226 69 226 70 18446744073709551615 1 ; 226 70 226 71 18446744073709551615 3 int 227 3 227 6 18446744073709551615 16 packet_direction 227 7 227 23 132 1 = 227 24 227 25 18446744073709551615 16 TAKE_N_BITS_FROM 227 26 227 42 132 1 ( 227 42 227 43 18446744073709551615 10 hdr_802_11 227 43 227 53 18446744073709551615 2 -> 227 53 227 55 18446744073709551615 13 frame_control 227 55 227 68 18446744073709551615 1 [ 227 68 227 69 18446744073709551615 1 1 227 69 227 70 18446744073709551615 1 ] 227 70 227 71 18446744073709551615 1 , 227 71 227 72 18446744073709551615 1 0 227 73 227 74 18446744073709551615 1 , 227 74 227 75 18446744073709551615 1 2 227 76 227 77 18446744073709551615 1 ) 227 77 227 78 18446744073709551615 1 ; 227 78 227 79 18446744073709551615 3 int 228 3 228 6 18446744073709551615 14 data_protected 228 7 228 21 133 1 = 228 22 228 23 18446744073709551615 16 TAKE_N_BITS_FROM 228 24 228 40 133 1 ( 228 40 228 41 18446744073709551615 10 hdr_802_11 228 41 228 51 18446744073709551615 2 -> 228 51 228 53 18446744073709551615 13 frame_control 228 53 228 66 18446744073709551615 1 [ 228 66 228 67 18446744073709551615 1 1 228 67 228 68 18446744073709551615 1 ] 228 68 228 69 18446744073709551615 1 , 228 69 228 70 18446744073709551615 1 6 228 71 228 72 18446744073709551615 1 , 228 72 228 73 18446744073709551615 1 1 228 74 228 75 18446744073709551615 1 ) 228 75 228 76 18446744073709551615 1 ; 228 76 228 77 18446744073709551615 6 struct 229 3 229 9 18446744073709551615 10 eapol_info 229 10 229 20 50 1 * 229 21 229 22 18446744073709551615 17 packet_eapol_info 229 22 229 39 134 1 = 229 40 229 41 18446744073709551615 4 NULL 229 42 229 46 134 1 ; 229 46 229 47 18446744073709551615 3 int 231 3 231 6 18446744073709551615 11 sha1_length 231 7 231 18 135 1 = 231 19 231 20 18446744073709551615 2 16 231 21 231 23 18446744073709551615 1 ; 231 23 231 24 18446744073709551615 6 u_char 233 3 233 9 1 1 * 233 10 233 11 18446744073709551615 11 sta_address 233 11 233 22 136 1 ; 233 22 233 23 18446744073709551615 2 if 234 3 234 5 18446744073709551615 1 ( 234 5 234 6 18446744073709551615 16 packet_direction 234 6 234 22 132 2 == 234 23 234 25 18446744073709551615 1 2 234 26 234 27 18446744073709551615 1 ) 234 27 234 28 18446744073709551615 1 { 234 29 234 30 18446744073709551615 11 sta_address 235 5 235 16 136 1 = 235 17 235 18 18446744073709551615 10 hdr_802_11 235 19 235 29 130 2 -> 235 29 235 31 18446744073709551615 5 addr1 235 31 235 36 11 1 ; 235 36 235 37 18446744073709551615 1 } 236 3 236 4 18446744073709551615 4 else 237 3 237 7 18446744073709551615 2 if 237 8 237 10 18446744073709551615 1 ( 237 10 237 11 18446744073709551615 16 packet_direction 237 11 237 27 132 2 == 237 28 237 30 18446744073709551615 1 1 237 31 237 32 18446744073709551615 1 ) 237 32 237 33 18446744073709551615 1 { 237 34 237 35 18446744073709551615 11 sta_address 238 5 238 16 136 1 = 238 17 238 18 18446744073709551615 10 hdr_802_11 238 19 238 29 130 2 -> 238 29 238 31 18446744073709551615 5 addr2 238 31 238 36 12 1 ; 238 36 238 37 18446744073709551615 1 } 239 3 239 4 18446744073709551615 2 if 241 3 241 5 18446744073709551615 1 ( 241 5 241 6 18446744073709551615 8 qos_type 241 6 241 14 131 2 == 241 15 241 17 18446744073709551615 1 2 241 18 241 19 18446744073709551615 1 ) 241 19 241 20 18446744073709551615 1 { 241 21 241 22 18446744073709551615 2 if 242 5 242 7 18446744073709551615 1 ( 242 7 242 8 18446744073709551615 14 data_protected 242 8 242 22 133 1 ) 242 22 242 23 18446744073709551615 1 { 242 24 242 25 18446744073709551615 2 if 243 7 243 9 18446744073709551615 1 ( 243 9 243 10 18446744073709551615 11 hashmap_get 243 10 243 21 137 1 ( 243 21 243 22 137 3 map 243 22 243 25 60 1 , 243 25 243 26 137 12 mac_toString 243 27 243 39 65 1 ( 243 39 243 40 65 11 sta_address 243 40 243 51 136 1 ) 243 51 243 52 65 1 , 243 52 243 53 137 1 ( 243 54 243 55 18446744073709551615 4 void 243 55 243 59 18446744073709551615 1 * 243 60 243 61 18446744073709551615 1 * 243 61 243 62 18446744073709551615 1 ) 243 62 243 63 18446744073709551615 1 & 243 63 243 64 18446744073709551615 17 packet_eapol_info 243 64 243 81 134 1 ) 243 81 243 82 137 2 == 243 83 243 85 18446744073709551615 6 MAP_OK 243 86 243 92 18446744073709551615 2 && 243 93 243 95 18446744073709551615 17 packet_eapol_info 243 96 243 113 134 2 -> 243 113 243 115 18446744073709551615 6 status 243 115 243 121 55 2 == 243 122 243 124 18446744073709551615 7 SUCCESS 243 125 243 132 6 1 ) 243 132 243 133 18446744073709551615 1 { 243 134 243 135 18446744073709551615 6 printf 244 9 244 15 89 1 ( 244 15 244 16 89 30 "%d -> I'm going to decrypt: " 244 16 244 46 18446744073709551615 1 , 244 46 244 47 89 6 header 244 48 244 54 128 2 -> 244 54 244 56 18446744073709551615 6 caplen 244 56 244 62 138 1 ) 244 62 244 63 89 1 ; 244 63 244 64 18446744073709551615 3 for 245 9 245 12 18446744073709551615 1 ( 245 12 245 13 18446744073709551615 3 int 245 13 245 16 18446744073709551615 1 i 245 17 245 18 139 1 = 245 19 245 20 18446744073709551615 1 0 245 21 245 22 18446744073709551615 1 ; 245 22 245 23 18446744073709551615 1 i 245 24 245 25 139 1 < 245 26 245 27 18446744073709551615 2 32 245 28 245 30 18446744073709551615 1 ; 245 30 245 31 18446744073709551615 1 i 245 32 245 33 139 2 ++ 245 33 245 35 18446744073709551615 1 ) 245 35 245 36 18446744073709551615 1 { 245 37 245 38 18446744073709551615 6 printf 246 11 246 17 89 1 ( 246 17 246 18 89 6 "%02x" 246 18 246 24 18446744073709551615 1 , 246 24 246 25 89 17 packet_eapol_info 246 26 246 43 134 2 -> 246 43 246 45 18446744073709551615 6 ANonce 246 45 246 51 52 1 [ 246 51 246 52 18446744073709551615 1 i 246 52 246 53 139 1 ] 246 53 246 54 18446744073709551615 1 ) 246 54 246 55 89 1 ; 246 55 246 56 18446744073709551615 1 } 247 9 247 10 18446744073709551615 6 printf 248 9 248 15 89 1 ( 248 15 248 16 89 4 "\n" 248 16 248 20 18446744073709551615 1 ) 248 20 248 21 89 1 ; 248 21 248 22 18446744073709551615 1 } 249 7 249 8 18446744073709551615 4 else 250 7 250 11 18446744073709551615 1 { 250 12 250 13 18446744073709551615 28 //printf("Can't decrypt\n"); 251 9 251 37 18446744073709551615 1 } 252 7 252 8 18446744073709551615 1 } 253 5 253 6 18446744073709551615 4 else 254 5 254 9 18446744073709551615 1 { 254 10 254 11 18446744073709551615 5 const 255 7 255 12 18446744073709551615 6 struct 255 13 255 19 18446744073709551615 9 sniff_LLC 255 20 255 29 23 1 * 255 30 255 31 18446744073709551615 7 hdr_llc 255 31 255 38 140 1 ; 255 38 255 39 18446744073709551615 7 hdr_llc 256 7 256 14 140 1 = 256 15 256 16 18446744073709551615 1 ( 256 17 256 18 18446744073709551615 6 struct 256 18 256 24 18446744073709551615 9 sniff_LLC 256 25 256 34 23 1 * 256 35 256 36 18446744073709551615 1 ) 256 36 256 37 18446744073709551615 1 ( 256 37 256 38 18446744073709551615 6 buffer 256 38 256 44 129 1 + 256 45 256 46 18446744073709551615 16 PRISM_HEADER_LEN 256 47 256 63 18446744073709551615 1 + 256 64 256 65 18446744073709551615 6 sizeof 256 66 256 72 18446744073709551615 1 ( 256 72 256 73 18446744073709551615 6 struct 256 73 256 79 18446744073709551615 12 sniff_802_11 256 80 256 92 8 1 ) 256 92 256 93 18446744073709551615 1 ) 256 93 256 94 18446744073709551615 1 ; 256 94 256 95 18446744073709551615 2 if 257 7 257 9 18446744073709551615 1 ( 257 9 257 10 18446744073709551615 7 hdr_llc 257 10 257 17 140 2 -> 257 17 257 19 18446744073709551615 4 dsap 257 19 257 23 24 2 == 257 24 257 26 18446744073709551615 4 0xaa 257 27 257 31 18446744073709551615 1 ) 257 31 257 32 18446744073709551615 1 { 257 33 257 34 18446744073709551615 5 const 258 9 258 14 18446744073709551615 6 struct 258 15 258 21 18446744073709551615 10 sniff_SNAP 258 22 258 32 27 1 * 258 33 258 34 18446744073709551615 8 hdr_snap 258 34 258 42 141 1 ; 258 42 258 43 18446744073709551615 8 hdr_snap 259 9 259 17 141 1 = 259 18 259 19 18446744073709551615 1 ( 259 20 259 21 18446744073709551615 6 struct 259 21 259 27 18446744073709551615 10 sniff_SNAP 259 28 259 38 27 1 * 259 39 259 40 18446744073709551615 1 ) 259 40 259 41 18446744073709551615 1 ( 259 41 259 42 18446744073709551615 6 buffer 259 42 259 48 129 1 + 259 49 259 50 18446744073709551615 16 PRISM_HEADER_LEN 259 51 259 67 18446744073709551615 1 + 259 68 259 69 18446744073709551615 6 sizeof 259 70 259 76 18446744073709551615 1 ( 259 76 259 77 18446744073709551615 6 struct 259 77 259 83 18446744073709551615 12 sniff_802_11 259 84 259 96 8 1 ) 259 96 259 97 18446744073709551615 1 + 259 98 259 99 18446744073709551615 6 sizeof 259 100 259 106 18446744073709551615 1 ( 259 106 259 107 18446744073709551615 6 struct 259 107 259 113 18446744073709551615 9 sniff_LLC 259 114 259 123 23 1 ) 259 123 259 124 18446744073709551615 1 ) 259 124 259 125 18446744073709551615 1 ; 259 125 259 126 18446744073709551615 6 u_char 260 9 260 15 1 11 ether_eapol 260 16 260 27 142 1 [ 260 27 260 28 18446744073709551615 1 ] 260 28 260 29 18446744073709551615 1 = 260 30 260 31 18446744073709551615 1 { 260 32 260 33 18446744073709551615 4 0x88 260 33 260 37 18446744073709551615 1 , 260 37 260 38 18446744073709551615 4 0x8e 260 39 260 43 18446744073709551615 1 } 260 43 260 44 18446744073709551615 1 ; 260 44 260 45 18446744073709551615 2 if 261 9 261 11 18446744073709551615 1 ( 261 11 261 12 18446744073709551615 6 memcmp 261 12 261 18 143 1 ( 261 18 261 19 143 8 hdr_snap 261 19 261 27 141 2 -> 261 27 261 29 18446744073709551615 4 type 261 29 261 33 29 1 , 261 33 261 34 143 11 ether_eapol 261 35 261 46 142 1 , 261 46 261 47 143 1 2 261 48 261 49 18446744073709551615 1 ) 261 49 261 50 143 2 == 261 51 261 53 18446744073709551615 1 0 261 54 261 55 18446744073709551615 1 ) 261 55 261 56 18446744073709551615 1 { 261 57 261 58 18446744073709551615 5 const 262 11 262 16 18446744073709551615 6 struct 262 17 262 23 18446744073709551615 17 sniff_802_1x_auth 262 24 262 41 30 1 * 262 42 262 43 18446744073709551615 10 hdr_802_1x 262 43 262 53 144 1 ; 262 53 262 54 18446744073709551615 10 hdr_802_1x 263 11 263 21 144 1 = 263 22 263 23 18446744073709551615 1 ( 263 24 263 25 18446744073709551615 6 struct 263 25 263 31 18446744073709551615 17 sniff_802_1x_auth 263 32 263 49 30 1 * 263 50 263 51 18446744073709551615 1 ) 263 51 263 52 18446744073709551615 1 ( 263 52 263 53 18446744073709551615 6 buffer 263 53 263 59 129 1 + 263 60 263 61 18446744073709551615 16 PRISM_HEADER_LEN 263 62 263 78 18446744073709551615 1 + 263 79 263 80 18446744073709551615 6 sizeof 263 81 263 87 18446744073709551615 1 ( 263 87 263 88 18446744073709551615 6 struct 263 88 263 94 18446744073709551615 12 sniff_802_11 263 95 263 107 8 1 ) 263 107 263 108 18446744073709551615 1 + 263 109 263 110 18446744073709551615 6 sizeof 263 111 263 117 18446744073709551615 1 ( 263 117 263 118 18446744073709551615 6 struct 263 118 263 124 18446744073709551615 9 sniff_LLC 263 125 263 134 23 1 ) 263 134 263 135 18446744073709551615 1 + 263 136 263 137 18446744073709551615 6 sizeof 263 138 263 144 18446744073709551615 1 ( 263 144 263 145 18446744073709551615 6 struct 263 145 263 151 18446744073709551615 10 sniff_SNAP 263 152 263 162 27 1 ) 263 162 263 163 18446744073709551615 1 ) 263 163 263 164 18446744073709551615 1 ; 263 164 263 165 18446744073709551615 3 int 264 11 264 14 18446744073709551615 20 get_from_hashmap_res 264 15 264 35 145 1 = 264 36 264 37 18446744073709551615 11 hashmap_get 264 38 264 49 137 1 ( 264 49 264 50 137 3 map 264 50 264 53 60 1 , 264 53 264 54 137 12 mac_toString 264 55 264 67 65 1 ( 264 67 264 68 65 11 sta_address 264 68 264 79 136 1 ) 264 79 264 80 65 1 , 264 80 264 81 137 1 ( 264 82 264 83 18446744073709551615 4 void 264 83 264 87 18446744073709551615 1 * 264 88 264 89 18446744073709551615 1 * 264 89 264 90 18446744073709551615 1 ) 264 90 264 91 18446744073709551615 1 & 264 91 264 92 18446744073709551615 17 packet_eapol_info 264 92 264 109 134 1 ) 264 109 264 110 137 1 ; 264 110 264 111 18446744073709551615 2 if 265 11 265 13 18446744073709551615 1 ( 265 13 265 14 18446744073709551615 20 get_from_hashmap_res 265 14 265 34 145 2 == 265 35 265 37 18446744073709551615 11 MAP_MISSING 265 38 265 49 18446744073709551615 1 ) 265 49 265 50 18446744073709551615 1 { 265 51 265 52 18446744073709551615 2 if 266 13 266 15 18446744073709551615 1 ( 266 15 266 16 18446744073709551615 16 packet_direction 266 16 266 32 132 2 == 266 33 266 35 18446744073709551615 1 2 266 36 266 37 18446744073709551615 1 ) 266 37 266 38 18446744073709551615 1 { 266 39 266 40 18446744073709551615 17 // msg 1 or msg 3 266 41 266 58 18446744073709551615 2 if 267 15 267 17 18446744073709551615 1 ( 267 17 267 18 18446744073709551615 1 ( 267 18 267 19 18446744073709551615 10 hdr_802_1x 267 19 267 29 144 2 -> 267 29 267 31 18446744073709551615 15 key_information 267 31 267 46 35 1 [ 267 46 267 47 18446744073709551615 1 0 267 47 267 48 18446744073709551615 1 ] 267 48 267 49 18446744073709551615 1 & 267 50 267 51 18446744073709551615 1 ( 267 52 267 53 18446744073709551615 1 1 267 53 267 54 18446744073709551615 2 << 267 55 267 57 18446744073709551615 1 8 267 58 267 59 18446744073709551615 1 ) 267 59 267 60 18446744073709551615 1 ) 267 60 267 61 18446744073709551615 2 == 267 62 267 64 18446744073709551615 1 0 267 65 267 66 18446744073709551615 1 ) 267 66 267 67 18446744073709551615 1 { 267 68 267 69 18446744073709551615 6 printf 268 17 268 23 89 1 ( 268 23 268 24 89 13 "NEW ENTRY\n" 268 24 268 37 18446744073709551615 1 ) 268 37 268 38 89 1 ; 268 38 268 39 18446744073709551615 6 struct 269 17 269 23 18446744073709551615 10 eapol_info 269 24 269 34 50 1 * 269 35 269 36 18446744073709551615 21 new_packet_eapol_info 269 36 269 57 146 1 = 269 58 269 59 18446744073709551615 6 malloc 269 60 269 66 98 1 ( 269 66 269 67 98 6 sizeof 269 67 269 73 18446744073709551615 1 ( 269 73 269 74 18446744073709551615 6 struct 269 74 269 80 18446744073709551615 10 eapol_info 269 81 269 91 50 1 ) 269 91 269 92 18446744073709551615 1 ) 269 92 269 93 98 1 ; 269 93 269 94 18446744073709551615 11 hashmap_put 270 17 270 28 147 1 ( 270 28 270 29 147 3 map 270 29 270 32 60 1 , 270 32 270 33 147 12 mac_toString 270 34 270 46 65 1 ( 270 46 270 47 65 11 sta_address 270 47 270 58 136 1 ) 270 58 270 59 65 1 , 270 59 270 60 147 21 new_packet_eapol_info 270 61 270 82 146 1 ) 270 82 270 83 147 1 ; 270 83 270 84 18446744073709551615 6 memcpy 271 17 271 23 122 1 ( 271 23 271 24 122 21 new_packet_eapol_info 271 24 271 45 146 2 -> 271 45 271 47 18446744073709551615 6 ANonce 271 47 271 53 52 1 , 271 53 271 54 122 10 hdr_802_1x 271 55 271 65 144 2 -> 271 65 271 67 18446744073709551615 13 wpa_key_nonce 271 67 271 80 38 1 , 271 80 271 81 122 2 32 271 82 271 84 18446744073709551615 1 ) 271 84 271 85 122 1 ; 271 85 271 86 18446744073709551615 21 new_packet_eapol_info 272 17 272 38 146 2 -> 272 38 272 40 18446744073709551615 6 status 272 40 272 46 55 1 = 272 47 272 48 18446744073709551615 19 WAITING_EAPOL_KEY_2 272 49 272 68 3 1 ; 272 68 272 69 18446744073709551615 1 } 273 15 273 16 18446744073709551615 1 } 274 13 274 14 18446744073709551615 1 } 275 11 275 12 18446744073709551615 4 else 276 11 276 15 18446744073709551615 2 if 276 16 276 18 18446744073709551615 1 ( 276 18 276 19 18446744073709551615 20 get_from_hashmap_res 276 19 276 39 145 2 == 276 40 276 42 18446744073709551615 6 MAP_OK 276 43 276 49 18446744073709551615 1 ) 276 49 276 50 18446744073709551615 1 { 276 51 276 52 18446744073709551615 12 eapol_status 277 13 277 25 7 14 current_status 277 26 277 40 148 1 = 277 41 277 42 18446744073709551615 17 packet_eapol_info 277 43 277 60 134 2 -> 277 60 277 62 18446744073709551615 6 status 277 62 277 68 55 1 ; 277 68 277 69 18446744073709551615 90 // printf("0x%02x%02x\n", hdr_802_1x->key_information[0], hdr_802_1x->key_information[1]); 278 13 278 103 18446744073709551615 37 // for(int ctr = 0; ctr < 8; ctr++) { 279 13 279 50 18446744073709551615 94 //   printf("%d", TAKE_N_BITS_FROM(hdr_802_1x->key_information[1], ctr, 1), packet_direction); 280 13 280 107 18446744073709551615 4 // } 281 13 281 17 18446744073709551615 16 // printf("\n"); 282 13 282 29 18446744073709551615 2 if 283 13 283 15 18446744073709551615 1 ( 283 15 283 16 18446744073709551615 14 current_status 283 16 283 30 148 2 == 283 31 283 33 18446744073709551615 19 WAITING_EAPOL_KEY_2 283 34 283 53 3 2 && 283 54 283 56 18446744073709551615 16 packet_direction 283 57 283 73 132 2 == 283 74 283 76 18446744073709551615 1 1 283 77 283 78 18446744073709551615 2 && 283 79 283 81 18446744073709551615 16 TAKE_N_BITS_FROM 283 82 283 98 18446744073709551615 1 ( 283 98 283 99 18446744073709551615 10 hdr_802_1x 283 99 283 109 18446744073709551615 2 -> 283 109 283 111 18446744073709551615 15 key_information 283 111 283 126 18446744073709551615 1 [ 283 126 283 127 18446744073709551615 1 0 283 127 283 128 18446744073709551615 1 ] 283 128 283 129 18446744073709551615 1 , 283 129 283 130 18446744073709551615 1 0 283 131 283 132 18446744073709551615 1 , 283 132 283 133 18446744073709551615 1 1 283 134 283 135 18446744073709551615 1 ) 283 135 283 136 18446744073709551615 2 && 283 137 283 139 18446744073709551615 1 ( 283 140 283 141 18446744073709551615 16 TAKE_N_BITS_FROM 283 141 283 157 18446744073709551615 1 ( 283 157 283 158 18446744073709551615 10 hdr_802_1x 283 158 283 168 18446744073709551615 2 -> 283 168 283 170 18446744073709551615 15 key_information 283 170 283 185 18446744073709551615 1 [ 283 185 283 186 18446744073709551615 1 1 283 186 283 187 18446744073709551615 1 ] 283 187 283 188 18446744073709551615 1 , 283 188 283 189 18446744073709551615 1 6 283 190 283 191 18446744073709551615 1 , 283 191 283 192 18446744073709551615 1 1 283 193 283 194 18446744073709551615 1 ) 283 194 283 195 18446744073709551615 1 ) 283 195 283 196 18446744073709551615 2 == 283 197 283 199 18446744073709551615 1 0 283 200 283 201 18446744073709551615 2 && 283 202 283 204 18446744073709551615 1 ( 283 205 283 206 18446744073709551615 16 TAKE_N_BITS_FROM 283 206 283 222 18446744073709551615 1 ( 283 222 283 223 18446744073709551615 10 hdr_802_1x 283 223 283 233 18446744073709551615 2 -> 283 233 283 235 18446744073709551615 15 key_information 283 235 283 250 18446744073709551615 1 [ 283 250 283 251 18446744073709551615 1 0 283 251 283 252 18446744073709551615 1 ] 283 252 283 253 18446744073709551615 1 , 283 253 283 254 18446744073709551615 1 7 283 255 283 256 18446744073709551615 1 , 283 256 283 257 18446744073709551615 1 1 283 258 283 259 18446744073709551615 1 ) 283 259 283 260 18446744073709551615 1 ) 283 260 283 261 18446744073709551615 2 == 283 262 283 264 18446744073709551615 1 0 283 265 283 266 18446744073709551615 1 ) 283 266 283 267 18446744073709551615 1 { 283 268 283 269 18446744073709551615 17 // msg 2 or msg 4 283 270 283 287 18446744073709551615 6 struct 284 15 284 21 18446744073709551615 3 ptk 284 22 284 25 44 1 * 284 26 284 27 18446744073709551615 3 PTK 284 27 284 30 149 1 = 284 31 284 32 18446744073709551615 1 ( 284 33 284 34 18446744073709551615 6 struct 284 34 284 40 18446744073709551615 3 ptk 284 41 284 44 44 1 * 284 45 284 46 18446744073709551615 1 ) 284 46 284 47 18446744073709551615 6 PRF512 284 47 284 53 66 1 ( 284 53 284 54 66 3 psk 284 54 284 57 57 1 , 284 57 284 58 66 1 A 284 59 284 60 0 1 , 284 60 284 61 66 6 strlen 284 62 284 68 87 1 ( 284 68 284 69 87 1 A 284 69 284 70 0 1 ) 284 70 284 71 87 1 , 284 71 284 72 66 14 ap_mac_address 284 73 284 87 56 1 , 284 87 284 88 66 11 sta_address 284 89 284 100 136 1 , 284 100 284 101 66 17 packet_eapol_info 284 102 284 119 134 2 -> 284 119 284 121 18446744073709551615 6 ANonce 284 121 284 127 52 1 , 284 127 284 128 66 10 hdr_802_1x 284 129 284 139 144 2 -> 284 139 284 141 18446744073709551615 13 wpa_key_nonce 284 141 284 154 38 1 ) 284 154 284 155 66 1 ; 284 155 284 156 18446744073709551615 6 u_char 285 15 285 21 1 1 * 285 22 285 23 18446744073709551615 8 real_MIC 285 23 285 31 150 1 = 285 32 285 33 18446744073709551615 6 malloc 285 34 285 40 98 1 ( 285 40 285 41 98 2 16 285 41 285 43 18446744073709551615 1 ) 285 43 285 44 98 1 ; 285 44 285 45 18446744073709551615 6 u_char 286 15 286 21 1 1 * 286 22 286 23 18446744073709551615 14 calculated_MIC 286 23 286 37 151 1 = 286 38 286 39 18446744073709551615 6 malloc 286 40 286 46 98 1 ( 286 46 286 47 98 2 16 286 47 286 49 18446744073709551615 1 ) 286 49 286 50 98 1 ; 286 50 286 51 18446744073709551615 6 memcpy 287 15 287 21 122 1 ( 287 21 287 22 122 8 real_MIC 287 22 287 30 150 1 , 287 30 287 31 122 10 hdr_802_1x 287 32 287 42 144 2 -> 287 42 287 44 18446744073709551615 11 wpa_key_MIC 287 44 287 55 42 1 , 287 55 287 56 122 2 16 287 57 287 59 18446744073709551615 1 ) 287 59 287 60 122 1 ; 287 60 287 61 18446744073709551615 6 memcpy 288 15 288 21 122 1 ( 288 21 288 22 122 10 hdr_802_1x 288 22 288 32 144 2 -> 288 32 288 34 18446744073709551615 11 wpa_key_MIC 288 34 288 45 42 1 , 288 45 288 46 122 8 NULL_MIC 288 47 288 55 2 1 , 288 55 288 56 122 2 16 288 57 288 59 18446744073709551615 1 ) 288 59 288 60 122 1 ; 288 60 288 61 18446744073709551615 4 HMAC 289 15 289 19 99 1 ( 289 19 289 20 99 8 EVP_sha1 289 20 289 28 100 1 ( 289 28 289 29 100 1 ) 289 29 289 30 100 1 , 289 30 289 31 99 3 PTK 289 32 289 35 149 2 -> 289 35 289 37 18446744073709551615 3 kck 289 37 289 40 45 1 , 289 40 289 41 99 2 16 289 42 289 44 18446744073709551615 1 , 289 44 289 45 99 10 hdr_802_1x 289 46 289 56 144 1 , 289 56 289 57 99 3 121 289 58 289 61 18446744073709551615 1 , 289 61 289 62 99 14 calculated_MIC 289 63 289 77 151 1 , 289 77 289 78 99 1 & 289 79 289 80 18446744073709551615 11 sha1_length 289 80 289 91 135 1 ) 289 91 289 92 99 1 ; 289 92 289 93 18446744073709551615 6 printf 290 15 290 21 89 1 ( 290 21 290 22 89 6 "%d\n" 290 22 290 28 18446744073709551615 1 , 290 28 290 29 89 6 memcmp 290 30 290 36 143 1 ( 290 36 290 37 143 8 real_MIC 290 37 290 45 150 1 , 290 45 290 46 143 14 calculated_MIC 290 47 290 61 151 1 , 290 61 290 62 143 2 16 290 63 290 65 18446744073709551615 1 ) 290 65 290 66 143 1 ) 290 66 290 67 89 1 ; 290 67 290 68 18446744073709551615 1 } 291 13 291 14 18446744073709551615 4 else 292 13 292 17 18446744073709551615 2 if 292 18 292 20 18446744073709551615 1 ( 292 20 292 21 18446744073709551615 16 packet_direction 292 21 292 37 132 2 == 292 38 292 40 18446744073709551615 1 1 292 41 292 42 18446744073709551615 1 ) 292 42 292 43 18446744073709551615 1 { 292 44 292 45 18446744073709551615 17 // msg 2 or msg 4 292 46 292 63 18446744073709551615 1 } 293 13 293 14 18446744073709551615 4 else 294 13 294 17 18446744073709551615 2 if 294 18 294 20 18446744073709551615 1 ( 294 20 294 21 18446744073709551615 16 packet_direction 294 21 294 37 132 2 == 294 38 294 40 18446744073709551615 1 2 294 41 294 42 18446744073709551615 1 ) 294 42 294 43 18446744073709551615 1 { 294 44 294 45 18446744073709551615 17 // msg 1 or msg 3 294 46 294 63 18446744073709551615 1 } 295 13 295 14 18446744073709551615 4 else 296 13 296 17 18446744073709551615 2 if 296 18 296 20 18446744073709551615 1 ( 296 20 296 21 18446744073709551615 16 packet_direction 296 21 296 37 132 2 == 296 38 296 40 18446744073709551615 1 2 296 41 296 42 18446744073709551615 1 ) 296 42 296 43 18446744073709551615 1 { 296 44 296 45 18446744073709551615 17 // msg 1 or msg 3 296 46 296 63 18446744073709551615 1 } 297 13 297 14 18446744073709551615 1 } 298 11 298 12 18446744073709551615 1 } 299 9 299 10 18446744073709551615 1 } 300 7 300 8 18446744073709551615 1 } 301 5 301 6 18446744073709551615 1 } 302 3 302 4 18446744073709551615 6 return 303 3 303 9 18446744073709551615 1 1 303 10 303 11 18446744073709551615 1 ; 303 11 303 12 18446744073709551615 1 } 304 1 304 2 18446744073709551615 4 char 307 1 307 5 18446744073709551615 1 * 307 6 307 7 65 12 mac_toString 307 7 307 19 65 1 ( 307 19 307 20 65 6 u_char 307 20 307 26 1 1 * 307 27 307 28 18446744073709551615 4 addr 307 28 307 32 152 1 ) 307 32 307 33 65 1 { 307 34 307 35 18446744073709551615 6 static 308 3 308 9 18446744073709551615 4 char 308 10 308 14 18446744073709551615 3 str 308 15 308 18 153 1 [ 308 18 308 19 18446744073709551615 2 18 308 19 308 21 18446744073709551615 1 ] 308 21 308 22 18446744073709551615 1 ; 308 22 308 23 18446744073709551615 2 if 309 3 309 5 18446744073709551615 1 ( 309 5 309 6 18446744073709551615 4 addr 309 6 309 10 152 2 == 309 11 309 13 18446744073709551615 4 NULL 309 14 309 18 18446744073709551615 1 ) 309 18 309 19 18446744073709551615 6 return 310 5 310 11 18446744073709551615 2 "" 310 12 310 14 18446744073709551615 1 ; 310 14 310 15 18446744073709551615 8 snprintf 311 3 311 11 154 1 ( 311 11 311 12 154 3 str 311 12 311 15 153 1 , 311 15 311 16 154 6 sizeof 311 17 311 23 18446744073709551615 1 ( 311 23 311 24 18446744073709551615 3 str 311 24 311 27 153 1 ) 311 27 311 28 18446744073709551615 1 , 311 28 311 29 154 31 "%02x:%02x:%02x:%02x:%02x:%02x" 311 30 311 61 18446744073709551615 1 , 311 61 311 62 154 4 addr 312 12 312 16 152 1 [ 312 16 312 17 18446744073709551615 1 0 312 17 312 18 18446744073709551615 1 ] 312 18 312 19 18446744073709551615 1 , 312 19 312 20 154 4 addr 312 21 312 25 152 1 [ 312 25 312 26 18446744073709551615 1 1 312 26 312 27 18446744073709551615 1 ] 312 27 312 28 18446744073709551615 1 , 312 28 312 29 154 4 addr 312 30 312 34 152 1 [ 312 34 312 35 18446744073709551615 1 2 312 35 312 36 18446744073709551615 1 ] 312 36 312 37 18446744073709551615 1 , 312 37 312 38 154 4 addr 312 39 312 43 152 1 [ 312 43 312 44 18446744073709551615 1 3 312 44 312 45 18446744073709551615 1 ] 312 45 312 46 18446744073709551615 1 , 312 46 312 47 154 4 addr 312 48 312 52 152 1 [ 312 52 312 53 18446744073709551615 1 4 312 53 312 54 18446744073709551615 1 ] 312 54 312 55 18446744073709551615 1 , 312 55 312 56 154 4 addr 312 57 312 61 152 1 [ 312 61 312 62 18446744073709551615 1 5 312 62 312 63 18446744073709551615 1 ] 312 63 312 64 18446744073709551615 1 ) 312 64 312 65 154 1 ; 312 65 312 66 18446744073709551615 6 return 313 3 313 9 18446744073709551615 3 str 313 10 313 13 153 1 ; 313 13 313 14 18446744073709551615 1 } 314 1 314 2 18446744073709551615 6 u_char 316 1 316 7 1 1 * 316 8 316 9 66 6 PRF512 316 9 316 15 66 1 ( 316 15 316 16 66 6 u_char 316 16 316 22 1 1 * 316 23 316 24 18446744073709551615 3 PMK 316 24 316 27 155 1 , 316 27 316 28 66 6 u_char 316 29 316 35 1 1 * 316 36 316 37 18446744073709551615 1 A 316 37 316 38 156 1 , 316 38 316 39 66 6 size_t 316 40 316 46 67 4 lenA 316 47 316 51 157 1 , 316 51 316 52 66 6 u_char 316 53 316 59 1 1 * 316 60 316 61 18446744073709551615 7 AP_addr 316 61 316 68 158 1 , 316 68 316 69 66 6 u_char 316 70 316 76 1 1 * 316 77 316 78 18446744073709551615 8 STA_addr 316 78 316 86 159 1 , 316 86 316 87 66 6 u_char 316 88 316 94 1 1 * 316 95 316 96 18446744073709551615 6 ANonce 316 96 316 102 160 1 , 316 102 316 103 66 6 u_char 316 104 316 110 1 1 * 316 111 316 112 18446744073709551615 6 SNonce 316 112 316 118 161 1 ) 316 118 316 119 66 1 { 316 120 316 121 18446744073709551615 6 static 317 3 317 9 18446744073709551615 6 u_char 317 10 317 16 1 3 ptk 317 17 317 20 162 1 [ 317 20 317 21 18446744073709551615 2 64 317 21 317 23 18446744073709551615 1 ] 317 23 317 24 18446744073709551615 1 ; 317 24 317 25 18446744073709551615 6 u_char 318 3 318 9 1 1 B 318 10 318 11 163 1 [ 318 11 318 12 18446744073709551615 2 76 318 12 318 14 18446744073709551615 1 ] 318 14 318 15 18446744073709551615 1 ; 318 15 318 16 18446744073709551615 3 int 319 3 319 6 18446744073709551615 1 i 319 7 319 8 164 1 = 319 9 319 10 18446744073709551615 1 0 319 11 319 12 18446744073709551615 1 ; 319 12 319 13 18446744073709551615 6 u_char 320 3 320 9 1 1 c 320 10 320 11 165 1 = 320 12 320 13 18446744073709551615 4 0x00 320 14 320 18 18446744073709551615 1 ; 320 18 320 19 18446744073709551615 6 u_char 321 3 321 9 1 3 arg 321 10 321 13 166 1 [ 321 13 321 14 18446744073709551615 2 76 321 14 321 16 18446744073709551615 1 + 321 17 321 18 18446744073709551615 4 lenA 321 19 321 23 157 1 + 321 24 321 25 18446744073709551615 1 2 321 26 321 27 18446744073709551615 1 ] 321 27 321 28 18446744073709551615 1 ; 321 28 321 29 18446744073709551615 2 if 323 3 323 5 18446744073709551615 1 ( 323 5 323 6 18446744073709551615 6 strcmp 323 6 323 12 123 1 ( 323 12 323 13 123 7 AP_addr 323 13 323 20 158 1 , 323 20 323 21 123 8 STA_addr 323 22 323 30 159 1 ) 323 30 323 31 123 1 < 323 32 323 33 18446744073709551615 1 0 323 34 323 35 18446744073709551615 1 ) 323 35 323 36 18446744073709551615 1 { 323 37 323 38 18446744073709551615 6 memcpy 324 5 324 11 122 1 ( 324 11 324 12 122 1 B 324 12 324 13 163 1 , 324 13 324 14 122 7 AP_addr 324 15 324 22 158 1 , 324 22 324 23 122 12 MAC_ADDR_LEN 324 24 324 36 122 1 ) 324 36 324 37 122 1 ; 324 37 324 38 18446744073709551615 6 memcpy 325 5 325 11 122 1 ( 325 11 325 12 122 1 B 325 12 325 13 163 1 + 325 14 325 15 18446744073709551615 12 MAC_ADDR_LEN 325 16 325 28 18446744073709551615 1 , 325 28 325 29 122 8 STA_addr 325 30 325 38 159 1 , 325 38 325 39 122 12 MAC_ADDR_LEN 325 40 325 52 122 1 ) 325 52 325 53 122 1 ; 325 53 325 54 18446744073709551615 1 } 326 3 326 4 18446744073709551615 4 else 327 3 327 7 18446744073709551615 1 { 327 8 327 9 18446744073709551615 6 memcpy 328 5 328 11 122 1 ( 328 11 328 12 122 1 B 328 12 328 13 163 1 , 328 13 328 14 122 8 STA_addr 328 15 328 23 159 1 , 328 23 328 24 122 12 MAC_ADDR_LEN 328 25 328 37 122 1 ) 328 37 328 38 122 1 ; 328 38 328 39 18446744073709551615 6 memcpy 329 5 329 11 122 1 ( 329 11 329 12 122 1 B 329 12 329 13 163 1 + 329 14 329 15 18446744073709551615 12 MAC_ADDR_LEN 329 16 329 28 18446744073709551615 1 , 329 28 329 29 122 7 AP_addr 329 30 329 37 158 1 , 329 37 329 38 122 12 MAC_ADDR_LEN 329 39 329 51 122 1 ) 329 51 329 52 122 1 ; 329 52 329 53 18446744073709551615 1 } 330 3 330 4 18446744073709551615 2 if 331 3 331 5 18446744073709551615 1 ( 331 5 331 6 18446744073709551615 6 strcmp 331 6 331 12 123 1 ( 331 12 331 13 123 6 ANonce 331 13 331 19 160 1 , 331 19 331 20 123 6 SNonce 331 21 331 27 161 1 ) 331 27 331 28 123 1 < 331 29 331 30 18446744073709551615 1 0 331 31 331 32 18446744073709551615 1 ) 331 32 331 33 18446744073709551615 1 { 331 34 331 35 18446744073709551615 6 memcpy 332 5 332 11 122 1 ( 332 11 332 12 122 1 B 332 12 332 13 163 1 + 332 14 332 15 18446744073709551615 1 2 332 16 332 17 18446744073709551615 1 * 332 18 332 19 18446744073709551615 12 MAC_ADDR_LEN 332 20 332 32 18446744073709551615 1 , 332 32 332 33 122 6 ANonce 332 34 332 40 160 1 , 332 40 332 41 122 2 32 332 42 332 44 18446744073709551615 1 ) 332 44 332 45 122 1 ; 332 45 332 46 18446744073709551615 6 memcpy 333 5 333 11 122 1 ( 333 11 333 12 122 1 B 333 12 333 13 163 1 + 333 14 333 15 18446744073709551615 1 2 333 16 333 17 18446744073709551615 1 * 333 18 333 19 18446744073709551615 12 MAC_ADDR_LEN 333 20 333 32 18446744073709551615 1 + 333 33 333 34 18446744073709551615 2 32 333 35 333 37 18446744073709551615 1 , 333 37 333 38 122 6 SNonce 333 39 333 45 161 1 , 333 45 333 46 122 2 32 333 47 333 49 18446744073709551615 1 ) 333 49 333 50 122 1 ; 333 50 333 51 18446744073709551615 1 } 334 3 334 4 18446744073709551615 4 else 335 3 335 7 18446744073709551615 1 { 335 8 335 9 18446744073709551615 6 memcpy 336 5 336 11 122 1 ( 336 11 336 12 122 1 B 336 12 336 13 163 1 + 336 14 336 15 18446744073709551615 1 2 336 16 336 17 18446744073709551615 1 * 336 18 336 19 18446744073709551615 12 MAC_ADDR_LEN 336 20 336 32 18446744073709551615 1 , 336 32 336 33 122 6 SNonce 336 34 336 40 161 1 , 336 40 336 41 122 2 32 336 42 336 44 18446744073709551615 1 ) 336 44 336 45 122 1 ; 336 45 336 46 18446744073709551615 6 memcpy 337 5 337 11 122 1 ( 337 11 337 12 122 1 B 337 12 337 13 163 1 + 337 14 337 15 18446744073709551615 1 2 337 16 337 17 18446744073709551615 1 * 337 18 337 19 18446744073709551615 12 MAC_ADDR_LEN 337 20 337 32 18446744073709551615 1 + 337 33 337 34 18446744073709551615 2 32 337 35 337 37 18446744073709551615 1 , 337 37 337 38 122 6 ANonce 337 39 337 45 160 1 , 337 45 337 46 122 2 32 337 47 337 49 18446744073709551615 1 ) 337 49 337 50 122 1 ; 337 50 337 51 18446744073709551615 1 } 338 3 338 4 18446744073709551615 6 memcpy 340 3 340 9 122 1 ( 340 9 340 10 122 3 arg 340 10 340 13 166 1 , 340 13 340 14 122 1 A 340 15 340 16 156 1 , 340 16 340 17 122 4 lenA 340 18 340 22 157 1 ) 340 22 340 23 122 1 ; 340 23 340 24 18446744073709551615 3 arg 341 3 341 6 166 1 [ 341 6 341 7 18446744073709551615 4 lenA 341 7 341 11 157 1 ] 341 11 341 12 18446744073709551615 1 = 341 13 341 14 18446744073709551615 1 c 341 15 341 16 165 1 ; 341 16 341 17 18446744073709551615 6 memcpy 342 3 342 9 122 1 ( 342 9 342 10 122 3 arg 342 10 342 13 166 1 + 342 14 342 15 18446744073709551615 4 lenA 342 16 342 20 157 1 + 342 21 342 22 18446744073709551615 1 1 342 23 342 24 18446744073709551615 1 , 342 24 342 25 122 1 B 342 26 342 27 163 1 , 342 27 342 28 122 2 76 342 29 342 31 18446744073709551615 1 ) 342 31 342 32 122 1 ; 342 32 342 33 18446744073709551615 6 printf 343 3 343 9 89 1 ( 343 9 343 10 89 4 "\n" 343 10 343 14 18446744073709551615 1 ) 343 14 343 15 89 1 ; 343 15 343 16 18446744073709551615 6 u_char 344 3 344 9 1 13 hmac_sha1_res 344 10 344 23 167 1 [ 344 23 344 24 18446744073709551615 2 20 344 24 344 26 18446744073709551615 1 ] 344 26 344 27 18446744073709551615 1 ; 344 27 344 28 18446744073709551615 6 u_char 345 3 345 9 1 1 R 345 10 345 11 168 1 [ 345 11 345 12 18446744073709551615 1 ( 345 12 345 13 18446744073709551615 1 ( 345 13 345 14 18446744073709551615 3 512 345 14 345 17 18446744073709551615 1 + 345 18 345 19 18446744073709551615 3 159 345 20 345 23 18446744073709551615 1 ) 345 23 345 24 18446744073709551615 1 / 345 25 345 26 18446744073709551615 3 160 345 27 345 30 18446744073709551615 1 ) 345 30 345 31 18446744073709551615 1 * 345 32 345 33 18446744073709551615 2 20 345 34 345 36 18446744073709551615 1 ] 345 36 345 37 18446744073709551615 1 ; 345 37 345 38 18446744073709551615 5 u_int 346 3 346 8 169 10 sha_length 346 9 346 19 170 1 = 346 20 346 21 18446744073709551615 2 20 346 22 346 24 18446744073709551615 1 ; 346 24 346 25 18446744073709551615 5 while 347 3 347 8 18446744073709551615 1 ( 347 8 347 9 18446744073709551615 1 i 347 9 347 10 164 2 <= 347 11 347 13 18446744073709551615 1 ( 347 14 347 15 18446744073709551615 1 ( 347 15 347 16 18446744073709551615 3 512 347 16 347 19 18446744073709551615 1 + 347 20 347 21 18446744073709551615 3 159 347 22 347 25 18446744073709551615 1 ) 347 25 347 26 18446744073709551615 1 / 347 27 347 28 18446744073709551615 3 160 347 29 347 32 18446744073709551615 1 ) 347 32 347 33 18446744073709551615 1 ) 347 33 347 34 18446744073709551615 1 { 347 35 347 36 18446744073709551615 3 arg 348 5 348 8 166 1 [ 348 8 348 9 18446744073709551615 2 76 348 9 348 11 18446744073709551615 1 + 348 12 348 13 18446744073709551615 4 lenA 348 14 348 18 157 1 + 348 19 348 20 18446744073709551615 1 1 348 21 348 22 18446744073709551615 1 ] 348 22 348 23 18446744073709551615 1 = 348 24 348 25 18446744073709551615 4 0x00 348 26 348 30 18446744073709551615 1 + 348 31 348 32 18446744073709551615 1 i 348 33 348 34 164 1 ; 348 34 348 35 18446744073709551615 4 HMAC 349 5 349 9 99 1 ( 349 9 349 10 99 8 EVP_sha1 349 10 349 18 100 1 ( 349 18 349 19 100 1 ) 349 19 349 20 100 1 , 349 20 349 21 99 3 PMK 349 22 349 25 155 1 , 349 25 349 26 99 2 32 349 27 349 29 18446744073709551615 1 , 349 29 349 30 99 3 arg 349 31 349 34 166 1 , 349 34 349 35 99 2 76 349 36 349 38 18446744073709551615 1 + 349 39 349 40 18446744073709551615 4 lenA 349 41 349 45 157 1 + 349 46 349 47 18446744073709551615 1 2 349 48 349 49 18446744073709551615 1 , 349 49 349 50 99 13 hmac_sha1_res 349 51 349 64 167 1 , 349 64 349 65 99 1 & 349 66 349 67 18446744073709551615 10 sha_length 349 67 349 77 170 1 ) 349 77 349 78 99 1 ; 349 78 349 79 18446744073709551615 6 memcpy 350 5 350 11 122 1 ( 350 11 350 12 122 1 R 350 12 350 13 168 1 + 350 14 350 15 18446744073709551615 1 i 350 16 350 17 164 1 * 350 18 350 19 18446744073709551615 2 20 350 20 350 22 18446744073709551615 1 , 350 22 350 23 122 13 hmac_sha1_res 350 24 350 37 167 1 , 350 37 350 38 122 2 20 350 39 350 41 18446744073709551615 1 ) 350 41 350 42 122 1 ; 350 42 350 43 18446744073709551615 1 i 351 5 351 6 164 2 ++ 351 6 351 8 18446744073709551615 1 ; 351 8 351 9 18446744073709551615 1 } 352 3 352 4 18446744073709551615 6 memcpy 353 3 353 9 122 1 ( 353 9 353 10 122 3 ptk 353 10 353 13 162 1 , 353 13 353 14 122 1 R 353 15 353 16 168 1 , 353 16 353 17 122 2 64 353 18 353 20 18446744073709551615 1 ) 353 20 353 21 122 1 ; 353 21 353 22 18446744073709551615 6 return 354 3 354 9 18446744073709551615 3 ptk 354 10 354 13 162 1 ; 354 13 354 14 18446744073709551615 1 } 355 1 355 2 18446744073709551615 6 u_char 357 1 357 7 1 1 * 357 8 357 9 68 15 hexstr_to_bytes 357 9 357 24 68 1 ( 357 24 357 25 68 6 u_char 357 25 357 31 1 1 * 357 32 357 33 18446744073709551615 6 hexstr 357 33 357 39 171 1 ) 357 39 357 40 68 1 { 357 41 357 42 18446744073709551615 6 size_t 358 3 358 9 67 3 len 358 10 358 13 172 1 = 358 14 358 15 18446744073709551615 6 strlen 358 16 358 22 87 1 ( 358 22 358 23 87 6 hexstr 358 23 358 29 171 1 ) 358 29 358 30 87 1 ; 358 30 358 31 18446744073709551615 2 if 359 3 359 5 18446744073709551615 1 ( 359 5 359 6 18446744073709551615 3 len 359 6 359 9 172 1 % 359 10 359 11 18446744073709551615 1 2 359 12 359 13 18446744073709551615 2 != 359 14 359 16 18446744073709551615 1 0 359 17 359 18 18446744073709551615 1 ) 359 18 359 19 18446744073709551615 6 return 360 5 360 11 18446744073709551615 4 NULL 360 12 360 16 18446744073709551615 1 ; 360 16 360 17 18446744073709551615 6 size_t 361 3 361 9 67 9 final_len 361 10 361 19 173 1 = 361 20 361 21 18446744073709551615 3 len 361 22 361 25 172 1 / 361 26 361 27 18446744073709551615 1 2 361 28 361 29 18446744073709551615 1 ; 361 29 361 30 18446744073709551615 8 unsigned 362 3 362 11 18446744073709551615 4 char 362 12 362 16 18446744073709551615 1 * 362 17 362 18 18446744073709551615 4 chrs 362 18 362 22 174 1 = 362 23 362 24 18446744073709551615 1 ( 362 25 362 26 18446744073709551615 8 unsigned 362 26 362 34 18446744073709551615 4 char 362 35 362 39 18446744073709551615 1 * 362 40 362 41 18446744073709551615 1 ) 362 41 362 42 18446744073709551615 6 malloc 362 42 362 48 98 1 ( 362 48 362 49 98 1 ( 362 49 362 50 18446744073709551615 9 final_len 362 50 362 59 173 1 ) 362 59 362 60 18446744073709551615 1 * 362 61 362 62 18446744073709551615 6 sizeof 362 63 362 69 18446744073709551615 1 ( 362 69 362 70 18446744073709551615 1 * 362 70 362 71 18446744073709551615 4 chrs 362 71 362 75 174 1 ) 362 75 362 76 18446744073709551615 1 ) 362 76 362 77 98 1 ; 362 77 362 78 18446744073709551615 3 for 363 3 363 6 18446744073709551615 1 ( 363 6 363 7 18446744073709551615 6 size_t 363 7 363 13 67 1 i 363 14 363 15 175 1 = 363 16 363 17 18446744073709551615 1 0 363 18 363 19 18446744073709551615 1 , 363 19 363 20 18446744073709551615 1 j 363 21 363 22 176 1 = 363 23 363 24 18446744073709551615 1 0 363 25 363 26 18446744073709551615 1 ; 363 26 363 27 18446744073709551615 1 j 363 28 363 29 176 1 < 363 30 363 31 18446744073709551615 9 final_len 363 32 363 41 173 1 ; 363 41 363 42 18446744073709551615 1 i 363 43 363 44 175 2 += 363 45 363 47 18446744073709551615 1 2 363 48 363 49 18446744073709551615 1 , 363 49 363 50 18446744073709551615 1 j 363 51 363 52 176 2 ++ 363 52 363 54 18446744073709551615 1 ) 363 54 363 55 18446744073709551615 4 chrs 364 5 364 9 174 1 [ 364 9 364 10 18446744073709551615 1 j 364 10 364 11 176 1 ] 364 11 364 12 18446744073709551615 1 = 364 13 364 14 18446744073709551615 1 ( 364 15 364 16 18446744073709551615 6 hexstr 364 16 364 22 171 1 [ 364 22 364 23 18446744073709551615 1 i 364 23 364 24 175 1 ] 364 24 364 25 18446744073709551615 1 % 364 26 364 27 18446744073709551615 2 32 364 28 364 30 18446744073709551615 1 + 364 31 364 32 18446744073709551615 1 9 364 33 364 34 18446744073709551615 1 ) 364 34 364 35 18446744073709551615 1 % 364 36 364 37 18446744073709551615 2 25 364 38 364 40 18446744073709551615 1 * 364 41 364 42 18446744073709551615 2 16 364 43 364 45 18446744073709551615 1 + 364 46 364 47 18446744073709551615 1 ( 364 48 364 49 18446744073709551615 6 hexstr 364 49 364 55 171 1 [ 364 55 364 56 18446744073709551615 1 i 364 56 364 57 175 1 + 364 58 364 59 18446744073709551615 1 1 364 60 364 61 18446744073709551615 1 ] 364 61 364 62 18446744073709551615 1 % 364 63 364 64 18446744073709551615 2 32 364 65 364 67 18446744073709551615 1 + 364 68 364 69 18446744073709551615 1 9 364 70 364 71 18446744073709551615 1 ) 364 71 364 72 18446744073709551615 1 % 364 73 364 74 18446744073709551615 2 25 364 75 364 77 18446744073709551615 1 ; 364 77 364 78 18446744073709551615 6 return 365 3 365 9 18446744073709551615 4 chrs 365 10 365 14 174 1 ; 365 14 365 15 18446744073709551615 1 } 366 1 366 2 18446744073709551615 0 0 177 0 0 0 9 0 0 1 3 0 1 A 20 1 3 0 6 u_char 9 1 3 0 8 NULL_MIC 7 1 3 0 20 WAITING_EAPOL_KEY_2: 7 1 3 0 20 WAITING_EAPOL_KEY_3: 7 1 3 0 20 WAITING_EAPOL_KEY_4: 7 1 3 0 8 SUCCESS: 20 1 3 0 12 eapol_status 2 1 3 0 12 sniff_802_11 6 1 3 0 26 frame_control:sniff_802_11 6 1 3 0 24 duration_id:sniff_802_11 6 1 3 0 18 addr1:sniff_802_11 6 1 3 0 18 addr2:sniff_802_11 6 1 3 0 18 addr3:sniff_802_11 6 1 3 0 29 sequence_control:sniff_802_11 6 1 3 0 24 qos_control:sniff_802_11 2 1 3 0 19 sniff_802_11_beacon 6 1 3 0 33 frame_control:sniff_802_11_beacon 6 1 3 0 31 duration_id:sniff_802_11_beacon 6 1 3 0 25 addr1:sniff_802_11_beacon 6 1 3 0 25 addr2:sniff_802_11_beacon 6 1 3 0 25 addr3:sniff_802_11_beacon 6 1 3 0 36 sequence_control:sniff_802_11_beacon 2 1 3 0 9 sniff_LLC 6 1 3 0 14 dsap:sniff_LLC 6 1 3 0 14 ssap:sniff_LLC 6 1 3 0 23 control_field:sniff_LLC 2 1 3 0 10 sniff_SNAP 6 1 3 0 19 org_code:sniff_SNAP 6 1 3 0 15 type:sniff_SNAP 2 1 3 0 17 sniff_802_1x_auth 6 1 3 0 25 version:sniff_802_1x_auth 6 1 3 0 22 type:sniff_802_1x_auth 6 1 3 0 24 length:sniff_802_1x_auth 6 1 3 0 37 key_descriptor_type:sniff_802_1x_auth 6 1 3 0 33 key_information:sniff_802_1x_auth 6 1 3 0 28 key_length:sniff_802_1x_auth 6 1 3 0 32 replay_counter:sniff_802_1x_auth 6 1 3 0 31 wpa_key_nonce:sniff_802_1x_auth 6 1 3 0 28 wpa_key_IV:sniff_802_1x_auth 6 1 3 0 29 wpa_key_RSC:sniff_802_1x_auth 6 1 3 0 28 wpa_key_ID:sniff_802_1x_auth 6 1 3 0 29 wpa_key_MIC:sniff_802_1x_auth 6 1 3 0 37 wpa_key_data_length:sniff_802_1x_auth 2 1 3 0 3 ptk 6 1 3 0 7 kck:ptk 6 1 3 0 7 kek:ptk 6 1 3 0 6 tk:ptk 6 1 3 0 7 txk:ptk 6 1 3 0 7 trk:ptk 2 1 3 0 10 eapol_info 6 1 3 0 26 sta_mac_address:eapol_info 6 1 3 0 17 ANonce:eapol_info 6 1 3 0 17 SNonce:eapol_info 6 1 3 0 14 PTK:eapol_info 6 1 3 0 17 status:eapol_info 9 1 3 0 14 ap_mac_address 9 1 3 0 3 psk 9 1 3 0 4 ssid 20 1 3 0 5 map_t 9 1 3 0 3 map 8 1 3 0 14 process_beacon 2 1 3 0 11 pcap_pkthdr 8 1 3 0 13 process_eapol 8 1 3 0 14 process_packet 8 1 3 0 12 mac_toString 8 1 3 0 6 PRF512 20 1 3 0 6 size_t 8 1 3 0 15 hexstr_to_bytes 8 1 3 0 4 main 10 1 3 0 57 100:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 100:26:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_new 9 1 3 0 56 103:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 105:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 106:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 107:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 108:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 109:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 2 1 3 0 11 bpf_program 9 1 3 0 57 110:22:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 6 pcap_t 9 1 3 0 57 111:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 112:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 113:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 114:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 20 fastpbkdf2_hmac_sha1 8 1 3 0 6 strlen 9 1 3 0 57 119:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 printf 9 1 3 0 57 127:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 128:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 129:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 130:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 131:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 133:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 135:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 136:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 malloc 8 1 3 0 4 HMAC 8 1 3 0 8 EVP_sha1 9 1 3 0 57 138:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 11 bpf_u_int32 9 1 3 0 57 143:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 144:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 14 pcap_lookupnet 8 1 3 0 7 fprintf 9 1 3 0 56 152:8:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 17 pcap_open_offline 8 1 3 0 12 pcap_compile 8 1 3 0 11 pcap_geterr 8 1 3 0 14 pcap_setfilter 8 1 3 0 12 pcap_next_ex 8 1 3 0 8 asprintf 9 1 3 0 56 186:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 13 pcap_freecode 8 1 3 0 10 pcap_close 10 1 3 0 57 202:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 202:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 203:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 205:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 206:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memcpy 8 1 3 0 6 strcmp 10 1 3 0 57 216:48:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 216:70:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 217:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 219:35:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 223:49:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 223:71:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 224:30:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 226:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 227:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 228:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 229:22:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 231:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 233:11:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_get 6 1 3 0 18 caplen:pcap_pkthdr 9 1 3 0 57 245:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 255:31:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 258:34:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 260:16:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 6 memcmp 9 1 3 0 57 262:43:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 264:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 269:36:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 11 hashmap_put 9 1 3 0 57 277:26:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 284:27:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 285:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 286:23:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 307:28:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 308:15:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 8 1 3 0 8 snprintf 10 1 3 0 57 316:24:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 316:37:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 316:47:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 316:61:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 316:78:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 316:96:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 58 316:112:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 317:17:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 318:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 56 319:7:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 320:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 321:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 344:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 345:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 20 1 3 0 5 u_int 9 1 3 0 56 346:9:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 10 1 3 0 57 357:33:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 358:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 361:10:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 362:18:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 363:14:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 9 1 3 0 57 363:21:/home/florenzi/Documenti/juci_ws/wpa_decode/main.c 0 0 3 0 0 0 56 /home/florenzi/Documenti/juci_ws/wpa_decode/fastpbkdf2.h 1509296147 53 /home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 1262964973 50 /home/florenzi/Documenti/juci_ws/wpa_decode/main.c 1517242665