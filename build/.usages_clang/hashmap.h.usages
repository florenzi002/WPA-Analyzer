22 serialization::archive 15 0 0 0 0 43 /home/florenzi/Documenti/juci_ws/wpa_decode 49 /home/florenzi/Documenti/juci_ws/wpa_decode/build 0 0 159 0 0 0 301 /*
 * Generic hashmap manipulation functions
 *
 * Originally by Elliot C Back - http://elliottback.com/wp/hashmap-implementation-in-c/
 *
 * Modified by Pete Warden to fix a serious performance problem, support strings as keys
 * and removed thread synchronization - http://petewarden.typepad.com
 */ 1 1 8 4 18446744073709551615 1 # 9 1 9 2 18446744073709551615 6 ifndef 9 2 9 8 18446744073709551615 13 __HASHMAP_H__ 9 9 9 22 18446744073709551615 1 # 10 1 10 2 18446744073709551615 6 define 10 2 10 8 18446744073709551615 13 __HASHMAP_H__ 10 9 10 22 18446744073709551615 1 # 12 1 12 2 18446744073709551615 6 define 12 2 12 8 18446744073709551615 11 MAP_MISSING 12 9 12 20 18446744073709551615 1 - 12 21 12 22 18446744073709551615 1 3 12 22 12 23 18446744073709551615 21 /* No such element */ 12 25 12 46 18446744073709551615 1 # 13 1 13 2 18446744073709551615 6 define 13 2 13 8 18446744073709551615 8 MAP_FULL 13 9 13 17 18446744073709551615 1 - 13 18 13 19 18446744073709551615 1 2 13 19 13 20 18446744073709551615 21 /* Hashmap is full */ 13 22 13 43 18446744073709551615 1 # 14 1 14 2 18446744073709551615 6 define 14 2 14 8 18446744073709551615 8 MAP_OMEM 14 9 14 17 18446744073709551615 1 - 14 18 14 19 18446744073709551615 1 1 14 19 14 20 18446744073709551615 19 /* Out of Memory */ 14 22 14 41 18446744073709551615 1 # 15 1 15 2 18446744073709551615 6 define 15 2 15 8 18446744073709551615 6 MAP_OK 15 9 15 15 18446744073709551615 1 0 15 16 15 17 18446744073709551615 8 /* OK */ 15 19 15 27 18446744073709551615 93 /*
 * any_t is a pointer.  This allows you to put arbitrary structures in
 * the hashmap.
 */ 17 1 20 4 18446744073709551615 7 typedef 21 1 21 8 18446744073709551615 4 void 21 9 21 13 18446744073709551615 1 * 21 14 21 15 18446744073709551615 5 any_t 21 15 21 20 0 1 ; 21 20 21 21 18446744073709551615 124 /*
 * PFany is a pointer to a function that can take two any_t arguments
 * and return an integer. Returns status code..
 */ 23 1 26 4 18446744073709551615 7 typedef 27 1 27 8 18446744073709551615 3 int 27 9 27 12 18446744073709551615 1 ( 27 13 27 14 18446744073709551615 1 * 27 14 27 15 18446744073709551615 5 PFany 27 15 27 20 1 1 ) 27 20 27 21 18446744073709551615 1 ( 27 21 27 22 18446744073709551615 5 any_t 27 22 27 27 0 1 , 27 27 27 28 18446744073709551615 5 any_t 27 29 27 34 0 1 ) 27 34 27 35 18446744073709551615 1 ; 27 35 27 36 18446744073709551615 191 /*
 * map_t is a pointer to an internally maintained data structure.
 * Clients of this package do not need to know how hashmaps are
 * represented.  They see and manipulate only map_t's.
 */ 29 1 33 4 18446744073709551615 7 typedef 34 1 34 8 18446744073709551615 5 any_t 34 9 34 14 0 5 map_t 34 15 34 20 2 1 ; 34 20 34 21 18446744073709551615 56 /*
 * Return an empty hashmap. Returns NULL if empty.
*/ 36 1 38 3 18446744073709551615 6 extern 39 1 39 7 18446744073709551615 5 map_t 39 8 39 13 2 11 hashmap_new 39 14 39 25 3 1 ( 39 25 39 26 3 1 ) 39 26 39 27 3 1 ; 39 27 39 28 18446744073709551615 284 /*
 * Iteratively call f with argument (item, data) for
 * each element data in the hashmap. The function must
 * return a map status code. If it returns anything other
 * than MAP_OK the traversal is terminated. f must
 * not reenter any hashmap functions, or deadlock may arise.
 */ 41 1 47 4 18446744073709551615 6 extern 48 1 48 7 18446744073709551615 3 int 48 8 48 11 18446744073709551615 15 hashmap_iterate 48 12 48 27 4 1 ( 48 27 48 28 4 5 map_t 48 28 48 33 2 2 in 48 34 48 36 5 1 , 48 36 48 37 4 5 PFany 48 38 48 43 1 1 f 48 44 48 45 6 1 , 48 45 48 46 4 5 any_t 48 47 48 52 0 4 item 48 53 48 57 7 1 ) 48 57 48 58 4 1 ; 48 58 48 59 18446744073709551615 67 /*
 * Add an element to the hashmap. Return MAP_OK or MAP_OMEM.
 */ 50 1 52 4 18446744073709551615 6 extern 53 1 53 7 18446744073709551615 3 int 53 8 53 11 18446744073709551615 11 hashmap_put 53 12 53 23 8 1 ( 53 23 53 24 8 5 map_t 53 24 53 29 2 2 in 53 30 53 32 9 1 , 53 32 53 33 8 4 char 53 34 53 38 18446744073709551615 1 * 53 38 53 39 18446744073709551615 3 key 53 40 53 43 10 1 , 53 43 53 44 8 5 any_t 53 45 53 50 0 5 value 53 51 53 56 11 1 ) 53 56 53 57 8 1 ; 53 57 53 58 18446744073709551615 72 /*
 * Get an element from the hashmap. Return MAP_OK or MAP_MISSING.
 */ 55 1 57 4 18446744073709551615 6 extern 58 1 58 7 18446744073709551615 3 int 58 8 58 11 18446744073709551615 11 hashmap_get 58 12 58 23 12 1 ( 58 23 58 24 12 5 map_t 58 24 58 29 2 2 in 58 30 58 32 13 1 , 58 32 58 33 12 4 char 58 34 58 38 18446744073709551615 1 * 58 38 58 39 18446744073709551615 3 key 58 40 58 43 14 1 , 58 43 58 44 12 5 any_t 58 45 58 50 0 1 * 58 51 58 52 18446744073709551615 3 arg 58 52 58 55 15 1 ) 58 55 58 56 12 1 ; 58 56 58 57 18446744073709551615 75 /*
 * Remove an element from the hashmap. Return MAP_OK or MAP_MISSING.
 */ 60 1 62 4 18446744073709551615 6 extern 63 1 63 7 18446744073709551615 3 int 63 8 63 11 18446744073709551615 14 hashmap_remove 63 12 63 26 16 1 ( 63 26 63 27 16 5 map_t 63 27 63 32 2 2 in 63 33 63 35 17 1 , 63 35 63 36 16 4 char 63 37 63 41 18446744073709551615 1 * 63 41 63 42 18446744073709551615 3 key 63 43 63 46 18 1 ) 63 46 63 47 16 1 ; 63 47 63 48 18446744073709551615 115 /*
 * Get any element. Return MAP_OK or MAP_MISSING.
 * remove - should the element be removed from the hashmap
 */ 65 1 68 4 18446744073709551615 6 extern 69 1 69 7 18446744073709551615 3 int 69 8 69 11 18446744073709551615 15 hashmap_get_one 69 12 69 27 19 1 ( 69 27 69 28 19 5 map_t 69 28 69 33 2 2 in 69 34 69 36 20 1 , 69 36 69 37 19 5 any_t 69 38 69 43 0 1 * 69 44 69 45 18446744073709551615 3 arg 69 45 69 48 21 1 , 69 48 69 49 19 3 int 69 50 69 53 18446744073709551615 6 remove 69 54 69 60 22 1 ) 69 60 69 61 19 1 ; 69 61 69 62 18446744073709551615 26 /*
 * Free the hashmap
 */ 71 1 73 4 18446744073709551615 6 extern 74 1 74 7 18446744073709551615 4 void 74 8 74 12 18446744073709551615 12 hashmap_free 74 13 74 25 23 1 ( 74 25 74 26 23 5 map_t 74 26 74 31 2 2 in 74 32 74 34 24 1 ) 74 34 74 35 23 1 ; 74 35 74 36 18446744073709551615 43 /*
 * Get the current size of a hashmap
 */ 76 1 78 4 18446744073709551615 6 extern 79 1 79 7 18446744073709551615 3 int 79 8 79 11 18446744073709551615 14 hashmap_length 79 12 79 26 25 1 ( 79 26 79 27 25 5 map_t 79 27 79 32 2 2 in 79 33 79 35 26 1 ) 79 35 79 36 25 1 ; 79 36 79 37 18446744073709551615 1 # 81 1 81 2 18446744073709551615 5 endif 81 2 81 7 18446744073709551615 13 __HASHMAP_H__ 81 8 81 21 18446744073709551615 0 0 27 0 0 0 20 0 0 1 3 0 5 any_t 20 1 3 0 5 PFany 20 1 3 0 5 map_t 8 1 3 0 11 hashmap_new 8 1 3 0 15 hashmap_iterate 10 1 3 0 59 48:34:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 10 1 3 0 59 48:44:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 10 1 3 0 59 48:53:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 8 1 3 0 11 hashmap_put 10 1 3 0 59 53:30:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 10 1 3 0 59 53:40:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 10 1 3 0 59 53:51:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 8 1 3 0 11 hashmap_get 10 1 3 0 59 58:30:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 10 1 3 0 59 58:40:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 10 1 3 0 59 58:52:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 8 1 3 0 14 hashmap_remove 10 1 3 0 59 63:33:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 10 1 3 0 59 63:43:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 8 1 3 0 15 hashmap_get_one 10 1 3 0 59 69:34:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 10 1 3 0 59 69:45:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 10 1 3 0 59 69:54:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 8 1 3 0 12 hashmap_free 10 1 3 0 59 74:32:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 8 1 3 0 14 hashmap_length 10 1 3 0 59 79:33:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 0 0 1 0 0 0 53 /home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 1262964973