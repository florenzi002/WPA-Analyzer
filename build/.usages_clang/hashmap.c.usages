22 serialization::archive 15 0 0 0 0 43 /home/florenzi/Documenti/juci_ws/wpa_decode 49 /home/florenzi/Documenti/juci_ws/wpa_decode/build 0 0 1806 0 0 0 37 /*
 * Generic map implementation.
 */ 1 1 3 4 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 11 "hashmap.h" 4 10 4 21 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 1 < 6 10 6 11 18446744073709551615 6 stdlib 6 11 6 17 18446744073709551615 1 . 6 17 6 18 18446744073709551615 1 h 6 18 6 19 18446744073709551615 1 > 6 19 6 20 18446744073709551615 1 # 7 1 7 2 18446744073709551615 7 include 7 2 7 9 18446744073709551615 1 < 7 10 7 11 18446744073709551615 5 stdio 7 11 7 16 18446744073709551615 1 . 7 16 7 17 18446744073709551615 1 h 7 17 7 18 18446744073709551615 1 > 7 18 7 19 18446744073709551615 1 # 8 1 8 2 18446744073709551615 7 include 8 2 8 9 18446744073709551615 1 < 8 10 8 11 18446744073709551615 6 string 8 11 8 17 18446744073709551615 1 . 8 17 8 18 18446744073709551615 1 h 8 18 8 19 18446744073709551615 1 > 8 19 8 20 18446744073709551615 1 # 10 1 10 2 18446744073709551615 6 define 10 2 10 8 18446744073709551615 12 INITIAL_SIZE 10 9 10 21 18446744073709551615 1 ( 10 22 10 23 18446744073709551615 3 256 10 23 10 26 18446744073709551615 1 ) 10 26 10 27 18446744073709551615 1 # 11 1 11 2 18446744073709551615 6 define 11 2 11 8 18446744073709551615 16 MAX_CHAIN_LENGTH 11 9 11 25 18446744073709551615 1 ( 11 26 11 27 18446744073709551615 1 8 11 27 11 28 18446744073709551615 1 ) 11 28 11 29 18446744073709551615 37 /* We need to keep keys and values */ 13 1 13 38 18446744073709551615 7 typedef 14 1 14 8 18446744073709551615 6 struct 14 9 14 15 18446744073709551615 16 _hashmap_element 14 16 14 32 0 1 { 14 32 14 33 18446744073709551615 4 char 15 2 15 6 18446744073709551615 1 * 15 6 15 7 18446744073709551615 3 key 15 8 15 11 1 1 ; 15 11 15 12 18446744073709551615 3 int 16 2 16 5 18446744073709551615 6 in_use 16 6 16 12 2 1 ; 16 12 16 13 18446744073709551615 5 any_t 17 2 17 7 3 4 data 17 8 17 12 4 1 ; 17 12 17 13 18446744073709551615 1 } 18 1 18 2 18446744073709551615 15 hashmap_element 18 3 18 18 5 1 ; 18 18 18 19 18446744073709551615 87 /* A hashmap has some maximum size and current size,
 * as well as the data to hold. */ 20 1 21 35 18446744073709551615 7 typedef 22 1 22 8 18446744073709551615 6 struct 22 9 22 15 18446744073709551615 12 _hashmap_map 22 16 22 28 6 1 { 22 28 22 29 18446744073709551615 3 int 23 2 23 5 18446744073709551615 10 table_size 23 6 23 16 7 1 ; 23 16 23 17 18446744073709551615 3 int 24 2 24 5 18446744073709551615 4 size 24 6 24 10 8 1 ; 24 10 24 11 18446744073709551615 15 hashmap_element 25 2 25 17 5 1 * 25 18 25 19 18446744073709551615 4 data 25 19 25 23 9 1 ; 25 23 25 24 18446744073709551615 1 } 26 1 26 2 18446744073709551615 11 hashmap_map 26 3 26 14 10 1 ; 26 14 26 15 18446744073709551615 54 /*
 * Return an empty hashmap, or NULL on failure.
 */ 28 1 30 4 18446744073709551615 5 map_t 31 1 31 6 11 11 hashmap_new 31 7 31 18 12 1 ( 31 18 31 19 12 1 ) 31 19 31 20 12 1 { 31 21 31 22 18446744073709551615 11 hashmap_map 32 2 32 13 10 1 * 32 13 32 14 18446744073709551615 1 m 32 15 32 16 13 1 = 32 17 32 18 18446744073709551615 1 ( 32 19 32 20 18446744073709551615 11 hashmap_map 32 20 32 31 10 1 * 32 31 32 32 18446744073709551615 1 ) 32 32 32 33 18446744073709551615 6 malloc 32 34 32 40 14 1 ( 32 40 32 41 14 6 sizeof 32 41 32 47 18446744073709551615 1 ( 32 47 32 48 18446744073709551615 11 hashmap_map 32 48 32 59 10 1 ) 32 59 32 60 18446744073709551615 1 ) 32 60 32 61 14 1 ; 32 61 32 62 18446744073709551615 2 if 33 2 33 4 18446744073709551615 1 ( 33 4 33 5 18446744073709551615 1 ! 33 5 33 6 18446744073709551615 1 m 33 6 33 7 13 1 ) 33 7 33 8 18446744073709551615 4 goto 33 9 33 13 18446744073709551615 3 err 33 14 33 17 15 1 ; 33 17 33 18 18446744073709551615 1 m 35 2 35 3 13 2 -> 35 3 35 5 18446744073709551615 4 data 35 5 35 9 9 1 = 35 10 35 11 18446744073709551615 1 ( 35 12 35 13 18446744073709551615 15 hashmap_element 35 13 35 28 5 1 * 35 28 35 29 18446744073709551615 1 ) 35 29 35 30 18446744073709551615 6 calloc 35 31 35 37 16 1 ( 35 37 35 38 16 12 INITIAL_SIZE 35 38 35 50 16 1 , 35 50 35 51 16 6 sizeof 35 52 35 58 18446744073709551615 1 ( 35 58 35 59 18446744073709551615 15 hashmap_element 35 59 35 74 5 1 ) 35 74 35 75 18446744073709551615 1 ) 35 75 35 76 16 1 ; 35 76 35 77 18446744073709551615 2 if 36 2 36 4 18446744073709551615 1 ( 36 4 36 5 18446744073709551615 1 ! 36 5 36 6 18446744073709551615 1 m 36 6 36 7 13 2 -> 36 7 36 9 18446744073709551615 4 data 36 9 36 13 9 1 ) 36 13 36 14 18446744073709551615 4 goto 36 15 36 19 18446744073709551615 3 err 36 20 36 23 15 1 ; 36 23 36 24 18446744073709551615 1 m 38 2 38 3 13 2 -> 38 3 38 5 18446744073709551615 10 table_size 38 5 38 15 7 1 = 38 16 38 17 18446744073709551615 12 INITIAL_SIZE 38 18 38 30 18446744073709551615 1 ; 38 30 38 31 18446744073709551615 1 m 39 2 39 3 13 2 -> 39 3 39 5 18446744073709551615 4 size 39 5 39 9 8 1 = 39 10 39 11 18446744073709551615 1 0 39 12 39 13 18446744073709551615 1 ; 39 13 39 14 18446744073709551615 6 return 41 2 41 8 18446744073709551615 1 m 41 9 41 10 13 1 ; 41 10 41 11 18446744073709551615 3 err 42 2 42 5 18446744073709551615 1 : 42 5 42 6 18446744073709551615 2 if 43 3 43 5 18446744073709551615 1 ( 43 6 43 7 18446744073709551615 1 m 43 7 43 8 13 1 ) 43 8 43 9 18446744073709551615 12 hashmap_free 44 4 44 16 17 1 ( 44 16 44 17 17 1 m 44 17 44 18 13 1 ) 44 18 44 19 17 1 ; 44 19 44 20 18446744073709551615 6 return 45 3 45 9 18446744073709551615 4 NULL 45 10 45 14 18446744073709551615 1 ; 45 14 45 15 18446744073709551615 1 } 46 1 46 2 18446744073709551615 203 /* The implementation here was originally done by Gary S. Brown.  I have
   borrowed the tables directly, and made some minor changes to the
   crc32-function (including changing the interface). //ylo */ 48 1 50 63 18446744073709551615 67 /* ============================================================= */ 52 3 52 70 18446744073709551615 76 /*  COPYRIGHT (C) 1986 Gary S. Brown.  You may use this program, or       */ 53 3 53 79 18446744073709551615 76 /*  code or tables extracted from it, as desired without restriction.     */ 54 3 54 79 18446744073709551615 76 /*                                                                        */ 55 3 55 79 18446744073709551615 76 /*  First, the polynomial itself and its table of feedback terms.  The    */ 56 3 56 79 18446744073709551615 76 /*  polynomial is                                                         */ 57 3 57 79 18446744073709551615 76 /*  X^32+X^26+X^23+X^22+X^16+X^12+X^11+X^10+X^8+X^7+X^5+X^4+X^2+X^1+X^0   */ 58 3 58 79 18446744073709551615 76 /*                                                                        */ 59 3 59 79 18446744073709551615 76 /*  Note that we take it "backwards" and put the highest-order term in    */ 60 3 60 79 18446744073709551615 76 /*  the lowest-order bit.  The X^32 term is "implied"; the LSB is the     */ 61 3 61 79 18446744073709551615 76 /*  X^31 term, etc.  The X^0 term (usually shown as "+1") results in      */ 62 3 62 79 18446744073709551615 76 /*  the MSB being 1.                                                      */ 63 3 63 79 18446744073709551615 76 /*                                                                        */ 64 3 64 79 18446744073709551615 76 /*  Note that the usual hardware shift register implementation, which     */ 65 3 65 79 18446744073709551615 76 /*  is what we're using (we're merely optimizing it by doing eight-bit    */ 66 3 66 79 18446744073709551615 76 /*  chunks at a time) shifts bits into the lowest-order term.  In our     */ 67 3 67 79 18446744073709551615 76 /*  implementation, that means shifting towards the right.  Why do we     */ 68 3 68 79 18446744073709551615 76 /*  do it this way?  Because the calculated CRC must be transmitted in    */ 69 3 69 79 18446744073709551615 76 /*  order from highest-order term to lowest-order term.  UARTs transmit   */ 70 3 70 79 18446744073709551615 76 /*  characters in order from LSB to MSB.  By storing the CRC this way,    */ 71 3 71 79 18446744073709551615 76 /*  we hand it to the UART in the order low-byte to high-byte; the UART   */ 72 3 72 79 18446744073709551615 76 /*  sends each low-bit to hight-bit; and the result is transmission bit   */ 73 3 73 79 18446744073709551615 76 /*  by bit from highest- to lowest-order term without requiring any bit   */ 74 3 74 79 18446744073709551615 76 /*  shuffling on our part.  Reception works similarly.                    */ 75 3 75 79 18446744073709551615 76 /*                                                                        */ 76 3 76 79 18446744073709551615 76 /*  The feedback terms table consists of 256, 32-bit entries.  Notes:     */ 77 3 77 79 18446744073709551615 76 /*                                                                        */ 78 3 78 79 18446744073709551615 76 /*      The table can be generated at runtime if desired; code to do so   */ 79 3 79 79 18446744073709551615 76 /*      is shown later.  It might not be obvious, but the feedback        */ 80 3 80 79 18446744073709551615 76 /*      terms simply represent the results of eight shift/xor opera-      */ 81 3 81 79 18446744073709551615 76 /*      tions for all combinations of data and CRC register values.       */ 82 3 82 79 18446744073709551615 76 /*                                                                        */ 83 3 83 79 18446744073709551615 76 /*      The values must be right-shifted by eight bits by the "updcrc"    */ 84 3 84 79 18446744073709551615 76 /*      logic; the shift must be unsigned (bring in zeroes).  On some     */ 85 3 85 79 18446744073709551615 76 /*      hardware you could probably optimize the shift in assembler by    */ 86 3 86 79 18446744073709551615 76 /*      using byte-swap instructions.                                     */ 87 3 87 79 18446744073709551615 76 /*      polynomial $edb88320                                              */ 88 3 88 79 18446744073709551615 76 /*                                                                        */ 89 3 89 79 18446744073709551615 76 /*  --------------------------------------------------------------------  */ 90 3 90 79 18446744073709551615 6 static 92 1 92 7 18446744073709551615 8 unsigned 92 8 92 16 18446744073709551615 4 long 92 17 92 21 18446744073709551615 9 crc32_tab 92 22 92 31 18 1 [ 92 31 92 32 18446744073709551615 1 ] 92 32 92 33 18446744073709551615 1 = 92 34 92 35 18446744073709551615 1 { 92 36 92 37 18446744073709551615 11 0x00000000L 93 7 93 18 18446744073709551615 1 , 93 18 93 19 18446744073709551615 11 0x77073096L 93 20 93 31 18446744073709551615 1 , 93 31 93 32 18446744073709551615 11 0xee0e612cL 93 33 93 44 18446744073709551615 1 , 93 44 93 45 18446744073709551615 11 0x990951baL 93 46 93 57 18446744073709551615 1 , 93 57 93 58 18446744073709551615 11 0x076dc419L 93 59 93 70 18446744073709551615 1 , 93 70 93 71 18446744073709551615 11 0x706af48fL 94 7 94 18 18446744073709551615 1 , 94 18 94 19 18446744073709551615 11 0xe963a535L 94 20 94 31 18446744073709551615 1 , 94 31 94 32 18446744073709551615 11 0x9e6495a3L 94 33 94 44 18446744073709551615 1 , 94 44 94 45 18446744073709551615 11 0x0edb8832L 94 46 94 57 18446744073709551615 1 , 94 57 94 58 18446744073709551615 11 0x79dcb8a4L 94 59 94 70 18446744073709551615 1 , 94 70 94 71 18446744073709551615 11 0xe0d5e91eL 95 7 95 18 18446744073709551615 1 , 95 18 95 19 18446744073709551615 11 0x97d2d988L 95 20 95 31 18446744073709551615 1 , 95 31 95 32 18446744073709551615 11 0x09b64c2bL 95 33 95 44 18446744073709551615 1 , 95 44 95 45 18446744073709551615 11 0x7eb17cbdL 95 46 95 57 18446744073709551615 1 , 95 57 95 58 18446744073709551615 11 0xe7b82d07L 95 59 95 70 18446744073709551615 1 , 95 70 95 71 18446744073709551615 11 0x90bf1d91L 96 7 96 18 18446744073709551615 1 , 96 18 96 19 18446744073709551615 11 0x1db71064L 96 20 96 31 18446744073709551615 1 , 96 31 96 32 18446744073709551615 11 0x6ab020f2L 96 33 96 44 18446744073709551615 1 , 96 44 96 45 18446744073709551615 11 0xf3b97148L 96 46 96 57 18446744073709551615 1 , 96 57 96 58 18446744073709551615 11 0x84be41deL 96 59 96 70 18446744073709551615 1 , 96 70 96 71 18446744073709551615 11 0x1adad47dL 97 7 97 18 18446744073709551615 1 , 97 18 97 19 18446744073709551615 11 0x6ddde4ebL 97 20 97 31 18446744073709551615 1 , 97 31 97 32 18446744073709551615 11 0xf4d4b551L 97 33 97 44 18446744073709551615 1 , 97 44 97 45 18446744073709551615 11 0x83d385c7L 97 46 97 57 18446744073709551615 1 , 97 57 97 58 18446744073709551615 11 0x136c9856L 97 59 97 70 18446744073709551615 1 , 97 70 97 71 18446744073709551615 11 0x646ba8c0L 98 7 98 18 18446744073709551615 1 , 98 18 98 19 18446744073709551615 11 0xfd62f97aL 98 20 98 31 18446744073709551615 1 , 98 31 98 32 18446744073709551615 11 0x8a65c9ecL 98 33 98 44 18446744073709551615 1 , 98 44 98 45 18446744073709551615 11 0x14015c4fL 98 46 98 57 18446744073709551615 1 , 98 57 98 58 18446744073709551615 11 0x63066cd9L 98 59 98 70 18446744073709551615 1 , 98 70 98 71 18446744073709551615 11 0xfa0f3d63L 99 7 99 18 18446744073709551615 1 , 99 18 99 19 18446744073709551615 11 0x8d080df5L 99 20 99 31 18446744073709551615 1 , 99 31 99 32 18446744073709551615 11 0x3b6e20c8L 99 33 99 44 18446744073709551615 1 , 99 44 99 45 18446744073709551615 11 0x4c69105eL 99 46 99 57 18446744073709551615 1 , 99 57 99 58 18446744073709551615 11 0xd56041e4L 99 59 99 70 18446744073709551615 1 , 99 70 99 71 18446744073709551615 11 0xa2677172L 100 7 100 18 18446744073709551615 1 , 100 18 100 19 18446744073709551615 11 0x3c03e4d1L 100 20 100 31 18446744073709551615 1 , 100 31 100 32 18446744073709551615 11 0x4b04d447L 100 33 100 44 18446744073709551615 1 , 100 44 100 45 18446744073709551615 11 0xd20d85fdL 100 46 100 57 18446744073709551615 1 , 100 57 100 58 18446744073709551615 11 0xa50ab56bL 100 59 100 70 18446744073709551615 1 , 100 70 100 71 18446744073709551615 11 0x35b5a8faL 101 7 101 18 18446744073709551615 1 , 101 18 101 19 18446744073709551615 11 0x42b2986cL 101 20 101 31 18446744073709551615 1 , 101 31 101 32 18446744073709551615 11 0xdbbbc9d6L 101 33 101 44 18446744073709551615 1 , 101 44 101 45 18446744073709551615 11 0xacbcf940L 101 46 101 57 18446744073709551615 1 , 101 57 101 58 18446744073709551615 11 0x32d86ce3L 101 59 101 70 18446744073709551615 1 , 101 70 101 71 18446744073709551615 11 0x45df5c75L 102 7 102 18 18446744073709551615 1 , 102 18 102 19 18446744073709551615 11 0xdcd60dcfL 102 20 102 31 18446744073709551615 1 , 102 31 102 32 18446744073709551615 11 0xabd13d59L 102 33 102 44 18446744073709551615 1 , 102 44 102 45 18446744073709551615 11 0x26d930acL 102 46 102 57 18446744073709551615 1 , 102 57 102 58 18446744073709551615 11 0x51de003aL 102 59 102 70 18446744073709551615 1 , 102 70 102 71 18446744073709551615 11 0xc8d75180L 103 7 103 18 18446744073709551615 1 , 103 18 103 19 18446744073709551615 11 0xbfd06116L 103 20 103 31 18446744073709551615 1 , 103 31 103 32 18446744073709551615 11 0x21b4f4b5L 103 33 103 44 18446744073709551615 1 , 103 44 103 45 18446744073709551615 11 0x56b3c423L 103 46 103 57 18446744073709551615 1 , 103 57 103 58 18446744073709551615 11 0xcfba9599L 103 59 103 70 18446744073709551615 1 , 103 70 103 71 18446744073709551615 11 0xb8bda50fL 104 7 104 18 18446744073709551615 1 , 104 18 104 19 18446744073709551615 11 0x2802b89eL 104 20 104 31 18446744073709551615 1 , 104 31 104 32 18446744073709551615 11 0x5f058808L 104 33 104 44 18446744073709551615 1 , 104 44 104 45 18446744073709551615 11 0xc60cd9b2L 104 46 104 57 18446744073709551615 1 , 104 57 104 58 18446744073709551615 11 0xb10be924L 104 59 104 70 18446744073709551615 1 , 104 70 104 71 18446744073709551615 11 0x2f6f7c87L 105 7 105 18 18446744073709551615 1 , 105 18 105 19 18446744073709551615 11 0x58684c11L 105 20 105 31 18446744073709551615 1 , 105 31 105 32 18446744073709551615 11 0xc1611dabL 105 33 105 44 18446744073709551615 1 , 105 44 105 45 18446744073709551615 11 0xb6662d3dL 105 46 105 57 18446744073709551615 1 , 105 57 105 58 18446744073709551615 11 0x76dc4190L 105 59 105 70 18446744073709551615 1 , 105 70 105 71 18446744073709551615 11 0x01db7106L 106 7 106 18 18446744073709551615 1 , 106 18 106 19 18446744073709551615 11 0x98d220bcL 106 20 106 31 18446744073709551615 1 , 106 31 106 32 18446744073709551615 11 0xefd5102aL 106 33 106 44 18446744073709551615 1 , 106 44 106 45 18446744073709551615 11 0x71b18589L 106 46 106 57 18446744073709551615 1 , 106 57 106 58 18446744073709551615 11 0x06b6b51fL 106 59 106 70 18446744073709551615 1 , 106 70 106 71 18446744073709551615 11 0x9fbfe4a5L 107 7 107 18 18446744073709551615 1 , 107 18 107 19 18446744073709551615 11 0xe8b8d433L 107 20 107 31 18446744073709551615 1 , 107 31 107 32 18446744073709551615 11 0x7807c9a2L 107 33 107 44 18446744073709551615 1 , 107 44 107 45 18446744073709551615 11 0x0f00f934L 107 46 107 57 18446744073709551615 1 , 107 57 107 58 18446744073709551615 11 0x9609a88eL 107 59 107 70 18446744073709551615 1 , 107 70 107 71 18446744073709551615 11 0xe10e9818L 108 7 108 18 18446744073709551615 1 , 108 18 108 19 18446744073709551615 11 0x7f6a0dbbL 108 20 108 31 18446744073709551615 1 , 108 31 108 32 18446744073709551615 11 0x086d3d2dL 108 33 108 44 18446744073709551615 1 , 108 44 108 45 18446744073709551615 11 0x91646c97L 108 46 108 57 18446744073709551615 1 , 108 57 108 58 18446744073709551615 11 0xe6635c01L 108 59 108 70 18446744073709551615 1 , 108 70 108 71 18446744073709551615 11 0x6b6b51f4L 109 7 109 18 18446744073709551615 1 , 109 18 109 19 18446744073709551615 11 0x1c6c6162L 109 20 109 31 18446744073709551615 1 , 109 31 109 32 18446744073709551615 11 0x856530d8L 109 33 109 44 18446744073709551615 1 , 109 44 109 45 18446744073709551615 11 0xf262004eL 109 46 109 57 18446744073709551615 1 , 109 57 109 58 18446744073709551615 11 0x6c0695edL 109 59 109 70 18446744073709551615 1 , 109 70 109 71 18446744073709551615 11 0x1b01a57bL 110 7 110 18 18446744073709551615 1 , 110 18 110 19 18446744073709551615 11 0x8208f4c1L 110 20 110 31 18446744073709551615 1 , 110 31 110 32 18446744073709551615 11 0xf50fc457L 110 33 110 44 18446744073709551615 1 , 110 44 110 45 18446744073709551615 11 0x65b0d9c6L 110 46 110 57 18446744073709551615 1 , 110 57 110 58 18446744073709551615 11 0x12b7e950L 110 59 110 70 18446744073709551615 1 , 110 70 110 71 18446744073709551615 11 0x8bbeb8eaL 111 7 111 18 18446744073709551615 1 , 111 18 111 19 18446744073709551615 11 0xfcb9887cL 111 20 111 31 18446744073709551615 1 , 111 31 111 32 18446744073709551615 11 0x62dd1ddfL 111 33 111 44 18446744073709551615 1 , 111 44 111 45 18446744073709551615 11 0x15da2d49L 111 46 111 57 18446744073709551615 1 , 111 57 111 58 18446744073709551615 11 0x8cd37cf3L 111 59 111 70 18446744073709551615 1 , 111 70 111 71 18446744073709551615 11 0xfbd44c65L 112 7 112 18 18446744073709551615 1 , 112 18 112 19 18446744073709551615 11 0x4db26158L 112 20 112 31 18446744073709551615 1 , 112 31 112 32 18446744073709551615 11 0x3ab551ceL 112 33 112 44 18446744073709551615 1 , 112 44 112 45 18446744073709551615 11 0xa3bc0074L 112 46 112 57 18446744073709551615 1 , 112 57 112 58 18446744073709551615 11 0xd4bb30e2L 112 59 112 70 18446744073709551615 1 , 112 70 112 71 18446744073709551615 11 0x4adfa541L 113 7 113 18 18446744073709551615 1 , 113 18 113 19 18446744073709551615 11 0x3dd895d7L 113 20 113 31 18446744073709551615 1 , 113 31 113 32 18446744073709551615 11 0xa4d1c46dL 113 33 113 44 18446744073709551615 1 , 113 44 113 45 18446744073709551615 11 0xd3d6f4fbL 113 46 113 57 18446744073709551615 1 , 113 57 113 58 18446744073709551615 11 0x4369e96aL 113 59 113 70 18446744073709551615 1 , 113 70 113 71 18446744073709551615 11 0x346ed9fcL 114 7 114 18 18446744073709551615 1 , 114 18 114 19 18446744073709551615 11 0xad678846L 114 20 114 31 18446744073709551615 1 , 114 31 114 32 18446744073709551615 11 0xda60b8d0L 114 33 114 44 18446744073709551615 1 , 114 44 114 45 18446744073709551615 11 0x44042d73L 114 46 114 57 18446744073709551615 1 , 114 57 114 58 18446744073709551615 11 0x33031de5L 114 59 114 70 18446744073709551615 1 , 114 70 114 71 18446744073709551615 11 0xaa0a4c5fL 115 7 115 18 18446744073709551615 1 , 115 18 115 19 18446744073709551615 11 0xdd0d7cc9L 115 20 115 31 18446744073709551615 1 , 115 31 115 32 18446744073709551615 11 0x5005713cL 115 33 115 44 18446744073709551615 1 , 115 44 115 45 18446744073709551615 11 0x270241aaL 115 46 115 57 18446744073709551615 1 , 115 57 115 58 18446744073709551615 11 0xbe0b1010L 115 59 115 70 18446744073709551615 1 , 115 70 115 71 18446744073709551615 11 0xc90c2086L 116 7 116 18 18446744073709551615 1 , 116 18 116 19 18446744073709551615 11 0x5768b525L 116 20 116 31 18446744073709551615 1 , 116 31 116 32 18446744073709551615 11 0x206f85b3L 116 33 116 44 18446744073709551615 1 , 116 44 116 45 18446744073709551615 11 0xb966d409L 116 46 116 57 18446744073709551615 1 , 116 57 116 58 18446744073709551615 11 0xce61e49fL 116 59 116 70 18446744073709551615 1 , 116 70 116 71 18446744073709551615 11 0x5edef90eL 117 7 117 18 18446744073709551615 1 , 117 18 117 19 18446744073709551615 11 0x29d9c998L 117 20 117 31 18446744073709551615 1 , 117 31 117 32 18446744073709551615 11 0xb0d09822L 117 33 117 44 18446744073709551615 1 , 117 44 117 45 18446744073709551615 11 0xc7d7a8b4L 117 46 117 57 18446744073709551615 1 , 117 57 117 58 18446744073709551615 11 0x59b33d17L 117 59 117 70 18446744073709551615 1 , 117 70 117 71 18446744073709551615 11 0x2eb40d81L 118 7 118 18 18446744073709551615 1 , 118 18 118 19 18446744073709551615 11 0xb7bd5c3bL 118 20 118 31 18446744073709551615 1 , 118 31 118 32 18446744073709551615 11 0xc0ba6cadL 118 33 118 44 18446744073709551615 1 , 118 44 118 45 18446744073709551615 11 0xedb88320L 118 46 118 57 18446744073709551615 1 , 118 57 118 58 18446744073709551615 11 0x9abfb3b6L 118 59 118 70 18446744073709551615 1 , 118 70 118 71 18446744073709551615 11 0x03b6e20cL 119 7 119 18 18446744073709551615 1 , 119 18 119 19 18446744073709551615 11 0x74b1d29aL 119 20 119 31 18446744073709551615 1 , 119 31 119 32 18446744073709551615 11 0xead54739L 119 33 119 44 18446744073709551615 1 , 119 44 119 45 18446744073709551615 11 0x9dd277afL 119 46 119 57 18446744073709551615 1 , 119 57 119 58 18446744073709551615 11 0x04db2615L 119 59 119 70 18446744073709551615 1 , 119 70 119 71 18446744073709551615 11 0x73dc1683L 120 7 120 18 18446744073709551615 1 , 120 18 120 19 18446744073709551615 11 0xe3630b12L 120 20 120 31 18446744073709551615 1 , 120 31 120 32 18446744073709551615 11 0x94643b84L 120 33 120 44 18446744073709551615 1 , 120 44 120 45 18446744073709551615 11 0x0d6d6a3eL 120 46 120 57 18446744073709551615 1 , 120 57 120 58 18446744073709551615 11 0x7a6a5aa8L 120 59 120 70 18446744073709551615 1 , 120 70 120 71 18446744073709551615 11 0xe40ecf0bL 121 7 121 18 18446744073709551615 1 , 121 18 121 19 18446744073709551615 11 0x9309ff9dL 121 20 121 31 18446744073709551615 1 , 121 31 121 32 18446744073709551615 11 0x0a00ae27L 121 33 121 44 18446744073709551615 1 , 121 44 121 45 18446744073709551615 11 0x7d079eb1L 121 46 121 57 18446744073709551615 1 , 121 57 121 58 18446744073709551615 11 0xf00f9344L 121 59 121 70 18446744073709551615 1 , 121 70 121 71 18446744073709551615 11 0x8708a3d2L 122 7 122 18 18446744073709551615 1 , 122 18 122 19 18446744073709551615 11 0x1e01f268L 122 20 122 31 18446744073709551615 1 , 122 31 122 32 18446744073709551615 11 0x6906c2feL 122 33 122 44 18446744073709551615 1 , 122 44 122 45 18446744073709551615 11 0xf762575dL 122 46 122 57 18446744073709551615 1 , 122 57 122 58 18446744073709551615 11 0x806567cbL 122 59 122 70 18446744073709551615 1 , 122 70 122 71 18446744073709551615 11 0x196c3671L 123 7 123 18 18446744073709551615 1 , 123 18 123 19 18446744073709551615 11 0x6e6b06e7L 123 20 123 31 18446744073709551615 1 , 123 31 123 32 18446744073709551615 11 0xfed41b76L 123 33 123 44 18446744073709551615 1 , 123 44 123 45 18446744073709551615 11 0x89d32be0L 123 46 123 57 18446744073709551615 1 , 123 57 123 58 18446744073709551615 11 0x10da7a5aL 123 59 123 70 18446744073709551615 1 , 123 70 123 71 18446744073709551615 11 0x67dd4accL 124 7 124 18 18446744073709551615 1 , 124 18 124 19 18446744073709551615 11 0xf9b9df6fL 124 20 124 31 18446744073709551615 1 , 124 31 124 32 18446744073709551615 11 0x8ebeeff9L 124 33 124 44 18446744073709551615 1 , 124 44 124 45 18446744073709551615 11 0x17b7be43L 124 46 124 57 18446744073709551615 1 , 124 57 124 58 18446744073709551615 11 0x60b08ed5L 124 59 124 70 18446744073709551615 1 , 124 70 124 71 18446744073709551615 11 0xd6d6a3e8L 125 7 125 18 18446744073709551615 1 , 125 18 125 19 18446744073709551615 11 0xa1d1937eL 125 20 125 31 18446744073709551615 1 , 125 31 125 32 18446744073709551615 11 0x38d8c2c4L 125 33 125 44 18446744073709551615 1 , 125 44 125 45 18446744073709551615 11 0x4fdff252L 125 46 125 57 18446744073709551615 1 , 125 57 125 58 18446744073709551615 11 0xd1bb67f1L 125 59 125 70 18446744073709551615 1 , 125 70 125 71 18446744073709551615 11 0xa6bc5767L 126 7 126 18 18446744073709551615 1 , 126 18 126 19 18446744073709551615 11 0x3fb506ddL 126 20 126 31 18446744073709551615 1 , 126 31 126 32 18446744073709551615 11 0x48b2364bL 126 33 126 44 18446744073709551615 1 , 126 44 126 45 18446744073709551615 11 0xd80d2bdaL 126 46 126 57 18446744073709551615 1 , 126 57 126 58 18446744073709551615 11 0xaf0a1b4cL 126 59 126 70 18446744073709551615 1 , 126 70 126 71 18446744073709551615 11 0x36034af6L 127 7 127 18 18446744073709551615 1 , 127 18 127 19 18446744073709551615 11 0x41047a60L 127 20 127 31 18446744073709551615 1 , 127 31 127 32 18446744073709551615 11 0xdf60efc3L 127 33 127 44 18446744073709551615 1 , 127 44 127 45 18446744073709551615 11 0xa867df55L 127 46 127 57 18446744073709551615 1 , 127 57 127 58 18446744073709551615 11 0x316e8eefL 127 59 127 70 18446744073709551615 1 , 127 70 127 71 18446744073709551615 11 0x4669be79L 128 7 128 18 18446744073709551615 1 , 128 18 128 19 18446744073709551615 11 0xcb61b38cL 128 20 128 31 18446744073709551615 1 , 128 31 128 32 18446744073709551615 11 0xbc66831aL 128 33 128 44 18446744073709551615 1 , 128 44 128 45 18446744073709551615 11 0x256fd2a0L 128 46 128 57 18446744073709551615 1 , 128 57 128 58 18446744073709551615 11 0x5268e236L 128 59 128 70 18446744073709551615 1 , 128 70 128 71 18446744073709551615 11 0xcc0c7795L 129 7 129 18 18446744073709551615 1 , 129 18 129 19 18446744073709551615 11 0xbb0b4703L 129 20 129 31 18446744073709551615 1 , 129 31 129 32 18446744073709551615 11 0x220216b9L 129 33 129 44 18446744073709551615 1 , 129 44 129 45 18446744073709551615 11 0x5505262fL 129 46 129 57 18446744073709551615 1 , 129 57 129 58 18446744073709551615 11 0xc5ba3bbeL 129 59 129 70 18446744073709551615 1 , 129 70 129 71 18446744073709551615 11 0xb2bd0b28L 130 7 130 18 18446744073709551615 1 , 130 18 130 19 18446744073709551615 11 0x2bb45a92L 130 20 130 31 18446744073709551615 1 , 130 31 130 32 18446744073709551615 11 0x5cb36a04L 130 33 130 44 18446744073709551615 1 , 130 44 130 45 18446744073709551615 11 0xc2d7ffa7L 130 46 130 57 18446744073709551615 1 , 130 57 130 58 18446744073709551615 11 0xb5d0cf31L 130 59 130 70 18446744073709551615 1 , 130 70 130 71 18446744073709551615 11 0x2cd99e8bL 131 7 131 18 18446744073709551615 1 , 131 18 131 19 18446744073709551615 11 0x5bdeae1dL 131 20 131 31 18446744073709551615 1 , 131 31 131 32 18446744073709551615 11 0x9b64c2b0L 131 33 131 44 18446744073709551615 1 , 131 44 131 45 18446744073709551615 11 0xec63f226L 131 46 131 57 18446744073709551615 1 , 131 57 131 58 18446744073709551615 11 0x756aa39cL 131 59 131 70 18446744073709551615 1 , 131 70 131 71 18446744073709551615 11 0x026d930aL 132 7 132 18 18446744073709551615 1 , 132 18 132 19 18446744073709551615 11 0x9c0906a9L 132 20 132 31 18446744073709551615 1 , 132 31 132 32 18446744073709551615 11 0xeb0e363fL 132 33 132 44 18446744073709551615 1 , 132 44 132 45 18446744073709551615 11 0x72076785L 132 46 132 57 18446744073709551615 1 , 132 57 132 58 18446744073709551615 11 0x05005713L 132 59 132 70 18446744073709551615 1 , 132 70 132 71 18446744073709551615 11 0x95bf4a82L 133 7 133 18 18446744073709551615 1 , 133 18 133 19 18446744073709551615 11 0xe2b87a14L 133 20 133 31 18446744073709551615 1 , 133 31 133 32 18446744073709551615 11 0x7bb12baeL 133 33 133 44 18446744073709551615 1 , 133 44 133 45 18446744073709551615 11 0x0cb61b38L 133 46 133 57 18446744073709551615 1 , 133 57 133 58 18446744073709551615 11 0x92d28e9bL 133 59 133 70 18446744073709551615 1 , 133 70 133 71 18446744073709551615 11 0xe5d5be0dL 134 7 134 18 18446744073709551615 1 , 134 18 134 19 18446744073709551615 11 0x7cdcefb7L 134 20 134 31 18446744073709551615 1 , 134 31 134 32 18446744073709551615 11 0x0bdbdf21L 134 33 134 44 18446744073709551615 1 , 134 44 134 45 18446744073709551615 11 0x86d3d2d4L 134 46 134 57 18446744073709551615 1 , 134 57 134 58 18446744073709551615 11 0xf1d4e242L 134 59 134 70 18446744073709551615 1 , 134 70 134 71 18446744073709551615 11 0x68ddb3f8L 135 7 135 18 18446744073709551615 1 , 135 18 135 19 18446744073709551615 11 0x1fda836eL 135 20 135 31 18446744073709551615 1 , 135 31 135 32 18446744073709551615 11 0x81be16cdL 135 33 135 44 18446744073709551615 1 , 135 44 135 45 18446744073709551615 11 0xf6b9265bL 135 46 135 57 18446744073709551615 1 , 135 57 135 58 18446744073709551615 11 0x6fb077e1L 135 59 135 70 18446744073709551615 1 , 135 70 135 71 18446744073709551615 11 0x18b74777L 136 7 136 18 18446744073709551615 1 , 136 18 136 19 18446744073709551615 11 0x88085ae6L 136 20 136 31 18446744073709551615 1 , 136 31 136 32 18446744073709551615 11 0xff0f6a70L 136 33 136 44 18446744073709551615 1 , 136 44 136 45 18446744073709551615 11 0x66063bcaL 136 46 136 57 18446744073709551615 1 , 136 57 136 58 18446744073709551615 11 0x11010b5cL 136 59 136 70 18446744073709551615 1 , 136 70 136 71 18446744073709551615 11 0x8f659effL 137 7 137 18 18446744073709551615 1 , 137 18 137 19 18446744073709551615 11 0xf862ae69L 137 20 137 31 18446744073709551615 1 , 137 31 137 32 18446744073709551615 11 0x616bffd3L 137 33 137 44 18446744073709551615 1 , 137 44 137 45 18446744073709551615 11 0x166ccf45L 137 46 137 57 18446744073709551615 1 , 137 57 137 58 18446744073709551615 11 0xa00ae278L 137 59 137 70 18446744073709551615 1 , 137 70 137 71 18446744073709551615 11 0xd70dd2eeL 138 7 138 18 18446744073709551615 1 , 138 18 138 19 18446744073709551615 11 0x4e048354L 138 20 138 31 18446744073709551615 1 , 138 31 138 32 18446744073709551615 11 0x3903b3c2L 138 33 138 44 18446744073709551615 1 , 138 44 138 45 18446744073709551615 11 0xa7672661L 138 46 138 57 18446744073709551615 1 , 138 57 138 58 18446744073709551615 11 0xd06016f7L 138 59 138 70 18446744073709551615 1 , 138 70 138 71 18446744073709551615 11 0x4969474dL 139 7 139 18 18446744073709551615 1 , 139 18 139 19 18446744073709551615 11 0x3e6e77dbL 139 20 139 31 18446744073709551615 1 , 139 31 139 32 18446744073709551615 11 0xaed16a4aL 139 33 139 44 18446744073709551615 1 , 139 44 139 45 18446744073709551615 11 0xd9d65adcL 139 46 139 57 18446744073709551615 1 , 139 57 139 58 18446744073709551615 11 0x40df0b66L 139 59 139 70 18446744073709551615 1 , 139 70 139 71 18446744073709551615 11 0x37d83bf0L 140 7 140 18 18446744073709551615 1 , 140 18 140 19 18446744073709551615 11 0xa9bcae53L 140 20 140 31 18446744073709551615 1 , 140 31 140 32 18446744073709551615 11 0xdebb9ec5L 140 33 140 44 18446744073709551615 1 , 140 44 140 45 18446744073709551615 11 0x47b2cf7fL 140 46 140 57 18446744073709551615 1 , 140 57 140 58 18446744073709551615 11 0x30b5ffe9L 140 59 140 70 18446744073709551615 1 , 140 70 140 71 18446744073709551615 11 0xbdbdf21cL 141 7 141 18 18446744073709551615 1 , 141 18 141 19 18446744073709551615 11 0xcabac28aL 141 20 141 31 18446744073709551615 1 , 141 31 141 32 18446744073709551615 11 0x53b39330L 141 33 141 44 18446744073709551615 1 , 141 44 141 45 18446744073709551615 11 0x24b4a3a6L 141 46 141 57 18446744073709551615 1 , 141 57 141 58 18446744073709551615 11 0xbad03605L 141 59 141 70 18446744073709551615 1 , 141 70 141 71 18446744073709551615 11 0xcdd70693L 142 7 142 18 18446744073709551615 1 , 142 18 142 19 18446744073709551615 11 0x54de5729L 142 20 142 31 18446744073709551615 1 , 142 31 142 32 18446744073709551615 11 0x23d967bfL 142 33 142 44 18446744073709551615 1 , 142 44 142 45 18446744073709551615 11 0xb3667a2eL 142 46 142 57 18446744073709551615 1 , 142 57 142 58 18446744073709551615 11 0xc4614ab8L 142 59 142 70 18446744073709551615 1 , 142 70 142 71 18446744073709551615 11 0x5d681b02L 143 7 143 18 18446744073709551615 1 , 143 18 143 19 18446744073709551615 11 0x2a6f2b94L 143 20 143 31 18446744073709551615 1 , 143 31 143 32 18446744073709551615 11 0xb40bbe37L 143 33 143 44 18446744073709551615 1 , 143 44 143 45 18446744073709551615 11 0xc30c8ea1L 143 46 143 57 18446744073709551615 1 , 143 57 143 58 18446744073709551615 11 0x5a05df1bL 143 59 143 70 18446744073709551615 1 , 143 70 143 71 18446744073709551615 11 0x2d02ef8dL 144 7 144 18 18446744073709551615 1 } 145 4 145 5 18446744073709551615 1 ; 145 5 145 6 18446744073709551615 56 /* Return a 32-bit CRC of the contents of the buffer. */ 147 1 147 57 18446744073709551615 8 unsigned 149 1 149 9 18446744073709551615 4 long 149 10 149 14 18446744073709551615 5 crc32 149 15 149 20 19 1 ( 149 20 149 21 19 5 const 149 21 149 26 18446744073709551615 8 unsigned 149 27 149 35 18446744073709551615 4 char 149 36 149 40 18446744073709551615 1 * 149 41 149 42 18446744073709551615 1 s 149 42 149 43 20 1 , 149 43 149 44 19 8 unsigned 149 45 149 53 18446744073709551615 3 int 149 54 149 57 18446744073709551615 3 len 149 58 149 61 21 1 ) 149 61 149 62 19 1 { 150 1 150 2 18446744073709551615 8 unsigned 151 3 151 11 18446744073709551615 3 int 151 12 151 15 18446744073709551615 1 i 151 16 151 17 22 1 ; 151 17 151 18 18446744073709551615 8 unsigned 152 3 152 11 18446744073709551615 4 long 152 12 152 16 18446744073709551615 8 crc32val 152 17 152 25 23 1 ; 152 25 152 26 18446744073709551615 8 crc32val 154 3 154 11 23 1 = 154 12 154 13 18446744073709551615 1 0 154 14 154 15 18446744073709551615 1 ; 154 15 154 16 18446744073709551615 3 for 155 3 155 6 18446744073709551615 1 ( 155 7 155 8 18446744073709551615 1 i 155 8 155 9 22 1 = 155 10 155 11 18446744073709551615 1 0 155 12 155 13 18446744073709551615 1 ; 155 13 155 14 18446744073709551615 1 i 155 16 155 17 22 1 < 155 18 155 19 18446744073709551615 3 len 155 20 155 23 21 1 ; 155 23 155 24 18446744073709551615 1 i 155 26 155 27 22 2 ++ 155 28 155 30 18446744073709551615 1 ) 155 30 155 31 18446744073709551615 1 { 156 5 156 6 18446744073709551615 8 crc32val 157 7 157 15 23 1 = 157 16 157 17 18446744073709551615 9 crc32_tab 158 2 158 11 18 1 [ 158 11 158 12 18446744073709551615 1 ( 158 12 158 13 18446744073709551615 8 crc32val 158 13 158 21 23 1 ^ 158 22 158 23 18446744073709551615 1 s 158 24 158 25 20 1 [ 158 25 158 26 18446744073709551615 1 i 158 26 158 27 22 1 ] 158 27 158 28 18446744073709551615 1 ) 158 28 158 29 18446744073709551615 1 & 158 30 158 31 18446744073709551615 4 0xff 158 32 158 36 18446744073709551615 1 ] 158 36 158 37 18446744073709551615 1 ^ 158 38 158 39 18446744073709551615 1 ( 159 4 159 5 18446744073709551615 8 crc32val 159 5 159 13 23 2 >> 159 14 159 16 18446744073709551615 1 8 159 17 159 18 18446744073709551615 1 ) 159 18 159 19 18446744073709551615 1 ; 159 19 159 20 18446744073709551615 1 } 160 5 160 6 18446744073709551615 6 return 161 3 161 9 18446744073709551615 8 crc32val 161 10 161 18 23 1 ; 161 18 161 19 18446744073709551615 1 } 162 1 162 2 18446744073709551615 39 /*
 * Hashing function for a string
 */ 164 1 166 4 18446744073709551615 8 unsigned 167 1 167 9 18446744073709551615 3 int 167 10 167 13 18446744073709551615 16 hashmap_hash_int 167 14 167 30 24 1 ( 167 30 167 31 24 11 hashmap_map 167 31 167 42 10 1 * 167 43 167 44 18446744073709551615 1 m 167 45 167 46 25 1 , 167 46 167 47 24 4 char 167 48 167 52 18446744073709551615 1 * 167 52 167 53 18446744073709551615 9 keystring 167 54 167 63 26 1 ) 167 63 167 64 24 1 { 167 64 167 65 18446744073709551615 8 unsigned 169 5 169 13 18446744073709551615 4 long 169 14 169 18 18446744073709551615 3 key 169 19 169 22 27 1 = 169 23 169 24 18446744073709551615 5 crc32 169 25 169 30 19 1 ( 169 30 169 31 19 1 ( 169 31 169 32 18446744073709551615 8 unsigned 169 32 169 40 18446744073709551615 4 char 169 41 169 45 18446744073709551615 1 * 169 45 169 46 18446744073709551615 1 ) 169 46 169 47 18446744073709551615 1 ( 169 47 169 48 18446744073709551615 9 keystring 169 48 169 57 26 1 ) 169 57 169 58 18446744073709551615 1 , 169 58 169 59 19 6 strlen 169 60 169 66 28 1 ( 169 66 169 67 28 9 keystring 169 67 169 76 26 1 ) 169 76 169 77 28 1 ) 169 77 169 78 19 1 ; 169 78 169 79 18446744073709551615 41 /* Robert Jenkins' 32 bit Mix Function */ 171 2 171 43 18446744073709551615 3 key 172 2 172 5 27 2 += 172 6 172 8 18446744073709551615 1 ( 172 9 172 10 18446744073709551615 3 key 172 10 172 13 27 2 << 172 14 172 16 18446744073709551615 2 12 172 17 172 19 18446744073709551615 1 ) 172 19 172 20 18446744073709551615 1 ; 172 20 172 21 18446744073709551615 3 key 173 2 173 5 27 2 ^= 173 6 173 8 18446744073709551615 1 ( 173 9 173 10 18446744073709551615 3 key 173 10 173 13 27 2 >> 173 14 173 16 18446744073709551615 2 22 173 17 173 19 18446744073709551615 1 ) 173 19 173 20 18446744073709551615 1 ; 173 20 173 21 18446744073709551615 3 key 174 2 174 5 27 2 += 174 6 174 8 18446744073709551615 1 ( 174 9 174 10 18446744073709551615 3 key 174 10 174 13 27 2 << 174 14 174 16 18446744073709551615 1 4 174 17 174 18 18446744073709551615 1 ) 174 18 174 19 18446744073709551615 1 ; 174 19 174 20 18446744073709551615 3 key 175 2 175 5 27 2 ^= 175 6 175 8 18446744073709551615 1 ( 175 9 175 10 18446744073709551615 3 key 175 10 175 13 27 2 >> 175 14 175 16 18446744073709551615 1 9 175 17 175 18 18446744073709551615 1 ) 175 18 175 19 18446744073709551615 1 ; 175 19 175 20 18446744073709551615 3 key 176 2 176 5 27 2 += 176 6 176 8 18446744073709551615 1 ( 176 9 176 10 18446744073709551615 3 key 176 10 176 13 27 2 << 176 14 176 16 18446744073709551615 2 10 176 17 176 19 18446744073709551615 1 ) 176 19 176 20 18446744073709551615 1 ; 176 20 176 21 18446744073709551615 3 key 177 2 177 5 27 2 ^= 177 6 177 8 18446744073709551615 1 ( 177 9 177 10 18446744073709551615 3 key 177 10 177 13 27 2 >> 177 14 177 16 18446744073709551615 1 2 177 17 177 18 18446744073709551615 1 ) 177 18 177 19 18446744073709551615 1 ; 177 19 177 20 18446744073709551615 3 key 178 2 178 5 27 2 += 178 6 178 8 18446744073709551615 1 ( 178 9 178 10 18446744073709551615 3 key 178 10 178 13 27 2 << 178 14 178 16 18446744073709551615 1 7 178 17 178 18 18446744073709551615 1 ) 178 18 178 19 18446744073709551615 1 ; 178 19 178 20 18446744073709551615 3 key 179 2 179 5 27 2 ^= 179 6 179 8 18446744073709551615 1 ( 179 9 179 10 18446744073709551615 3 key 179 10 179 13 27 2 >> 179 14 179 16 18446744073709551615 2 12 179 17 179 19 18446744073709551615 1 ) 179 19 179 20 18446744073709551615 1 ; 179 20 179 21 18446744073709551615 35 /* Knuth's Multiplicative Method */ 181 2 181 37 18446744073709551615 3 key 182 2 182 5 27 1 = 182 6 182 7 18446744073709551615 1 ( 182 8 182 9 18446744073709551615 3 key 182 9 182 12 27 2 >> 182 13 182 15 18446744073709551615 1 3 182 16 182 17 18446744073709551615 1 ) 182 17 182 18 18446744073709551615 1 * 182 19 182 20 18446744073709551615 10 2654435761 182 21 182 31 18446744073709551615 1 ; 182 31 182 32 18446744073709551615 6 return 184 2 184 8 18446744073709551615 3 key 184 9 184 12 27 1 % 184 13 184 14 18446744073709551615 1 m 184 15 184 16 25 2 -> 184 16 184 18 18446744073709551615 10 table_size 184 18 184 28 7 1 ; 184 28 184 29 18446744073709551615 1 } 185 1 185 2 18446744073709551615 100 /*
 * Return the integer of the location in data
 * to store the point to the item, or MAP_FULL.
 */ 187 1 190 4 18446744073709551615 3 int 191 1 191 4 18446744073709551615 12 hashmap_hash 191 5 191 17 29 1 ( 191 17 191 18 29 5 map_t 191 18 191 23 11 2 in 191 24 191 26 30 1 , 191 26 191 27 29 4 char 191 28 191 32 18446744073709551615 1 * 191 32 191 33 18446744073709551615 3 key 191 34 191 37 31 1 ) 191 37 191 38 29 1 { 191 38 191 39 18446744073709551615 3 int 192 2 192 5 18446744073709551615 4 curr 192 6 192 10 32 1 ; 192 10 192 11 18446744073709551615 3 int 193 2 193 5 18446744073709551615 1 i 193 6 193 7 33 1 ; 193 7 193 8 18446744073709551615 22 /* Cast the hashmap */ 195 2 195 24 18446744073709551615 11 hashmap_map 196 2 196 13 10 1 * 196 13 196 14 18446744073709551615 1 m 196 15 196 16 34 1 = 196 17 196 18 18446744073709551615 1 ( 196 19 196 20 18446744073709551615 11 hashmap_map 196 20 196 31 10 1 * 196 32 196 33 18446744073709551615 1 ) 196 33 196 34 18446744073709551615 2 in 196 35 196 37 30 1 ; 196 37 196 38 18446744073709551615 33 /* If full, return immediately */ 198 2 198 35 18446744073709551615 2 if 199 2 199 4 18446744073709551615 1 ( 199 4 199 5 18446744073709551615 1 m 199 5 199 6 34 2 -> 199 6 199 8 18446744073709551615 4 size 199 8 199 12 8 2 >= 199 13 199 15 18446744073709551615 1 ( 199 16 199 17 18446744073709551615 1 m 199 17 199 18 34 2 -> 199 18 199 20 18446744073709551615 10 table_size 199 20 199 30 7 1 / 199 30 199 31 18446744073709551615 1 2 199 31 199 32 18446744073709551615 1 ) 199 32 199 33 18446744073709551615 1 ) 199 33 199 34 18446744073709551615 6 return 199 35 199 41 18446744073709551615 8 MAP_FULL 199 42 199 50 18446744073709551615 1 ; 199 50 199 51 18446744073709551615 25 /* Find the best index */ 201 2 201 27 18446744073709551615 4 curr 202 2 202 6 32 1 = 202 7 202 8 18446744073709551615 16 hashmap_hash_int 202 9 202 25 24 1 ( 202 25 202 26 24 1 m 202 26 202 27 34 1 , 202 27 202 28 24 3 key 202 29 202 32 31 1 ) 202 32 202 33 24 1 ; 202 33 202 34 18446744073709551615 20 /* Linear probing */ 204 2 204 22 18446744073709551615 3 for 205 2 205 5 18446744073709551615 1 ( 205 5 205 6 18446744073709551615 1 i 205 6 205 7 33 1 = 205 8 205 9 18446744073709551615 1 0 205 10 205 11 18446744073709551615 1 ; 205 11 205 12 18446744073709551615 1 i 205 13 205 14 33 1 < 205 14 205 15 18446744073709551615 16 MAX_CHAIN_LENGTH 205 16 205 32 18446744073709551615 1 ; 205 32 205 33 18446744073709551615 1 i 205 34 205 35 33 2 ++ 205 35 205 37 18446744073709551615 1 ) 205 37 205 38 18446744073709551615 1 { 205 38 205 39 18446744073709551615 2 if 206 3 206 5 18446744073709551615 1 ( 206 5 206 6 18446744073709551615 1 m 206 6 206 7 34 2 -> 206 7 206 9 18446744073709551615 4 data 206 9 206 13 9 1 [ 206 13 206 14 18446744073709551615 4 curr 206 14 206 18 32 1 ] 206 18 206 19 18446744073709551615 1 . 206 19 206 20 18446744073709551615 6 in_use 206 20 206 26 2 2 == 206 27 206 29 18446744073709551615 1 0 206 30 206 31 18446744073709551615 1 ) 206 31 206 32 18446744073709551615 6 return 207 4 207 10 18446744073709551615 4 curr 207 11 207 15 32 1 ; 207 15 207 16 18446744073709551615 2 if 209 3 209 5 18446744073709551615 1 ( 209 5 209 6 18446744073709551615 1 m 209 6 209 7 34 2 -> 209 7 209 9 18446744073709551615 4 data 209 9 209 13 9 1 [ 209 13 209 14 18446744073709551615 4 curr 209 14 209 18 32 1 ] 209 18 209 19 18446744073709551615 1 . 209 19 209 20 18446744073709551615 6 in_use 209 20 209 26 2 2 == 209 27 209 29 18446744073709551615 1 1 209 30 209 31 18446744073709551615 2 && 209 32 209 34 18446744073709551615 1 ( 209 35 209 36 18446744073709551615 6 strcmp 209 36 209 42 35 1 ( 209 42 209 43 35 1 m 209 43 209 44 34 2 -> 209 44 209 46 18446744073709551615 4 data 209 46 209 50 9 1 [ 209 50 209 51 18446744073709551615 4 curr 209 51 209 55 32 1 ] 209 55 209 56 18446744073709551615 1 . 209 56 209 57 18446744073709551615 3 key 209 57 209 60 1 1 , 209 60 209 61 35 3 key 209 61 209 64 31 1 ) 209 64 209 65 35 2 == 209 65 209 67 18446744073709551615 1 0 209 67 209 68 18446744073709551615 1 ) 209 68 209 69 18446744073709551615 1 ) 209 69 209 70 18446744073709551615 6 return 210 4 210 10 18446744073709551615 4 curr 210 11 210 15 32 1 ; 210 15 210 16 18446744073709551615 4 curr 212 3 212 7 32 1 = 212 8 212 9 18446744073709551615 1 ( 212 10 212 11 18446744073709551615 4 curr 212 11 212 15 32 1 + 212 16 212 17 18446744073709551615 1 1 212 18 212 19 18446744073709551615 1 ) 212 19 212 20 18446744073709551615 1 % 212 21 212 22 18446744073709551615 1 m 212 23 212 24 34 2 -> 212 24 212 26 18446744073709551615 10 table_size 212 26 212 36 7 1 ; 212 36 212 37 18446744073709551615 1 } 213 2 213 3 18446744073709551615 6 return 215 2 215 8 18446744073709551615 8 MAP_FULL 215 9 215 17 18446744073709551615 1 ; 215 17 215 18 18446744073709551615 1 } 216 1 216 2 18446744073709551615 72 /*
 * Doubles the size of the hashmap, and rehashes all the elements
 */ 218 1 220 4 18446744073709551615 3 int 221 1 221 4 18446744073709551615 14 hashmap_rehash 221 5 221 19 36 1 ( 221 19 221 20 36 5 map_t 221 20 221 25 11 2 in 221 26 221 28 37 1 ) 221 28 221 29 36 1 { 221 29 221 30 18446744073709551615 3 int 222 2 222 5 18446744073709551615 1 i 222 6 222 7 38 1 ; 222 7 222 8 18446744073709551615 3 int 223 2 223 5 18446744073709551615 8 old_size 223 6 223 14 39 1 ; 223 14 223 15 18446744073709551615 15 hashmap_element 224 2 224 17 5 1 * 224 17 224 18 18446744073709551615 4 curr 224 19 224 23 40 1 ; 224 23 224 24 18446744073709551615 28 /* Setup the new elements */ 226 2 226 30 18446744073709551615 11 hashmap_map 227 2 227 13 10 1 * 227 14 227 15 18446744073709551615 1 m 227 15 227 16 41 1 = 227 17 227 18 18446744073709551615 1 ( 227 19 227 20 18446744073709551615 11 hashmap_map 227 20 227 31 10 1 * 227 32 227 33 18446744073709551615 1 ) 227 33 227 34 18446744073709551615 2 in 227 35 227 37 37 1 ; 227 37 227 38 18446744073709551615 15 hashmap_element 228 2 228 17 5 1 * 228 17 228 18 18446744073709551615 4 temp 228 19 228 23 42 1 = 228 24 228 25 18446744073709551615 1 ( 228 26 228 27 18446744073709551615 15 hashmap_element 228 27 228 42 5 1 * 228 43 228 44 18446744073709551615 1 ) 228 44 228 45 18446744073709551615 6 calloc 229 3 229 9 16 1 ( 229 9 229 10 16 1 2 229 10 229 11 18446744073709551615 1 * 229 12 229 13 18446744073709551615 1 m 229 14 229 15 41 2 -> 229 15 229 17 18446744073709551615 10 table_size 229 17 229 27 7 1 , 229 27 229 28 16 6 sizeof 229 29 229 35 18446744073709551615 1 ( 229 35 229 36 18446744073709551615 15 hashmap_element 229 36 229 51 5 1 ) 229 51 229 52 18446744073709551615 1 ) 229 52 229 53 16 1 ; 229 53 229 54 18446744073709551615 2 if 230 2 230 4 18446744073709551615 1 ( 230 4 230 5 18446744073709551615 1 ! 230 5 230 6 18446744073709551615 4 temp 230 6 230 10 42 1 ) 230 10 230 11 18446744073709551615 6 return 230 12 230 18 18446744073709551615 8 MAP_OMEM 230 19 230 27 18446744073709551615 1 ; 230 27 230 28 18446744073709551615 22 /* Update the array */ 232 2 232 24 18446744073709551615 4 curr 233 2 233 6 40 1 = 233 7 233 8 18446744073709551615 1 m 233 9 233 10 41 2 -> 233 10 233 12 18446744073709551615 4 data 233 12 233 16 9 1 ; 233 16 233 17 18446744073709551615 1 m 234 2 234 3 41 2 -> 234 3 234 5 18446744073709551615 4 data 234 5 234 9 9 1 = 234 10 234 11 18446744073709551615 4 temp 234 12 234 16 42 1 ; 234 16 234 17 18446744073709551615 21 /* Update the size */ 236 2 236 23 18446744073709551615 8 old_size 237 2 237 10 39 1 = 237 11 237 12 18446744073709551615 1 m 237 13 237 14 41 2 -> 237 14 237 16 18446744073709551615 10 table_size 237 16 237 26 7 1 ; 237 26 237 27 18446744073709551615 1 m 238 2 238 3 41 2 -> 238 3 238 5 18446744073709551615 10 table_size 238 5 238 15 7 1 = 238 16 238 17 18446744073709551615 1 2 238 18 238 19 18446744073709551615 1 * 238 20 238 21 18446744073709551615 1 m 238 22 238 23 41 2 -> 238 23 238 25 18446744073709551615 10 table_size 238 25 238 35 7 1 ; 238 35 238 36 18446744073709551615 1 m 239 2 239 3 41 2 -> 239 3 239 5 18446744073709551615 4 size 239 5 239 9 8 1 = 239 10 239 11 18446744073709551615 1 0 239 12 239 13 18446744073709551615 1 ; 239 13 239 14 18446744073709551615 25 /* Rehash the elements */ 241 2 241 27 18446744073709551615 3 for 242 2 242 5 18446744073709551615 1 ( 242 5 242 6 18446744073709551615 1 i 242 6 242 7 38 1 = 242 8 242 9 18446744073709551615 1 0 242 10 242 11 18446744073709551615 1 ; 242 11 242 12 18446744073709551615 1 i 242 13 242 14 38 1 < 242 15 242 16 18446744073709551615 8 old_size 242 17 242 25 39 1 ; 242 25 242 26 18446744073709551615 1 i 242 27 242 28 38 2 ++ 242 28 242 30 18446744073709551615 1 ) 242 30 242 31 18446744073709551615 1 { 242 31 242 32 18446744073709551615 3 int 243 9 243 12 18446744073709551615 6 status 243 13 243 19 43 1 ; 243 19 243 20 18446744073709551615 2 if 245 9 245 11 18446744073709551615 1 ( 245 12 245 13 18446744073709551615 4 curr 245 13 245 17 40 1 [ 245 17 245 18 18446744073709551615 1 i 245 18 245 19 38 1 ] 245 19 245 20 18446744073709551615 1 . 245 20 245 21 18446744073709551615 6 in_use 245 21 245 27 2 2 == 245 28 245 30 18446744073709551615 1 0 245 31 245 32 18446744073709551615 1 ) 245 32 245 33 18446744073709551615 8 continue 246 13 246 21 18446744073709551615 1 ; 246 21 246 22 18446744073709551615 6 status 248 3 248 9 43 1 = 248 10 248 11 18446744073709551615 11 hashmap_put 248 12 248 23 44 1 ( 248 23 248 24 44 1 m 248 24 248 25 41 1 , 248 25 248 26 44 4 curr 248 27 248 31 40 1 [ 248 31 248 32 18446744073709551615 1 i 248 32 248 33 38 1 ] 248 33 248 34 18446744073709551615 1 . 248 34 248 35 18446744073709551615 3 key 248 35 248 38 1 1 , 248 38 248 39 44 4 curr 248 40 248 44 40 1 [ 248 44 248 45 18446744073709551615 1 i 248 45 248 46 38 1 ] 248 46 248 47 18446744073709551615 1 . 248 47 248 48 18446744073709551615 4 data 248 48 248 52 4 1 ) 248 52 248 53 44 1 ; 248 53 248 54 18446744073709551615 2 if 249 3 249 5 18446744073709551615 1 ( 249 6 249 7 18446744073709551615 6 status 249 7 249 13 43 2 != 249 14 249 16 18446744073709551615 6 MAP_OK 249 17 249 23 18446744073709551615 1 ) 249 23 249 24 18446744073709551615 6 return 250 4 250 10 18446744073709551615 6 status 250 11 250 17 43 1 ; 250 17 250 18 18446744073709551615 1 } 251 2 251 3 18446744073709551615 4 free 253 2 253 6 45 1 ( 253 6 253 7 45 4 curr 253 7 253 11 40 1 ) 253 11 253 12 45 1 ; 253 12 253 13 18446744073709551615 6 return 255 2 255 8 18446744073709551615 6 MAP_OK 255 9 255 15 18446744073709551615 1 ; 255 15 255 16 18446744073709551615 1 } 256 1 256 2 18446744073709551615 52 /*
 * Add a pointer to the hashmap with some key
 */ 258 1 260 4 18446744073709551615 3 int 261 1 261 4 18446744073709551615 11 hashmap_put 261 5 261 16 44 1 ( 261 16 261 17 44 5 map_t 261 17 261 22 11 2 in 261 23 261 25 46 1 , 261 25 261 26 44 4 char 261 27 261 31 18446744073709551615 1 * 261 31 261 32 18446744073709551615 3 key 261 33 261 36 47 1 , 261 36 261 37 44 5 any_t 261 38 261 43 3 5 value 261 44 261 49 48 1 ) 261 49 261 50 44 1 { 261 50 261 51 18446744073709551615 3 int 262 2 262 5 18446744073709551615 5 index 262 6 262 11 49 1 ; 262 11 262 12 18446744073709551615 11 hashmap_map 263 2 263 13 10 1 * 263 13 263 14 18446744073709551615 1 m 263 15 263 16 50 1 ; 263 16 263 17 18446744073709551615 22 /* Cast the hashmap */ 265 2 265 24 18446744073709551615 1 m 266 2 266 3 50 1 = 266 4 266 5 18446744073709551615 1 ( 266 6 266 7 18446744073709551615 11 hashmap_map 266 7 266 18 10 1 * 266 19 266 20 18446744073709551615 1 ) 266 20 266 21 18446744073709551615 2 in 266 22 266 24 46 1 ; 266 24 266 25 18446744073709551615 35 /* Find a place to put our value */ 268 2 268 37 18446744073709551615 5 index 269 2 269 7 49 1 = 269 8 269 9 18446744073709551615 12 hashmap_hash 269 10 269 22 29 1 ( 269 22 269 23 29 2 in 269 23 269 25 46 1 , 269 25 269 26 29 3 key 269 27 269 30 47 1 ) 269 30 269 31 29 1 ; 269 31 269 32 18446744073709551615 5 while 270 2 270 7 18446744073709551615 1 ( 270 7 270 8 18446744073709551615 5 index 270 8 270 13 49 2 == 270 14 270 16 18446744073709551615 8 MAP_FULL 270 17 270 25 18446744073709551615 1 ) 270 25 270 26 18446744073709551615 1 { 270 26 270 27 18446744073709551615 2 if 271 3 271 5 18446744073709551615 1 ( 271 6 271 7 18446744073709551615 14 hashmap_rehash 271 7 271 21 36 1 ( 271 21 271 22 36 2 in 271 22 271 24 46 1 ) 271 24 271 25 36 2 == 271 26 271 28 18446744073709551615 8 MAP_OMEM 271 29 271 37 18446744073709551615 1 ) 271 37 271 38 18446744073709551615 1 { 271 39 271 40 18446744073709551615 6 return 272 4 272 10 18446744073709551615 8 MAP_OMEM 272 11 272 19 18446744073709551615 1 ; 272 19 272 20 18446744073709551615 1 } 273 3 273 4 18446744073709551615 5 index 274 3 274 8 49 1 = 274 9 274 10 18446744073709551615 12 hashmap_hash 274 11 274 23 29 1 ( 274 23 274 24 29 2 in 274 24 274 26 46 1 , 274 26 274 27 29 3 key 274 28 274 31 47 1 ) 274 31 274 32 29 1 ; 274 32 274 33 18446744073709551615 1 } 275 2 275 3 18446744073709551615 18 /* Set the data */ 277 2 277 20 18446744073709551615 1 m 278 2 278 3 50 2 -> 278 3 278 5 18446744073709551615 4 data 278 5 278 9 9 1 [ 278 9 278 10 18446744073709551615 5 index 278 10 278 15 49 1 ] 278 15 278 16 18446744073709551615 1 . 278 16 278 17 18446744073709551615 4 data 278 17 278 21 4 1 = 278 22 278 23 18446744073709551615 5 value 278 24 278 29 48 1 ; 278 29 278 30 18446744073709551615 1 m 279 2 279 3 50 2 -> 279 3 279 5 18446744073709551615 4 data 279 5 279 9 9 1 [ 279 9 279 10 18446744073709551615 5 index 279 10 279 15 49 1 ] 279 15 279 16 18446744073709551615 1 . 279 16 279 17 18446744073709551615 3 key 279 17 279 20 1 1 = 279 21 279 22 18446744073709551615 3 key 279 23 279 26 47 1 ; 279 26 279 27 18446744073709551615 1 m 280 2 280 3 50 2 -> 280 3 280 5 18446744073709551615 4 data 280 5 280 9 9 1 [ 280 9 280 10 18446744073709551615 5 index 280 10 280 15 49 1 ] 280 15 280 16 18446744073709551615 1 . 280 16 280 17 18446744073709551615 6 in_use 280 17 280 23 2 1 = 280 24 280 25 18446744073709551615 1 1 280 26 280 27 18446744073709551615 1 ; 280 27 280 28 18446744073709551615 1 m 281 2 281 3 50 2 -> 281 3 281 5 18446744073709551615 4 size 281 5 281 9 8 2 ++ 281 9 281 11 18446744073709551615 1 ; 281 11 281 12 18446744073709551615 6 return 283 2 283 8 18446744073709551615 6 MAP_OK 283 9 283 15 18446744073709551615 1 ; 283 15 283 16 18446744073709551615 1 } 284 1 284 2 18446744073709551615 56 /*
 * Get your pointer out of the hashmap with a key
 */ 286 1 288 4 18446744073709551615 3 int 289 1 289 4 18446744073709551615 11 hashmap_get 289 5 289 16 51 1 ( 289 16 289 17 51 5 map_t 289 17 289 22 11 2 in 289 23 289 25 52 1 , 289 25 289 26 51 4 char 289 27 289 31 18446744073709551615 1 * 289 31 289 32 18446744073709551615 3 key 289 33 289 36 53 1 , 289 36 289 37 51 5 any_t 289 38 289 43 3 1 * 289 44 289 45 18446744073709551615 3 arg 289 45 289 48 54 1 ) 289 48 289 49 51 1 { 289 49 289 50 18446744073709551615 3 int 290 2 290 5 18446744073709551615 4 curr 290 6 290 10 55 1 ; 290 10 290 11 18446744073709551615 3 int 291 2 291 5 18446744073709551615 1 i 291 6 291 7 56 1 ; 291 7 291 8 18446744073709551615 11 hashmap_map 292 2 292 13 10 1 * 292 13 292 14 18446744073709551615 1 m 292 15 292 16 57 1 ; 292 16 292 17 18446744073709551615 22 /* Cast the hashmap */ 294 2 294 24 18446744073709551615 1 m 295 2 295 3 57 1 = 295 4 295 5 18446744073709551615 1 ( 295 6 295 7 18446744073709551615 11 hashmap_map 295 7 295 18 10 1 * 295 19 295 20 18446744073709551615 1 ) 295 20 295 21 18446744073709551615 2 in 295 22 295 24 52 1 ; 295 24 295 25 18446744073709551615 24 /* Find data location */ 297 2 297 26 18446744073709551615 4 curr 298 2 298 6 55 1 = 298 7 298 8 18446744073709551615 16 hashmap_hash_int 298 9 298 25 24 1 ( 298 25 298 26 24 1 m 298 26 298 27 57 1 , 298 27 298 28 24 3 key 298 29 298 32 53 1 ) 298 32 298 33 24 1 ; 298 33 298 34 18446744073709551615 34 /* Linear probing, if necessary */ 300 2 300 36 18446744073709551615 3 for 301 2 301 5 18446744073709551615 1 ( 301 5 301 6 18446744073709551615 1 i 301 6 301 7 56 1 = 301 8 301 9 18446744073709551615 1 0 301 10 301 11 18446744073709551615 1 ; 301 11 301 12 18446744073709551615 1 i 301 13 301 14 56 1 < 301 14 301 15 18446744073709551615 16 MAX_CHAIN_LENGTH 301 15 301 31 18446744073709551615 1 ; 301 31 301 32 18446744073709551615 1 i 301 33 301 34 56 2 ++ 301 34 301 36 18446744073709551615 1 ) 301 36 301 37 18446744073709551615 1 { 301 37 301 38 18446744073709551615 3 int 303 9 303 12 18446744073709551615 6 in_use 303 13 303 19 58 1 = 303 20 303 21 18446744073709551615 1 m 303 22 303 23 57 2 -> 303 23 303 25 18446744073709551615 4 data 303 25 303 29 9 1 [ 303 29 303 30 18446744073709551615 4 curr 303 30 303 34 55 1 ] 303 34 303 35 18446744073709551615 1 . 303 35 303 36 18446744073709551615 6 in_use 303 36 303 42 2 1 ; 303 42 303 43 18446744073709551615 2 if 304 9 304 11 18446744073709551615 1 ( 304 12 304 13 18446744073709551615 6 in_use 304 13 304 19 58 2 == 304 20 304 22 18446744073709551615 1 1 304 23 304 24 18446744073709551615 1 ) 304 24 304 25 18446744073709551615 1 { 304 25 304 26 18446744073709551615 2 if 305 13 305 15 18446744073709551615 1 ( 305 16 305 17 18446744073709551615 6 strcmp 305 17 305 23 35 1 ( 305 23 305 24 35 1 m 305 24 305 25 57 2 -> 305 25 305 27 18446744073709551615 4 data 305 27 305 31 9 1 [ 305 31 305 32 18446744073709551615 4 curr 305 32 305 36 55 1 ] 305 36 305 37 18446744073709551615 1 . 305 37 305 38 18446744073709551615 3 key 305 38 305 41 1 1 , 305 41 305 42 35 3 key 305 42 305 45 53 1 ) 305 45 305 46 35 2 == 305 46 305 48 18446744073709551615 1 0 305 48 305 49 18446744073709551615 1 ) 305 49 305 50 18446744073709551615 1 { 305 50 305 51 18446744073709551615 1 * 306 17 306 18 18446744073709551615 3 arg 306 18 306 21 54 1 = 306 22 306 23 18446744073709551615 1 ( 306 24 306 25 18446744073709551615 1 m 306 25 306 26 57 2 -> 306 26 306 28 18446744073709551615 4 data 306 28 306 32 9 1 [ 306 32 306 33 18446744073709551615 4 curr 306 33 306 37 55 1 ] 306 37 306 38 18446744073709551615 1 . 306 38 306 39 18446744073709551615 4 data 306 39 306 43 4 1 ) 306 43 306 44 18446744073709551615 1 ; 306 44 306 45 18446744073709551615 6 return 307 17 307 23 18446744073709551615 6 MAP_OK 307 24 307 30 18446744073709551615 1 ; 307 30 307 31 18446744073709551615 1 } 308 13 308 14 18446744073709551615 1 } 309 3 309 4 18446744073709551615 4 curr 311 3 311 7 55 1 = 311 8 311 9 18446744073709551615 1 ( 311 10 311 11 18446744073709551615 4 curr 311 11 311 15 55 1 + 311 16 311 17 18446744073709551615 1 1 311 18 311 19 18446744073709551615 1 ) 311 19 311 20 18446744073709551615 1 % 311 21 311 22 18446744073709551615 1 m 311 23 311 24 57 2 -> 311 24 311 26 18446744073709551615 10 table_size 311 26 311 36 7 1 ; 311 36 311 37 18446744073709551615 1 } 312 2 312 3 18446744073709551615 1 * 314 2 314 3 18446744073709551615 3 arg 314 3 314 6 54 1 = 314 7 314 8 18446744073709551615 4 NULL 314 9 314 13 18446744073709551615 1 ; 314 13 314 14 18446744073709551615 15 /* Not found */ 316 2 316 17 18446744073709551615 6 return 317 2 317 8 18446744073709551615 11 MAP_MISSING 317 9 317 20 18446744073709551615 1 ; 317 20 317 21 18446744073709551615 1 } 318 1 318 2 18446744073709551615 198 /*
 * Iterate the function parameter over each element in the hashmap.  The
 * additional any_t argument is passed to the function as its first
 * argument and the hashmap element is the second.
 */ 320 1 324 4 18446744073709551615 3 int 325 1 325 4 18446744073709551615 15 hashmap_iterate 325 5 325 20 59 1 ( 325 20 325 21 59 5 map_t 325 21 325 26 11 2 in 325 27 325 29 60 1 , 325 29 325 30 59 5 PFany 325 31 325 36 61 1 f 325 37 325 38 62 1 , 325 38 325 39 59 5 any_t 325 40 325 45 3 4 item 325 46 325 50 63 1 ) 325 50 325 51 59 1 { 325 52 325 53 18446744073709551615 3 int 326 2 326 5 18446744073709551615 1 i 326 6 326 7 64 1 ; 326 7 326 8 18446744073709551615 22 /* Cast the hashmap */ 328 2 328 24 18446744073709551615 11 hashmap_map 329 2 329 13 10 1 * 329 13 329 14 18446744073709551615 1 m 329 15 329 16 65 1 = 329 17 329 18 18446744073709551615 1 ( 329 19 329 20 18446744073709551615 11 hashmap_map 329 20 329 31 10 1 * 329 31 329 32 18446744073709551615 1 ) 329 32 329 33 18446744073709551615 2 in 329 34 329 36 60 1 ; 329 36 329 37 18446744073709551615 42 /* On empty hashmap, return immediately */ 331 2 331 44 18446744073709551615 2 if 332 2 332 4 18446744073709551615 1 ( 332 5 332 6 18446744073709551615 14 hashmap_length 332 6 332 20 66 1 ( 332 20 332 21 66 1 m 332 21 332 22 65 1 ) 332 22 332 23 66 2 <= 332 24 332 26 18446744073709551615 1 0 332 27 332 28 18446744073709551615 1 ) 332 28 332 29 18446744073709551615 6 return 333 3 333 9 18446744073709551615 11 MAP_MISSING 333 10 333 21 18446744073709551615 1 ; 333 21 333 22 18446744073709551615 20 /* Linear probing */ 335 2 335 22 18446744073709551615 3 for 336 2 336 5 18446744073709551615 1 ( 336 5 336 6 18446744073709551615 1 i 336 6 336 7 64 1 = 336 8 336 9 18446744073709551615 1 0 336 10 336 11 18446744073709551615 1 ; 336 11 336 12 18446744073709551615 1 i 336 13 336 14 64 1 < 336 14 336 15 18446744073709551615 1 m 336 16 336 17 65 2 -> 336 17 336 19 18446744073709551615 10 table_size 336 19 336 29 7 1 ; 336 29 336 30 18446744073709551615 1 i 336 31 336 32 64 2 ++ 336 32 336 34 18446744073709551615 1 ) 336 34 336 35 18446744073709551615 2 if 337 3 337 5 18446744073709551615 1 ( 337 5 337 6 18446744073709551615 1 m 337 6 337 7 65 2 -> 337 7 337 9 18446744073709551615 4 data 337 9 337 13 9 1 [ 337 13 337 14 18446744073709551615 1 i 337 14 337 15 64 1 ] 337 15 337 16 18446744073709551615 1 . 337 16 337 17 18446744073709551615 6 in_use 337 17 337 23 2 2 != 337 24 337 26 18446744073709551615 1 0 337 27 337 28 18446744073709551615 1 ) 337 28 337 29 18446744073709551615 1 { 337 30 337 31 18446744073709551615 5 any_t 338 4 338 9 3 4 data 338 10 338 14 67 1 = 338 15 338 16 18446744073709551615 1 ( 338 17 338 18 18446744073709551615 5 any_t 338 18 338 23 3 1 ) 338 23 338 24 18446744073709551615 1 ( 338 25 338 26 18446744073709551615 1 m 338 26 338 27 65 2 -> 338 27 338 29 18446744073709551615 4 data 338 29 338 33 9 1 [ 338 33 338 34 18446744073709551615 1 i 338 34 338 35 64 1 ] 338 35 338 36 18446744073709551615 1 . 338 36 338 37 18446744073709551615 4 data 338 37 338 41 4 1 ) 338 41 338 42 18446744073709551615 1 ; 338 42 338 43 18446744073709551615 3 int 339 4 339 7 18446744073709551615 6 status 339 8 339 14 68 1 = 339 15 339 16 18446744073709551615 1 f 339 17 339 18 62 1 ( 339 18 339 19 18446744073709551615 4 item 339 19 339 23 63 1 , 339 23 339 24 18446744073709551615 4 data 339 25 339 29 67 1 ) 339 29 339 30 18446744073709551615 1 ; 339 30 339 31 18446744073709551615 2 if 340 4 340 6 18446744073709551615 1 ( 340 7 340 8 18446744073709551615 6 status 340 8 340 14 68 2 != 340 15 340 17 18446744073709551615 6 MAP_OK 340 18 340 24 18446744073709551615 1 ) 340 24 340 25 18446744073709551615 1 { 340 26 340 27 18446744073709551615 6 return 341 5 341 11 18446744073709551615 6 status 341 12 341 18 68 1 ; 341 18 341 19 18446744073709551615 1 } 342 4 342 5 18446744073709551615 1 } 343 3 343 4 18446744073709551615 6 return 345 5 345 11 18446744073709551615 6 MAP_OK 345 12 345 18 18446744073709551615 1 ; 345 18 345 19 18446744073709551615 1 } 346 1 346 2 18446744073709551615 54 /*
 * Remove an element with that key from the map
 */ 348 1 350 4 18446744073709551615 3 int 351 1 351 4 18446744073709551615 14 hashmap_remove 351 5 351 19 69 1 ( 351 19 351 20 69 5 map_t 351 20 351 25 11 2 in 351 26 351 28 70 1 , 351 28 351 29 69 4 char 351 30 351 34 18446744073709551615 1 * 351 34 351 35 18446744073709551615 3 key 351 36 351 39 71 1 ) 351 39 351 40 69 1 { 351 40 351 41 18446744073709551615 3 int 352 2 352 5 18446744073709551615 1 i 352 6 352 7 72 1 ; 352 7 352 8 18446744073709551615 3 int 353 2 353 5 18446744073709551615 4 curr 353 6 353 10 73 1 ; 353 10 353 11 18446744073709551615 11 hashmap_map 354 2 354 13 10 1 * 354 13 354 14 18446744073709551615 1 m 354 15 354 16 74 1 ; 354 16 354 17 18446744073709551615 22 /* Cast the hashmap */ 356 2 356 24 18446744073709551615 1 m 357 2 357 3 74 1 = 357 4 357 5 18446744073709551615 1 ( 357 6 357 7 18446744073709551615 11 hashmap_map 357 7 357 18 10 1 * 357 19 357 20 18446744073709551615 1 ) 357 20 357 21 18446744073709551615 2 in 357 22 357 24 70 1 ; 357 24 357 25 18446744073709551615 14 /* Find key */ 359 2 359 16 18446744073709551615 4 curr 360 2 360 6 73 1 = 360 7 360 8 18446744073709551615 16 hashmap_hash_int 360 9 360 25 24 1 ( 360 25 360 26 24 1 m 360 26 360 27 74 1 , 360 27 360 28 24 3 key 360 29 360 32 71 1 ) 360 32 360 33 24 1 ; 360 33 360 34 18446744073709551615 34 /* Linear probing, if necessary */ 362 2 362 36 18446744073709551615 3 for 363 2 363 5 18446744073709551615 1 ( 363 5 363 6 18446744073709551615 1 i 363 6 363 7 72 1 = 363 8 363 9 18446744073709551615 1 0 363 10 363 11 18446744073709551615 1 ; 363 11 363 12 18446744073709551615 1 i 363 13 363 14 72 1 < 363 14 363 15 18446744073709551615 16 MAX_CHAIN_LENGTH 363 15 363 31 18446744073709551615 1 ; 363 31 363 32 18446744073709551615 1 i 363 33 363 34 72 2 ++ 363 34 363 36 18446744073709551615 1 ) 363 36 363 37 18446744073709551615 1 { 363 37 363 38 18446744073709551615 3 int 365 9 365 12 18446744073709551615 6 in_use 365 13 365 19 75 1 = 365 20 365 21 18446744073709551615 1 m 365 22 365 23 74 2 -> 365 23 365 25 18446744073709551615 4 data 365 25 365 29 9 1 [ 365 29 365 30 18446744073709551615 4 curr 365 30 365 34 73 1 ] 365 34 365 35 18446744073709551615 1 . 365 35 365 36 18446744073709551615 6 in_use 365 36 365 42 2 1 ; 365 42 365 43 18446744073709551615 2 if 366 9 366 11 18446744073709551615 1 ( 366 12 366 13 18446744073709551615 6 in_use 366 13 366 19 75 2 == 366 20 366 22 18446744073709551615 1 1 366 23 366 24 18446744073709551615 1 ) 366 24 366 25 18446744073709551615 1 { 366 25 366 26 18446744073709551615 2 if 367 13 367 15 18446744073709551615 1 ( 367 16 367 17 18446744073709551615 6 strcmp 367 17 367 23 35 1 ( 367 23 367 24 35 1 m 367 24 367 25 74 2 -> 367 25 367 27 18446744073709551615 4 data 367 27 367 31 9 1 [ 367 31 367 32 18446744073709551615 4 curr 367 32 367 36 73 1 ] 367 36 367 37 18446744073709551615 1 . 367 37 367 38 18446744073709551615 3 key 367 38 367 41 1 1 , 367 41 367 42 35 3 key 367 42 367 45 71 1 ) 367 45 367 46 35 2 == 367 46 367 48 18446744073709551615 1 0 367 48 367 49 18446744073709551615 1 ) 367 49 367 50 18446744073709551615 1 { 367 50 367 51 18446744073709551615 26 /* Blank out the fields */ 368 17 368 43 18446744073709551615 1 m 369 17 369 18 74 2 -> 369 18 369 20 18446744073709551615 4 data 369 20 369 24 9 1 [ 369 24 369 25 18446744073709551615 4 curr 369 25 369 29 73 1 ] 369 29 369 30 18446744073709551615 1 . 369 30 369 31 18446744073709551615 6 in_use 369 31 369 37 2 1 = 369 38 369 39 18446744073709551615 1 0 369 40 369 41 18446744073709551615 1 ; 369 41 369 42 18446744073709551615 1 m 370 17 370 18 74 2 -> 370 18 370 20 18446744073709551615 4 data 370 20 370 24 9 1 [ 370 24 370 25 18446744073709551615 4 curr 370 25 370 29 73 1 ] 370 29 370 30 18446744073709551615 1 . 370 30 370 31 18446744073709551615 4 data 370 31 370 35 4 1 = 370 36 370 37 18446744073709551615 4 NULL 370 38 370 42 18446744073709551615 1 ; 370 42 370 43 18446744073709551615 1 m 371 17 371 18 74 2 -> 371 18 371 20 18446744073709551615 4 data 371 20 371 24 9 1 [ 371 24 371 25 18446744073709551615 4 curr 371 25 371 29 73 1 ] 371 29 371 30 18446744073709551615 1 . 371 30 371 31 18446744073709551615 3 key 371 31 371 34 1 1 = 371 35 371 36 18446744073709551615 4 NULL 371 37 371 41 18446744073709551615 1 ; 371 41 371 42 18446744073709551615 21 /* Reduce the size */ 373 17 373 38 18446744073709551615 1 m 374 17 374 18 74 2 -> 374 18 374 20 18446744073709551615 4 size 374 20 374 24 8 2 -- 374 24 374 26 18446744073709551615 1 ; 374 26 374 27 18446744073709551615 6 return 375 17 375 23 18446744073709551615 6 MAP_OK 375 24 375 30 18446744073709551615 1 ; 375 30 375 31 18446744073709551615 1 } 376 13 376 14 18446744073709551615 1 } 377 3 377 4 18446744073709551615 4 curr 378 3 378 7 73 1 = 378 8 378 9 18446744073709551615 1 ( 378 10 378 11 18446744073709551615 4 curr 378 11 378 15 73 1 + 378 16 378 17 18446744073709551615 1 1 378 18 378 19 18446744073709551615 1 ) 378 19 378 20 18446744073709551615 1 % 378 21 378 22 18446744073709551615 1 m 378 23 378 24 74 2 -> 378 24 378 26 18446744073709551615 10 table_size 378 26 378 36 7 1 ; 378 36 378 37 18446744073709551615 1 } 379 2 379 3 18446744073709551615 20 /* Data not found */ 381 2 381 22 18446744073709551615 6 return 382 2 382 8 18446744073709551615 11 MAP_MISSING 382 9 382 20 18446744073709551615 1 ; 382 20 382 21 18446744073709551615 1 } 383 1 383 2 18446744073709551615 28 /* Deallocate the hashmap */ 385 1 385 29 18446744073709551615 4 void 386 1 386 5 18446744073709551615 12 hashmap_free 386 6 386 18 17 1 ( 386 18 386 19 17 5 map_t 386 19 386 24 11 2 in 386 25 386 27 76 1 ) 386 27 386 28 17 1 { 386 28 386 29 18446744073709551615 11 hashmap_map 387 2 387 13 10 1 * 387 13 387 14 18446744073709551615 1 m 387 15 387 16 77 1 = 387 17 387 18 18446744073709551615 1 ( 387 19 387 20 18446744073709551615 11 hashmap_map 387 20 387 31 10 1 * 387 31 387 32 18446744073709551615 1 ) 387 32 387 33 18446744073709551615 2 in 387 34 387 36 76 1 ; 387 36 387 37 18446744073709551615 4 free 388 2 388 6 45 1 ( 388 6 388 7 45 1 m 388 7 388 8 77 2 -> 388 8 388 10 18446744073709551615 4 data 388 10 388 14 9 1 ) 388 14 388 15 45 1 ; 388 15 388 16 18446744073709551615 4 free 389 2 389 6 45 1 ( 389 6 389 7 45 1 m 389 7 389 8 77 1 ) 389 8 389 9 45 1 ; 389 9 389 10 18446744073709551615 1 } 390 1 390 2 18446744073709551615 38 /* Return the length of the hashmap */ 392 1 392 39 18446744073709551615 3 int 393 1 393 4 18446744073709551615 14 hashmap_length 393 5 393 19 66 1 ( 393 19 393 20 66 5 map_t 393 20 393 25 11 2 in 393 26 393 28 78 1 ) 393 28 393 29 66 1 { 393 29 393 30 18446744073709551615 11 hashmap_map 394 2 394 13 10 1 * 394 13 394 14 18446744073709551615 1 m 394 15 394 16 79 1 = 394 17 394 18 18446744073709551615 1 ( 394 19 394 20 18446744073709551615 11 hashmap_map 394 20 394 31 10 1 * 394 32 394 33 18446744073709551615 1 ) 394 33 394 34 18446744073709551615 2 in 394 35 394 37 78 1 ; 394 37 394 38 18446744073709551615 2 if 395 2 395 4 18446744073709551615 1 ( 395 4 395 5 18446744073709551615 1 m 395 5 395 6 79 2 != 395 7 395 9 18446744073709551615 4 NULL 395 10 395 14 18446744073709551615 1 ) 395 14 395 15 18446744073709551615 6 return 395 16 395 22 18446744073709551615 1 m 395 23 395 24 79 2 -> 395 24 395 26 18446744073709551615 4 size 395 26 395 30 8 1 ; 395 30 395 31 18446744073709551615 4 else 396 2 396 6 18446744073709551615 6 return 396 7 396 13 18446744073709551615 1 0 396 14 396 15 18446744073709551615 1 ; 396 15 396 16 18446744073709551615 1 } 397 1 397 2 18446744073709551615 0 0 80 0 0 0 2 0 0 1 3 0 16 _hashmap_element 6 1 3 0 20 key:_hashmap_element 6 1 3 0 23 in_use:_hashmap_element 20 1 3 0 5 any_t 6 1 3 0 21 data:_hashmap_element 20 1 3 0 15 hashmap_element 2 1 3 0 12 _hashmap_map 6 1 3 0 23 table_size:_hashmap_map 6 1 3 0 17 size:_hashmap_map 6 1 3 0 17 data:_hashmap_map 20 1 3 0 11 hashmap_map 20 1 3 0 5 map_t 8 1 3 0 11 hashmap_new 9 1 3 0 59 32:15:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 8 1 3 0 6 malloc 201 1 3 0 0  8 1 3 0 6 calloc 8 1 3 0 12 hashmap_free 9 1 3 0 9 crc32_tab 8 1 3 0 5 crc32 10 1 3 0 60 149:42:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 10 1 3 0 60 149:58:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 60 151:16:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 60 152:17:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 8 1 3 0 16 hashmap_hash_int 10 1 3 0 60 167:45:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 10 1 3 0 60 167:54:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 60 169:19:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 8 1 3 0 6 strlen 8 1 3 0 12 hashmap_hash 10 1 3 0 60 191:24:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 10 1 3 0 60 191:34:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 59 192:6:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 59 193:6:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 60 196:15:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 8 1 3 0 6 strcmp 8 1 3 0 14 hashmap_rehash 10 1 3 0 60 221:26:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 59 222:6:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 59 223:6:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 60 224:19:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 60 227:15:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 60 228:19:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 60 243:13:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 8 1 3 0 11 hashmap_put 8 1 3 0 4 free 10 1 3 0 60 261:23:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 10 1 3 0 60 261:33:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 10 1 3 0 60 261:44:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 59 262:6:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 60 263:15:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 8 1 3 0 11 hashmap_get 10 1 3 0 60 289:23:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 10 1 3 0 60 289:33:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 10 1 3 0 60 289:45:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 59 290:6:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 59 291:6:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 60 292:15:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 60 303:13:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 8 1 3 0 15 hashmap_iterate 10 1 3 0 60 325:27:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 20 1 3 0 5 PFany 10 1 3 0 60 325:37:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 10 1 3 0 60 325:46:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 59 326:6:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 60 329:15:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 8 1 3 0 14 hashmap_length 9 1 3 0 60 338:10:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 59 339:8:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 8 1 3 0 14 hashmap_remove 10 1 3 0 60 351:26:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 10 1 3 0 60 351:36:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 59 352:6:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 59 353:6:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 60 354:15:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 60 365:13:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 10 1 3 0 60 386:25:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 60 387:15:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 10 1 3 0 60 393:26:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 9 1 3 0 60 394:15:/home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 0 0 2 0 0 0 53 /home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.c 1262964973 53 /home/florenzi/Documenti/juci_ws/wpa_decode/hashmap.h 1262964973